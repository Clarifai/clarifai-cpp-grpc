// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clarifai/api/service.proto

#include "proto/clarifai/api/service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace clarifai {
namespace api {
PROTOBUF_CONSTEXPR Pagination::Pagination(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PaginationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PaginationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PaginationDefaultTypeInternal() {}
  union {
    Pagination _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PaginationDefaultTypeInternal _Pagination_default_instance_;
PROTOBUF_CONSTEXPR GetAnnotationRequest::GetAnnotationRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.annotation_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.input_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetAnnotationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAnnotationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAnnotationRequestDefaultTypeInternal() {}
  union {
    GetAnnotationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAnnotationRequestDefaultTypeInternal _GetAnnotationRequest_default_instance_;
PROTOBUF_CONSTEXPR ListAnnotationsRequest::ListAnnotationsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_)*/{}
  , /*decltype(_impl_.input_ids_)*/{}
  , /*decltype(_impl_.statuses_)*/{}
  , /*decltype(_impl_.user_ids_)*/{}
  , /*decltype(_impl_.model_version_ids_)*/{}
  , /*decltype(_impl_.task_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_.list_all_annotations_)*/false
  , /*decltype(_impl_.return_model_output_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListAnnotationsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListAnnotationsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListAnnotationsRequestDefaultTypeInternal() {}
  union {
    ListAnnotationsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListAnnotationsRequestDefaultTypeInternal _ListAnnotationsRequest_default_instance_;
PROTOBUF_CONSTEXPR PostAnnotationsRequest::PostAnnotationsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.annotations_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostAnnotationsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostAnnotationsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostAnnotationsRequestDefaultTypeInternal() {}
  union {
    PostAnnotationsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostAnnotationsRequestDefaultTypeInternal _PostAnnotationsRequest_default_instance_;
PROTOBUF_CONSTEXPR PatchAnnotationsRequest::PatchAnnotationsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.annotations_)*/{}
  , /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PatchAnnotationsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchAnnotationsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchAnnotationsRequestDefaultTypeInternal() {}
  union {
    PatchAnnotationsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchAnnotationsRequestDefaultTypeInternal _PatchAnnotationsRequest_default_instance_;
PROTOBUF_CONSTEXPR PatchAnnotationsStatusRequest::PatchAnnotationsStatusRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_ids_)*/{}
  , /*decltype(_impl_.task_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.status_code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PatchAnnotationsStatusRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchAnnotationsStatusRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchAnnotationsStatusRequestDefaultTypeInternal() {}
  union {
    PatchAnnotationsStatusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchAnnotationsStatusRequestDefaultTypeInternal _PatchAnnotationsStatusRequest_default_instance_;
PROTOBUF_CONSTEXPR PatchAnnotationsStatusResponse::PatchAnnotationsStatusResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_ids_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.updated_count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PatchAnnotationsStatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchAnnotationsStatusResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchAnnotationsStatusResponseDefaultTypeInternal() {}
  union {
    PatchAnnotationsStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchAnnotationsStatusResponseDefaultTypeInternal _PatchAnnotationsStatusResponse_default_instance_;
PROTOBUF_CONSTEXPR DeleteAnnotationRequest::DeleteAnnotationRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.input_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.annotation_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteAnnotationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteAnnotationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteAnnotationRequestDefaultTypeInternal() {}
  union {
    DeleteAnnotationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteAnnotationRequestDefaultTypeInternal _DeleteAnnotationRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteAnnotationsRequest::DeleteAnnotationsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_)*/{}
  , /*decltype(_impl_.input_ids_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteAnnotationsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteAnnotationsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteAnnotationsRequestDefaultTypeInternal() {}
  union {
    DeleteAnnotationsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteAnnotationsRequestDefaultTypeInternal _DeleteAnnotationsRequest_default_instance_;
PROTOBUF_CONSTEXPR SingleAnnotationResponse::SingleAnnotationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.annotation_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingleAnnotationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleAnnotationResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleAnnotationResponseDefaultTypeInternal() {}
  union {
    SingleAnnotationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleAnnotationResponseDefaultTypeInternal _SingleAnnotationResponse_default_instance_;
PROTOBUF_CONSTEXPR MultiAnnotationResponse::MultiAnnotationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.annotations_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiAnnotationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiAnnotationResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiAnnotationResponseDefaultTypeInternal() {}
  union {
    MultiAnnotationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiAnnotationResponseDefaultTypeInternal _MultiAnnotationResponse_default_instance_;
PROTOBUF_CONSTEXPR GetAppRequest::GetAppRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.additional_fields_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetAppRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAppRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAppRequestDefaultTypeInternal() {}
  union {
    GetAppRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAppRequestDefaultTypeInternal _GetAppRequest_default_instance_;
PROTOBUF_CONSTEXPR ListAppsRequest::ListAppsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.additional_fields_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.query_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_.sort_ascending_)*/false
  , /*decltype(_impl_.featured_only_)*/false
  , /*decltype(_impl_.starred_only_)*/false
  , /*decltype(_impl_.sort_by_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ListAppsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListAppsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListAppsRequestDefaultTypeInternal() {}
  union {
    ListAppsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListAppsRequestDefaultTypeInternal _ListAppsRequest_default_instance_;
PROTOBUF_CONSTEXPR PostAppsRequest::PostAppsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.apps_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostAppsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostAppsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostAppsRequestDefaultTypeInternal() {}
  union {
    PostAppsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostAppsRequestDefaultTypeInternal _PostAppsRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteAppRequest::DeleteAppRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteAppRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteAppRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteAppRequestDefaultTypeInternal() {}
  union {
    DeleteAppRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteAppRequestDefaultTypeInternal _DeleteAppRequest_default_instance_;
PROTOBUF_CONSTEXPR PatchAppsRequest::PatchAppsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.apps_)*/{}
  , /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.metadata_action_)*/nullptr
  , /*decltype(_impl_.reindex_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PatchAppsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchAppsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchAppsRequestDefaultTypeInternal() {}
  union {
    PatchAppsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchAppsRequestDefaultTypeInternal _PatchAppsRequest_default_instance_;
PROTOBUF_CONSTEXPR PatchAppRequest::PatchAppRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.app_)*/nullptr
  , /*decltype(_impl_.metadata_action_)*/nullptr
  , /*decltype(_impl_.reindex_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PatchAppRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchAppRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchAppRequestDefaultTypeInternal() {}
  union {
    PatchAppRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchAppRequestDefaultTypeInternal _PatchAppRequest_default_instance_;
PROTOBUF_CONSTEXPR PatchAppsIdsRequest::PatchAppsIdsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_)*/{}
  , /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PatchAppsIdsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchAppsIdsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchAppsIdsRequestDefaultTypeInternal() {}
  union {
    PatchAppsIdsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchAppsIdsRequestDefaultTypeInternal _PatchAppsIdsRequest_default_instance_;
PROTOBUF_CONSTEXPR PostAppsSearchesRequest::PostAppsSearchesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.app_query_)*/nullptr
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostAppsSearchesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostAppsSearchesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostAppsSearchesRequestDefaultTypeInternal() {}
  union {
    PostAppsSearchesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostAppsSearchesRequestDefaultTypeInternal _PostAppsSearchesRequest_default_instance_;
PROTOBUF_CONSTEXPR SingleAppResponse::SingleAppResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.app_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingleAppResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleAppResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleAppResponseDefaultTypeInternal() {}
  union {
    SingleAppResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleAppResponseDefaultTypeInternal _SingleAppResponse_default_instance_;
PROTOBUF_CONSTEXPR MultiAppResponse::MultiAppResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.apps_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiAppResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiAppResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiAppResponseDefaultTypeInternal() {}
  union {
    MultiAppResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiAppResponseDefaultTypeInternal _MultiAppResponse_default_instance_;
PROTOBUF_CONSTEXPR ListCollaboratorsRequest::ListCollaboratorsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.list_all_collaborators_)*/false
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListCollaboratorsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListCollaboratorsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListCollaboratorsRequestDefaultTypeInternal() {}
  union {
    ListCollaboratorsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListCollaboratorsRequestDefaultTypeInternal _ListCollaboratorsRequest_default_instance_;
PROTOBUF_CONSTEXPR PostCollaboratorsRequest::PostCollaboratorsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.collaborators_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostCollaboratorsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostCollaboratorsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostCollaboratorsRequestDefaultTypeInternal() {}
  union {
    PostCollaboratorsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostCollaboratorsRequestDefaultTypeInternal _PostCollaboratorsRequest_default_instance_;
PROTOBUF_CONSTEXPR PatchCollaboratorsRequest::PatchCollaboratorsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.collaborators_)*/{}
  , /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PatchCollaboratorsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchCollaboratorsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchCollaboratorsRequestDefaultTypeInternal() {}
  union {
    PatchCollaboratorsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchCollaboratorsRequestDefaultTypeInternal _PatchCollaboratorsRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteCollaboratorsRequest::DeleteCollaboratorsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.collaborator_ids_)*/{}
  , /*decltype(_impl_.user_emails_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteCollaboratorsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteCollaboratorsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteCollaboratorsRequestDefaultTypeInternal() {}
  union {
    DeleteCollaboratorsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteCollaboratorsRequestDefaultTypeInternal _DeleteCollaboratorsRequest_default_instance_;
PROTOBUF_CONSTEXPR MultiCollaboratorsResponse::MultiCollaboratorsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.collaborators_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiCollaboratorsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiCollaboratorsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiCollaboratorsResponseDefaultTypeInternal() {}
  union {
    MultiCollaboratorsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiCollaboratorsResponseDefaultTypeInternal _MultiCollaboratorsResponse_default_instance_;
PROTOBUF_CONSTEXPR ListCollaborationsRequest::ListCollaborationsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListCollaborationsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListCollaborationsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListCollaborationsRequestDefaultTypeInternal() {}
  union {
    ListCollaborationsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListCollaborationsRequestDefaultTypeInternal _ListCollaborationsRequest_default_instance_;
PROTOBUF_CONSTEXPR MultiCollaborationsResponse::MultiCollaborationsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.collaborations_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiCollaborationsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiCollaborationsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiCollaborationsResponseDefaultTypeInternal() {}
  union {
    MultiCollaborationsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiCollaborationsResponseDefaultTypeInternal _MultiCollaborationsResponse_default_instance_;
PROTOBUF_CONSTEXPR GetStatusCodeRequest::GetStatusCodeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_code_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetStatusCodeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetStatusCodeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetStatusCodeRequestDefaultTypeInternal() {}
  union {
    GetStatusCodeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetStatusCodeRequestDefaultTypeInternal _GetStatusCodeRequest_default_instance_;
PROTOBUF_CONSTEXPR ListStatusCodesRequest::ListStatusCodesRequest(
    ::_pbi::ConstantInitialized) {}
struct ListStatusCodesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListStatusCodesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListStatusCodesRequestDefaultTypeInternal() {}
  union {
    ListStatusCodesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListStatusCodesRequestDefaultTypeInternal _ListStatusCodesRequest_default_instance_;
PROTOBUF_CONSTEXPR SingleStatusCodeResponse::SingleStatusCodeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingleStatusCodeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleStatusCodeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleStatusCodeResponseDefaultTypeInternal() {}
  union {
    SingleStatusCodeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleStatusCodeResponseDefaultTypeInternal _SingleStatusCodeResponse_default_instance_;
PROTOBUF_CONSTEXPR MultiStatusCodeResponse::MultiStatusCodeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.statuses_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiStatusCodeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiStatusCodeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiStatusCodeResponseDefaultTypeInternal() {}
  union {
    MultiStatusCodeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiStatusCodeResponseDefaultTypeInternal _MultiStatusCodeResponse_default_instance_;
PROTOBUF_CONSTEXPR GetConceptRequest::GetConceptRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.concept_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetConceptRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetConceptRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetConceptRequestDefaultTypeInternal() {}
  union {
    GetConceptRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetConceptRequestDefaultTypeInternal _GetConceptRequest_default_instance_;
PROTOBUF_CONSTEXPR ListConceptsRequest::ListConceptsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListConceptsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListConceptsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListConceptsRequestDefaultTypeInternal() {}
  union {
    ListConceptsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListConceptsRequestDefaultTypeInternal _ListConceptsRequest_default_instance_;
PROTOBUF_CONSTEXPR ListModelConceptsRequest::ListModelConceptsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.model_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListModelConceptsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListModelConceptsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListModelConceptsRequestDefaultTypeInternal() {}
  union {
    ListModelConceptsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListModelConceptsRequestDefaultTypeInternal _ListModelConceptsRequest_default_instance_;
PROTOBUF_CONSTEXPR PostConceptsSearchesRequest::PostConceptsSearchesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.concept_query_)*/nullptr
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostConceptsSearchesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostConceptsSearchesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostConceptsSearchesRequestDefaultTypeInternal() {}
  union {
    PostConceptsSearchesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostConceptsSearchesRequestDefaultTypeInternal _PostConceptsSearchesRequest_default_instance_;
PROTOBUF_CONSTEXPR PostConceptsRequest::PostConceptsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.concepts_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostConceptsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostConceptsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostConceptsRequestDefaultTypeInternal() {}
  union {
    PostConceptsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostConceptsRequestDefaultTypeInternal _PostConceptsRequest_default_instance_;
PROTOBUF_CONSTEXPR PatchConceptsRequest::PatchConceptsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.concepts_)*/{}
  , /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PatchConceptsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchConceptsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchConceptsRequestDefaultTypeInternal() {}
  union {
    PatchConceptsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchConceptsRequestDefaultTypeInternal _PatchConceptsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetConceptCountsRequest::GetConceptCountsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetConceptCountsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetConceptCountsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetConceptCountsRequestDefaultTypeInternal() {}
  union {
    GetConceptCountsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetConceptCountsRequestDefaultTypeInternal _GetConceptCountsRequest_default_instance_;
PROTOBUF_CONSTEXPR SingleConceptResponse::SingleConceptResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.concept_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingleConceptResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleConceptResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleConceptResponseDefaultTypeInternal() {}
  union {
    SingleConceptResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleConceptResponseDefaultTypeInternal _SingleConceptResponse_default_instance_;
PROTOBUF_CONSTEXPR MultiConceptResponse::MultiConceptResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.concepts_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiConceptResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiConceptResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiConceptResponseDefaultTypeInternal() {}
  union {
    MultiConceptResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiConceptResponseDefaultTypeInternal _MultiConceptResponse_default_instance_;
PROTOBUF_CONSTEXPR MultiConceptCountResponse::MultiConceptCountResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.concept_counts_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiConceptCountResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiConceptCountResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiConceptCountResponseDefaultTypeInternal() {}
  union {
    MultiConceptCountResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiConceptCountResponseDefaultTypeInternal _MultiConceptCountResponse_default_instance_;
PROTOBUF_CONSTEXPR ListConceptRelationsRequest::ListConceptRelationsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.concept_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.predicate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.knowledge_graph_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListConceptRelationsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListConceptRelationsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListConceptRelationsRequestDefaultTypeInternal() {}
  union {
    ListConceptRelationsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListConceptRelationsRequestDefaultTypeInternal _ListConceptRelationsRequest_default_instance_;
PROTOBUF_CONSTEXPR PostConceptRelationsRequest::PostConceptRelationsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.concept_relations_)*/{}
  , /*decltype(_impl_.concept_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostConceptRelationsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostConceptRelationsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostConceptRelationsRequestDefaultTypeInternal() {}
  union {
    PostConceptRelationsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostConceptRelationsRequestDefaultTypeInternal _PostConceptRelationsRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteConceptRelationsRequest::DeleteConceptRelationsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_)*/{}
  , /*decltype(_impl_.concept_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteConceptRelationsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteConceptRelationsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteConceptRelationsRequestDefaultTypeInternal() {}
  union {
    DeleteConceptRelationsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteConceptRelationsRequestDefaultTypeInternal _DeleteConceptRelationsRequest_default_instance_;
PROTOBUF_CONSTEXPR ListKnowledgeGraphsRequest::ListKnowledgeGraphsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListKnowledgeGraphsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListKnowledgeGraphsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListKnowledgeGraphsRequestDefaultTypeInternal() {}
  union {
    ListKnowledgeGraphsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListKnowledgeGraphsRequestDefaultTypeInternal _ListKnowledgeGraphsRequest_default_instance_;
PROTOBUF_CONSTEXPR PostKnowledgeGraphsRequest::PostKnowledgeGraphsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.knowledge_graphs_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostKnowledgeGraphsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostKnowledgeGraphsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostKnowledgeGraphsRequestDefaultTypeInternal() {}
  union {
    PostKnowledgeGraphsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostKnowledgeGraphsRequestDefaultTypeInternal _PostKnowledgeGraphsRequest_default_instance_;
PROTOBUF_CONSTEXPR PostConceptMappingJobsRequest::PostConceptMappingJobsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.concept_mapping_jobs_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostConceptMappingJobsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostConceptMappingJobsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostConceptMappingJobsRequestDefaultTypeInternal() {}
  union {
    PostConceptMappingJobsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostConceptMappingJobsRequestDefaultTypeInternal _PostConceptMappingJobsRequest_default_instance_;
PROTOBUF_CONSTEXPR MultiConceptRelationResponse::MultiConceptRelationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.concept_relations_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiConceptRelationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiConceptRelationResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiConceptRelationResponseDefaultTypeInternal() {}
  union {
    MultiConceptRelationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiConceptRelationResponseDefaultTypeInternal _MultiConceptRelationResponse_default_instance_;
PROTOBUF_CONSTEXPR MultiKnowledgeGraphResponse::MultiKnowledgeGraphResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.knowledge_graphs_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiKnowledgeGraphResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiKnowledgeGraphResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiKnowledgeGraphResponseDefaultTypeInternal() {}
  union {
    MultiKnowledgeGraphResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiKnowledgeGraphResponseDefaultTypeInternal _MultiKnowledgeGraphResponse_default_instance_;
PROTOBUF_CONSTEXPR MultiConceptMappingJobResponse::MultiConceptMappingJobResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiConceptMappingJobResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiConceptMappingJobResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiConceptMappingJobResponseDefaultTypeInternal() {}
  union {
    MultiConceptMappingJobResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiConceptMappingJobResponseDefaultTypeInternal _MultiConceptMappingJobResponse_default_instance_;
PROTOBUF_CONSTEXPR GetConceptLanguageRequest::GetConceptLanguageRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.concept_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.language_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetConceptLanguageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetConceptLanguageRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetConceptLanguageRequestDefaultTypeInternal() {}
  union {
    GetConceptLanguageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetConceptLanguageRequestDefaultTypeInternal _GetConceptLanguageRequest_default_instance_;
PROTOBUF_CONSTEXPR ListConceptLanguagesRequest::ListConceptLanguagesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.concept_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListConceptLanguagesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListConceptLanguagesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListConceptLanguagesRequestDefaultTypeInternal() {}
  union {
    ListConceptLanguagesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListConceptLanguagesRequestDefaultTypeInternal _ListConceptLanguagesRequest_default_instance_;
PROTOBUF_CONSTEXPR PatchConceptLanguagesRequest::PatchConceptLanguagesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.concept_languages_)*/{}
  , /*decltype(_impl_.concept_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PatchConceptLanguagesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchConceptLanguagesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchConceptLanguagesRequestDefaultTypeInternal() {}
  union {
    PatchConceptLanguagesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchConceptLanguagesRequestDefaultTypeInternal _PatchConceptLanguagesRequest_default_instance_;
PROTOBUF_CONSTEXPR PostConceptLanguagesRequest::PostConceptLanguagesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.concept_languages_)*/{}
  , /*decltype(_impl_.concept_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostConceptLanguagesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostConceptLanguagesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostConceptLanguagesRequestDefaultTypeInternal() {}
  union {
    PostConceptLanguagesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostConceptLanguagesRequestDefaultTypeInternal _PostConceptLanguagesRequest_default_instance_;
PROTOBUF_CONSTEXPR SingleConceptLanguageResponse::SingleConceptLanguageResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.concept_language_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingleConceptLanguageResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleConceptLanguageResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleConceptLanguageResponseDefaultTypeInternal() {}
  union {
    SingleConceptLanguageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleConceptLanguageResponseDefaultTypeInternal _SingleConceptLanguageResponse_default_instance_;
PROTOBUF_CONSTEXPR MultiConceptLanguageResponse::MultiConceptLanguageResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.concept_languages_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiConceptLanguageResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiConceptLanguageResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiConceptLanguageResponseDefaultTypeInternal() {}
  union {
    MultiConceptLanguageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiConceptLanguageResponseDefaultTypeInternal _MultiConceptLanguageResponse_default_instance_;
PROTOBUF_CONSTEXPR GetInputRequest::GetInputRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.input_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetInputRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetInputRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetInputRequestDefaultTypeInternal() {}
  union {
    GetInputRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetInputRequestDefaultTypeInternal _GetInputRequest_default_instance_;
PROTOBUF_CONSTEXPR GetInputSamplesRequest::GetInputSamplesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_ids_)*/{}
  , /*decltype(_impl_.task_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetInputSamplesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetInputSamplesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetInputSamplesRequestDefaultTypeInternal() {}
  union {
    GetInputSamplesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetInputSamplesRequestDefaultTypeInternal _GetInputSamplesRequest_default_instance_;
PROTOBUF_CONSTEXPR ListInputsRequest::ListInputsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListInputsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListInputsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListInputsRequestDefaultTypeInternal() {}
  union {
    ListInputsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListInputsRequestDefaultTypeInternal _ListInputsRequest_default_instance_;
PROTOBUF_CONSTEXPR StreamInputsRequest::StreamInputsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.last_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_.order_by_id_)*/false
  , /*decltype(_impl_.descending_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamInputsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamInputsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamInputsRequestDefaultTypeInternal() {}
  union {
    StreamInputsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamInputsRequestDefaultTypeInternal _StreamInputsRequest_default_instance_;
PROTOBUF_CONSTEXPR PostInputsRequest::PostInputsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.inputs_)*/{}
  , /*decltype(_impl_.inputs_add_job_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostInputsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostInputsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostInputsRequestDefaultTypeInternal() {}
  union {
    PostInputsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostInputsRequestDefaultTypeInternal _PostInputsRequest_default_instance_;
PROTOBUF_CONSTEXPR PatchInputsRequest::PatchInputsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.inputs_)*/{}
  , /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PatchInputsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchInputsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchInputsRequestDefaultTypeInternal() {}
  union {
    PatchInputsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchInputsRequestDefaultTypeInternal _PatchInputsRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteInputRequest::DeleteInputRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.input_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteInputRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteInputRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteInputRequestDefaultTypeInternal() {}
  union {
    DeleteInputRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteInputRequestDefaultTypeInternal _DeleteInputRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteInputsRequest::DeleteInputsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteInputsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteInputsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteInputsRequestDefaultTypeInternal() {}
  union {
    DeleteInputsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteInputsRequestDefaultTypeInternal _DeleteInputsRequest_default_instance_;
PROTOBUF_CONSTEXPR SingleInputResponse::SingleInputResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.input_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingleInputResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleInputResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleInputResponseDefaultTypeInternal() {}
  union {
    SingleInputResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleInputResponseDefaultTypeInternal _SingleInputResponse_default_instance_;
PROTOBUF_CONSTEXPR MultiInputResponse::MultiInputResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.inputs_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.inputs_add_job_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiInputResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiInputResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiInputResponseDefaultTypeInternal() {}
  union {
    MultiInputResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiInputResponseDefaultTypeInternal _MultiInputResponse_default_instance_;
PROTOBUF_CONSTEXPR MultiInputAnnotationResponse::MultiInputAnnotationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hits_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiInputAnnotationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiInputAnnotationResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiInputAnnotationResponseDefaultTypeInternal() {}
  union {
    MultiInputAnnotationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiInputAnnotationResponseDefaultTypeInternal _MultiInputAnnotationResponse_default_instance_;
PROTOBUF_CONSTEXPR SingleInputCountResponse::SingleInputCountResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.counts_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingleInputCountResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleInputCountResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleInputCountResponseDefaultTypeInternal() {}
  union {
    SingleInputCountResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleInputCountResponseDefaultTypeInternal _SingleInputCountResponse_default_instance_;
PROTOBUF_CONSTEXPR GetInputCountRequest::GetInputCountRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetInputCountRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetInputCountRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetInputCountRequestDefaultTypeInternal() {}
  union {
    GetInputCountRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetInputCountRequestDefaultTypeInternal _GetInputCountRequest_default_instance_;
PROTOBUF_CONSTEXPR ListDatasetsRequest::ListDatasetsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListDatasetsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListDatasetsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListDatasetsRequestDefaultTypeInternal() {}
  union {
    ListDatasetsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListDatasetsRequestDefaultTypeInternal _ListDatasetsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetDatasetRequest::GetDatasetRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dataset_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetDatasetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDatasetRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDatasetRequestDefaultTypeInternal() {}
  union {
    GetDatasetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDatasetRequestDefaultTypeInternal _GetDatasetRequest_default_instance_;
PROTOBUF_CONSTEXPR PostDatasetsRequest::PostDatasetsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.datasets_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostDatasetsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostDatasetsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostDatasetsRequestDefaultTypeInternal() {}
  union {
    PostDatasetsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostDatasetsRequestDefaultTypeInternal _PostDatasetsRequest_default_instance_;
PROTOBUF_CONSTEXPR PatchDatasetsRequest::PatchDatasetsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.datasets_)*/{}
  , /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PatchDatasetsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchDatasetsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchDatasetsRequestDefaultTypeInternal() {}
  union {
    PatchDatasetsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchDatasetsRequestDefaultTypeInternal _PatchDatasetsRequest_default_instance_;
PROTOBUF_CONSTEXPR PatchDatasetIdsRequest::PatchDatasetIdsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_)*/{}
  , /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PatchDatasetIdsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchDatasetIdsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchDatasetIdsRequestDefaultTypeInternal() {}
  union {
    PatchDatasetIdsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchDatasetIdsRequestDefaultTypeInternal _PatchDatasetIdsRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteDatasetsRequest::DeleteDatasetsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dataset_ids_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteDatasetsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteDatasetsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteDatasetsRequestDefaultTypeInternal() {}
  union {
    DeleteDatasetsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteDatasetsRequestDefaultTypeInternal _DeleteDatasetsRequest_default_instance_;
PROTOBUF_CONSTEXPR MultiDatasetResponse::MultiDatasetResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.datasets_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiDatasetResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiDatasetResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiDatasetResponseDefaultTypeInternal() {}
  union {
    MultiDatasetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiDatasetResponseDefaultTypeInternal _MultiDatasetResponse_default_instance_;
PROTOBUF_CONSTEXPR SingleDatasetResponse::SingleDatasetResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.dataset_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingleDatasetResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleDatasetResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleDatasetResponseDefaultTypeInternal() {}
  union {
    SingleDatasetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleDatasetResponseDefaultTypeInternal _SingleDatasetResponse_default_instance_;
PROTOBUF_CONSTEXPR ListDatasetInputsRequest::ListDatasetInputsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dataset_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListDatasetInputsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListDatasetInputsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListDatasetInputsRequestDefaultTypeInternal() {}
  union {
    ListDatasetInputsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListDatasetInputsRequestDefaultTypeInternal _ListDatasetInputsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetDatasetInputRequest::GetDatasetInputRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dataset_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.input_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetDatasetInputRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDatasetInputRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDatasetInputRequestDefaultTypeInternal() {}
  union {
    GetDatasetInputRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDatasetInputRequestDefaultTypeInternal _GetDatasetInputRequest_default_instance_;
PROTOBUF_CONSTEXPR PostDatasetInputsRequest::PostDatasetInputsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dataset_inputs_)*/{}
  , /*decltype(_impl_.dataset_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.search_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostDatasetInputsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostDatasetInputsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostDatasetInputsRequestDefaultTypeInternal() {}
  union {
    PostDatasetInputsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostDatasetInputsRequestDefaultTypeInternal _PostDatasetInputsRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteDatasetInputsRequest::DeleteDatasetInputsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.input_ids_)*/{}
  , /*decltype(_impl_.dataset_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteDatasetInputsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteDatasetInputsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteDatasetInputsRequestDefaultTypeInternal() {}
  union {
    DeleteDatasetInputsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteDatasetInputsRequestDefaultTypeInternal _DeleteDatasetInputsRequest_default_instance_;
PROTOBUF_CONSTEXPR MultiDatasetInputResponse::MultiDatasetInputResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dataset_inputs_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.dataset_inputs_search_add_job_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiDatasetInputResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiDatasetInputResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiDatasetInputResponseDefaultTypeInternal() {}
  union {
    MultiDatasetInputResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiDatasetInputResponseDefaultTypeInternal _MultiDatasetInputResponse_default_instance_;
PROTOBUF_CONSTEXPR SingleDatasetInputResponse::SingleDatasetInputResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.dataset_input_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingleDatasetInputResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleDatasetInputResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleDatasetInputResponseDefaultTypeInternal() {}
  union {
    SingleDatasetInputResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleDatasetInputResponseDefaultTypeInternal _SingleDatasetInputResponse_default_instance_;
PROTOBUF_CONSTEXPR ListDatasetVersionsRequest::ListDatasetVersionsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dataset_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListDatasetVersionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListDatasetVersionsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListDatasetVersionsRequestDefaultTypeInternal() {}
  union {
    ListDatasetVersionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListDatasetVersionsRequestDefaultTypeInternal _ListDatasetVersionsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetDatasetVersionRequest::GetDatasetVersionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dataset_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dataset_version_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetDatasetVersionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDatasetVersionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDatasetVersionRequestDefaultTypeInternal() {}
  union {
    GetDatasetVersionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDatasetVersionRequestDefaultTypeInternal _GetDatasetVersionRequest_default_instance_;
PROTOBUF_CONSTEXPR ListDatasetVersionMetricsGroupsRequest::ListDatasetVersionMetricsGroupsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.parent_paths_)*/{}
  , /*decltype(_impl_.types_)*/{}
  , /*decltype(_impl_._types_cached_byte_size_)*/{0}
  , /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_.dataset_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dataset_version_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListDatasetVersionMetricsGroupsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListDatasetVersionMetricsGroupsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListDatasetVersionMetricsGroupsRequestDefaultTypeInternal() {}
  union {
    ListDatasetVersionMetricsGroupsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListDatasetVersionMetricsGroupsRequestDefaultTypeInternal _ListDatasetVersionMetricsGroupsRequest_default_instance_;
PROTOBUF_CONSTEXPR PostDatasetVersionsRequest::PostDatasetVersionsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dataset_versions_)*/{}
  , /*decltype(_impl_.dataset_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostDatasetVersionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostDatasetVersionsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostDatasetVersionsRequestDefaultTypeInternal() {}
  union {
    PostDatasetVersionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostDatasetVersionsRequestDefaultTypeInternal _PostDatasetVersionsRequest_default_instance_;
PROTOBUF_CONSTEXPR PatchDatasetVersionsRequest::PatchDatasetVersionsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dataset_versions_)*/{}
  , /*decltype(_impl_.dataset_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PatchDatasetVersionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchDatasetVersionsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchDatasetVersionsRequestDefaultTypeInternal() {}
  union {
    PatchDatasetVersionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchDatasetVersionsRequestDefaultTypeInternal _PatchDatasetVersionsRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteDatasetVersionsRequest::DeleteDatasetVersionsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dataset_version_ids_)*/{}
  , /*decltype(_impl_.dataset_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteDatasetVersionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteDatasetVersionsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteDatasetVersionsRequestDefaultTypeInternal() {}
  union {
    DeleteDatasetVersionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteDatasetVersionsRequestDefaultTypeInternal _DeleteDatasetVersionsRequest_default_instance_;
PROTOBUF_CONSTEXPR PutDatasetVersionExportsRequest::PutDatasetVersionExportsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.exports_)*/{}
  , /*decltype(_impl_.dataset_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dataset_version_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PutDatasetVersionExportsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PutDatasetVersionExportsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PutDatasetVersionExportsRequestDefaultTypeInternal() {}
  union {
    PutDatasetVersionExportsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PutDatasetVersionExportsRequestDefaultTypeInternal _PutDatasetVersionExportsRequest_default_instance_;
PROTOBUF_CONSTEXPR MultiDatasetVersionResponse::MultiDatasetVersionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dataset_versions_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiDatasetVersionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiDatasetVersionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiDatasetVersionResponseDefaultTypeInternal() {}
  union {
    MultiDatasetVersionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiDatasetVersionResponseDefaultTypeInternal _MultiDatasetVersionResponse_default_instance_;
PROTOBUF_CONSTEXPR MultiDatasetVersionExportResponse::MultiDatasetVersionExportResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.exports_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiDatasetVersionExportResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiDatasetVersionExportResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiDatasetVersionExportResponseDefaultTypeInternal() {}
  union {
    MultiDatasetVersionExportResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiDatasetVersionExportResponseDefaultTypeInternal _MultiDatasetVersionExportResponse_default_instance_;
PROTOBUF_CONSTEXPR MultiDatasetVersionMetricsGroupResponse::MultiDatasetVersionMetricsGroupResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dataset_version_metrics_groups_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiDatasetVersionMetricsGroupResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiDatasetVersionMetricsGroupResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiDatasetVersionMetricsGroupResponseDefaultTypeInternal() {}
  union {
    MultiDatasetVersionMetricsGroupResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiDatasetVersionMetricsGroupResponseDefaultTypeInternal _MultiDatasetVersionMetricsGroupResponse_default_instance_;
PROTOBUF_CONSTEXPR SingleDatasetVersionResponse::SingleDatasetVersionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.dataset_version_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingleDatasetVersionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleDatasetVersionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleDatasetVersionResponseDefaultTypeInternal() {}
  union {
    SingleDatasetVersionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleDatasetVersionResponseDefaultTypeInternal _SingleDatasetVersionResponse_default_instance_;
PROTOBUF_CONSTEXPR GetDatasetInputsSearchAddJobRequest::GetDatasetInputsSearchAddJobRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.job_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetDatasetInputsSearchAddJobRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDatasetInputsSearchAddJobRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDatasetInputsSearchAddJobRequestDefaultTypeInternal() {}
  union {
    GetDatasetInputsSearchAddJobRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDatasetInputsSearchAddJobRequestDefaultTypeInternal _GetDatasetInputsSearchAddJobRequest_default_instance_;
PROTOBUF_CONSTEXPR SingleDatasetInputsSearchAddJobResponse::SingleDatasetInputsSearchAddJobResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.job_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingleDatasetInputsSearchAddJobResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleDatasetInputsSearchAddJobResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleDatasetInputsSearchAddJobResponseDefaultTypeInternal() {}
  union {
    SingleDatasetInputsSearchAddJobResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleDatasetInputsSearchAddJobResponseDefaultTypeInternal _SingleDatasetInputsSearchAddJobResponse_default_instance_;
PROTOBUF_CONSTEXPR PostModelOutputsRequest::PostModelOutputsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.inputs_)*/{}
  , /*decltype(_impl_.model_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.model_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostModelOutputsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostModelOutputsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostModelOutputsRequestDefaultTypeInternal() {}
  union {
    PostModelOutputsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostModelOutputsRequestDefaultTypeInternal _PostModelOutputsRequest_default_instance_;
PROTOBUF_CONSTEXPR ListModelInputsRequest::ListModelInputsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.model_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListModelInputsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListModelInputsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListModelInputsRequestDefaultTypeInternal() {}
  union {
    ListModelInputsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListModelInputsRequestDefaultTypeInternal _ListModelInputsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetKeyRequest::GetKeyRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetKeyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetKeyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetKeyRequestDefaultTypeInternal() {}
  union {
    GetKeyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetKeyRequestDefaultTypeInternal _GetKeyRequest_default_instance_;
PROTOBUF_CONSTEXPR ListKeysRequest::ListKeysRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListKeysRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListKeysRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListKeysRequestDefaultTypeInternal() {}
  union {
    ListKeysRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListKeysRequestDefaultTypeInternal _ListKeysRequest_default_instance_;
PROTOBUF_CONSTEXPR ListAppKeysRequest::ListAppKeysRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListAppKeysRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListAppKeysRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListAppKeysRequestDefaultTypeInternal() {}
  union {
    ListAppKeysRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListAppKeysRequestDefaultTypeInternal _ListAppKeysRequest_default_instance_;
PROTOBUF_CONSTEXPR PostKeysRequest::PostKeysRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keys_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostKeysRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostKeysRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostKeysRequestDefaultTypeInternal() {}
  union {
    PostKeysRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostKeysRequestDefaultTypeInternal _PostKeysRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteKeyRequest::DeleteKeyRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteKeyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteKeyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteKeyRequestDefaultTypeInternal() {}
  union {
    DeleteKeyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteKeyRequestDefaultTypeInternal _DeleteKeyRequest_default_instance_;
PROTOBUF_CONSTEXPR PatchKeysRequest::PatchKeysRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keys_)*/{}
  , /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PatchKeysRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchKeysRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchKeysRequestDefaultTypeInternal() {}
  union {
    PatchKeysRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchKeysRequestDefaultTypeInternal _PatchKeysRequest_default_instance_;
PROTOBUF_CONSTEXPR SingleKeyResponse::SingleKeyResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.key_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingleKeyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleKeyResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleKeyResponseDefaultTypeInternal() {}
  union {
    SingleKeyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleKeyResponseDefaultTypeInternal _SingleKeyResponse_default_instance_;
PROTOBUF_CONSTEXPR MultiKeyResponse::MultiKeyResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keys_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiKeyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiKeyResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiKeyResponseDefaultTypeInternal() {}
  union {
    MultiKeyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiKeyResponseDefaultTypeInternal _MultiKeyResponse_default_instance_;
PROTOBUF_CONSTEXPR GetModelRequest::GetModelRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.additional_fields_)*/{}
  , /*decltype(_impl_.model_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.language_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.trained_before_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetModelRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetModelRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetModelRequestDefaultTypeInternal() {}
  union {
    GetModelRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetModelRequestDefaultTypeInternal _GetModelRequest_default_instance_;
PROTOBUF_CONSTEXPR ListModelsRequest::ListModelsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.input_fields_)*/{}
  , /*decltype(_impl_.output_fields_)*/{}
  , /*decltype(_impl_.toolkits_)*/{}
  , /*decltype(_impl_.use_cases_)*/{}
  , /*decltype(_impl_.additional_fields_)*/{}
  , /*decltype(_impl_.languages_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_type_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.query_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.license_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_.sort_ascending_)*/false
  , /*decltype(_impl_.filter_by_user_id_)*/false
  , /*decltype(_impl_.trained_only_)*/false
  , /*decltype(_impl_.featured_only_)*/false
  , /*decltype(_impl_.starred_only_)*/false
  , /*decltype(_impl_.dont_fetch_from_main_)*/false
  , /*decltype(_impl_.sort_by_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ListModelsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListModelsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListModelsRequestDefaultTypeInternal() {}
  union {
    ListModelsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListModelsRequestDefaultTypeInternal _ListModelsRequest_default_instance_;
PROTOBUF_CONSTEXPR PatchModelToolkitsRequest::PatchModelToolkitsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.toolkits_)*/{}
  , /*decltype(_impl_.model_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PatchModelToolkitsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchModelToolkitsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchModelToolkitsRequestDefaultTypeInternal() {}
  union {
    PatchModelToolkitsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchModelToolkitsRequestDefaultTypeInternal _PatchModelToolkitsRequest_default_instance_;
PROTOBUF_CONSTEXPR PatchModelCheckConsentsRequest::PatchModelCheckConsentsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.check_consents_)*/{}
  , /*decltype(_impl_.model_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PatchModelCheckConsentsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchModelCheckConsentsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchModelCheckConsentsRequestDefaultTypeInternal() {}
  union {
    PatchModelCheckConsentsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchModelCheckConsentsRequestDefaultTypeInternal _PatchModelCheckConsentsRequest_default_instance_;
PROTOBUF_CONSTEXPR PatchModelUseCasesRequest::PatchModelUseCasesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.usecases_)*/{}
  , /*decltype(_impl_.model_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PatchModelUseCasesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchModelUseCasesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchModelUseCasesRequestDefaultTypeInternal() {}
  union {
    PatchModelUseCasesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchModelUseCasesRequestDefaultTypeInternal _PatchModelUseCasesRequest_default_instance_;
PROTOBUF_CONSTEXPR PatchModelLanguagesRequest::PatchModelLanguagesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.languages_)*/{}
  , /*decltype(_impl_.model_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PatchModelLanguagesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchModelLanguagesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchModelLanguagesRequestDefaultTypeInternal() {}
  union {
    PatchModelLanguagesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchModelLanguagesRequestDefaultTypeInternal _PatchModelLanguagesRequest_default_instance_;
PROTOBUF_CONSTEXPR MultiModelToolkitResponse::MultiModelToolkitResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.toolkits_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiModelToolkitResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiModelToolkitResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiModelToolkitResponseDefaultTypeInternal() {}
  union {
    MultiModelToolkitResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiModelToolkitResponseDefaultTypeInternal _MultiModelToolkitResponse_default_instance_;
PROTOBUF_CONSTEXPR MultiModelCheckConsentResponse::MultiModelCheckConsentResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.check_consents_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiModelCheckConsentResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiModelCheckConsentResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiModelCheckConsentResponseDefaultTypeInternal() {}
  union {
    MultiModelCheckConsentResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiModelCheckConsentResponseDefaultTypeInternal _MultiModelCheckConsentResponse_default_instance_;
PROTOBUF_CONSTEXPR MultiModelUseCaseResponse::MultiModelUseCaseResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.usecases_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiModelUseCaseResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiModelUseCaseResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiModelUseCaseResponseDefaultTypeInternal() {}
  union {
    MultiModelUseCaseResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiModelUseCaseResponseDefaultTypeInternal _MultiModelUseCaseResponse_default_instance_;
PROTOBUF_CONSTEXPR MultiModelLanguageResponse::MultiModelLanguageResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.languages_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiModelLanguageResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiModelLanguageResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiModelLanguageResponseDefaultTypeInternal() {}
  union {
    MultiModelLanguageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiModelLanguageResponseDefaultTypeInternal _MultiModelLanguageResponse_default_instance_;
PROTOBUF_CONSTEXPR PostModelsRequest::PostModelsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.models_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.model_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostModelsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostModelsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostModelsRequestDefaultTypeInternal() {}
  union {
    PostModelsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostModelsRequestDefaultTypeInternal _PostModelsRequest_default_instance_;
PROTOBUF_CONSTEXPR PatchModelsRequest::PatchModelsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.models_)*/{}
  , /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PatchModelsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchModelsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchModelsRequestDefaultTypeInternal() {}
  union {
    PatchModelsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchModelsRequestDefaultTypeInternal _PatchModelsRequest_default_instance_;
PROTOBUF_CONSTEXPR IdUpdateSource::IdUpdateSource(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.new_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IdUpdateSourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IdUpdateSourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IdUpdateSourceDefaultTypeInternal() {}
  union {
    IdUpdateSource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IdUpdateSourceDefaultTypeInternal _IdUpdateSource_default_instance_;
PROTOBUF_CONSTEXPR PatchModelIdsRequest::PatchModelIdsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_)*/{}
  , /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PatchModelIdsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchModelIdsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchModelIdsRequestDefaultTypeInternal() {}
  union {
    PatchModelIdsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchModelIdsRequestDefaultTypeInternal _PatchModelIdsRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteModelRequest::DeleteModelRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.model_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteModelRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteModelRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteModelRequestDefaultTypeInternal() {}
  union {
    DeleteModelRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteModelRequestDefaultTypeInternal _DeleteModelRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteModelsRequest::DeleteModelsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.delete_all_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteModelsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteModelsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteModelsRequestDefaultTypeInternal() {}
  union {
    DeleteModelsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteModelsRequestDefaultTypeInternal _DeleteModelsRequest_default_instance_;
PROTOBUF_CONSTEXPR PostModelsSearchesRequest::PostModelsSearchesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.model_query_)*/nullptr
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostModelsSearchesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostModelsSearchesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostModelsSearchesRequestDefaultTypeInternal() {}
  union {
    PostModelsSearchesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostModelsSearchesRequestDefaultTypeInternal _PostModelsSearchesRequest_default_instance_;
PROTOBUF_CONSTEXPR SingleModelResponse::SingleModelResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.model_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingleModelResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleModelResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleModelResponseDefaultTypeInternal() {}
  union {
    SingleModelResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleModelResponseDefaultTypeInternal _SingleModelResponse_default_instance_;
PROTOBUF_CONSTEXPR MultiModelResponse::MultiModelResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.models_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiModelResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiModelResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiModelResponseDefaultTypeInternal() {}
  union {
    MultiModelResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiModelResponseDefaultTypeInternal _MultiModelResponse_default_instance_;
PROTOBUF_CONSTEXPR PatchModelVersionsRequest::PatchModelVersionsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.model_versions_)*/{}
  , /*decltype(_impl_.model_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PatchModelVersionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchModelVersionsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchModelVersionsRequestDefaultTypeInternal() {}
  union {
    PatchModelVersionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchModelVersionsRequestDefaultTypeInternal _PatchModelVersionsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetModelVersionRequest::GetModelVersionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.model_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetModelVersionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetModelVersionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetModelVersionRequestDefaultTypeInternal() {}
  union {
    GetModelVersionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetModelVersionRequestDefaultTypeInternal _GetModelVersionRequest_default_instance_;
PROTOBUF_CONSTEXPR ListModelVersionsRequest::ListModelVersionsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.concept_ids_)*/{}
  , /*decltype(_impl_.model_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListModelVersionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListModelVersionsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListModelVersionsRequestDefaultTypeInternal() {}
  union {
    ListModelVersionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListModelVersionsRequestDefaultTypeInternal _ListModelVersionsRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteModelVersionRequest::DeleteModelVersionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.model_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteModelVersionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteModelVersionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteModelVersionRequestDefaultTypeInternal() {}
  union {
    DeleteModelVersionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteModelVersionRequestDefaultTypeInternal _DeleteModelVersionRequest_default_instance_;
PROTOBUF_CONSTEXPR SingleModelVersionResponse::SingleModelVersionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.model_version_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingleModelVersionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleModelVersionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleModelVersionResponseDefaultTypeInternal() {}
  union {
    SingleModelVersionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleModelVersionResponseDefaultTypeInternal _SingleModelVersionResponse_default_instance_;
PROTOBUF_CONSTEXPR MultiModelVersionResponse::MultiModelVersionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.model_versions_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiModelVersionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiModelVersionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiModelVersionResponseDefaultTypeInternal() {}
  union {
    MultiModelVersionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiModelVersionResponseDefaultTypeInternal _MultiModelVersionResponse_default_instance_;
PROTOBUF_CONSTEXPR PostModelVersionsRequest::PostModelVersionsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.model_versions_)*/{}
  , /*decltype(_impl_.model_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.search_)*/nullptr
  , /*decltype(_impl_.train_search_)*/nullptr
  , /*decltype(_impl_.test_search_)*/nullptr
  , /*decltype(_impl_.dataset_version_)*/nullptr
  , /*decltype(_impl_.eval_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostModelVersionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostModelVersionsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostModelVersionsRequestDefaultTypeInternal() {}
  union {
    PostModelVersionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostModelVersionsRequestDefaultTypeInternal _PostModelVersionsRequest_default_instance_;
PROTOBUF_CONSTEXPR PostWorkflowVersionsUnPublishRequest::PostWorkflowVersionsUnPublishRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.publications_)*/{}
  , /*decltype(_impl_.workflow_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostWorkflowVersionsUnPublishRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostWorkflowVersionsUnPublishRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostWorkflowVersionsUnPublishRequestDefaultTypeInternal() {}
  union {
    PostWorkflowVersionsUnPublishRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostWorkflowVersionsUnPublishRequestDefaultTypeInternal _PostWorkflowVersionsUnPublishRequest_default_instance_;
PROTOBUF_CONSTEXPR PostWorkflowVersionsPublishRequest::PostWorkflowVersionsPublishRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.publications_)*/{}
  , /*decltype(_impl_.workflow_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostWorkflowVersionsPublishRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostWorkflowVersionsPublishRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostWorkflowVersionsPublishRequestDefaultTypeInternal() {}
  union {
    PostWorkflowVersionsPublishRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostWorkflowVersionsPublishRequestDefaultTypeInternal _PostWorkflowVersionsPublishRequest_default_instance_;
PROTOBUF_CONSTEXPR WorkflowVersionPublishRequest::WorkflowVersionPublishRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorkflowVersionPublishRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkflowVersionPublishRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkflowVersionPublishRequestDefaultTypeInternal() {}
  union {
    WorkflowVersionPublishRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkflowVersionPublishRequestDefaultTypeInternal _WorkflowVersionPublishRequest_default_instance_;
PROTOBUF_CONSTEXPR WorkflowVersionUnPublishRequest::WorkflowVersionUnPublishRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorkflowVersionUnPublishRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkflowVersionUnPublishRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkflowVersionUnPublishRequestDefaultTypeInternal() {}
  union {
    WorkflowVersionUnPublishRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkflowVersionUnPublishRequestDefaultTypeInternal _WorkflowVersionUnPublishRequest_default_instance_;
PROTOBUF_CONSTEXPR ModelVersionPublishRequest::ModelVersionPublishRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModelVersionPublishRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelVersionPublishRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelVersionPublishRequestDefaultTypeInternal() {}
  union {
    ModelVersionPublishRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelVersionPublishRequestDefaultTypeInternal _ModelVersionPublishRequest_default_instance_;
PROTOBUF_CONSTEXPR PostModelVersionsPublishRequest::PostModelVersionsPublishRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.publications_)*/{}
  , /*decltype(_impl_.model_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostModelVersionsPublishRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostModelVersionsPublishRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostModelVersionsPublishRequestDefaultTypeInternal() {}
  union {
    PostModelVersionsPublishRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostModelVersionsPublishRequestDefaultTypeInternal _PostModelVersionsPublishRequest_default_instance_;
PROTOBUF_CONSTEXPR ModelVersionUnpublishRequest::ModelVersionUnpublishRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModelVersionUnpublishRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelVersionUnpublishRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelVersionUnpublishRequestDefaultTypeInternal() {}
  union {
    ModelVersionUnpublishRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelVersionUnpublishRequestDefaultTypeInternal _ModelVersionUnpublishRequest_default_instance_;
PROTOBUF_CONSTEXPR PostModelVersionsUnPublishRequest::PostModelVersionsUnPublishRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.publications_)*/{}
  , /*decltype(_impl_.model_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostModelVersionsUnPublishRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostModelVersionsUnPublishRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostModelVersionsUnPublishRequestDefaultTypeInternal() {}
  union {
    PostModelVersionsUnPublishRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostModelVersionsUnPublishRequestDefaultTypeInternal _PostModelVersionsUnPublishRequest_default_instance_;
PROTOBUF_CONSTEXPR PostModelVersionEvaluationsRequest::PostModelVersionEvaluationsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.eval_metrics_)*/{}
  , /*decltype(_impl_.model_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_version_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostModelVersionEvaluationsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostModelVersionEvaluationsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostModelVersionEvaluationsRequestDefaultTypeInternal() {}
  union {
    PostModelVersionEvaluationsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostModelVersionEvaluationsRequestDefaultTypeInternal _PostModelVersionEvaluationsRequest_default_instance_;
PROTOBUF_CONSTEXPR ListModelVersionEvaluationsRequest::ListModelVersionEvaluationsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.model_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_version_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListModelVersionEvaluationsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListModelVersionEvaluationsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListModelVersionEvaluationsRequestDefaultTypeInternal() {}
  union {
    ListModelVersionEvaluationsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListModelVersionEvaluationsRequestDefaultTypeInternal _ListModelVersionEvaluationsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetModelVersionEvaluationRequest::GetModelVersionEvaluationRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.model_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_version_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.evaluation_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.fields_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetModelVersionEvaluationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetModelVersionEvaluationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetModelVersionEvaluationRequestDefaultTypeInternal() {}
  union {
    GetModelVersionEvaluationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetModelVersionEvaluationRequestDefaultTypeInternal _GetModelVersionEvaluationRequest_default_instance_;
PROTOBUF_CONSTEXPR SingleEvalMetricsResponse::SingleEvalMetricsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.eval_metrics_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingleEvalMetricsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleEvalMetricsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleEvalMetricsResponseDefaultTypeInternal() {}
  union {
    SingleEvalMetricsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleEvalMetricsResponseDefaultTypeInternal _SingleEvalMetricsResponse_default_instance_;
PROTOBUF_CONSTEXPR MultiEvalMetricsResponse::MultiEvalMetricsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.eval_metrics_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiEvalMetricsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiEvalMetricsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiEvalMetricsResponseDefaultTypeInternal() {}
  union {
    MultiEvalMetricsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiEvalMetricsResponseDefaultTypeInternal _MultiEvalMetricsResponse_default_instance_;
PROTOBUF_CONSTEXPR PostModelVersionMetricsRequest::PostModelVersionMetricsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.model_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.test_search_)*/nullptr
  , /*decltype(_impl_.eval_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostModelVersionMetricsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostModelVersionMetricsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostModelVersionMetricsRequestDefaultTypeInternal() {}
  union {
    PostModelVersionMetricsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostModelVersionMetricsRequestDefaultTypeInternal _PostModelVersionMetricsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetModelVersionMetricsRequest::GetModelVersionMetricsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.model_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.fields_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetModelVersionMetricsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetModelVersionMetricsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetModelVersionMetricsRequestDefaultTypeInternal() {}
  union {
    GetModelVersionMetricsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetModelVersionMetricsRequestDefaultTypeInternal _GetModelVersionMetricsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetModelTypeRequest::GetModelTypeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.model_type_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetModelTypeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetModelTypeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetModelTypeRequestDefaultTypeInternal() {}
  union {
    GetModelTypeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetModelTypeRequestDefaultTypeInternal _GetModelTypeRequest_default_instance_;
PROTOBUF_CONSTEXPR ListModelTypesRequest::ListModelTypesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListModelTypesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListModelTypesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListModelTypesRequestDefaultTypeInternal() {}
  union {
    ListModelTypesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListModelTypesRequestDefaultTypeInternal _ListModelTypesRequest_default_instance_;
PROTOBUF_CONSTEXPR ListOpenSourceLicensesRequest::ListOpenSourceLicensesRequest(
    ::_pbi::ConstantInitialized) {}
struct ListOpenSourceLicensesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListOpenSourceLicensesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListOpenSourceLicensesRequestDefaultTypeInternal() {}
  union {
    ListOpenSourceLicensesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListOpenSourceLicensesRequestDefaultTypeInternal _ListOpenSourceLicensesRequest_default_instance_;
PROTOBUF_CONSTEXPR ListOpenSourceLicensesResponse::ListOpenSourceLicensesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.licenses_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListOpenSourceLicensesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListOpenSourceLicensesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListOpenSourceLicensesResponseDefaultTypeInternal() {}
  union {
    ListOpenSourceLicensesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListOpenSourceLicensesResponseDefaultTypeInternal _ListOpenSourceLicensesResponse_default_instance_;
PROTOBUF_CONSTEXPR SingleModelTypeResponse::SingleModelTypeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.model_type_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingleModelTypeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleModelTypeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleModelTypeResponseDefaultTypeInternal() {}
  union {
    SingleModelTypeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleModelTypeResponseDefaultTypeInternal _SingleModelTypeResponse_default_instance_;
PROTOBUF_CONSTEXPR MultiModelTypeResponse::MultiModelTypeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.model_types_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.model_importers_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiModelTypeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiModelTypeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiModelTypeResponseDefaultTypeInternal() {}
  union {
    MultiModelTypeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiModelTypeResponseDefaultTypeInternal _MultiModelTypeResponse_default_instance_;
PROTOBUF_CONSTEXPR GetModelVersionInputExampleRequest::GetModelVersionInputExampleRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.model_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_version_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.example_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetModelVersionInputExampleRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetModelVersionInputExampleRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetModelVersionInputExampleRequestDefaultTypeInternal() {}
  union {
    GetModelVersionInputExampleRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetModelVersionInputExampleRequestDefaultTypeInternal _GetModelVersionInputExampleRequest_default_instance_;
PROTOBUF_CONSTEXPR ListModelVersionInputExamplesRequest::ListModelVersionInputExamplesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.model_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_version_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListModelVersionInputExamplesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListModelVersionInputExamplesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListModelVersionInputExamplesRequestDefaultTypeInternal() {}
  union {
    ListModelVersionInputExamplesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListModelVersionInputExamplesRequestDefaultTypeInternal _ListModelVersionInputExamplesRequest_default_instance_;
PROTOBUF_CONSTEXPR SingleModelVersionInputExampleResponse::SingleModelVersionInputExampleResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.model_version_input_example_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingleModelVersionInputExampleResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleModelVersionInputExampleResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleModelVersionInputExampleResponseDefaultTypeInternal() {}
  union {
    SingleModelVersionInputExampleResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleModelVersionInputExampleResponseDefaultTypeInternal _SingleModelVersionInputExampleResponse_default_instance_;
PROTOBUF_CONSTEXPR MultiModelVersionInputExampleResponse::MultiModelVersionInputExampleResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.model_version_input_examples_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiModelVersionInputExampleResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiModelVersionInputExampleResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiModelVersionInputExampleResponseDefaultTypeInternal() {}
  union {
    MultiModelVersionInputExampleResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiModelVersionInputExampleResponseDefaultTypeInternal _MultiModelVersionInputExampleResponse_default_instance_;
PROTOBUF_CONSTEXPR ListModelReferencesRequest::ListModelReferencesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.model_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListModelReferencesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListModelReferencesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListModelReferencesRequestDefaultTypeInternal() {}
  union {
    ListModelReferencesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListModelReferencesRequestDefaultTypeInternal _ListModelReferencesRequest_default_instance_;
PROTOBUF_CONSTEXPR MultiModelReferenceResponse::MultiModelReferenceResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.model_references_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiModelReferenceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiModelReferenceResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiModelReferenceResponseDefaultTypeInternal() {}
  union {
    MultiModelReferenceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiModelReferenceResponseDefaultTypeInternal _MultiModelReferenceResponse_default_instance_;
PROTOBUF_CONSTEXPR MultiOutputResponse::MultiOutputResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.outputs_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiOutputResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiOutputResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiOutputResponseDefaultTypeInternal() {}
  union {
    MultiOutputResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiOutputResponseDefaultTypeInternal _MultiOutputResponse_default_instance_;
PROTOBUF_CONSTEXPR ListScopesRequest::ListScopesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListScopesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListScopesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListScopesRequestDefaultTypeInternal() {}
  union {
    ListScopesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListScopesRequestDefaultTypeInternal _ListScopesRequest_default_instance_;
PROTOBUF_CONSTEXPR MyScopesRequest::MyScopesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MyScopesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MyScopesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MyScopesRequestDefaultTypeInternal() {}
  union {
    MyScopesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MyScopesRequestDefaultTypeInternal _MyScopesRequest_default_instance_;
PROTOBUF_CONSTEXPR MyScopesUserRequest::MyScopesUserRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MyScopesUserRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MyScopesUserRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MyScopesUserRequestDefaultTypeInternal() {}
  union {
    MyScopesUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MyScopesUserRequestDefaultTypeInternal _MyScopesUserRequest_default_instance_;
PROTOBUF_CONSTEXPR MyScopesRootRequest::MyScopesRootRequest(
    ::_pbi::ConstantInitialized) {}
struct MyScopesRootRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MyScopesRootRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MyScopesRootRequestDefaultTypeInternal() {}
  union {
    MyScopesRootRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MyScopesRootRequestDefaultTypeInternal _MyScopesRootRequest_default_instance_;
PROTOBUF_CONSTEXPR MultiScopeDepsResponse::MultiScopeDepsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scope_deps_)*/{}
  , /*decltype(_impl_.endpoint_deps_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiScopeDepsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiScopeDepsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiScopeDepsResponseDefaultTypeInternal() {}
  union {
    MultiScopeDepsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiScopeDepsResponseDefaultTypeInternal _MultiScopeDepsResponse_default_instance_;
PROTOBUF_CONSTEXPR MultiScopeResponse::MultiScopeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scopes_)*/{}
  , /*decltype(_impl_.endpoints_)*/{}
  , /*decltype(_impl_.user_feature_flags_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.app_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiScopeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiScopeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiScopeResponseDefaultTypeInternal() {}
  union {
    MultiScopeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiScopeResponseDefaultTypeInternal _MultiScopeResponse_default_instance_;
PROTOBUF_CONSTEXPR MultiScopeUserResponse::MultiScopeUserResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scopes_)*/{}
  , /*decltype(_impl_.endpoints_)*/{}
  , /*decltype(_impl_.user_feature_flags_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiScopeUserResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiScopeUserResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiScopeUserResponseDefaultTypeInternal() {}
  union {
    MultiScopeUserResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiScopeUserResponseDefaultTypeInternal _MultiScopeUserResponse_default_instance_;
PROTOBUF_CONSTEXPR MultiScopeRootResponse::MultiScopeRootResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scopes_)*/{}
  , /*decltype(_impl_.endpoints_)*/{}
  , /*decltype(_impl_.user_feature_flags_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiScopeRootResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiScopeRootResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiScopeRootResponseDefaultTypeInternal() {}
  union {
    MultiScopeRootResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiScopeRootResponseDefaultTypeInternal _MultiScopeRootResponse_default_instance_;
PROTOBUF_CONSTEXPR GetSearchRequest::GetSearchRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetSearchRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSearchRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSearchRequestDefaultTypeInternal() {}
  union {
    GetSearchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSearchRequestDefaultTypeInternal _GetSearchRequest_default_instance_;
PROTOBUF_CONSTEXPR ListSearchesRequest::ListSearchesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListSearchesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListSearchesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListSearchesRequestDefaultTypeInternal() {}
  union {
    ListSearchesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListSearchesRequestDefaultTypeInternal _ListSearchesRequest_default_instance_;
PROTOBUF_CONSTEXPR PostSearchesRequest::PostSearchesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.searches_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.query_)*/nullptr
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostSearchesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostSearchesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostSearchesRequestDefaultTypeInternal() {}
  union {
    PostSearchesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostSearchesRequestDefaultTypeInternal _PostSearchesRequest_default_instance_;
PROTOBUF_CONSTEXPR PatchInputsSearchesRequest::PatchInputsSearchesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.searches_)*/{}
  , /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PatchInputsSearchesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchInputsSearchesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchInputsSearchesRequestDefaultTypeInternal() {}
  union {
    PatchInputsSearchesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchInputsSearchesRequestDefaultTypeInternal _PatchInputsSearchesRequest_default_instance_;
PROTOBUF_CONSTEXPR PatchAnnotationsSearchesRequest::PatchAnnotationsSearchesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.searches_)*/{}
  , /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PatchAnnotationsSearchesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchAnnotationsSearchesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchAnnotationsSearchesRequestDefaultTypeInternal() {}
  union {
    PatchAnnotationsSearchesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchAnnotationsSearchesRequestDefaultTypeInternal _PatchAnnotationsSearchesRequest_default_instance_;
PROTOBUF_CONSTEXPR PatchSearchesRequest::PatchSearchesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.searches_)*/{}
  , /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PatchSearchesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchSearchesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchSearchesRequestDefaultTypeInternal() {}
  union {
    PatchSearchesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchSearchesRequestDefaultTypeInternal _PatchSearchesRequest_default_instance_;
PROTOBUF_CONSTEXPR PostSearchesByIDRequest::PostSearchesByIDRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostSearchesByIDRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostSearchesByIDRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostSearchesByIDRequestDefaultTypeInternal() {}
  union {
    PostSearchesByIDRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostSearchesByIDRequestDefaultTypeInternal _PostSearchesByIDRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteSearchRequest::DeleteSearchRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteSearchRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteSearchRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteSearchRequestDefaultTypeInternal() {}
  union {
    DeleteSearchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteSearchRequestDefaultTypeInternal _DeleteSearchRequest_default_instance_;
PROTOBUF_CONSTEXPR PostAnnotationsSearchesRequest::PostAnnotationsSearchesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.searches_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostAnnotationsSearchesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostAnnotationsSearchesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostAnnotationsSearchesRequestDefaultTypeInternal() {}
  union {
    PostAnnotationsSearchesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostAnnotationsSearchesRequestDefaultTypeInternal _PostAnnotationsSearchesRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteAnnotationSearchMetricsRequest::DeleteAnnotationSearchMetricsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteAnnotationSearchMetricsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteAnnotationSearchMetricsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteAnnotationSearchMetricsRequestDefaultTypeInternal() {}
  union {
    DeleteAnnotationSearchMetricsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteAnnotationSearchMetricsRequestDefaultTypeInternal _DeleteAnnotationSearchMetricsRequest_default_instance_;
PROTOBUF_CONSTEXPR PostInputsSearchesRequest::PostInputsSearchesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.searches_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostInputsSearchesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostInputsSearchesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostInputsSearchesRequestDefaultTypeInternal() {}
  union {
    PostInputsSearchesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostInputsSearchesRequestDefaultTypeInternal _PostInputsSearchesRequest_default_instance_;
PROTOBUF_CONSTEXPR SingleSearchResponse::SingleSearchResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.search_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingleSearchResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleSearchResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleSearchResponseDefaultTypeInternal() {}
  union {
    SingleSearchResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleSearchResponseDefaultTypeInternal _SingleSearchResponse_default_instance_;
PROTOBUF_CONSTEXPR MultiSearchResponse::MultiSearchResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hits_)*/{}
  , /*decltype(_impl_.searches_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.query_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiSearchResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiSearchResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiSearchResponseDefaultTypeInternal() {}
  union {
    MultiSearchResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiSearchResponseDefaultTypeInternal _MultiSearchResponse_default_instance_;
PROTOBUF_CONSTEXPR PostAnnotationSearchMetricsRequest::PostAnnotationSearchMetricsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.ground_truth_)*/nullptr
  , /*decltype(_impl_.search_to_eval_)*/nullptr
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.evaluation_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostAnnotationSearchMetricsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostAnnotationSearchMetricsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostAnnotationSearchMetricsRequestDefaultTypeInternal() {}
  union {
    PostAnnotationSearchMetricsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostAnnotationSearchMetricsRequestDefaultTypeInternal _PostAnnotationSearchMetricsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetAnnotationSearchMetricsRequest::GetAnnotationSearchMetricsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetAnnotationSearchMetricsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAnnotationSearchMetricsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAnnotationSearchMetricsRequestDefaultTypeInternal() {}
  union {
    GetAnnotationSearchMetricsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAnnotationSearchMetricsRequestDefaultTypeInternal _GetAnnotationSearchMetricsRequest_default_instance_;
PROTOBUF_CONSTEXPR ListAnnotationSearchMetricsRequest::ListAnnotationSearchMetricsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListAnnotationSearchMetricsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListAnnotationSearchMetricsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListAnnotationSearchMetricsRequestDefaultTypeInternal() {}
  union {
    ListAnnotationSearchMetricsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListAnnotationSearchMetricsRequestDefaultTypeInternal _ListAnnotationSearchMetricsRequest_default_instance_;
PROTOBUF_CONSTEXPR MultiAnnotationSearchMetricsResponse::MultiAnnotationSearchMetricsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.annotation_search_metrics_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiAnnotationSearchMetricsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiAnnotationSearchMetricsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiAnnotationSearchMetricsResponseDefaultTypeInternal() {}
  union {
    MultiAnnotationSearchMetricsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiAnnotationSearchMetricsResponseDefaultTypeInternal _MultiAnnotationSearchMetricsResponse_default_instance_;
PROTOBUF_CONSTEXPR ListAnnotationFiltersRequest::ListAnnotationFiltersRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListAnnotationFiltersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListAnnotationFiltersRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListAnnotationFiltersRequestDefaultTypeInternal() {}
  union {
    ListAnnotationFiltersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListAnnotationFiltersRequestDefaultTypeInternal _ListAnnotationFiltersRequest_default_instance_;
PROTOBUF_CONSTEXPR GetAnnotationFilterRequest::GetAnnotationFilterRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.annotation_filter_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetAnnotationFilterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAnnotationFilterRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAnnotationFilterRequestDefaultTypeInternal() {}
  union {
    GetAnnotationFilterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAnnotationFilterRequestDefaultTypeInternal _GetAnnotationFilterRequest_default_instance_;
PROTOBUF_CONSTEXPR PostAnnotationFiltersRequest::PostAnnotationFiltersRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.annotation_filters_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostAnnotationFiltersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostAnnotationFiltersRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostAnnotationFiltersRequestDefaultTypeInternal() {}
  union {
    PostAnnotationFiltersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostAnnotationFiltersRequestDefaultTypeInternal _PostAnnotationFiltersRequest_default_instance_;
PROTOBUF_CONSTEXPR PatchAnnotationFiltersRequest::PatchAnnotationFiltersRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.annotation_filters_)*/{}
  , /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PatchAnnotationFiltersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchAnnotationFiltersRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchAnnotationFiltersRequestDefaultTypeInternal() {}
  union {
    PatchAnnotationFiltersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchAnnotationFiltersRequestDefaultTypeInternal _PatchAnnotationFiltersRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteAnnotationFiltersRequest::DeleteAnnotationFiltersRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.annotation_filter_ids_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteAnnotationFiltersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteAnnotationFiltersRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteAnnotationFiltersRequestDefaultTypeInternal() {}
  union {
    DeleteAnnotationFiltersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteAnnotationFiltersRequestDefaultTypeInternal _DeleteAnnotationFiltersRequest_default_instance_;
PROTOBUF_CONSTEXPR MultiAnnotationFilterResponse::MultiAnnotationFilterResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.annotation_filters_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiAnnotationFilterResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiAnnotationFilterResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiAnnotationFilterResponseDefaultTypeInternal() {}
  union {
    MultiAnnotationFilterResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiAnnotationFilterResponseDefaultTypeInternal _MultiAnnotationFilterResponse_default_instance_;
PROTOBUF_CONSTEXPR SingleAnnotationFilterResponse::SingleAnnotationFilterResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.annotation_filter_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingleAnnotationFilterResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleAnnotationFilterResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleAnnotationFilterResponseDefaultTypeInternal() {}
  union {
    SingleAnnotationFilterResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleAnnotationFilterResponseDefaultTypeInternal _SingleAnnotationFilterResponse_default_instance_;
PROTOBUF_CONSTEXPR PostValidatePasswordRequest::PostValidatePasswordRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.password_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostValidatePasswordRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostValidatePasswordRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostValidatePasswordRequestDefaultTypeInternal() {}
  union {
    PostValidatePasswordRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostValidatePasswordRequestDefaultTypeInternal _PostValidatePasswordRequest_default_instance_;
PROTOBUF_CONSTEXPR SinglePasswordValidationResponse::SinglePasswordValidationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.password_violations_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SinglePasswordValidationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SinglePasswordValidationResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SinglePasswordValidationResponseDefaultTypeInternal() {}
  union {
    SinglePasswordValidationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SinglePasswordValidationResponseDefaultTypeInternal _SinglePasswordValidationResponse_default_instance_;
PROTOBUF_CONSTEXPR GetWorkflowRequest::GetWorkflowRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.additional_fields_)*/{}
  , /*decltype(_impl_.workflow_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.favor_clarifai_workflows_)*/false
  , /*decltype(_impl_.exclude_clarifai_workflows_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetWorkflowRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetWorkflowRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetWorkflowRequestDefaultTypeInternal() {}
  union {
    GetWorkflowRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetWorkflowRequestDefaultTypeInternal _GetWorkflowRequest_default_instance_;
PROTOBUF_CONSTEXPR ListWorkflowsRequest::ListWorkflowsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.additional_fields_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.query_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.search_term_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_.sort_ascending_)*/false
  , /*decltype(_impl_.featured_only_)*/false
  , /*decltype(_impl_.starred_only_)*/false
  , /*decltype(_impl_.sort_by_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ListWorkflowsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListWorkflowsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListWorkflowsRequestDefaultTypeInternal() {}
  union {
    ListWorkflowsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListWorkflowsRequestDefaultTypeInternal _ListWorkflowsRequest_default_instance_;
PROTOBUF_CONSTEXPR PostWorkflowsRequest::PostWorkflowsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.workflows_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostWorkflowsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostWorkflowsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostWorkflowsRequestDefaultTypeInternal() {}
  union {
    PostWorkflowsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostWorkflowsRequestDefaultTypeInternal _PostWorkflowsRequest_default_instance_;
PROTOBUF_CONSTEXPR PatchWorkflowsRequest::PatchWorkflowsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.workflows_)*/{}
  , /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PatchWorkflowsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchWorkflowsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchWorkflowsRequestDefaultTypeInternal() {}
  union {
    PatchWorkflowsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchWorkflowsRequestDefaultTypeInternal _PatchWorkflowsRequest_default_instance_;
PROTOBUF_CONSTEXPR PatchWorkflowIdsRequest::PatchWorkflowIdsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_)*/{}
  , /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PatchWorkflowIdsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchWorkflowIdsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchWorkflowIdsRequestDefaultTypeInternal() {}
  union {
    PatchWorkflowIdsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchWorkflowIdsRequestDefaultTypeInternal _PatchWorkflowIdsRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteWorkflowRequest::DeleteWorkflowRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.workflow_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteWorkflowRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteWorkflowRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteWorkflowRequestDefaultTypeInternal() {}
  union {
    DeleteWorkflowRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteWorkflowRequestDefaultTypeInternal _DeleteWorkflowRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteWorkflowsRequest::DeleteWorkflowsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.delete_all_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteWorkflowsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteWorkflowsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteWorkflowsRequestDefaultTypeInternal() {}
  union {
    DeleteWorkflowsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteWorkflowsRequestDefaultTypeInternal _DeleteWorkflowsRequest_default_instance_;
PROTOBUF_CONSTEXPR SingleWorkflowResponse::SingleWorkflowResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.workflow_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingleWorkflowResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleWorkflowResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleWorkflowResponseDefaultTypeInternal() {}
  union {
    SingleWorkflowResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleWorkflowResponseDefaultTypeInternal _SingleWorkflowResponse_default_instance_;
PROTOBUF_CONSTEXPR MultiWorkflowResponse::MultiWorkflowResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.workflows_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiWorkflowResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiWorkflowResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiWorkflowResponseDefaultTypeInternal() {}
  union {
    MultiWorkflowResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiWorkflowResponseDefaultTypeInternal _MultiWorkflowResponse_default_instance_;
PROTOBUF_CONSTEXPR PostWorkflowResultsRequest::PostWorkflowResultsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.inputs_)*/{}
  , /*decltype(_impl_.workflow_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.output_config_)*/nullptr
  , /*decltype(_impl_.workflow_state_)*/nullptr
  , /*decltype(_impl_.favor_clarifai_workflows_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostWorkflowResultsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostWorkflowResultsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostWorkflowResultsRequestDefaultTypeInternal() {}
  union {
    PostWorkflowResultsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostWorkflowResultsRequestDefaultTypeInternal _PostWorkflowResultsRequest_default_instance_;
PROTOBUF_CONSTEXPR PostWorkflowResultsResponse::PostWorkflowResultsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.results_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.workflow_)*/nullptr
  , /*decltype(_impl_.workflow_state_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostWorkflowResultsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostWorkflowResultsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostWorkflowResultsResponseDefaultTypeInternal() {}
  union {
    PostWorkflowResultsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostWorkflowResultsResponseDefaultTypeInternal _PostWorkflowResultsResponse_default_instance_;
PROTOBUF_CONSTEXPR PostWorkflowResultsSimilarityRequest::PostWorkflowResultsSimilarityRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.probe_inputs_)*/{}
  , /*decltype(_impl_.pool_inputs_)*/{}
  , /*decltype(_impl_.workflow_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_version_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.favor_clarifai_workflows_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostWorkflowResultsSimilarityRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostWorkflowResultsSimilarityRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostWorkflowResultsSimilarityRequestDefaultTypeInternal() {}
  union {
    PostWorkflowResultsSimilarityRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostWorkflowResultsSimilarityRequestDefaultTypeInternal _PostWorkflowResultsSimilarityRequest_default_instance_;
PROTOBUF_CONSTEXPR PostWorkflowResultsSimilarityResponse::PostWorkflowResultsSimilarityResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.results_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostWorkflowResultsSimilarityResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostWorkflowResultsSimilarityResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostWorkflowResultsSimilarityResponseDefaultTypeInternal() {}
  union {
    PostWorkflowResultsSimilarityResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostWorkflowResultsSimilarityResponseDefaultTypeInternal _PostWorkflowResultsSimilarityResponse_default_instance_;
PROTOBUF_CONSTEXPR ListWorkflowVersionsRequest::ListWorkflowVersionsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.workflow_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListWorkflowVersionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListWorkflowVersionsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListWorkflowVersionsRequestDefaultTypeInternal() {}
  union {
    ListWorkflowVersionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListWorkflowVersionsRequestDefaultTypeInternal _ListWorkflowVersionsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetWorkflowVersionRequest::GetWorkflowVersionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.workflow_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.workflow_version_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetWorkflowVersionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetWorkflowVersionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetWorkflowVersionRequestDefaultTypeInternal() {}
  union {
    GetWorkflowVersionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetWorkflowVersionRequestDefaultTypeInternal _GetWorkflowVersionRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteWorkflowVersionsRequest::DeleteWorkflowVersionsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.workflow_version_ids_)*/{}
  , /*decltype(_impl_.workflow_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteWorkflowVersionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteWorkflowVersionsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteWorkflowVersionsRequestDefaultTypeInternal() {}
  union {
    DeleteWorkflowVersionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteWorkflowVersionsRequestDefaultTypeInternal _DeleteWorkflowVersionsRequest_default_instance_;
PROTOBUF_CONSTEXPR PatchWorkflowVersionsRequest::PatchWorkflowVersionsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.workflow_versions_)*/{}
  , /*decltype(_impl_.workflow_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PatchWorkflowVersionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchWorkflowVersionsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchWorkflowVersionsRequestDefaultTypeInternal() {}
  union {
    PatchWorkflowVersionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchWorkflowVersionsRequestDefaultTypeInternal _PatchWorkflowVersionsRequest_default_instance_;
PROTOBUF_CONSTEXPR MultiWorkflowVersionResponse::MultiWorkflowVersionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.workflow_versions_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiWorkflowVersionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiWorkflowVersionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiWorkflowVersionResponseDefaultTypeInternal() {}
  union {
    MultiWorkflowVersionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiWorkflowVersionResponseDefaultTypeInternal _MultiWorkflowVersionResponse_default_instance_;
PROTOBUF_CONSTEXPR SingleWorkflowVersionResponse::SingleWorkflowVersionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.workflow_version_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingleWorkflowVersionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleWorkflowVersionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleWorkflowVersionResponseDefaultTypeInternal() {}
  union {
    SingleWorkflowVersionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleWorkflowVersionResponseDefaultTypeInternal _SingleWorkflowVersionResponse_default_instance_;
PROTOBUF_CONSTEXPR PostAppDuplicationsRequest::PostAppDuplicationsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.app_duplications_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostAppDuplicationsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostAppDuplicationsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostAppDuplicationsRequestDefaultTypeInternal() {}
  union {
    PostAppDuplicationsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostAppDuplicationsRequestDefaultTypeInternal _PostAppDuplicationsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetAppDuplicationRequest::GetAppDuplicationRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.app_duplication_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetAppDuplicationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAppDuplicationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAppDuplicationRequestDefaultTypeInternal() {}
  union {
    GetAppDuplicationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAppDuplicationRequestDefaultTypeInternal _GetAppDuplicationRequest_default_instance_;
PROTOBUF_CONSTEXPR ListAppDuplicationsRequest::ListAppDuplicationsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListAppDuplicationsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListAppDuplicationsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListAppDuplicationsRequestDefaultTypeInternal() {}
  union {
    ListAppDuplicationsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListAppDuplicationsRequestDefaultTypeInternal _ListAppDuplicationsRequest_default_instance_;
PROTOBUF_CONSTEXPR MultiAppDuplicationsResponse::MultiAppDuplicationsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.app_duplications_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiAppDuplicationsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiAppDuplicationsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiAppDuplicationsResponseDefaultTypeInternal() {}
  union {
    MultiAppDuplicationsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiAppDuplicationsResponseDefaultTypeInternal _MultiAppDuplicationsResponse_default_instance_;
PROTOBUF_CONSTEXPR SingleAppDuplicationResponse::SingleAppDuplicationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.app_duplication_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingleAppDuplicationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleAppDuplicationResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleAppDuplicationResponseDefaultTypeInternal() {}
  union {
    SingleAppDuplicationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleAppDuplicationResponseDefaultTypeInternal _SingleAppDuplicationResponse_default_instance_;
PROTOBUF_CONSTEXPR PostTasksRequest::PostTasksRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tasks_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostTasksRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostTasksRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostTasksRequestDefaultTypeInternal() {}
  union {
    PostTasksRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostTasksRequestDefaultTypeInternal _PostTasksRequest_default_instance_;
PROTOBUF_CONSTEXPR GetTaskRequest::GetTaskRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.additional_fields_)*/{}
  , /*decltype(_impl_.task_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTaskRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTaskRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTaskRequestDefaultTypeInternal() {}
  union {
    GetTaskRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTaskRequestDefaultTypeInternal _GetTaskRequest_default_instance_;
PROTOBUF_CONSTEXPR ListTasksRequest::ListTasksRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.worker_user_ids_)*/{}
  , /*decltype(_impl_.review_user_ids_)*/{}
  , /*decltype(_impl_.additional_fields_)*/{}
  , /*decltype(_impl_.label_order_ids_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_.including_label_order_tasks_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListTasksRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListTasksRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListTasksRequestDefaultTypeInternal() {}
  union {
    ListTasksRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListTasksRequestDefaultTypeInternal _ListTasksRequest_default_instance_;
PROTOBUF_CONSTEXPR PatchTasksRequest::PatchTasksRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tasks_)*/{}
  , /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PatchTasksRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchTasksRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchTasksRequestDefaultTypeInternal() {}
  union {
    PatchTasksRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchTasksRequestDefaultTypeInternal _PatchTasksRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteTasksRequest::DeleteTasksRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteTasksRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteTasksRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteTasksRequestDefaultTypeInternal() {}
  union {
    DeleteTasksRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteTasksRequestDefaultTypeInternal _DeleteTasksRequest_default_instance_;
PROTOBUF_CONSTEXPR MultiTaskResponse::MultiTaskResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tasks_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiTaskResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiTaskResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiTaskResponseDefaultTypeInternal() {}
  union {
    MultiTaskResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiTaskResponseDefaultTypeInternal _MultiTaskResponse_default_instance_;
PROTOBUF_CONSTEXPR SingleTaskResponse::SingleTaskResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.task_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingleTaskResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleTaskResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleTaskResponseDefaultTypeInternal() {}
  union {
    SingleTaskResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleTaskResponseDefaultTypeInternal _SingleTaskResponse_default_instance_;
PROTOBUF_CONSTEXPR GetTaskCountRequest::GetTaskCountRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_ids_)*/{}
  , /*decltype(_impl_.task_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTaskCountRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTaskCountRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTaskCountRequestDefaultTypeInternal() {}
  union {
    GetTaskCountRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTaskCountRequestDefaultTypeInternal _GetTaskCountRequest_default_instance_;
PROTOBUF_CONSTEXPR SingleTaskCountResponse::SingleTaskCountResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.counts_)*/{}
  , /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.task_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingleTaskCountResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleTaskCountResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleTaskCountResponseDefaultTypeInternal() {}
  union {
    SingleTaskCountResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleTaskCountResponseDefaultTypeInternal _SingleTaskCountResponse_default_instance_;
PROTOBUF_CONSTEXPR PostLabelOrdersRequest::PostLabelOrdersRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.label_orders_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostLabelOrdersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostLabelOrdersRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostLabelOrdersRequestDefaultTypeInternal() {}
  union {
    PostLabelOrdersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostLabelOrdersRequestDefaultTypeInternal _PostLabelOrdersRequest_default_instance_;
PROTOBUF_CONSTEXPR GetLabelOrderRequest::GetLabelOrderRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.label_order_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetLabelOrderRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetLabelOrderRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetLabelOrderRequestDefaultTypeInternal() {}
  union {
    GetLabelOrderRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetLabelOrderRequestDefaultTypeInternal _GetLabelOrderRequest_default_instance_;
PROTOBUF_CONSTEXPR ListLabelOrdersRequest::ListLabelOrdersRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListLabelOrdersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListLabelOrdersRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListLabelOrdersRequestDefaultTypeInternal() {}
  union {
    ListLabelOrdersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListLabelOrdersRequestDefaultTypeInternal _ListLabelOrdersRequest_default_instance_;
PROTOBUF_CONSTEXPR PatchLabelOrdersRequest::PatchLabelOrdersRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.label_orders_)*/{}
  , /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PatchLabelOrdersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchLabelOrdersRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchLabelOrdersRequestDefaultTypeInternal() {}
  union {
    PatchLabelOrdersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchLabelOrdersRequestDefaultTypeInternal _PatchLabelOrdersRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteLabelOrdersRequest::DeleteLabelOrdersRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteLabelOrdersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteLabelOrdersRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteLabelOrdersRequestDefaultTypeInternal() {}
  union {
    DeleteLabelOrdersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteLabelOrdersRequestDefaultTypeInternal _DeleteLabelOrdersRequest_default_instance_;
PROTOBUF_CONSTEXPR MultiLabelOrderResponse::MultiLabelOrderResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.label_orders_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiLabelOrderResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiLabelOrderResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiLabelOrderResponseDefaultTypeInternal() {}
  union {
    MultiLabelOrderResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiLabelOrderResponseDefaultTypeInternal _MultiLabelOrderResponse_default_instance_;
PROTOBUF_CONSTEXPR SingleLabelOrderResponse::SingleLabelOrderResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.label_order_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingleLabelOrderResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleLabelOrderResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleLabelOrderResponseDefaultTypeInternal() {}
  union {
    SingleLabelOrderResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleLabelOrderResponseDefaultTypeInternal _SingleLabelOrderResponse_default_instance_;
PROTOBUF_CONSTEXPR PostCollectorsRequest::PostCollectorsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.collectors_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostCollectorsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostCollectorsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostCollectorsRequestDefaultTypeInternal() {}
  union {
    PostCollectorsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostCollectorsRequestDefaultTypeInternal _PostCollectorsRequest_default_instance_;
PROTOBUF_CONSTEXPR PatchCollectorsRequest::PatchCollectorsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.collectors_)*/{}
  , /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PatchCollectorsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchCollectorsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchCollectorsRequestDefaultTypeInternal() {}
  union {
    PatchCollectorsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchCollectorsRequestDefaultTypeInternal _PatchCollectorsRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteCollectorsRequest::DeleteCollectorsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.delete_all_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteCollectorsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteCollectorsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteCollectorsRequestDefaultTypeInternal() {}
  union {
    DeleteCollectorsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteCollectorsRequestDefaultTypeInternal _DeleteCollectorsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetCollectorRequest::GetCollectorRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.collector_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetCollectorRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCollectorRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCollectorRequestDefaultTypeInternal() {}
  union {
    GetCollectorRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCollectorRequestDefaultTypeInternal _GetCollectorRequest_default_instance_;
PROTOBUF_CONSTEXPR ListCollectorsRequest::ListCollectorsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListCollectorsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListCollectorsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListCollectorsRequestDefaultTypeInternal() {}
  union {
    ListCollectorsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListCollectorsRequestDefaultTypeInternal _ListCollectorsRequest_default_instance_;
PROTOBUF_CONSTEXPR MultiCollectorResponse::MultiCollectorResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.collectors_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiCollectorResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiCollectorResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiCollectorResponseDefaultTypeInternal() {}
  union {
    MultiCollectorResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiCollectorResponseDefaultTypeInternal _MultiCollectorResponse_default_instance_;
PROTOBUF_CONSTEXPR SingleCollectorResponse::SingleCollectorResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.collector_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingleCollectorResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleCollectorResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleCollectorResponseDefaultTypeInternal() {}
  union {
    SingleCollectorResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleCollectorResponseDefaultTypeInternal _SingleCollectorResponse_default_instance_;
PROTOBUF_CONSTEXPR PostStatValuesRequest::PostStatValuesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stat_values_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostStatValuesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostStatValuesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostStatValuesRequestDefaultTypeInternal() {}
  union {
    PostStatValuesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostStatValuesRequestDefaultTypeInternal _PostStatValuesRequest_default_instance_;
PROTOBUF_CONSTEXPR MultiStatValueResponse::MultiStatValueResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stat_values_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiStatValueResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiStatValueResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiStatValueResponseDefaultTypeInternal() {}
  union {
    MultiStatValueResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiStatValueResponseDefaultTypeInternal _MultiStatValueResponse_default_instance_;
PROTOBUF_CONSTEXPR PostStatValuesAggregateRequest::PostStatValuesAggregateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stat_value_aggregate_queries_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostStatValuesAggregateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostStatValuesAggregateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostStatValuesAggregateRequestDefaultTypeInternal() {}
  union {
    PostStatValuesAggregateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostStatValuesAggregateRequestDefaultTypeInternal _PostStatValuesAggregateRequest_default_instance_;
PROTOBUF_CONSTEXPR MultiStatValueAggregateResponse::MultiStatValueAggregateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stat_value_aggregate_results_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiStatValueAggregateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiStatValueAggregateResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiStatValueAggregateResponseDefaultTypeInternal() {}
  union {
    MultiStatValueAggregateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiStatValueAggregateResponseDefaultTypeInternal _MultiStatValueAggregateResponse_default_instance_;
PROTOBUF_CONSTEXPR PostTrendingMetricsViewRequest::PostTrendingMetricsViewRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.view_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.object_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostTrendingMetricsViewRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostTrendingMetricsViewRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostTrendingMetricsViewRequestDefaultTypeInternal() {}
  union {
    PostTrendingMetricsViewRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostTrendingMetricsViewRequestDefaultTypeInternal _PostTrendingMetricsViewRequest_default_instance_;
PROTOBUF_CONSTEXPR ListTrendingMetricsViewsRequest::ListTrendingMetricsViewsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.view_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListTrendingMetricsViewsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListTrendingMetricsViewsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListTrendingMetricsViewsRequestDefaultTypeInternal() {}
  union {
    ListTrendingMetricsViewsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListTrendingMetricsViewsRequestDefaultTypeInternal _ListTrendingMetricsViewsRequest_default_instance_;
PROTOBUF_CONSTEXPR MultiTrendingMetricsViewResponse::MultiTrendingMetricsViewResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.metrics_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiTrendingMetricsViewResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiTrendingMetricsViewResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiTrendingMetricsViewResponseDefaultTypeInternal() {}
  union {
    MultiTrendingMetricsViewResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiTrendingMetricsViewResponseDefaultTypeInternal _MultiTrendingMetricsViewResponse_default_instance_;
PROTOBUF_CONSTEXPR GetModuleRequest::GetModuleRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.module_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetModuleRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetModuleRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetModuleRequestDefaultTypeInternal() {}
  union {
    GetModuleRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetModuleRequestDefaultTypeInternal _GetModuleRequest_default_instance_;
PROTOBUF_CONSTEXPR ListModulesRequest::ListModulesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListModulesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListModulesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListModulesRequestDefaultTypeInternal() {}
  union {
    ListModulesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListModulesRequestDefaultTypeInternal _ListModulesRequest_default_instance_;
PROTOBUF_CONSTEXPR PostModulesRequest::PostModulesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.modules_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostModulesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostModulesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostModulesRequestDefaultTypeInternal() {}
  union {
    PostModulesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostModulesRequestDefaultTypeInternal _PostModulesRequest_default_instance_;
PROTOBUF_CONSTEXPR PatchModulesRequest::PatchModulesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.modules_)*/{}
  , /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PatchModulesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchModulesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchModulesRequestDefaultTypeInternal() {}
  union {
    PatchModulesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchModulesRequestDefaultTypeInternal _PatchModulesRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteModulesRequest::DeleteModulesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteModulesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteModulesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteModulesRequestDefaultTypeInternal() {}
  union {
    DeleteModulesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteModulesRequestDefaultTypeInternal _DeleteModulesRequest_default_instance_;
PROTOBUF_CONSTEXPR SingleModuleResponse::SingleModuleResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.module_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingleModuleResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleModuleResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleModuleResponseDefaultTypeInternal() {}
  union {
    SingleModuleResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleModuleResponseDefaultTypeInternal _SingleModuleResponse_default_instance_;
PROTOBUF_CONSTEXPR MultiModuleResponse::MultiModuleResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.modules_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiModuleResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiModuleResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiModuleResponseDefaultTypeInternal() {}
  union {
    MultiModuleResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiModuleResponseDefaultTypeInternal _MultiModuleResponse_default_instance_;
PROTOBUF_CONSTEXPR GetModuleVersionRequest::GetModuleVersionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.module_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.module_version_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetModuleVersionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetModuleVersionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetModuleVersionRequestDefaultTypeInternal() {}
  union {
    GetModuleVersionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetModuleVersionRequestDefaultTypeInternal _GetModuleVersionRequest_default_instance_;
PROTOBUF_CONSTEXPR ListModuleVersionsRequest::ListModuleVersionsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.module_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListModuleVersionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListModuleVersionsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListModuleVersionsRequestDefaultTypeInternal() {}
  union {
    ListModuleVersionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListModuleVersionsRequestDefaultTypeInternal _ListModuleVersionsRequest_default_instance_;
PROTOBUF_CONSTEXPR PostModuleVersionsRequest::PostModuleVersionsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.module_versions_)*/{}
  , /*decltype(_impl_.module_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostModuleVersionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostModuleVersionsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostModuleVersionsRequestDefaultTypeInternal() {}
  union {
    PostModuleVersionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostModuleVersionsRequestDefaultTypeInternal _PostModuleVersionsRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteModuleVersionsRequest::DeleteModuleVersionsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_)*/{}
  , /*decltype(_impl_.module_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteModuleVersionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteModuleVersionsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteModuleVersionsRequestDefaultTypeInternal() {}
  union {
    DeleteModuleVersionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteModuleVersionsRequestDefaultTypeInternal _DeleteModuleVersionsRequest_default_instance_;
PROTOBUF_CONSTEXPR SingleModuleVersionResponse::SingleModuleVersionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.module_version_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingleModuleVersionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleModuleVersionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleModuleVersionResponseDefaultTypeInternal() {}
  union {
    SingleModuleVersionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleModuleVersionResponseDefaultTypeInternal _SingleModuleVersionResponse_default_instance_;
PROTOBUF_CONSTEXPR MultiModuleVersionResponse::MultiModuleVersionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.module_versions_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiModuleVersionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiModuleVersionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiModuleVersionResponseDefaultTypeInternal() {}
  union {
    MultiModuleVersionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiModuleVersionResponseDefaultTypeInternal _MultiModuleVersionResponse_default_instance_;
PROTOBUF_CONSTEXPR GetInstalledModuleVersionRequest::GetInstalledModuleVersionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.installed_module_version_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetInstalledModuleVersionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetInstalledModuleVersionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetInstalledModuleVersionRequestDefaultTypeInternal() {}
  union {
    GetInstalledModuleVersionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetInstalledModuleVersionRequestDefaultTypeInternal _GetInstalledModuleVersionRequest_default_instance_;
PROTOBUF_CONSTEXPR ListInstalledModuleVersionsRequest::ListInstalledModuleVersionsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListInstalledModuleVersionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListInstalledModuleVersionsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListInstalledModuleVersionsRequestDefaultTypeInternal() {}
  union {
    ListInstalledModuleVersionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListInstalledModuleVersionsRequestDefaultTypeInternal _ListInstalledModuleVersionsRequest_default_instance_;
PROTOBUF_CONSTEXPR PostInstalledModuleVersionsRequest::PostInstalledModuleVersionsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.installed_module_versions_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostInstalledModuleVersionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostInstalledModuleVersionsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostInstalledModuleVersionsRequestDefaultTypeInternal() {}
  union {
    PostInstalledModuleVersionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostInstalledModuleVersionsRequestDefaultTypeInternal _PostInstalledModuleVersionsRequest_default_instance_;
PROTOBUF_CONSTEXPR PostInstalledModuleVersionsKeyRequest::PostInstalledModuleVersionsKeyRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.installed_module_version_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostInstalledModuleVersionsKeyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostInstalledModuleVersionsKeyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostInstalledModuleVersionsKeyRequestDefaultTypeInternal() {}
  union {
    PostInstalledModuleVersionsKeyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostInstalledModuleVersionsKeyRequestDefaultTypeInternal _PostInstalledModuleVersionsKeyRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteInstalledModuleVersionsRequest::DeleteInstalledModuleVersionsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteInstalledModuleVersionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteInstalledModuleVersionsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteInstalledModuleVersionsRequestDefaultTypeInternal() {}
  union {
    DeleteInstalledModuleVersionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteInstalledModuleVersionsRequestDefaultTypeInternal _DeleteInstalledModuleVersionsRequest_default_instance_;
PROTOBUF_CONSTEXPR SingleInstalledModuleVersionResponse::SingleInstalledModuleVersionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.installed_module_version_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingleInstalledModuleVersionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleInstalledModuleVersionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleInstalledModuleVersionResponseDefaultTypeInternal() {}
  union {
    SingleInstalledModuleVersionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleInstalledModuleVersionResponseDefaultTypeInternal _SingleInstalledModuleVersionResponse_default_instance_;
PROTOBUF_CONSTEXPR MultiInstalledModuleVersionResponse::MultiInstalledModuleVersionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.installed_module_versions_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiInstalledModuleVersionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiInstalledModuleVersionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiInstalledModuleVersionResponseDefaultTypeInternal() {}
  union {
    MultiInstalledModuleVersionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiInstalledModuleVersionResponseDefaultTypeInternal _MultiInstalledModuleVersionResponse_default_instance_;
PROTOBUF_CONSTEXPR PostBulkOperationsRequest::PostBulkOperationsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bulk_operations_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostBulkOperationsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostBulkOperationsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostBulkOperationsRequestDefaultTypeInternal() {}
  union {
    PostBulkOperationsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostBulkOperationsRequestDefaultTypeInternal _PostBulkOperationsRequest_default_instance_;
PROTOBUF_CONSTEXPR ListBulkOperationsRequest::ListBulkOperationsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListBulkOperationsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListBulkOperationsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListBulkOperationsRequestDefaultTypeInternal() {}
  union {
    ListBulkOperationsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListBulkOperationsRequestDefaultTypeInternal _ListBulkOperationsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetBulkOperationRequest::GetBulkOperationRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetBulkOperationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBulkOperationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBulkOperationRequestDefaultTypeInternal() {}
  union {
    GetBulkOperationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBulkOperationRequestDefaultTypeInternal _GetBulkOperationRequest_default_instance_;
PROTOBUF_CONSTEXPR CancelBulkOperationRequest::CancelBulkOperationRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CancelBulkOperationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CancelBulkOperationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CancelBulkOperationRequestDefaultTypeInternal() {}
  union {
    CancelBulkOperationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CancelBulkOperationRequestDefaultTypeInternal _CancelBulkOperationRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteBulkOperationRequest::DeleteBulkOperationRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteBulkOperationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteBulkOperationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteBulkOperationRequestDefaultTypeInternal() {}
  union {
    DeleteBulkOperationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteBulkOperationRequestDefaultTypeInternal _DeleteBulkOperationRequest_default_instance_;
PROTOBUF_CONSTEXPR SingleBulkOperationsResponse::SingleBulkOperationsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.bulk_operation_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingleBulkOperationsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleBulkOperationsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleBulkOperationsResponseDefaultTypeInternal() {}
  union {
    SingleBulkOperationsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleBulkOperationsResponseDefaultTypeInternal _SingleBulkOperationsResponse_default_instance_;
PROTOBUF_CONSTEXPR MultiBulkOperationsResponse::MultiBulkOperationsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bulk_operation_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiBulkOperationsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiBulkOperationsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiBulkOperationsResponseDefaultTypeInternal() {}
  union {
    MultiBulkOperationsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiBulkOperationsResponseDefaultTypeInternal _MultiBulkOperationsResponse_default_instance_;
PROTOBUF_CONSTEXPR ListInputsAddJobsRequest::ListInputsAddJobsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListInputsAddJobsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListInputsAddJobsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListInputsAddJobsRequestDefaultTypeInternal() {}
  union {
    ListInputsAddJobsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListInputsAddJobsRequestDefaultTypeInternal _ListInputsAddJobsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetInputsAddJobRequest::GetInputsAddJobRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetInputsAddJobRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetInputsAddJobRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetInputsAddJobRequestDefaultTypeInternal() {}
  union {
    GetInputsAddJobRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetInputsAddJobRequestDefaultTypeInternal _GetInputsAddJobRequest_default_instance_;
PROTOBUF_CONSTEXPR MultiInputsAddJobResponse::MultiInputsAddJobResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.inputs_add_jobs_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiInputsAddJobResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiInputsAddJobResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiInputsAddJobResponseDefaultTypeInternal() {}
  union {
    MultiInputsAddJobResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiInputsAddJobResponseDefaultTypeInternal _MultiInputsAddJobResponse_default_instance_;
PROTOBUF_CONSTEXPR SingleInputsAddJobResponse::SingleInputsAddJobResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.inputs_add_job_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingleInputsAddJobResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleInputsAddJobResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleInputsAddJobResponseDefaultTypeInternal() {}
  union {
    SingleInputsAddJobResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleInputsAddJobResponseDefaultTypeInternal _SingleInputsAddJobResponse_default_instance_;
PROTOBUF_CONSTEXPR PostUploadsRequest::PostUploadsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uploads_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostUploadsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostUploadsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostUploadsRequestDefaultTypeInternal() {}
  union {
    PostUploadsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostUploadsRequestDefaultTypeInternal _PostUploadsRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteUploadsRequest::DeleteUploadsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_)*/{}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteUploadsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteUploadsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteUploadsRequestDefaultTypeInternal() {}
  union {
    DeleteUploadsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteUploadsRequestDefaultTypeInternal _DeleteUploadsRequest_default_instance_;
PROTOBUF_CONSTEXPR ListUploadsRequest::ListUploadsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListUploadsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListUploadsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListUploadsRequestDefaultTypeInternal() {}
  union {
    ListUploadsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListUploadsRequestDefaultTypeInternal _ListUploadsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetUploadRequest::GetUploadRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.upload_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetUploadRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetUploadRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetUploadRequestDefaultTypeInternal() {}
  union {
    GetUploadRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetUploadRequestDefaultTypeInternal _GetUploadRequest_default_instance_;
PROTOBUF_CONSTEXPR SingleUploadResponse::SingleUploadResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.upload_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingleUploadResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleUploadResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleUploadResponseDefaultTypeInternal() {}
  union {
    SingleUploadResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleUploadResponseDefaultTypeInternal _SingleUploadResponse_default_instance_;
PROTOBUF_CONSTEXPR MultiUploadResponse::MultiUploadResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uploads_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiUploadResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiUploadResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiUploadResponseDefaultTypeInternal() {}
  union {
    MultiUploadResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiUploadResponseDefaultTypeInternal _MultiUploadResponse_default_instance_;
PROTOBUF_CONSTEXPR PutUploadContentPartsRequest::PutUploadContentPartsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_parts_)*/{}
  , /*decltype(_impl_.upload_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PutUploadContentPartsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PutUploadContentPartsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PutUploadContentPartsRequestDefaultTypeInternal() {}
  union {
    PutUploadContentPartsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PutUploadContentPartsRequestDefaultTypeInternal _PutUploadContentPartsRequest_default_instance_;
PROTOBUF_CONSTEXPR PostInputsDataSourcesRequest::PostInputsDataSourcesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_sources_)*/{}
  , /*decltype(_impl_.call_back_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_pat_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PostInputsDataSourcesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostInputsDataSourcesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostInputsDataSourcesRequestDefaultTypeInternal() {}
  union {
    PostInputsDataSourcesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostInputsDataSourcesRequestDefaultTypeInternal _PostInputsDataSourcesRequest_default_instance_;
PROTOBUF_CONSTEXPR GetInputsExtractionJobRequest::GetInputsExtractionJobRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.inputs_extraction_job_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetInputsExtractionJobRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetInputsExtractionJobRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetInputsExtractionJobRequestDefaultTypeInternal() {}
  union {
    GetInputsExtractionJobRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetInputsExtractionJobRequestDefaultTypeInternal _GetInputsExtractionJobRequest_default_instance_;
PROTOBUF_CONSTEXPR ListInputsExtractionJobsRequest::ListInputsExtractionJobsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_app_id_)*/nullptr
  , /*decltype(_impl_.page_)*/0u
  , /*decltype(_impl_.per_page_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListInputsExtractionJobsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListInputsExtractionJobsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListInputsExtractionJobsRequestDefaultTypeInternal() {}
  union {
    ListInputsExtractionJobsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListInputsExtractionJobsRequestDefaultTypeInternal _ListInputsExtractionJobsRequest_default_instance_;
PROTOBUF_CONSTEXPR SingleInputsExtractionJobResponse::SingleInputsExtractionJobResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.inputs_extraction_job_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingleInputsExtractionJobResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleInputsExtractionJobResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleInputsExtractionJobResponseDefaultTypeInternal() {}
  union {
    SingleInputsExtractionJobResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleInputsExtractionJobResponseDefaultTypeInternal _SingleInputsExtractionJobResponse_default_instance_;
PROTOBUF_CONSTEXPR MultiInputsExtractionJobResponse::MultiInputsExtractionJobResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.inputs_extraction_jobs_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiInputsExtractionJobResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiInputsExtractionJobResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiInputsExtractionJobResponseDefaultTypeInternal() {}
  union {
    MultiInputsExtractionJobResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiInputsExtractionJobResponseDefaultTypeInternal _MultiInputsExtractionJobResponse_default_instance_;
}  // namespace api
}  // namespace clarifai
static ::_pb::Metadata file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[292];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_proto_2fclarifai_2fapi_2fservice_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_proto_2fclarifai_2fapi_2fservice_2eproto = nullptr;

const uint32_t TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Pagination, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Pagination, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Pagination, _impl_.per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAnnotationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAnnotationRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAnnotationRequest, _impl_.annotation_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAnnotationRequest, _impl_.input_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, _impl_.ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, _impl_.input_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, _impl_.user_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, _impl_.model_version_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, _impl_.statuses_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, _impl_.list_all_annotations_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, _impl_.return_model_output_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, _impl_.per_page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, _impl_.task_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationsRequest, _impl_.annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsRequest, _impl_.annotations_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsRequest, _impl_.action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsStatusRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsStatusRequest, _impl_.status_code_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsStatusRequest, _impl_.user_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsStatusRequest, _impl_.task_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsStatusRequest, _impl_.action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsStatusResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsStatusResponse, _impl_.user_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsStatusResponse, _impl_.updated_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationRequest, _impl_.input_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationRequest, _impl_.annotation_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationsRequest, _impl_.ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationsRequest, _impl_.input_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAnnotationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAnnotationResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAnnotationResponse, _impl_.annotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAnnotationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAnnotationResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAnnotationResponse, _impl_.annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAppRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAppRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAppRequest, _impl_.additional_fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppsRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppsRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppsRequest, _impl_.per_page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppsRequest, _impl_.sort_ascending_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppsRequest, _impl_.query_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppsRequest, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppsRequest, _impl_.featured_only_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppsRequest, _impl_.starred_only_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppsRequest, _impl_.additional_fields_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppsRequest, _impl_.sort_by_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAppsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAppsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAppsRequest, _impl_.apps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAppRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAppRequest, _impl_.user_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppsRequest, _impl_.apps_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppsRequest, _impl_.action_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppsRequest, _impl_.metadata_action_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppsRequest, _impl_.reindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppRequest, _impl_.app_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppRequest, _impl_.action_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppRequest, _impl_.metadata_action_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppRequest, _impl_.reindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppsIdsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppsIdsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppsIdsRequest, _impl_.ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppsIdsRequest, _impl_.action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAppsSearchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAppsSearchesRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAppsSearchesRequest, _impl_.app_query_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAppsSearchesRequest, _impl_.pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAppResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAppResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAppResponse, _impl_.app_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAppResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAppResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAppResponse, _impl_.apps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollaboratorsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollaboratorsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollaboratorsRequest, _impl_.list_all_collaborators_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollaboratorsRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollaboratorsRequest, _impl_.per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostCollaboratorsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostCollaboratorsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostCollaboratorsRequest, _impl_.collaborators_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchCollaboratorsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchCollaboratorsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchCollaboratorsRequest, _impl_.collaborators_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchCollaboratorsRequest, _impl_.action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteCollaboratorsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteCollaboratorsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteCollaboratorsRequest, _impl_.collaborator_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteCollaboratorsRequest, _impl_.user_emails_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiCollaboratorsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiCollaboratorsResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiCollaboratorsResponse, _impl_.collaborators_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollaborationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollaborationsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollaborationsRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollaborationsRequest, _impl_.per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiCollaborationsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiCollaborationsResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiCollaborationsResponse, _impl_.collaborations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetStatusCodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetStatusCodeRequest, _impl_.status_code_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListStatusCodesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleStatusCodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleStatusCodeResponse, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiStatusCodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiStatusCodeResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiStatusCodeResponse, _impl_.statuses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptRequest, _impl_.concept_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptsRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptsRequest, _impl_.per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelConceptsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelConceptsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelConceptsRequest, _impl_.model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelConceptsRequest, _impl_.version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelConceptsRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelConceptsRequest, _impl_.per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptsSearchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptsSearchesRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptsSearchesRequest, _impl_.concept_query_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptsSearchesRequest, _impl_.pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptsRequest, _impl_.concepts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchConceptsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchConceptsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchConceptsRequest, _impl_.concepts_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchConceptsRequest, _impl_.action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptCountsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptCountsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptCountsRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptCountsRequest, _impl_.per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleConceptResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleConceptResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleConceptResponse, _impl_.concept_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptResponse, _impl_.concepts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptCountResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptCountResponse, _impl_.concept_counts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptRelationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptRelationsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptRelationsRequest, _impl_.concept_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptRelationsRequest, _impl_.predicate_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptRelationsRequest, _impl_.knowledge_graph_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptRelationsRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptRelationsRequest, _impl_.per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptRelationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptRelationsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptRelationsRequest, _impl_.concept_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptRelationsRequest, _impl_.concept_relations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteConceptRelationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteConceptRelationsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteConceptRelationsRequest, _impl_.concept_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteConceptRelationsRequest, _impl_.ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListKnowledgeGraphsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListKnowledgeGraphsRequest, _impl_.user_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostKnowledgeGraphsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostKnowledgeGraphsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostKnowledgeGraphsRequest, _impl_.knowledge_graphs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptMappingJobsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptMappingJobsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptMappingJobsRequest, _impl_.concept_mapping_jobs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptRelationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptRelationResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptRelationResponse, _impl_.concept_relations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiKnowledgeGraphResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiKnowledgeGraphResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiKnowledgeGraphResponse, _impl_.knowledge_graphs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptMappingJobResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptMappingJobResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptMappingJobResponse, _impl_.ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptLanguageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptLanguageRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptLanguageRequest, _impl_.concept_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptLanguageRequest, _impl_.language_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptLanguagesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptLanguagesRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptLanguagesRequest, _impl_.concept_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptLanguagesRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptLanguagesRequest, _impl_.per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchConceptLanguagesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchConceptLanguagesRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchConceptLanguagesRequest, _impl_.concept_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchConceptLanguagesRequest, _impl_.concept_languages_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchConceptLanguagesRequest, _impl_.action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptLanguagesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptLanguagesRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptLanguagesRequest, _impl_.concept_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptLanguagesRequest, _impl_.concept_languages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleConceptLanguageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleConceptLanguageResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleConceptLanguageResponse, _impl_.concept_language_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptLanguageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptLanguageResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptLanguageResponse, _impl_.concept_languages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInputRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInputRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInputRequest, _impl_.input_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInputSamplesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInputSamplesRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInputSamplesRequest, _impl_.task_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInputSamplesRequest, _impl_.user_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListInputsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListInputsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListInputsRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListInputsRequest, _impl_.per_page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListInputsRequest, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListInputsRequest, _impl_.ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StreamInputsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StreamInputsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StreamInputsRequest, _impl_.per_page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StreamInputsRequest, _impl_.last_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StreamInputsRequest, _impl_.order_by_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StreamInputsRequest, _impl_.descending_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsRequest, _impl_.inputs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsRequest, _impl_.inputs_add_job_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchInputsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchInputsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchInputsRequest, _impl_.inputs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchInputsRequest, _impl_.action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteInputRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteInputRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteInputRequest, _impl_.input_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteInputsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteInputsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteInputsRequest, _impl_.ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleInputResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleInputResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleInputResponse, _impl_.input_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiInputResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiInputResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiInputResponse, _impl_.inputs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiInputResponse, _impl_.inputs_add_job_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiInputAnnotationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiInputAnnotationResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiInputAnnotationResponse, _impl_.hits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleInputCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleInputCountResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleInputCountResponse, _impl_.counts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInputCountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInputCountRequest, _impl_.user_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetsRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetsRequest, _impl_.per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetDatasetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetDatasetRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetDatasetRequest, _impl_.dataset_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostDatasetsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostDatasetsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostDatasetsRequest, _impl_.datasets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchDatasetsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchDatasetsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchDatasetsRequest, _impl_.datasets_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchDatasetsRequest, _impl_.action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchDatasetIdsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchDatasetIdsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchDatasetIdsRequest, _impl_.ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchDatasetIdsRequest, _impl_.action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteDatasetsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteDatasetsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteDatasetsRequest, _impl_.dataset_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiDatasetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiDatasetResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiDatasetResponse, _impl_.datasets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleDatasetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleDatasetResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleDatasetResponse, _impl_.dataset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetInputsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetInputsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetInputsRequest, _impl_.dataset_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetInputsRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetInputsRequest, _impl_.per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetDatasetInputRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetDatasetInputRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetDatasetInputRequest, _impl_.dataset_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetDatasetInputRequest, _impl_.input_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostDatasetInputsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostDatasetInputsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostDatasetInputsRequest, _impl_.dataset_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostDatasetInputsRequest, _impl_.dataset_inputs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostDatasetInputsRequest, _impl_.search_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteDatasetInputsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteDatasetInputsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteDatasetInputsRequest, _impl_.dataset_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteDatasetInputsRequest, _impl_.input_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiDatasetInputResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiDatasetInputResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiDatasetInputResponse, _impl_.dataset_inputs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiDatasetInputResponse, _impl_.dataset_inputs_search_add_job_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleDatasetInputResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleDatasetInputResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleDatasetInputResponse, _impl_.dataset_input_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetVersionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetVersionsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetVersionsRequest, _impl_.dataset_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetVersionsRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetVersionsRequest, _impl_.per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetDatasetVersionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetDatasetVersionRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetDatasetVersionRequest, _impl_.dataset_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetDatasetVersionRequest, _impl_.dataset_version_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetVersionMetricsGroupsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetVersionMetricsGroupsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetVersionMetricsGroupsRequest, _impl_.dataset_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetVersionMetricsGroupsRequest, _impl_.dataset_version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetVersionMetricsGroupsRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetVersionMetricsGroupsRequest, _impl_.per_page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetVersionMetricsGroupsRequest, _impl_.parent_paths_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetVersionMetricsGroupsRequest, _impl_.types_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetVersionMetricsGroupsRequest, _impl_.values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostDatasetVersionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostDatasetVersionsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostDatasetVersionsRequest, _impl_.dataset_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostDatasetVersionsRequest, _impl_.dataset_versions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchDatasetVersionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchDatasetVersionsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchDatasetVersionsRequest, _impl_.dataset_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchDatasetVersionsRequest, _impl_.dataset_versions_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchDatasetVersionsRequest, _impl_.action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteDatasetVersionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteDatasetVersionsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteDatasetVersionsRequest, _impl_.dataset_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteDatasetVersionsRequest, _impl_.dataset_version_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PutDatasetVersionExportsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PutDatasetVersionExportsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PutDatasetVersionExportsRequest, _impl_.dataset_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PutDatasetVersionExportsRequest, _impl_.dataset_version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PutDatasetVersionExportsRequest, _impl_.exports_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiDatasetVersionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiDatasetVersionResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiDatasetVersionResponse, _impl_.dataset_versions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiDatasetVersionExportResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiDatasetVersionExportResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiDatasetVersionExportResponse, _impl_.exports_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiDatasetVersionMetricsGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiDatasetVersionMetricsGroupResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiDatasetVersionMetricsGroupResponse, _impl_.dataset_version_metrics_groups_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleDatasetVersionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleDatasetVersionResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleDatasetVersionResponse, _impl_.dataset_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetDatasetInputsSearchAddJobRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetDatasetInputsSearchAddJobRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetDatasetInputsSearchAddJobRequest, _impl_.job_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleDatasetInputsSearchAddJobResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleDatasetInputsSearchAddJobResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleDatasetInputsSearchAddJobResponse, _impl_.job_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelOutputsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelOutputsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelOutputsRequest, _impl_.model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelOutputsRequest, _impl_.version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelOutputsRequest, _impl_.inputs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelOutputsRequest, _impl_.model_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelInputsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelInputsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelInputsRequest, _impl_.model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelInputsRequest, _impl_.version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelInputsRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelInputsRequest, _impl_.per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetKeyRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetKeyRequest, _impl_.key_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListKeysRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListKeysRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListKeysRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListKeysRequest, _impl_.per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppKeysRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppKeysRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppKeysRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppKeysRequest, _impl_.per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostKeysRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostKeysRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostKeysRequest, _impl_.keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteKeyRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteKeyRequest, _impl_.key_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchKeysRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchKeysRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchKeysRequest, _impl_.keys_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchKeysRequest, _impl_.action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleKeyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleKeyResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleKeyResponse, _impl_.key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiKeyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiKeyResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiKeyResponse, _impl_.keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelRequest, _impl_.model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelRequest, _impl_.version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelRequest, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelRequest, _impl_.trained_before_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelRequest, _impl_.additional_fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, _impl_.per_page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, _impl_.sort_ascending_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, _impl_.query_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, _impl_.filter_by_user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, _impl_.model_type_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, _impl_.trained_only_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, _impl_.input_fields_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, _impl_.output_fields_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, _impl_.license_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, _impl_.featured_only_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, _impl_.starred_only_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, _impl_.toolkits_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, _impl_.use_cases_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, _impl_.languages_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, _impl_.additional_fields_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, _impl_.dont_fetch_from_main_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, _impl_.sort_by_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelToolkitsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelToolkitsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelToolkitsRequest, _impl_.model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelToolkitsRequest, _impl_.toolkits_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelToolkitsRequest, _impl_.action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelCheckConsentsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelCheckConsentsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelCheckConsentsRequest, _impl_.model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelCheckConsentsRequest, _impl_.check_consents_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelCheckConsentsRequest, _impl_.action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelUseCasesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelUseCasesRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelUseCasesRequest, _impl_.model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelUseCasesRequest, _impl_.usecases_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelUseCasesRequest, _impl_.action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelLanguagesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelLanguagesRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelLanguagesRequest, _impl_.model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelLanguagesRequest, _impl_.languages_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelLanguagesRequest, _impl_.action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelToolkitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelToolkitResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelToolkitResponse, _impl_.toolkits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelCheckConsentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelCheckConsentResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelCheckConsentResponse, _impl_.check_consents_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelUseCaseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelUseCaseResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelUseCaseResponse, _impl_.usecases_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelLanguageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelLanguageResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelLanguageResponse, _impl_.languages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelsRequest, _impl_.model_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelsRequest, _impl_.models_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelsRequest, _impl_.models_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelsRequest, _impl_.action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::IdUpdateSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::IdUpdateSource, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::IdUpdateSource, _impl_.new_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelIdsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelIdsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelIdsRequest, _impl_.ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelIdsRequest, _impl_.action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelRequest, _impl_.model_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelsRequest, _impl_.ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelsRequest, _impl_.delete_all_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelsSearchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelsSearchesRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelsSearchesRequest, _impl_.model_query_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelsSearchesRequest, _impl_.pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelResponse, _impl_.model_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelResponse, _impl_.models_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelVersionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelVersionsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelVersionsRequest, _impl_.model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelVersionsRequest, _impl_.model_versions_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelVersionsRequest, _impl_.action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionRequest, _impl_.model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionRequest, _impl_.version_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionsRequest, _impl_.model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionsRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionsRequest, _impl_.per_page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionsRequest, _impl_.concept_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelVersionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelVersionRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelVersionRequest, _impl_.model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelVersionRequest, _impl_.version_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelVersionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelVersionResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelVersionResponse, _impl_.model_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelVersionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelVersionResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelVersionResponse, _impl_.model_versions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsRequest, _impl_.model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsRequest, _impl_.model_versions_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsRequest, _impl_.search_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsRequest, _impl_.train_search_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsRequest, _impl_.test_search_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsRequest, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsRequest, _impl_.dataset_version_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsRequest, _impl_.eval_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowVersionsUnPublishRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowVersionsUnPublishRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowVersionsUnPublishRequest, _impl_.workflow_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowVersionsUnPublishRequest, _impl_.publications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowVersionsPublishRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowVersionsPublishRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowVersionsPublishRequest, _impl_.workflow_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowVersionsPublishRequest, _impl_.publications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersionPublishRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersionPublishRequest, _impl_.version_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersionUnPublishRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersionUnPublishRequest, _impl_.version_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersionPublishRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersionPublishRequest, _impl_.version_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsPublishRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsPublishRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsPublishRequest, _impl_.model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsPublishRequest, _impl_.publications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersionUnpublishRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersionUnpublishRequest, _impl_.version_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsUnPublishRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsUnPublishRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsUnPublishRequest, _impl_.model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsUnPublishRequest, _impl_.publications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionEvaluationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionEvaluationsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionEvaluationsRequest, _impl_.model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionEvaluationsRequest, _impl_.model_version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionEvaluationsRequest, _impl_.eval_metrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionEvaluationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionEvaluationsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionEvaluationsRequest, _impl_.model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionEvaluationsRequest, _impl_.model_version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionEvaluationsRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionEvaluationsRequest, _impl_.per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionEvaluationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionEvaluationRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionEvaluationRequest, _impl_.model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionEvaluationRequest, _impl_.model_version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionEvaluationRequest, _impl_.evaluation_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionEvaluationRequest, _impl_.fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleEvalMetricsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleEvalMetricsResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleEvalMetricsResponse, _impl_.eval_metrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiEvalMetricsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiEvalMetricsResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiEvalMetricsResponse, _impl_.eval_metrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionMetricsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionMetricsRequest, _impl_.model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionMetricsRequest, _impl_.version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionMetricsRequest, _impl_.test_search_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionMetricsRequest, _impl_.eval_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionMetricsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionMetricsRequest, _impl_.model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionMetricsRequest, _impl_.version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionMetricsRequest, _impl_.fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelTypeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelTypeRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelTypeRequest, _impl_.model_type_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelTypesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelTypesRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelTypesRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelTypesRequest, _impl_.per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListOpenSourceLicensesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListOpenSourceLicensesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListOpenSourceLicensesResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListOpenSourceLicensesResponse, _impl_.licenses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelTypeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelTypeResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelTypeResponse, _impl_.model_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelTypeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelTypeResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelTypeResponse, _impl_.model_types_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelTypeResponse, _impl_.model_importers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionInputExampleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionInputExampleRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionInputExampleRequest, _impl_.model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionInputExampleRequest, _impl_.model_version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionInputExampleRequest, _impl_.example_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionInputExamplesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionInputExamplesRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionInputExamplesRequest, _impl_.model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionInputExamplesRequest, _impl_.model_version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionInputExamplesRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionInputExamplesRequest, _impl_.per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelVersionInputExampleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelVersionInputExampleResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelVersionInputExampleResponse, _impl_.model_version_input_example_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelVersionInputExampleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelVersionInputExampleResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelVersionInputExampleResponse, _impl_.model_version_input_examples_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelReferencesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelReferencesRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelReferencesRequest, _impl_.model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelReferencesRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelReferencesRequest, _impl_.per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelReferenceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelReferenceResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelReferenceResponse, _impl_.model_references_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiOutputResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiOutputResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiOutputResponse, _impl_.outputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListScopesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListScopesRequest, _impl_.key_type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListScopesRequest, _impl_.user_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MyScopesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MyScopesRequest, _impl_.user_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MyScopesUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MyScopesUserRequest, _impl_.user_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MyScopesRootRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeDepsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeDepsResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeDepsResponse, _impl_.scope_deps_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeDepsResponse, _impl_.endpoint_deps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeResponse, _impl_.scopes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeResponse, _impl_.app_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeResponse, _impl_.endpoints_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeResponse, _impl_.user_feature_flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeUserResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeUserResponse, _impl_.scopes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeUserResponse, _impl_.endpoints_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeUserResponse, _impl_.user_feature_flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeRootResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeRootResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeRootResponse, _impl_.scopes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeRootResponse, _impl_.endpoints_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeRootResponse, _impl_.user_feature_flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetSearchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetSearchRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetSearchRequest, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListSearchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListSearchesRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListSearchesRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListSearchesRequest, _impl_.per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSearchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSearchesRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSearchesRequest, _impl_.query_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSearchesRequest, _impl_.searches_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSearchesRequest, _impl_.pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchInputsSearchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchInputsSearchesRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchInputsSearchesRequest, _impl_.searches_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchInputsSearchesRequest, _impl_.action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsSearchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsSearchesRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsSearchesRequest, _impl_.searches_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsSearchesRequest, _impl_.action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchSearchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchSearchesRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchSearchesRequest, _impl_.searches_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchSearchesRequest, _impl_.action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSearchesByIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSearchesByIDRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSearchesByIDRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSearchesByIDRequest, _impl_.pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteSearchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteSearchRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteSearchRequest, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationsSearchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationsSearchesRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationsSearchesRequest, _impl_.searches_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationsSearchesRequest, _impl_.pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationSearchMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationSearchMetricsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationSearchMetricsRequest, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsSearchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsSearchesRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsSearchesRequest, _impl_.searches_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsSearchesRequest, _impl_.pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleSearchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleSearchResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleSearchResponse, _impl_.search_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiSearchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiSearchResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiSearchResponse, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiSearchResponse, _impl_.hits_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiSearchResponse, _impl_.query_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiSearchResponse, _impl_.searches_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationSearchMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationSearchMetricsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationSearchMetricsRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationSearchMetricsRequest, _impl_.ground_truth_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationSearchMetricsRequest, _impl_.search_to_eval_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationSearchMetricsRequest, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationSearchMetricsRequest, _impl_.evaluation_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAnnotationSearchMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAnnotationSearchMetricsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAnnotationSearchMetricsRequest, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationSearchMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationSearchMetricsRequest, _impl_.user_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAnnotationSearchMetricsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAnnotationSearchMetricsResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAnnotationSearchMetricsResponse, _impl_.annotation_search_metrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationFiltersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationFiltersRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationFiltersRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationFiltersRequest, _impl_.per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAnnotationFilterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAnnotationFilterRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAnnotationFilterRequest, _impl_.annotation_filter_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationFiltersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationFiltersRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationFiltersRequest, _impl_.annotation_filters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationFiltersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationFiltersRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationFiltersRequest, _impl_.annotation_filters_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationFiltersRequest, _impl_.action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationFiltersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationFiltersRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationFiltersRequest, _impl_.annotation_filter_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAnnotationFilterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAnnotationFilterResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAnnotationFilterResponse, _impl_.annotation_filters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAnnotationFilterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAnnotationFilterResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAnnotationFilterResponse, _impl_.annotation_filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostValidatePasswordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostValidatePasswordRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostValidatePasswordRequest, _impl_.password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SinglePasswordValidationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SinglePasswordValidationResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SinglePasswordValidationResponse, _impl_.password_violations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetWorkflowRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetWorkflowRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetWorkflowRequest, _impl_.workflow_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetWorkflowRequest, _impl_.favor_clarifai_workflows_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetWorkflowRequest, _impl_.additional_fields_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetWorkflowRequest, _impl_.exclude_clarifai_workflows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowsRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowsRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowsRequest, _impl_.per_page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowsRequest, _impl_.sort_ascending_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowsRequest, _impl_.query_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowsRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowsRequest, _impl_.featured_only_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowsRequest, _impl_.starred_only_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowsRequest, _impl_.additional_fields_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowsRequest, _impl_.search_term_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowsRequest, _impl_.sort_by_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowsRequest, _impl_.workflows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchWorkflowsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchWorkflowsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchWorkflowsRequest, _impl_.workflows_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchWorkflowsRequest, _impl_.action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchWorkflowIdsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchWorkflowIdsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchWorkflowIdsRequest, _impl_.ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchWorkflowIdsRequest, _impl_.action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteWorkflowRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteWorkflowRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteWorkflowRequest, _impl_.workflow_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteWorkflowsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteWorkflowsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteWorkflowsRequest, _impl_.ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteWorkflowsRequest, _impl_.delete_all_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleWorkflowResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleWorkflowResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleWorkflowResponse, _impl_.workflow_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiWorkflowResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiWorkflowResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiWorkflowResponse, _impl_.workflows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsRequest, _impl_.workflow_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsRequest, _impl_.version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsRequest, _impl_.inputs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsRequest, _impl_.output_config_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsRequest, _impl_.favor_clarifai_workflows_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsRequest, _impl_.workflow_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsResponse, _impl_.workflow_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsResponse, _impl_.results_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsResponse, _impl_.workflow_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityRequest, _impl_.workflow_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityRequest, _impl_.version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityRequest, _impl_.model_version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityRequest, _impl_.probe_inputs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityRequest, _impl_.pool_inputs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityRequest, _impl_.favor_clarifai_workflows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityResponse, _impl_.results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowVersionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowVersionsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowVersionsRequest, _impl_.workflow_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowVersionsRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowVersionsRequest, _impl_.per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetWorkflowVersionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetWorkflowVersionRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetWorkflowVersionRequest, _impl_.workflow_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetWorkflowVersionRequest, _impl_.workflow_version_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteWorkflowVersionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteWorkflowVersionsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteWorkflowVersionsRequest, _impl_.workflow_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteWorkflowVersionsRequest, _impl_.workflow_version_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchWorkflowVersionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchWorkflowVersionsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchWorkflowVersionsRequest, _impl_.workflow_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchWorkflowVersionsRequest, _impl_.workflow_versions_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchWorkflowVersionsRequest, _impl_.action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiWorkflowVersionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiWorkflowVersionResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiWorkflowVersionResponse, _impl_.workflow_versions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleWorkflowVersionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleWorkflowVersionResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleWorkflowVersionResponse, _impl_.workflow_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAppDuplicationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAppDuplicationsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAppDuplicationsRequest, _impl_.app_duplications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAppDuplicationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAppDuplicationRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAppDuplicationRequest, _impl_.app_duplication_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppDuplicationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppDuplicationsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppDuplicationsRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppDuplicationsRequest, _impl_.per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAppDuplicationsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAppDuplicationsResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAppDuplicationsResponse, _impl_.app_duplications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAppDuplicationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAppDuplicationResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAppDuplicationResponse, _impl_.app_duplication_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostTasksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostTasksRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostTasksRequest, _impl_.tasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetTaskRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetTaskRequest, _impl_.task_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetTaskRequest, _impl_.additional_fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTasksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTasksRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTasksRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTasksRequest, _impl_.per_page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTasksRequest, _impl_.worker_user_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTasksRequest, _impl_.review_user_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTasksRequest, _impl_.label_order_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTasksRequest, _impl_.including_label_order_tasks_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTasksRequest, _impl_.additional_fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchTasksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchTasksRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchTasksRequest, _impl_.tasks_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchTasksRequest, _impl_.action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteTasksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteTasksRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteTasksRequest, _impl_.ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiTaskResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiTaskResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiTaskResponse, _impl_.tasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleTaskResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleTaskResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleTaskResponse, _impl_.task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetTaskCountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetTaskCountRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetTaskCountRequest, _impl_.task_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetTaskCountRequest, _impl_.user_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleTaskCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleTaskCountResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleTaskCountResponse, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleTaskCountResponse, _impl_.task_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleTaskCountResponse, _impl_.counts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostLabelOrdersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostLabelOrdersRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostLabelOrdersRequest, _impl_.label_orders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetLabelOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetLabelOrderRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetLabelOrderRequest, _impl_.label_order_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListLabelOrdersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListLabelOrdersRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListLabelOrdersRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListLabelOrdersRequest, _impl_.per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchLabelOrdersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchLabelOrdersRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchLabelOrdersRequest, _impl_.label_orders_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchLabelOrdersRequest, _impl_.action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteLabelOrdersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteLabelOrdersRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteLabelOrdersRequest, _impl_.ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiLabelOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiLabelOrderResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiLabelOrderResponse, _impl_.label_orders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleLabelOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleLabelOrderResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleLabelOrderResponse, _impl_.label_order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostCollectorsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostCollectorsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostCollectorsRequest, _impl_.collectors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchCollectorsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchCollectorsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchCollectorsRequest, _impl_.collectors_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchCollectorsRequest, _impl_.action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteCollectorsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteCollectorsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteCollectorsRequest, _impl_.ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteCollectorsRequest, _impl_.delete_all_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetCollectorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetCollectorRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetCollectorRequest, _impl_.collector_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollectorsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollectorsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollectorsRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollectorsRequest, _impl_.per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiCollectorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiCollectorResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiCollectorResponse, _impl_.collectors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleCollectorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleCollectorResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleCollectorResponse, _impl_.collector_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostStatValuesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostStatValuesRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostStatValuesRequest, _impl_.stat_values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiStatValueResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiStatValueResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiStatValueResponse, _impl_.stat_values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostStatValuesAggregateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostStatValuesAggregateRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostStatValuesAggregateRequest, _impl_.stat_value_aggregate_queries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiStatValueAggregateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiStatValueAggregateResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiStatValueAggregateResponse, _impl_.stat_value_aggregate_results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostTrendingMetricsViewRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostTrendingMetricsViewRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostTrendingMetricsViewRequest, _impl_.view_type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostTrendingMetricsViewRequest, _impl_.object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTrendingMetricsViewsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTrendingMetricsViewsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTrendingMetricsViewsRequest, _impl_.view_type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTrendingMetricsViewsRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTrendingMetricsViewsRequest, _impl_.per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiTrendingMetricsViewResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiTrendingMetricsViewResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiTrendingMetricsViewResponse, _impl_.metrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModuleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModuleRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModuleRequest, _impl_.module_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModulesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModulesRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModulesRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModulesRequest, _impl_.per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModulesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModulesRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModulesRequest, _impl_.modules_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModulesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModulesRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModulesRequest, _impl_.modules_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModulesRequest, _impl_.action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModulesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModulesRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModulesRequest, _impl_.ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModuleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModuleResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModuleResponse, _impl_.module_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModuleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModuleResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModuleResponse, _impl_.modules_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModuleVersionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModuleVersionRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModuleVersionRequest, _impl_.module_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModuleVersionRequest, _impl_.module_version_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModuleVersionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModuleVersionsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModuleVersionsRequest, _impl_.module_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModuleVersionsRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModuleVersionsRequest, _impl_.per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModuleVersionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModuleVersionsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModuleVersionsRequest, _impl_.module_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModuleVersionsRequest, _impl_.module_versions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModuleVersionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModuleVersionsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModuleVersionsRequest, _impl_.module_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModuleVersionsRequest, _impl_.ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModuleVersionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModuleVersionResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModuleVersionResponse, _impl_.module_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModuleVersionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModuleVersionResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModuleVersionResponse, _impl_.module_versions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInstalledModuleVersionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInstalledModuleVersionRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInstalledModuleVersionRequest, _impl_.installed_module_version_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListInstalledModuleVersionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListInstalledModuleVersionsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListInstalledModuleVersionsRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListInstalledModuleVersionsRequest, _impl_.per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInstalledModuleVersionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInstalledModuleVersionsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInstalledModuleVersionsRequest, _impl_.installed_module_versions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInstalledModuleVersionsKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInstalledModuleVersionsKeyRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInstalledModuleVersionsKeyRequest, _impl_.installed_module_version_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteInstalledModuleVersionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteInstalledModuleVersionsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteInstalledModuleVersionsRequest, _impl_.ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleInstalledModuleVersionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleInstalledModuleVersionResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleInstalledModuleVersionResponse, _impl_.installed_module_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiInstalledModuleVersionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiInstalledModuleVersionResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiInstalledModuleVersionResponse, _impl_.installed_module_versions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostBulkOperationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostBulkOperationsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostBulkOperationsRequest, _impl_.bulk_operations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListBulkOperationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListBulkOperationsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListBulkOperationsRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListBulkOperationsRequest, _impl_.per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetBulkOperationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetBulkOperationRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetBulkOperationRequest, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CancelBulkOperationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CancelBulkOperationRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CancelBulkOperationRequest, _impl_.ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteBulkOperationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteBulkOperationRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteBulkOperationRequest, _impl_.ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleBulkOperationsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleBulkOperationsResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleBulkOperationsResponse, _impl_.bulk_operation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiBulkOperationsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiBulkOperationsResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiBulkOperationsResponse, _impl_.bulk_operation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListInputsAddJobsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListInputsAddJobsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListInputsAddJobsRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListInputsAddJobsRequest, _impl_.per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInputsAddJobRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInputsAddJobRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInputsAddJobRequest, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiInputsAddJobResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiInputsAddJobResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiInputsAddJobResponse, _impl_.inputs_add_jobs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleInputsAddJobResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleInputsAddJobResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleInputsAddJobResponse, _impl_.inputs_add_job_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostUploadsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostUploadsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostUploadsRequest, _impl_.uploads_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteUploadsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteUploadsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteUploadsRequest, _impl_.ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListUploadsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListUploadsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListUploadsRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListUploadsRequest, _impl_.per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetUploadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetUploadRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetUploadRequest, _impl_.upload_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleUploadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleUploadResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleUploadResponse, _impl_.upload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiUploadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiUploadResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiUploadResponse, _impl_.uploads_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PutUploadContentPartsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PutUploadContentPartsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PutUploadContentPartsRequest, _impl_.upload_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PutUploadContentPartsRequest, _impl_.content_parts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsDataSourcesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsDataSourcesRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsDataSourcesRequest, _impl_.data_sources_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsDataSourcesRequest, _impl_.call_back_url_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsDataSourcesRequest, _impl_.app_pat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInputsExtractionJobRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInputsExtractionJobRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInputsExtractionJobRequest, _impl_.inputs_extraction_job_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListInputsExtractionJobsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListInputsExtractionJobsRequest, _impl_.user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListInputsExtractionJobsRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListInputsExtractionJobsRequest, _impl_.per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleInputsExtractionJobResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleInputsExtractionJobResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleInputsExtractionJobResponse, _impl_.inputs_extraction_job_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiInputsExtractionJobResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiInputsExtractionJobResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiInputsExtractionJobResponse, _impl_.inputs_extraction_jobs_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::clarifai::api::Pagination)},
  { 8, -1, -1, sizeof(::clarifai::api::GetAnnotationRequest)},
  { 17, -1, -1, sizeof(::clarifai::api::ListAnnotationsRequest)},
  { 34, -1, -1, sizeof(::clarifai::api::PostAnnotationsRequest)},
  { 42, -1, -1, sizeof(::clarifai::api::PatchAnnotationsRequest)},
  { 51, -1, -1, sizeof(::clarifai::api::PatchAnnotationsStatusRequest)},
  { 62, -1, -1, sizeof(::clarifai::api::PatchAnnotationsStatusResponse)},
  { 71, -1, -1, sizeof(::clarifai::api::DeleteAnnotationRequest)},
  { 80, -1, -1, sizeof(::clarifai::api::DeleteAnnotationsRequest)},
  { 89, -1, -1, sizeof(::clarifai::api::SingleAnnotationResponse)},
  { 97, -1, -1, sizeof(::clarifai::api::MultiAnnotationResponse)},
  { 105, -1, -1, sizeof(::clarifai::api::GetAppRequest)},
  { 113, -1, -1, sizeof(::clarifai::api::ListAppsRequest)},
  { 131, -1, -1, sizeof(::clarifai::api::PostAppsRequest)},
  { 139, -1, -1, sizeof(::clarifai::api::DeleteAppRequest)},
  { 146, -1, -1, sizeof(::clarifai::api::PatchAppsRequest)},
  { 157, -1, -1, sizeof(::clarifai::api::PatchAppRequest)},
  { 168, -1, -1, sizeof(::clarifai::api::PatchAppsIdsRequest)},
  { 177, -1, -1, sizeof(::clarifai::api::PostAppsSearchesRequest)},
  { 186, -1, -1, sizeof(::clarifai::api::SingleAppResponse)},
  { 194, -1, -1, sizeof(::clarifai::api::MultiAppResponse)},
  { 202, -1, -1, sizeof(::clarifai::api::ListCollaboratorsRequest)},
  { 212, -1, -1, sizeof(::clarifai::api::PostCollaboratorsRequest)},
  { 220, -1, -1, sizeof(::clarifai::api::PatchCollaboratorsRequest)},
  { 229, -1, -1, sizeof(::clarifai::api::DeleteCollaboratorsRequest)},
  { 238, -1, -1, sizeof(::clarifai::api::MultiCollaboratorsResponse)},
  { 246, -1, -1, sizeof(::clarifai::api::ListCollaborationsRequest)},
  { 255, -1, -1, sizeof(::clarifai::api::MultiCollaborationsResponse)},
  { 263, -1, -1, sizeof(::clarifai::api::GetStatusCodeRequest)},
  { 270, -1, -1, sizeof(::clarifai::api::ListStatusCodesRequest)},
  { 276, -1, -1, sizeof(::clarifai::api::SingleStatusCodeResponse)},
  { 283, -1, -1, sizeof(::clarifai::api::MultiStatusCodeResponse)},
  { 291, -1, -1, sizeof(::clarifai::api::GetConceptRequest)},
  { 299, -1, -1, sizeof(::clarifai::api::ListConceptsRequest)},
  { 308, -1, -1, sizeof(::clarifai::api::ListModelConceptsRequest)},
  { 319, -1, -1, sizeof(::clarifai::api::PostConceptsSearchesRequest)},
  { 328, -1, -1, sizeof(::clarifai::api::PostConceptsRequest)},
  { 336, -1, -1, sizeof(::clarifai::api::PatchConceptsRequest)},
  { 345, -1, -1, sizeof(::clarifai::api::GetConceptCountsRequest)},
  { 354, -1, -1, sizeof(::clarifai::api::SingleConceptResponse)},
  { 362, -1, -1, sizeof(::clarifai::api::MultiConceptResponse)},
  { 370, -1, -1, sizeof(::clarifai::api::MultiConceptCountResponse)},
  { 378, -1, -1, sizeof(::clarifai::api::ListConceptRelationsRequest)},
  { 390, -1, -1, sizeof(::clarifai::api::PostConceptRelationsRequest)},
  { 399, -1, -1, sizeof(::clarifai::api::DeleteConceptRelationsRequest)},
  { 408, -1, -1, sizeof(::clarifai::api::ListKnowledgeGraphsRequest)},
  { 415, -1, -1, sizeof(::clarifai::api::PostKnowledgeGraphsRequest)},
  { 423, -1, -1, sizeof(::clarifai::api::PostConceptMappingJobsRequest)},
  { 431, -1, -1, sizeof(::clarifai::api::MultiConceptRelationResponse)},
  { 439, -1, -1, sizeof(::clarifai::api::MultiKnowledgeGraphResponse)},
  { 447, -1, -1, sizeof(::clarifai::api::MultiConceptMappingJobResponse)},
  { 455, -1, -1, sizeof(::clarifai::api::GetConceptLanguageRequest)},
  { 464, -1, -1, sizeof(::clarifai::api::ListConceptLanguagesRequest)},
  { 474, -1, -1, sizeof(::clarifai::api::PatchConceptLanguagesRequest)},
  { 484, -1, -1, sizeof(::clarifai::api::PostConceptLanguagesRequest)},
  { 493, -1, -1, sizeof(::clarifai::api::SingleConceptLanguageResponse)},
  { 501, -1, -1, sizeof(::clarifai::api::MultiConceptLanguageResponse)},
  { 509, -1, -1, sizeof(::clarifai::api::GetInputRequest)},
  { 517, -1, -1, sizeof(::clarifai::api::GetInputSamplesRequest)},
  { 526, -1, -1, sizeof(::clarifai::api::ListInputsRequest)},
  { 537, -1, -1, sizeof(::clarifai::api::StreamInputsRequest)},
  { 548, -1, -1, sizeof(::clarifai::api::PostInputsRequest)},
  { 557, -1, -1, sizeof(::clarifai::api::PatchInputsRequest)},
  { 566, -1, -1, sizeof(::clarifai::api::DeleteInputRequest)},
  { 574, -1, -1, sizeof(::clarifai::api::DeleteInputsRequest)},
  { 582, -1, -1, sizeof(::clarifai::api::SingleInputResponse)},
  { 590, -1, -1, sizeof(::clarifai::api::MultiInputResponse)},
  { 599, -1, -1, sizeof(::clarifai::api::MultiInputAnnotationResponse)},
  { 607, -1, -1, sizeof(::clarifai::api::SingleInputCountResponse)},
  { 615, -1, -1, sizeof(::clarifai::api::GetInputCountRequest)},
  { 622, -1, -1, sizeof(::clarifai::api::ListDatasetsRequest)},
  { 631, -1, -1, sizeof(::clarifai::api::GetDatasetRequest)},
  { 639, -1, -1, sizeof(::clarifai::api::PostDatasetsRequest)},
  { 647, -1, -1, sizeof(::clarifai::api::PatchDatasetsRequest)},
  { 656, -1, -1, sizeof(::clarifai::api::PatchDatasetIdsRequest)},
  { 665, -1, -1, sizeof(::clarifai::api::DeleteDatasetsRequest)},
  { 673, -1, -1, sizeof(::clarifai::api::MultiDatasetResponse)},
  { 681, -1, -1, sizeof(::clarifai::api::SingleDatasetResponse)},
  { 689, -1, -1, sizeof(::clarifai::api::ListDatasetInputsRequest)},
  { 699, -1, -1, sizeof(::clarifai::api::GetDatasetInputRequest)},
  { 708, -1, -1, sizeof(::clarifai::api::PostDatasetInputsRequest)},
  { 718, -1, -1, sizeof(::clarifai::api::DeleteDatasetInputsRequest)},
  { 727, -1, -1, sizeof(::clarifai::api::MultiDatasetInputResponse)},
  { 736, -1, -1, sizeof(::clarifai::api::SingleDatasetInputResponse)},
  { 744, -1, -1, sizeof(::clarifai::api::ListDatasetVersionsRequest)},
  { 754, -1, -1, sizeof(::clarifai::api::GetDatasetVersionRequest)},
  { 763, -1, -1, sizeof(::clarifai::api::ListDatasetVersionMetricsGroupsRequest)},
  { 777, -1, -1, sizeof(::clarifai::api::PostDatasetVersionsRequest)},
  { 786, -1, -1, sizeof(::clarifai::api::PatchDatasetVersionsRequest)},
  { 796, -1, -1, sizeof(::clarifai::api::DeleteDatasetVersionsRequest)},
  { 805, -1, -1, sizeof(::clarifai::api::PutDatasetVersionExportsRequest)},
  { 815, -1, -1, sizeof(::clarifai::api::MultiDatasetVersionResponse)},
  { 823, -1, -1, sizeof(::clarifai::api::MultiDatasetVersionExportResponse)},
  { 831, -1, -1, sizeof(::clarifai::api::MultiDatasetVersionMetricsGroupResponse)},
  { 839, -1, -1, sizeof(::clarifai::api::SingleDatasetVersionResponse)},
  { 847, -1, -1, sizeof(::clarifai::api::GetDatasetInputsSearchAddJobRequest)},
  { 855, -1, -1, sizeof(::clarifai::api::SingleDatasetInputsSearchAddJobResponse)},
  { 863, -1, -1, sizeof(::clarifai::api::PostModelOutputsRequest)},
  { 874, -1, -1, sizeof(::clarifai::api::ListModelInputsRequest)},
  { 885, -1, -1, sizeof(::clarifai::api::GetKeyRequest)},
  { 893, -1, -1, sizeof(::clarifai::api::ListKeysRequest)},
  { 902, -1, -1, sizeof(::clarifai::api::ListAppKeysRequest)},
  { 911, -1, -1, sizeof(::clarifai::api::PostKeysRequest)},
  { 919, -1, -1, sizeof(::clarifai::api::DeleteKeyRequest)},
  { 927, -1, -1, sizeof(::clarifai::api::PatchKeysRequest)},
  { 936, -1, -1, sizeof(::clarifai::api::SingleKeyResponse)},
  { 944, -1, -1, sizeof(::clarifai::api::MultiKeyResponse)},
  { 952, -1, -1, sizeof(::clarifai::api::GetModelRequest)},
  { 964, -1, -1, sizeof(::clarifai::api::ListModelsRequest)},
  { 993, -1, -1, sizeof(::clarifai::api::PatchModelToolkitsRequest)},
  { 1003, -1, -1, sizeof(::clarifai::api::PatchModelCheckConsentsRequest)},
  { 1013, -1, -1, sizeof(::clarifai::api::PatchModelUseCasesRequest)},
  { 1023, -1, -1, sizeof(::clarifai::api::PatchModelLanguagesRequest)},
  { 1033, -1, -1, sizeof(::clarifai::api::MultiModelToolkitResponse)},
  { 1041, -1, -1, sizeof(::clarifai::api::MultiModelCheckConsentResponse)},
  { 1049, -1, -1, sizeof(::clarifai::api::MultiModelUseCaseResponse)},
  { 1057, -1, -1, sizeof(::clarifai::api::MultiModelLanguageResponse)},
  { 1065, -1, -1, sizeof(::clarifai::api::PostModelsRequest)},
  { 1074, -1, -1, sizeof(::clarifai::api::PatchModelsRequest)},
  { 1083, -1, -1, sizeof(::clarifai::api::IdUpdateSource)},
  { 1091, -1, -1, sizeof(::clarifai::api::PatchModelIdsRequest)},
  { 1100, -1, -1, sizeof(::clarifai::api::DeleteModelRequest)},
  { 1108, -1, -1, sizeof(::clarifai::api::DeleteModelsRequest)},
  { 1117, -1, -1, sizeof(::clarifai::api::PostModelsSearchesRequest)},
  { 1126, -1, -1, sizeof(::clarifai::api::SingleModelResponse)},
  { 1134, -1, -1, sizeof(::clarifai::api::MultiModelResponse)},
  { 1142, -1, -1, sizeof(::clarifai::api::PatchModelVersionsRequest)},
  { 1152, -1, -1, sizeof(::clarifai::api::GetModelVersionRequest)},
  { 1161, -1, -1, sizeof(::clarifai::api::ListModelVersionsRequest)},
  { 1172, -1, -1, sizeof(::clarifai::api::DeleteModelVersionRequest)},
  { 1181, -1, -1, sizeof(::clarifai::api::SingleModelVersionResponse)},
  { 1189, -1, -1, sizeof(::clarifai::api::MultiModelVersionResponse)},
  { 1197, -1, -1, sizeof(::clarifai::api::PostModelVersionsRequest)},
  { 1212, -1, -1, sizeof(::clarifai::api::PostWorkflowVersionsUnPublishRequest)},
  { 1221, -1, -1, sizeof(::clarifai::api::PostWorkflowVersionsPublishRequest)},
  { 1230, -1, -1, sizeof(::clarifai::api::WorkflowVersionPublishRequest)},
  { 1237, -1, -1, sizeof(::clarifai::api::WorkflowVersionUnPublishRequest)},
  { 1244, -1, -1, sizeof(::clarifai::api::ModelVersionPublishRequest)},
  { 1251, -1, -1, sizeof(::clarifai::api::PostModelVersionsPublishRequest)},
  { 1260, -1, -1, sizeof(::clarifai::api::ModelVersionUnpublishRequest)},
  { 1267, -1, -1, sizeof(::clarifai::api::PostModelVersionsUnPublishRequest)},
  { 1276, -1, -1, sizeof(::clarifai::api::PostModelVersionEvaluationsRequest)},
  { 1286, -1, -1, sizeof(::clarifai::api::ListModelVersionEvaluationsRequest)},
  { 1297, -1, -1, sizeof(::clarifai::api::GetModelVersionEvaluationRequest)},
  { 1308, -1, -1, sizeof(::clarifai::api::SingleEvalMetricsResponse)},
  { 1316, -1, -1, sizeof(::clarifai::api::MultiEvalMetricsResponse)},
  { 1324, -1, -1, sizeof(::clarifai::api::PostModelVersionMetricsRequest)},
  { 1335, -1, -1, sizeof(::clarifai::api::GetModelVersionMetricsRequest)},
  { 1345, -1, -1, sizeof(::clarifai::api::GetModelTypeRequest)},
  { 1353, -1, -1, sizeof(::clarifai::api::ListModelTypesRequest)},
  { 1362, -1, -1, sizeof(::clarifai::api::ListOpenSourceLicensesRequest)},
  { 1368, -1, -1, sizeof(::clarifai::api::ListOpenSourceLicensesResponse)},
  { 1376, -1, -1, sizeof(::clarifai::api::SingleModelTypeResponse)},
  { 1384, -1, -1, sizeof(::clarifai::api::MultiModelTypeResponse)},
  { 1393, -1, -1, sizeof(::clarifai::api::GetModelVersionInputExampleRequest)},
  { 1403, -1, -1, sizeof(::clarifai::api::ListModelVersionInputExamplesRequest)},
  { 1414, -1, -1, sizeof(::clarifai::api::SingleModelVersionInputExampleResponse)},
  { 1422, -1, -1, sizeof(::clarifai::api::MultiModelVersionInputExampleResponse)},
  { 1430, -1, -1, sizeof(::clarifai::api::ListModelReferencesRequest)},
  { 1440, -1, -1, sizeof(::clarifai::api::MultiModelReferenceResponse)},
  { 1448, -1, -1, sizeof(::clarifai::api::MultiOutputResponse)},
  { 1456, -1, -1, sizeof(::clarifai::api::ListScopesRequest)},
  { 1464, -1, -1, sizeof(::clarifai::api::MyScopesRequest)},
  { 1471, -1, -1, sizeof(::clarifai::api::MyScopesUserRequest)},
  { 1478, -1, -1, sizeof(::clarifai::api::MyScopesRootRequest)},
  { 1484, -1, -1, sizeof(::clarifai::api::MultiScopeDepsResponse)},
  { 1493, -1, -1, sizeof(::clarifai::api::MultiScopeResponse)},
  { 1504, -1, -1, sizeof(::clarifai::api::MultiScopeUserResponse)},
  { 1514, -1, -1, sizeof(::clarifai::api::MultiScopeRootResponse)},
  { 1524, -1, -1, sizeof(::clarifai::api::GetSearchRequest)},
  { 1532, -1, -1, sizeof(::clarifai::api::ListSearchesRequest)},
  { 1541, -1, -1, sizeof(::clarifai::api::PostSearchesRequest)},
  { 1551, -1, -1, sizeof(::clarifai::api::PatchInputsSearchesRequest)},
  { 1560, -1, -1, sizeof(::clarifai::api::PatchAnnotationsSearchesRequest)},
  { 1569, -1, -1, sizeof(::clarifai::api::PatchSearchesRequest)},
  { 1578, -1, -1, sizeof(::clarifai::api::PostSearchesByIDRequest)},
  { 1587, -1, -1, sizeof(::clarifai::api::DeleteSearchRequest)},
  { 1595, -1, -1, sizeof(::clarifai::api::PostAnnotationsSearchesRequest)},
  { 1604, -1, -1, sizeof(::clarifai::api::DeleteAnnotationSearchMetricsRequest)},
  { 1612, -1, -1, sizeof(::clarifai::api::PostInputsSearchesRequest)},
  { 1621, -1, -1, sizeof(::clarifai::api::SingleSearchResponse)},
  { 1629, -1, -1, sizeof(::clarifai::api::MultiSearchResponse)},
  { 1640, -1, -1, sizeof(::clarifai::api::PostAnnotationSearchMetricsRequest)},
  { 1652, -1, -1, sizeof(::clarifai::api::GetAnnotationSearchMetricsRequest)},
  { 1660, -1, -1, sizeof(::clarifai::api::ListAnnotationSearchMetricsRequest)},
  { 1667, -1, -1, sizeof(::clarifai::api::MultiAnnotationSearchMetricsResponse)},
  { 1675, -1, -1, sizeof(::clarifai::api::ListAnnotationFiltersRequest)},
  { 1684, -1, -1, sizeof(::clarifai::api::GetAnnotationFilterRequest)},
  { 1692, -1, -1, sizeof(::clarifai::api::PostAnnotationFiltersRequest)},
  { 1700, -1, -1, sizeof(::clarifai::api::PatchAnnotationFiltersRequest)},
  { 1709, -1, -1, sizeof(::clarifai::api::DeleteAnnotationFiltersRequest)},
  { 1717, -1, -1, sizeof(::clarifai::api::MultiAnnotationFilterResponse)},
  { 1725, -1, -1, sizeof(::clarifai::api::SingleAnnotationFilterResponse)},
  { 1733, -1, -1, sizeof(::clarifai::api::PostValidatePasswordRequest)},
  { 1741, -1, -1, sizeof(::clarifai::api::SinglePasswordValidationResponse)},
  { 1749, -1, -1, sizeof(::clarifai::api::GetWorkflowRequest)},
  { 1760, -1, -1, sizeof(::clarifai::api::ListWorkflowsRequest)},
  { 1779, -1, -1, sizeof(::clarifai::api::PostWorkflowsRequest)},
  { 1787, -1, -1, sizeof(::clarifai::api::PatchWorkflowsRequest)},
  { 1796, -1, -1, sizeof(::clarifai::api::PatchWorkflowIdsRequest)},
  { 1805, -1, -1, sizeof(::clarifai::api::DeleteWorkflowRequest)},
  { 1813, -1, -1, sizeof(::clarifai::api::DeleteWorkflowsRequest)},
  { 1822, -1, -1, sizeof(::clarifai::api::SingleWorkflowResponse)},
  { 1830, -1, -1, sizeof(::clarifai::api::MultiWorkflowResponse)},
  { 1838, -1, -1, sizeof(::clarifai::api::PostWorkflowResultsRequest)},
  { 1851, -1, -1, sizeof(::clarifai::api::PostWorkflowResultsResponse)},
  { 1861, -1, -1, sizeof(::clarifai::api::PostWorkflowResultsSimilarityRequest)},
  { 1874, -1, -1, sizeof(::clarifai::api::PostWorkflowResultsSimilarityResponse)},
  { 1882, -1, -1, sizeof(::clarifai::api::ListWorkflowVersionsRequest)},
  { 1892, -1, -1, sizeof(::clarifai::api::GetWorkflowVersionRequest)},
  { 1901, -1, -1, sizeof(::clarifai::api::DeleteWorkflowVersionsRequest)},
  { 1910, -1, -1, sizeof(::clarifai::api::PatchWorkflowVersionsRequest)},
  { 1920, -1, -1, sizeof(::clarifai::api::MultiWorkflowVersionResponse)},
  { 1928, -1, -1, sizeof(::clarifai::api::SingleWorkflowVersionResponse)},
  { 1936, -1, -1, sizeof(::clarifai::api::PostAppDuplicationsRequest)},
  { 1944, -1, -1, sizeof(::clarifai::api::GetAppDuplicationRequest)},
  { 1952, -1, -1, sizeof(::clarifai::api::ListAppDuplicationsRequest)},
  { 1961, -1, -1, sizeof(::clarifai::api::MultiAppDuplicationsResponse)},
  { 1969, -1, -1, sizeof(::clarifai::api::SingleAppDuplicationResponse)},
  { 1977, -1, -1, sizeof(::clarifai::api::PostTasksRequest)},
  { 1985, -1, -1, sizeof(::clarifai::api::GetTaskRequest)},
  { 1994, -1, -1, sizeof(::clarifai::api::ListTasksRequest)},
  { 2008, -1, -1, sizeof(::clarifai::api::PatchTasksRequest)},
  { 2017, -1, -1, sizeof(::clarifai::api::DeleteTasksRequest)},
  { 2025, -1, -1, sizeof(::clarifai::api::MultiTaskResponse)},
  { 2033, -1, -1, sizeof(::clarifai::api::SingleTaskResponse)},
  { 2041, -1, -1, sizeof(::clarifai::api::GetTaskCountRequest)},
  { 2050, -1, -1, sizeof(::clarifai::api::SingleTaskCountResponse)},
  { 2060, -1, -1, sizeof(::clarifai::api::PostLabelOrdersRequest)},
  { 2068, -1, -1, sizeof(::clarifai::api::GetLabelOrderRequest)},
  { 2076, -1, -1, sizeof(::clarifai::api::ListLabelOrdersRequest)},
  { 2085, -1, -1, sizeof(::clarifai::api::PatchLabelOrdersRequest)},
  { 2094, -1, -1, sizeof(::clarifai::api::DeleteLabelOrdersRequest)},
  { 2102, -1, -1, sizeof(::clarifai::api::MultiLabelOrderResponse)},
  { 2110, -1, -1, sizeof(::clarifai::api::SingleLabelOrderResponse)},
  { 2118, -1, -1, sizeof(::clarifai::api::PostCollectorsRequest)},
  { 2126, -1, -1, sizeof(::clarifai::api::PatchCollectorsRequest)},
  { 2135, -1, -1, sizeof(::clarifai::api::DeleteCollectorsRequest)},
  { 2144, -1, -1, sizeof(::clarifai::api::GetCollectorRequest)},
  { 2152, -1, -1, sizeof(::clarifai::api::ListCollectorsRequest)},
  { 2161, -1, -1, sizeof(::clarifai::api::MultiCollectorResponse)},
  { 2169, -1, -1, sizeof(::clarifai::api::SingleCollectorResponse)},
  { 2177, -1, -1, sizeof(::clarifai::api::PostStatValuesRequest)},
  { 2185, -1, -1, sizeof(::clarifai::api::MultiStatValueResponse)},
  { 2193, -1, -1, sizeof(::clarifai::api::PostStatValuesAggregateRequest)},
  { 2201, -1, -1, sizeof(::clarifai::api::MultiStatValueAggregateResponse)},
  { 2209, -1, -1, sizeof(::clarifai::api::PostTrendingMetricsViewRequest)},
  { 2218, -1, -1, sizeof(::clarifai::api::ListTrendingMetricsViewsRequest)},
  { 2228, -1, -1, sizeof(::clarifai::api::MultiTrendingMetricsViewResponse)},
  { 2236, -1, -1, sizeof(::clarifai::api::GetModuleRequest)},
  { 2244, -1, -1, sizeof(::clarifai::api::ListModulesRequest)},
  { 2253, -1, -1, sizeof(::clarifai::api::PostModulesRequest)},
  { 2261, -1, -1, sizeof(::clarifai::api::PatchModulesRequest)},
  { 2270, -1, -1, sizeof(::clarifai::api::DeleteModulesRequest)},
  { 2278, -1, -1, sizeof(::clarifai::api::SingleModuleResponse)},
  { 2286, -1, -1, sizeof(::clarifai::api::MultiModuleResponse)},
  { 2294, -1, -1, sizeof(::clarifai::api::GetModuleVersionRequest)},
  { 2303, -1, -1, sizeof(::clarifai::api::ListModuleVersionsRequest)},
  { 2313, -1, -1, sizeof(::clarifai::api::PostModuleVersionsRequest)},
  { 2322, -1, -1, sizeof(::clarifai::api::DeleteModuleVersionsRequest)},
  { 2331, -1, -1, sizeof(::clarifai::api::SingleModuleVersionResponse)},
  { 2339, -1, -1, sizeof(::clarifai::api::MultiModuleVersionResponse)},
  { 2347, -1, -1, sizeof(::clarifai::api::GetInstalledModuleVersionRequest)},
  { 2355, -1, -1, sizeof(::clarifai::api::ListInstalledModuleVersionsRequest)},
  { 2364, -1, -1, sizeof(::clarifai::api::PostInstalledModuleVersionsRequest)},
  { 2372, -1, -1, sizeof(::clarifai::api::PostInstalledModuleVersionsKeyRequest)},
  { 2380, -1, -1, sizeof(::clarifai::api::DeleteInstalledModuleVersionsRequest)},
  { 2388, -1, -1, sizeof(::clarifai::api::SingleInstalledModuleVersionResponse)},
  { 2396, -1, -1, sizeof(::clarifai::api::MultiInstalledModuleVersionResponse)},
  { 2404, -1, -1, sizeof(::clarifai::api::PostBulkOperationsRequest)},
  { 2412, -1, -1, sizeof(::clarifai::api::ListBulkOperationsRequest)},
  { 2421, -1, -1, sizeof(::clarifai::api::GetBulkOperationRequest)},
  { 2429, -1, -1, sizeof(::clarifai::api::CancelBulkOperationRequest)},
  { 2437, -1, -1, sizeof(::clarifai::api::DeleteBulkOperationRequest)},
  { 2445, -1, -1, sizeof(::clarifai::api::SingleBulkOperationsResponse)},
  { 2453, -1, -1, sizeof(::clarifai::api::MultiBulkOperationsResponse)},
  { 2461, -1, -1, sizeof(::clarifai::api::ListInputsAddJobsRequest)},
  { 2470, -1, -1, sizeof(::clarifai::api::GetInputsAddJobRequest)},
  { 2478, -1, -1, sizeof(::clarifai::api::MultiInputsAddJobResponse)},
  { 2486, -1, -1, sizeof(::clarifai::api::SingleInputsAddJobResponse)},
  { 2494, -1, -1, sizeof(::clarifai::api::PostUploadsRequest)},
  { 2502, -1, -1, sizeof(::clarifai::api::DeleteUploadsRequest)},
  { 2510, -1, -1, sizeof(::clarifai::api::ListUploadsRequest)},
  { 2519, -1, -1, sizeof(::clarifai::api::GetUploadRequest)},
  { 2527, -1, -1, sizeof(::clarifai::api::SingleUploadResponse)},
  { 2535, -1, -1, sizeof(::clarifai::api::MultiUploadResponse)},
  { 2543, -1, -1, sizeof(::clarifai::api::PutUploadContentPartsRequest)},
  { 2552, -1, -1, sizeof(::clarifai::api::PostInputsDataSourcesRequest)},
  { 2562, -1, -1, sizeof(::clarifai::api::GetInputsExtractionJobRequest)},
  { 2570, -1, -1, sizeof(::clarifai::api::ListInputsExtractionJobsRequest)},
  { 2579, -1, -1, sizeof(::clarifai::api::SingleInputsExtractionJobResponse)},
  { 2587, -1, -1, sizeof(::clarifai::api::MultiInputsExtractionJobResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::clarifai::api::_Pagination_default_instance_._instance,
  &::clarifai::api::_GetAnnotationRequest_default_instance_._instance,
  &::clarifai::api::_ListAnnotationsRequest_default_instance_._instance,
  &::clarifai::api::_PostAnnotationsRequest_default_instance_._instance,
  &::clarifai::api::_PatchAnnotationsRequest_default_instance_._instance,
  &::clarifai::api::_PatchAnnotationsStatusRequest_default_instance_._instance,
  &::clarifai::api::_PatchAnnotationsStatusResponse_default_instance_._instance,
  &::clarifai::api::_DeleteAnnotationRequest_default_instance_._instance,
  &::clarifai::api::_DeleteAnnotationsRequest_default_instance_._instance,
  &::clarifai::api::_SingleAnnotationResponse_default_instance_._instance,
  &::clarifai::api::_MultiAnnotationResponse_default_instance_._instance,
  &::clarifai::api::_GetAppRequest_default_instance_._instance,
  &::clarifai::api::_ListAppsRequest_default_instance_._instance,
  &::clarifai::api::_PostAppsRequest_default_instance_._instance,
  &::clarifai::api::_DeleteAppRequest_default_instance_._instance,
  &::clarifai::api::_PatchAppsRequest_default_instance_._instance,
  &::clarifai::api::_PatchAppRequest_default_instance_._instance,
  &::clarifai::api::_PatchAppsIdsRequest_default_instance_._instance,
  &::clarifai::api::_PostAppsSearchesRequest_default_instance_._instance,
  &::clarifai::api::_SingleAppResponse_default_instance_._instance,
  &::clarifai::api::_MultiAppResponse_default_instance_._instance,
  &::clarifai::api::_ListCollaboratorsRequest_default_instance_._instance,
  &::clarifai::api::_PostCollaboratorsRequest_default_instance_._instance,
  &::clarifai::api::_PatchCollaboratorsRequest_default_instance_._instance,
  &::clarifai::api::_DeleteCollaboratorsRequest_default_instance_._instance,
  &::clarifai::api::_MultiCollaboratorsResponse_default_instance_._instance,
  &::clarifai::api::_ListCollaborationsRequest_default_instance_._instance,
  &::clarifai::api::_MultiCollaborationsResponse_default_instance_._instance,
  &::clarifai::api::_GetStatusCodeRequest_default_instance_._instance,
  &::clarifai::api::_ListStatusCodesRequest_default_instance_._instance,
  &::clarifai::api::_SingleStatusCodeResponse_default_instance_._instance,
  &::clarifai::api::_MultiStatusCodeResponse_default_instance_._instance,
  &::clarifai::api::_GetConceptRequest_default_instance_._instance,
  &::clarifai::api::_ListConceptsRequest_default_instance_._instance,
  &::clarifai::api::_ListModelConceptsRequest_default_instance_._instance,
  &::clarifai::api::_PostConceptsSearchesRequest_default_instance_._instance,
  &::clarifai::api::_PostConceptsRequest_default_instance_._instance,
  &::clarifai::api::_PatchConceptsRequest_default_instance_._instance,
  &::clarifai::api::_GetConceptCountsRequest_default_instance_._instance,
  &::clarifai::api::_SingleConceptResponse_default_instance_._instance,
  &::clarifai::api::_MultiConceptResponse_default_instance_._instance,
  &::clarifai::api::_MultiConceptCountResponse_default_instance_._instance,
  &::clarifai::api::_ListConceptRelationsRequest_default_instance_._instance,
  &::clarifai::api::_PostConceptRelationsRequest_default_instance_._instance,
  &::clarifai::api::_DeleteConceptRelationsRequest_default_instance_._instance,
  &::clarifai::api::_ListKnowledgeGraphsRequest_default_instance_._instance,
  &::clarifai::api::_PostKnowledgeGraphsRequest_default_instance_._instance,
  &::clarifai::api::_PostConceptMappingJobsRequest_default_instance_._instance,
  &::clarifai::api::_MultiConceptRelationResponse_default_instance_._instance,
  &::clarifai::api::_MultiKnowledgeGraphResponse_default_instance_._instance,
  &::clarifai::api::_MultiConceptMappingJobResponse_default_instance_._instance,
  &::clarifai::api::_GetConceptLanguageRequest_default_instance_._instance,
  &::clarifai::api::_ListConceptLanguagesRequest_default_instance_._instance,
  &::clarifai::api::_PatchConceptLanguagesRequest_default_instance_._instance,
  &::clarifai::api::_PostConceptLanguagesRequest_default_instance_._instance,
  &::clarifai::api::_SingleConceptLanguageResponse_default_instance_._instance,
  &::clarifai::api::_MultiConceptLanguageResponse_default_instance_._instance,
  &::clarifai::api::_GetInputRequest_default_instance_._instance,
  &::clarifai::api::_GetInputSamplesRequest_default_instance_._instance,
  &::clarifai::api::_ListInputsRequest_default_instance_._instance,
  &::clarifai::api::_StreamInputsRequest_default_instance_._instance,
  &::clarifai::api::_PostInputsRequest_default_instance_._instance,
  &::clarifai::api::_PatchInputsRequest_default_instance_._instance,
  &::clarifai::api::_DeleteInputRequest_default_instance_._instance,
  &::clarifai::api::_DeleteInputsRequest_default_instance_._instance,
  &::clarifai::api::_SingleInputResponse_default_instance_._instance,
  &::clarifai::api::_MultiInputResponse_default_instance_._instance,
  &::clarifai::api::_MultiInputAnnotationResponse_default_instance_._instance,
  &::clarifai::api::_SingleInputCountResponse_default_instance_._instance,
  &::clarifai::api::_GetInputCountRequest_default_instance_._instance,
  &::clarifai::api::_ListDatasetsRequest_default_instance_._instance,
  &::clarifai::api::_GetDatasetRequest_default_instance_._instance,
  &::clarifai::api::_PostDatasetsRequest_default_instance_._instance,
  &::clarifai::api::_PatchDatasetsRequest_default_instance_._instance,
  &::clarifai::api::_PatchDatasetIdsRequest_default_instance_._instance,
  &::clarifai::api::_DeleteDatasetsRequest_default_instance_._instance,
  &::clarifai::api::_MultiDatasetResponse_default_instance_._instance,
  &::clarifai::api::_SingleDatasetResponse_default_instance_._instance,
  &::clarifai::api::_ListDatasetInputsRequest_default_instance_._instance,
  &::clarifai::api::_GetDatasetInputRequest_default_instance_._instance,
  &::clarifai::api::_PostDatasetInputsRequest_default_instance_._instance,
  &::clarifai::api::_DeleteDatasetInputsRequest_default_instance_._instance,
  &::clarifai::api::_MultiDatasetInputResponse_default_instance_._instance,
  &::clarifai::api::_SingleDatasetInputResponse_default_instance_._instance,
  &::clarifai::api::_ListDatasetVersionsRequest_default_instance_._instance,
  &::clarifai::api::_GetDatasetVersionRequest_default_instance_._instance,
  &::clarifai::api::_ListDatasetVersionMetricsGroupsRequest_default_instance_._instance,
  &::clarifai::api::_PostDatasetVersionsRequest_default_instance_._instance,
  &::clarifai::api::_PatchDatasetVersionsRequest_default_instance_._instance,
  &::clarifai::api::_DeleteDatasetVersionsRequest_default_instance_._instance,
  &::clarifai::api::_PutDatasetVersionExportsRequest_default_instance_._instance,
  &::clarifai::api::_MultiDatasetVersionResponse_default_instance_._instance,
  &::clarifai::api::_MultiDatasetVersionExportResponse_default_instance_._instance,
  &::clarifai::api::_MultiDatasetVersionMetricsGroupResponse_default_instance_._instance,
  &::clarifai::api::_SingleDatasetVersionResponse_default_instance_._instance,
  &::clarifai::api::_GetDatasetInputsSearchAddJobRequest_default_instance_._instance,
  &::clarifai::api::_SingleDatasetInputsSearchAddJobResponse_default_instance_._instance,
  &::clarifai::api::_PostModelOutputsRequest_default_instance_._instance,
  &::clarifai::api::_ListModelInputsRequest_default_instance_._instance,
  &::clarifai::api::_GetKeyRequest_default_instance_._instance,
  &::clarifai::api::_ListKeysRequest_default_instance_._instance,
  &::clarifai::api::_ListAppKeysRequest_default_instance_._instance,
  &::clarifai::api::_PostKeysRequest_default_instance_._instance,
  &::clarifai::api::_DeleteKeyRequest_default_instance_._instance,
  &::clarifai::api::_PatchKeysRequest_default_instance_._instance,
  &::clarifai::api::_SingleKeyResponse_default_instance_._instance,
  &::clarifai::api::_MultiKeyResponse_default_instance_._instance,
  &::clarifai::api::_GetModelRequest_default_instance_._instance,
  &::clarifai::api::_ListModelsRequest_default_instance_._instance,
  &::clarifai::api::_PatchModelToolkitsRequest_default_instance_._instance,
  &::clarifai::api::_PatchModelCheckConsentsRequest_default_instance_._instance,
  &::clarifai::api::_PatchModelUseCasesRequest_default_instance_._instance,
  &::clarifai::api::_PatchModelLanguagesRequest_default_instance_._instance,
  &::clarifai::api::_MultiModelToolkitResponse_default_instance_._instance,
  &::clarifai::api::_MultiModelCheckConsentResponse_default_instance_._instance,
  &::clarifai::api::_MultiModelUseCaseResponse_default_instance_._instance,
  &::clarifai::api::_MultiModelLanguageResponse_default_instance_._instance,
  &::clarifai::api::_PostModelsRequest_default_instance_._instance,
  &::clarifai::api::_PatchModelsRequest_default_instance_._instance,
  &::clarifai::api::_IdUpdateSource_default_instance_._instance,
  &::clarifai::api::_PatchModelIdsRequest_default_instance_._instance,
  &::clarifai::api::_DeleteModelRequest_default_instance_._instance,
  &::clarifai::api::_DeleteModelsRequest_default_instance_._instance,
  &::clarifai::api::_PostModelsSearchesRequest_default_instance_._instance,
  &::clarifai::api::_SingleModelResponse_default_instance_._instance,
  &::clarifai::api::_MultiModelResponse_default_instance_._instance,
  &::clarifai::api::_PatchModelVersionsRequest_default_instance_._instance,
  &::clarifai::api::_GetModelVersionRequest_default_instance_._instance,
  &::clarifai::api::_ListModelVersionsRequest_default_instance_._instance,
  &::clarifai::api::_DeleteModelVersionRequest_default_instance_._instance,
  &::clarifai::api::_SingleModelVersionResponse_default_instance_._instance,
  &::clarifai::api::_MultiModelVersionResponse_default_instance_._instance,
  &::clarifai::api::_PostModelVersionsRequest_default_instance_._instance,
  &::clarifai::api::_PostWorkflowVersionsUnPublishRequest_default_instance_._instance,
  &::clarifai::api::_PostWorkflowVersionsPublishRequest_default_instance_._instance,
  &::clarifai::api::_WorkflowVersionPublishRequest_default_instance_._instance,
  &::clarifai::api::_WorkflowVersionUnPublishRequest_default_instance_._instance,
  &::clarifai::api::_ModelVersionPublishRequest_default_instance_._instance,
  &::clarifai::api::_PostModelVersionsPublishRequest_default_instance_._instance,
  &::clarifai::api::_ModelVersionUnpublishRequest_default_instance_._instance,
  &::clarifai::api::_PostModelVersionsUnPublishRequest_default_instance_._instance,
  &::clarifai::api::_PostModelVersionEvaluationsRequest_default_instance_._instance,
  &::clarifai::api::_ListModelVersionEvaluationsRequest_default_instance_._instance,
  &::clarifai::api::_GetModelVersionEvaluationRequest_default_instance_._instance,
  &::clarifai::api::_SingleEvalMetricsResponse_default_instance_._instance,
  &::clarifai::api::_MultiEvalMetricsResponse_default_instance_._instance,
  &::clarifai::api::_PostModelVersionMetricsRequest_default_instance_._instance,
  &::clarifai::api::_GetModelVersionMetricsRequest_default_instance_._instance,
  &::clarifai::api::_GetModelTypeRequest_default_instance_._instance,
  &::clarifai::api::_ListModelTypesRequest_default_instance_._instance,
  &::clarifai::api::_ListOpenSourceLicensesRequest_default_instance_._instance,
  &::clarifai::api::_ListOpenSourceLicensesResponse_default_instance_._instance,
  &::clarifai::api::_SingleModelTypeResponse_default_instance_._instance,
  &::clarifai::api::_MultiModelTypeResponse_default_instance_._instance,
  &::clarifai::api::_GetModelVersionInputExampleRequest_default_instance_._instance,
  &::clarifai::api::_ListModelVersionInputExamplesRequest_default_instance_._instance,
  &::clarifai::api::_SingleModelVersionInputExampleResponse_default_instance_._instance,
  &::clarifai::api::_MultiModelVersionInputExampleResponse_default_instance_._instance,
  &::clarifai::api::_ListModelReferencesRequest_default_instance_._instance,
  &::clarifai::api::_MultiModelReferenceResponse_default_instance_._instance,
  &::clarifai::api::_MultiOutputResponse_default_instance_._instance,
  &::clarifai::api::_ListScopesRequest_default_instance_._instance,
  &::clarifai::api::_MyScopesRequest_default_instance_._instance,
  &::clarifai::api::_MyScopesUserRequest_default_instance_._instance,
  &::clarifai::api::_MyScopesRootRequest_default_instance_._instance,
  &::clarifai::api::_MultiScopeDepsResponse_default_instance_._instance,
  &::clarifai::api::_MultiScopeResponse_default_instance_._instance,
  &::clarifai::api::_MultiScopeUserResponse_default_instance_._instance,
  &::clarifai::api::_MultiScopeRootResponse_default_instance_._instance,
  &::clarifai::api::_GetSearchRequest_default_instance_._instance,
  &::clarifai::api::_ListSearchesRequest_default_instance_._instance,
  &::clarifai::api::_PostSearchesRequest_default_instance_._instance,
  &::clarifai::api::_PatchInputsSearchesRequest_default_instance_._instance,
  &::clarifai::api::_PatchAnnotationsSearchesRequest_default_instance_._instance,
  &::clarifai::api::_PatchSearchesRequest_default_instance_._instance,
  &::clarifai::api::_PostSearchesByIDRequest_default_instance_._instance,
  &::clarifai::api::_DeleteSearchRequest_default_instance_._instance,
  &::clarifai::api::_PostAnnotationsSearchesRequest_default_instance_._instance,
  &::clarifai::api::_DeleteAnnotationSearchMetricsRequest_default_instance_._instance,
  &::clarifai::api::_PostInputsSearchesRequest_default_instance_._instance,
  &::clarifai::api::_SingleSearchResponse_default_instance_._instance,
  &::clarifai::api::_MultiSearchResponse_default_instance_._instance,
  &::clarifai::api::_PostAnnotationSearchMetricsRequest_default_instance_._instance,
  &::clarifai::api::_GetAnnotationSearchMetricsRequest_default_instance_._instance,
  &::clarifai::api::_ListAnnotationSearchMetricsRequest_default_instance_._instance,
  &::clarifai::api::_MultiAnnotationSearchMetricsResponse_default_instance_._instance,
  &::clarifai::api::_ListAnnotationFiltersRequest_default_instance_._instance,
  &::clarifai::api::_GetAnnotationFilterRequest_default_instance_._instance,
  &::clarifai::api::_PostAnnotationFiltersRequest_default_instance_._instance,
  &::clarifai::api::_PatchAnnotationFiltersRequest_default_instance_._instance,
  &::clarifai::api::_DeleteAnnotationFiltersRequest_default_instance_._instance,
  &::clarifai::api::_MultiAnnotationFilterResponse_default_instance_._instance,
  &::clarifai::api::_SingleAnnotationFilterResponse_default_instance_._instance,
  &::clarifai::api::_PostValidatePasswordRequest_default_instance_._instance,
  &::clarifai::api::_SinglePasswordValidationResponse_default_instance_._instance,
  &::clarifai::api::_GetWorkflowRequest_default_instance_._instance,
  &::clarifai::api::_ListWorkflowsRequest_default_instance_._instance,
  &::clarifai::api::_PostWorkflowsRequest_default_instance_._instance,
  &::clarifai::api::_PatchWorkflowsRequest_default_instance_._instance,
  &::clarifai::api::_PatchWorkflowIdsRequest_default_instance_._instance,
  &::clarifai::api::_DeleteWorkflowRequest_default_instance_._instance,
  &::clarifai::api::_DeleteWorkflowsRequest_default_instance_._instance,
  &::clarifai::api::_SingleWorkflowResponse_default_instance_._instance,
  &::clarifai::api::_MultiWorkflowResponse_default_instance_._instance,
  &::clarifai::api::_PostWorkflowResultsRequest_default_instance_._instance,
  &::clarifai::api::_PostWorkflowResultsResponse_default_instance_._instance,
  &::clarifai::api::_PostWorkflowResultsSimilarityRequest_default_instance_._instance,
  &::clarifai::api::_PostWorkflowResultsSimilarityResponse_default_instance_._instance,
  &::clarifai::api::_ListWorkflowVersionsRequest_default_instance_._instance,
  &::clarifai::api::_GetWorkflowVersionRequest_default_instance_._instance,
  &::clarifai::api::_DeleteWorkflowVersionsRequest_default_instance_._instance,
  &::clarifai::api::_PatchWorkflowVersionsRequest_default_instance_._instance,
  &::clarifai::api::_MultiWorkflowVersionResponse_default_instance_._instance,
  &::clarifai::api::_SingleWorkflowVersionResponse_default_instance_._instance,
  &::clarifai::api::_PostAppDuplicationsRequest_default_instance_._instance,
  &::clarifai::api::_GetAppDuplicationRequest_default_instance_._instance,
  &::clarifai::api::_ListAppDuplicationsRequest_default_instance_._instance,
  &::clarifai::api::_MultiAppDuplicationsResponse_default_instance_._instance,
  &::clarifai::api::_SingleAppDuplicationResponse_default_instance_._instance,
  &::clarifai::api::_PostTasksRequest_default_instance_._instance,
  &::clarifai::api::_GetTaskRequest_default_instance_._instance,
  &::clarifai::api::_ListTasksRequest_default_instance_._instance,
  &::clarifai::api::_PatchTasksRequest_default_instance_._instance,
  &::clarifai::api::_DeleteTasksRequest_default_instance_._instance,
  &::clarifai::api::_MultiTaskResponse_default_instance_._instance,
  &::clarifai::api::_SingleTaskResponse_default_instance_._instance,
  &::clarifai::api::_GetTaskCountRequest_default_instance_._instance,
  &::clarifai::api::_SingleTaskCountResponse_default_instance_._instance,
  &::clarifai::api::_PostLabelOrdersRequest_default_instance_._instance,
  &::clarifai::api::_GetLabelOrderRequest_default_instance_._instance,
  &::clarifai::api::_ListLabelOrdersRequest_default_instance_._instance,
  &::clarifai::api::_PatchLabelOrdersRequest_default_instance_._instance,
  &::clarifai::api::_DeleteLabelOrdersRequest_default_instance_._instance,
  &::clarifai::api::_MultiLabelOrderResponse_default_instance_._instance,
  &::clarifai::api::_SingleLabelOrderResponse_default_instance_._instance,
  &::clarifai::api::_PostCollectorsRequest_default_instance_._instance,
  &::clarifai::api::_PatchCollectorsRequest_default_instance_._instance,
  &::clarifai::api::_DeleteCollectorsRequest_default_instance_._instance,
  &::clarifai::api::_GetCollectorRequest_default_instance_._instance,
  &::clarifai::api::_ListCollectorsRequest_default_instance_._instance,
  &::clarifai::api::_MultiCollectorResponse_default_instance_._instance,
  &::clarifai::api::_SingleCollectorResponse_default_instance_._instance,
  &::clarifai::api::_PostStatValuesRequest_default_instance_._instance,
  &::clarifai::api::_MultiStatValueResponse_default_instance_._instance,
  &::clarifai::api::_PostStatValuesAggregateRequest_default_instance_._instance,
  &::clarifai::api::_MultiStatValueAggregateResponse_default_instance_._instance,
  &::clarifai::api::_PostTrendingMetricsViewRequest_default_instance_._instance,
  &::clarifai::api::_ListTrendingMetricsViewsRequest_default_instance_._instance,
  &::clarifai::api::_MultiTrendingMetricsViewResponse_default_instance_._instance,
  &::clarifai::api::_GetModuleRequest_default_instance_._instance,
  &::clarifai::api::_ListModulesRequest_default_instance_._instance,
  &::clarifai::api::_PostModulesRequest_default_instance_._instance,
  &::clarifai::api::_PatchModulesRequest_default_instance_._instance,
  &::clarifai::api::_DeleteModulesRequest_default_instance_._instance,
  &::clarifai::api::_SingleModuleResponse_default_instance_._instance,
  &::clarifai::api::_MultiModuleResponse_default_instance_._instance,
  &::clarifai::api::_GetModuleVersionRequest_default_instance_._instance,
  &::clarifai::api::_ListModuleVersionsRequest_default_instance_._instance,
  &::clarifai::api::_PostModuleVersionsRequest_default_instance_._instance,
  &::clarifai::api::_DeleteModuleVersionsRequest_default_instance_._instance,
  &::clarifai::api::_SingleModuleVersionResponse_default_instance_._instance,
  &::clarifai::api::_MultiModuleVersionResponse_default_instance_._instance,
  &::clarifai::api::_GetInstalledModuleVersionRequest_default_instance_._instance,
  &::clarifai::api::_ListInstalledModuleVersionsRequest_default_instance_._instance,
  &::clarifai::api::_PostInstalledModuleVersionsRequest_default_instance_._instance,
  &::clarifai::api::_PostInstalledModuleVersionsKeyRequest_default_instance_._instance,
  &::clarifai::api::_DeleteInstalledModuleVersionsRequest_default_instance_._instance,
  &::clarifai::api::_SingleInstalledModuleVersionResponse_default_instance_._instance,
  &::clarifai::api::_MultiInstalledModuleVersionResponse_default_instance_._instance,
  &::clarifai::api::_PostBulkOperationsRequest_default_instance_._instance,
  &::clarifai::api::_ListBulkOperationsRequest_default_instance_._instance,
  &::clarifai::api::_GetBulkOperationRequest_default_instance_._instance,
  &::clarifai::api::_CancelBulkOperationRequest_default_instance_._instance,
  &::clarifai::api::_DeleteBulkOperationRequest_default_instance_._instance,
  &::clarifai::api::_SingleBulkOperationsResponse_default_instance_._instance,
  &::clarifai::api::_MultiBulkOperationsResponse_default_instance_._instance,
  &::clarifai::api::_ListInputsAddJobsRequest_default_instance_._instance,
  &::clarifai::api::_GetInputsAddJobRequest_default_instance_._instance,
  &::clarifai::api::_MultiInputsAddJobResponse_default_instance_._instance,
  &::clarifai::api::_SingleInputsAddJobResponse_default_instance_._instance,
  &::clarifai::api::_PostUploadsRequest_default_instance_._instance,
  &::clarifai::api::_DeleteUploadsRequest_default_instance_._instance,
  &::clarifai::api::_ListUploadsRequest_default_instance_._instance,
  &::clarifai::api::_GetUploadRequest_default_instance_._instance,
  &::clarifai::api::_SingleUploadResponse_default_instance_._instance,
  &::clarifai::api::_MultiUploadResponse_default_instance_._instance,
  &::clarifai::api::_PutUploadContentPartsRequest_default_instance_._instance,
  &::clarifai::api::_PostInputsDataSourcesRequest_default_instance_._instance,
  &::clarifai::api::_GetInputsExtractionJobRequest_default_instance_._instance,
  &::clarifai::api::_ListInputsExtractionJobsRequest_default_instance_._instance,
  &::clarifai::api::_SingleInputsExtractionJobResponse_default_instance_._instance,
  &::clarifai::api::_MultiInputsExtractionJobResponse_default_instance_._instance,
};

const char descriptor_table_protodef_proto_2fclarifai_2fapi_2fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  { '\n', ' ', 'p', 'r', 'o', 't', 'o', '/', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '/', 'a', 'p', 'i', '/', 's', 'e', 'r', 'v', 
  'i', 'c', 'e', '.', 'p', 'r', 'o', 't', 'o', '\022', '\014', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '\032', '\"', 
  'p', 'r', 'o', 't', 'o', '/', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '/', 'a', 'p', 'i', '/', 'r', 'e', 's', 'o', 'u', 'r', 
  'c', 'e', 's', '.', 'p', 'r', 'o', 't', 'o', '\032', '&', 'p', 'r', 'o', 't', 'o', '/', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '/', 'a', 'p', 'i', '/', 's', 't', 'a', 't', 'u', 's', '/', 's', 't', 'a', 't', 'u', 's', '.', 'p', 'r', 'o', 't', 'o', '\032', 
  ')', 'p', 'r', 'o', 't', 'o', '/', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '/', 'a', 'p', 'i', '/', 'u', 't', 'i', 'l', 's', 
  '/', 'e', 'x', 't', 'e', 'n', 's', 'i', 'o', 'n', 's', '.', 'p', 'r', 'o', 't', 'o', '\032', '%', 'p', 'r', 'o', 't', 'o', '/', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '/', 'a', 'u', 't', 'h', '/', 's', 'c', 'o', 'p', 'e', '/', 's', 'c', 'o', 'p', 'e', 
  '.', 'p', 'r', 'o', 't', 'o', '\032', '(', 'p', 'r', 'o', 't', 'o', '/', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '/', 'a', 'u', 
  't', 'h', '/', 'u', 't', 'i', 'l', '/', 'e', 'x', 't', 'e', 'n', 's', 'i', 'o', 'n', '.', 'p', 'r', 'o', 't', 'o', '\032', '+', 
  'p', 'r', 'o', 't', 'o', '/', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '/', 'a', 'p', 'i', '/', 's', 't', 'a', 't', 'u', 's', 
  '/', 's', 't', 'a', 't', 'u', 's', '_', 'c', 'o', 'd', 'e', '.', 'p', 'r', 'o', 't', 'o', '\032', '\034', 'g', 'o', 'o', 'g', 'l', 
  'e', '/', 'a', 'p', 'i', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', '.', 'p', 'r', 'o', 't', 'o', '\032', '\036', 
  'g', 'o', 'o', 'g', 'l', 'e', '/', 'p', 'r', 'o', 't', 'o', 'b', 'u', 'f', '/', 'd', 'u', 'r', 'a', 't', 'i', 'o', 'n', '.', 
  'p', 'r', 'o', 't', 'o', '\032', '\034', 'g', 'o', 'o', 'g', 'l', 'e', '/', 'p', 'r', 'o', 't', 'o', 'b', 'u', 'f', '/', 's', 't', 
  'r', 'u', 'c', 't', '.', 'p', 'r', 'o', 't', 'o', '\032', '\037', 'g', 'o', 'o', 'g', 'l', 'e', '/', 'p', 'r', 'o', 't', 'o', 'b', 
  'u', 'f', '/', 't', 'i', 'm', 'e', 's', 't', 'a', 'm', 'p', '.', 'p', 'r', 'o', 't', 'o', '\"', ',', '\n', '\n', 'P', 'a', 'g', 
  'i', 'n', 'a', 't', 'i', 'o', 'n', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 
  'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\002', ' ', '\001', '(', '\r', '\"', 'p', '\n', '\024', 'G', 'e', 't', 'A', 'n', 'n', 'o', 
  't', 'a', 't', 'i', 'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', 
  '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\025', '\n', '\r', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 
  'n', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\020', '\n', '\010', 'i', 'n', 'p', 'u', 't', '_', 'i', 'd', '\030', '\003', ' ', 
  '\001', '(', '\t', '\"', '\267', '\002', '\n', '\026', 'L', 'i', 's', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 
  'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', 
  '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 
  'D', 'S', 'e', 't', '\022', '\013', '\n', '\003', 'i', 'd', 's', '\030', '\002', ' ', '\003', '(', '\t', '\022', '\021', '\n', '\t', 'i', 'n', 'p', 'u', 
  't', '_', 'i', 'd', 's', '\030', '\003', ' ', '\003', '(', '\t', '\022', '\020', '\n', '\010', 'u', 's', 'e', 'r', '_', 'i', 'd', 's', '\030', '\t', 
  ' ', '\003', '(', '\t', '\022', '\031', '\n', '\021', 'm', 'o', 'd', 'e', 'l', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', 's', 
  '\030', '\n', ' ', '\003', '(', '\t', '\022', '-', '\n', '\010', 's', 't', 'a', 't', 'u', 's', 'e', 's', '\030', '\005', ' ', '\003', '(', '\013', '2', 
  '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 
  't', 'u', 's', '\022', '\034', '\n', '\024', 'l', 'i', 's', 't', '_', 'a', 'l', 'l', '_', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 
  'n', 's', '\030', '\006', ' ', '\001', '(', '\010', '\022', '\033', '\n', '\023', 'r', 'e', 't', 'u', 'r', 'n', '_', 'm', 'o', 'd', 'e', 'l', '_', 
  'o', 'u', 't', 'p', 'u', 't', '\030', '\014', ' ', '\001', '(', '\010', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\007', ' ', '\001', '(', 
  '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\010', ' ', '\001', '(', '\r', '\022', '\017', '\n', '\007', 't', 'a', 
  's', 'k', '_', 'i', 'd', '\030', '\013', ' ', '\001', '(', '\t', 'J', '\004', '\010', '\004', '\020', '\005', '\"', 'x', '\n', '\026', 'P', 'o', 's', 't', 
  'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '-', '\n', '\013', 'a', 'n', 'n', 'o', 
  't', 'a', 't', 'i', 'o', 'n', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\030', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '\"', '\211', '\001', '\n', '\027', 'P', 'a', 't', 'c', 'h', 'A', 
  'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '-', '\n', '\013', 'a', 'n', 'n', 'o', 't', 
  'a', 't', 'i', 'o', 'n', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\030', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\003', 
  ' ', '\001', '(', '\t', '\"', '\271', '\001', '\n', '\035', 'P', 'a', 't', 'c', 'h', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', 
  'S', 't', 'a', 't', 'u', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', 
  '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '4', '\n', '\013', 's', 't', 'a', 't', 'u', 's', '_', 'c', 'o', 
  'd', 'e', '\030', '\002', ' ', '\001', '(', '\016', '2', '\037', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 
  't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', 'C', 'o', 'd', 'e', '\022', '\020', '\n', '\010', 'u', 's', 'e', 'r', '_', 
  'i', 'd', 's', '\030', '\003', ' ', '\003', '(', '\t', '\022', '\017', '\n', '\007', 't', 'a', 's', 'k', '_', 'i', 'd', '\030', '\004', ' ', '\001', '(', 
  '\t', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\005', ' ', '\001', '(', '\t', '\"', 'v', '\n', '\036', 'P', 'a', 't', 'c', 
  'h', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', 'S', 't', 'a', 't', 'u', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 
  'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '\020', '\n', '\010', 
  'u', 's', 'e', 'r', '_', 'i', 'd', 's', '\030', '\002', ' ', '\003', '(', '\t', '\022', '\025', '\n', '\r', 'u', 'p', 'd', 'a', 't', 'e', 'd', 
  '_', 'c', 'o', 'u', 'n', 't', '\030', '\003', ' ', '\001', '(', '\r', '\"', 's', '\n', '\027', 'D', 'e', 'l', 'e', 't', 'e', 'A', 'n', 'n', 
  'o', 't', 'a', 't', 'i', 'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 'i', 'n', 'p', 'u', 't', '_', 'i', 'd', 
  '\030', '\002', ' ', '\001', '(', '\t', '\022', '\025', '\n', '\r', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '_', 'i', 'd', '\030', '\003', 
  ' ', '\001', '(', '\t', '\"', 'k', '\n', '\030', 'D', 'e', 'l', 'e', 't', 'e', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', 
  'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', 
  '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 
  'p', 'I', 'D', 'S', 'e', 't', '\022', '\013', '\n', '\003', 'i', 'd', 's', '\030', '\002', ' ', '\003', '(', '\t', '\022', '\021', '\n', '\t', 'i', 'n', 
  'p', 'u', 't', '_', 'i', 'd', 's', '\030', '\003', ' ', '\003', '(', '\t', '\"', 'u', '\n', '\030', 'S', 'i', 'n', 'g', 'l', 'e', 'A', 'n', 
  'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 
  's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 
  'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', ',', '\n', '\n', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 
  '\030', '\002', ' ', '\001', '(', '\013', '2', '\030', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'A', 'n', 'n', 
  'o', 't', 'a', 't', 'i', 'o', 'n', '\"', '{', '\n', '\027', 'M', 'u', 'l', 't', 'i', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 
  'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', 
  '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 
  'a', 't', 'u', 's', '\022', '3', '\n', '\013', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', '\030', '\002', ' ', '\003', '(', '\013', 
  '2', '\030', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 
  'n', 'B', '\004', '\200', '\265', '\030', '\001', '\"', '[', '\n', '\r', 'G', 'e', 't', 'A', 'p', 'p', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', 
  '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\031', 
  '\n', '\021', 'a', 'd', 'd', 'i', 't', 'i', 'o', 'n', 'a', 'l', '_', 'f', 'i', 'e', 'l', 'd', 's', '\030', '\002', ' ', '\003', '(', '\t', 
  '\"', '\245', '\002', '\n', '\017', 'L', 'i', 's', 't', 'A', 'p', 'p', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\014', '\n', '\004', 'p', 'a', 
  'g', 'e', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', 
  '\r', '\022', '\026', '\n', '\016', 's', 'o', 'r', 't', '_', 'a', 's', 'c', 'e', 'n', 'd', 'i', 'n', 'g', '\030', '\005', ' ', '\001', '(', '\010', 
  '\022', '\026', '\n', '\014', 's', 'o', 'r', 't', '_', 'b', 'y', '_', 'n', 'a', 'm', 'e', '\030', '\006', ' ', '\001', '(', '\010', 'H', '\000', '\022', 
  '\035', '\n', '\023', 's', 'o', 'r', 't', '_', 'b', 'y', '_', 'm', 'o', 'd', 'i', 'f', 'i', 'e', 'd', '_', 'a', 't', '\030', '\007', ' ', 
  '\001', '(', '\010', 'H', '\000', '\022', '\r', '\n', '\005', 'q', 'u', 'e', 'r', 'y', '\030', '\010', ' ', '\001', '(', '\t', '\022', '\020', '\n', '\004', 'n', 
  'a', 'm', 'e', '\030', '\004', ' ', '\001', '(', '\t', 'B', '\002', '\030', '\001', '\022', '\025', '\n', '\r', 'f', 'e', 'a', 't', 'u', 'r', 'e', 'd', 
  '_', 'o', 'n', 'l', 'y', '\030', '\t', ' ', '\001', '(', '\010', '\022', '\024', '\n', '\014', 's', 't', 'a', 'r', 'r', 'e', 'd', '_', 'o', 'n', 
  'l', 'y', '\030', '\013', ' ', '\001', '(', '\010', '\022', '\031', '\n', '\021', 'a', 'd', 'd', 'i', 't', 'i', 'o', 'n', 'a', 'l', '_', 'f', 'i', 
  'e', 'l', 'd', 's', '\030', '\n', ' ', '\003', '(', '\t', 'B', '\t', '\n', '\007', 's', 'o', 'r', 't', '_', 'b', 'y', '\"', 'c', '\n', '\017', 
  'P', 'o', 's', 't', 'A', 'p', 'p', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 
  'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\037', '\n', '\004', 'a', 'p', 'p', 's', '\030', '\002', ' ', 
  '\003', '(', '\013', '2', '\021', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'A', 'p', 'p', '\"', 'C', '\n', 
  '\020', 'D', 'e', 'l', 'e', 't', 'e', 'A', 'p', 'p', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\"', '\271', '\001', '\n', '\020', 'P', 'a', 't', 'c', 
  'h', 'A', 'p', 'p', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 
  's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\037', '\n', '\004', 'a', 'p', 'p', 's', '\030', '\002', ' ', '\003', '(', '\013', 
  '2', '\021', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'A', 'p', 'p', '\022', '\016', '\n', '\006', 'a', 'c', 
  't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\t', '\022', '2', '\n', '\017', 'm', 'e', 't', 'a', 'd', 'a', 't', 'a', '_', 'a', 'c', 
  't', 'i', 'o', 'n', '\030', '\004', ' ', '\001', '(', '\013', '2', '\031', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'P', 'a', 't', 'c', 'h', 'A', 'c', 't', 'i', 'o', 'n', '\022', '\017', '\n', '\007', 'r', 'e', 'i', 'n', 'd', 'e', 'x', '\030', '\005', 
  ' ', '\001', '(', '\010', '\"', '\267', '\001', '\n', '\017', 'P', 'a', 't', 'c', 'h', 'A', 'p', 'p', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', 
  '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\036', 
  '\n', '\003', 'a', 'p', 'p', '\030', '\002', ' ', '\001', '(', '\013', '2', '\021', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'A', 'p', 'p', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\t', '\022', '2', '\n', '\017', 
  'm', 'e', 't', 'a', 'd', 'a', 't', 'a', '_', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\004', ' ', '\001', '(', '\013', '2', '\031', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'A', 'c', 't', 'i', 'o', 'n', '\022', '\017', 
  '\n', '\007', 'r', 'e', 'i', 'n', 'd', 'e', 'x', '\030', '\005', ' ', '\001', '(', '\010', '\"', '\201', '\001', '\n', '\023', 'P', 'a', 't', 'c', 'h', 
  'A', 'p', 'p', 's', 'I', 'd', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', ')', '\n', '\003', 'i', 'd', 's', '\030', '\003', ' ', '\003', '(', 
  '\013', '2', '\034', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'I', 'd', 'U', 'p', 'd', 'a', 't', 'e', 
  'S', 'o', 'u', 'r', 'c', 'e', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\004', ' ', '\001', '(', '\t', '\"', '\243', '\001', 
  '\n', '\027', 'P', 'o', 's', 't', 'A', 'p', 'p', 's', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', 
  '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', 
  ')', '\n', '\t', 'a', 'p', 'p', '_', 'q', 'u', 'e', 'r', 'y', '\030', '\002', ' ', '\001', '(', '\013', '2', '\026', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'A', 'p', 'p', 'Q', 'u', 'e', 'r', 'y', '\022', ',', '\n', '\n', 'p', 'a', 'g', 'i', 
  'n', 'a', 't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\013', '2', '\030', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'P', 'a', 'g', 'i', 'n', 'a', 't', 'i', 'o', 'n', '\"', '`', '\n', '\021', 'S', 'i', 'n', 'g', 'l', 'e', 'A', 'p', 
  'p', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', 
  '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 
  'a', 't', 'u', 's', '\022', '\036', '\n', '\003', 'a', 'p', 'p', '\030', '\002', ' ', '\001', '(', '\013', '2', '\021', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'A', 'p', 'p', '\"', 'f', '\n', '\020', 'M', 'u', 'l', 't', 'i', 'A', 'p', 'p', 'R', 'e', 
  's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 
  's', '\022', '%', '\n', '\004', 'a', 'p', 'p', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\021', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'A', 'p', 'p', 'B', '\004', '\200', '\265', '\030', '\001', '\"', '\213', '\001', '\n', '\030', 'L', 'i', 's', 't', 'C', 
  'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\036', '\n', '\026', 'l', 'i', 's', 
  't', '_', 'a', 'l', 'l', '_', 'c', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', 's', '\030', '\002', ' ', '\001', '(', '\010', 
  '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 
  'e', '\030', '\004', ' ', '\001', '(', '\r', '\"', '~', '\n', '\030', 'P', 'o', 's', 't', 'C', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 
  'o', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 
  'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '1', '\n', '\r', 'c', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', 
  's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'C', 'o', 
  'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', '\"', '\217', '\001', '\n', '\031', 'P', 'a', 't', 'c', 'h', 'C', 'o', 'l', 'l', 'a', 
  'b', 'o', 'r', 'a', 't', 'o', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 
  'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '1', '\n', '\r', 'c', 'o', 'l', 'l', 'a', 'b', 'o', 
  'r', 'a', 't', 'o', 'r', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'C', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', 
  '\030', '\003', ' ', '\001', '(', '\t', '\"', '|', '\n', '\032', 'D', 'e', 'l', 'e', 't', 'e', 'C', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 
  't', 'o', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 
  'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\030', '\n', '\020', 'c', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 
  'r', '_', 'i', 'd', 's', '\030', '\002', ' ', '\003', '(', '\t', '\022', '\023', '\n', '\013', 'u', 's', 'e', 'r', '_', 'e', 'm', 'a', 'i', 'l', 
  's', '\030', '\003', ' ', '\003', '(', '\t', '\"', '\202', '\001', '\n', '\032', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 
  'a', 't', 'o', 'r', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', 
  ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 
  's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '7', '\n', '\r', 'c', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', 's', 
  '\030', '\002', ' ', '\003', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'C', 'o', 'l', 
  'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', 'B', '\004', '\200', '\265', '\030', '\001', '\"', 'l', '\n', '\031', 'L', 'i', 's', 't', 'C', 'o', 
  'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 
  'e', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', 
  '\"', '\205', '\001', '\n', '\033', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'i', 'o', 'n', 's', 'R', 
  'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 
  'u', 's', '\022', '9', '\n', '\016', 'c', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'i', 'o', 'n', 's', '\030', '\002', ' ', '\003', '(', 
  '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'C', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 
  'a', 't', 'i', 'o', 'n', 'B', '\004', '\200', '\265', '\030', '\001', '\"', '.', '\n', '\024', 'G', 'e', 't', 'S', 't', 'a', 't', 'u', 's', 'C', 
  'o', 'd', 'e', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '\026', '\n', '\016', 's', 't', 'a', 't', 'u', 's', '_', 'c', 'o', 'd', 'e', 
  '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\t', '\"', '\030', '\n', '\026', 'L', 'i', 's', 't', 'S', 't', 'a', 't', 'u', 's', 'C', 'o', 
  'd', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\"', 'G', '\n', '\030', 'S', 'i', 'n', 'g', 'l', 'e', 'S', 't', 'a', 't', 'u', 
  's', 'C', 'o', 'd', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', 
  ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 
  's', '.', 'S', 't', 'a', 't', 'u', 's', '\"', 'u', '\n', '\027', 'M', 'u', 'l', 't', 'i', 'S', 't', 'a', 't', 'u', 's', 'C', 'o', 
  'd', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', 
  '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 
  't', 'a', 't', 'u', 's', '\022', '-', '\n', '\010', 's', 't', 'a', 't', 'u', 's', 'e', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\033', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 
  'u', 's', '\"', 'X', '\n', '\021', 'G', 'e', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', 
  '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\022', '\n', 
  '\n', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\"', 'f', '\n', '\023', 'L', 'i', 's', 't', 
  'C', 'o', 'n', 'c', 'e', 'p', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 
  'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\002', ' ', 
  '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\"', '\221', '\001', '\n', 
  '\030', 'L', 'i', 's', 't', 'M', 'o', 'd', 'e', 'l', 'C', 'o', 'n', 'c', 'e', 'p', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', 
  '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', 
  '\020', '\n', '\010', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\022', '\n', '\n', 'v', 'e', 'r', 's', 
  'i', 'o', 'n', '_', 'i', 'd', '\030', '\003', ' ', '\001', '(', '\t', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\004', ' ', '\001', '(', 
  '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\005', ' ', '\001', '(', '\r', '\"', '\257', '\001', '\n', '\033', 'P', 
  'o', 's', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 's', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 
  't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', 
  '\022', '1', '\n', '\r', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'q', 'u', 'e', 'r', 'y', '\030', '\002', ' ', '\001', '(', '\013', '2', '\032', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'Q', 'u', 'e', 'r', 
  'y', '\022', ',', '\n', '\n', 'p', 'a', 'g', 'i', 'n', 'a', 't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\013', '2', '\030', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 'g', 'i', 'n', 'a', 't', 'i', 'o', 'n', '\"', 'o', '\n', 
  '\023', 'P', 'o', 's', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\'', '\n', '\010', 'c', 'o', 
  'n', 'c', 'e', 'p', 't', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\025', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'C', 'o', 'n', 'c', 'e', 'p', 't', '\"', '\200', '\001', '\n', '\024', 'P', 'a', 't', 'c', 'h', 'C', 'o', 'n', 'c', 'e', 
  'p', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 
  'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\'', '\n', '\010', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', '\030', '\002', ' ', '\003', 
  '(', '\013', '2', '\025', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'C', 'o', 'n', 'c', 'e', 'p', 't', 
  '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\t', '\"', 'j', '\n', '\027', 'G', 'e', 't', 'C', 'o', 
  'n', 'c', 'e', 'p', 't', 'C', 'o', 'u', 'n', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', 
  '\030', '\002', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\"', 
  'l', '\n', '\025', 'S', 'i', 'n', 'g', 'l', 'e', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', 
  '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '&', '\n', '\007', 'c', 'o', 
  'n', 'c', 'e', 'p', 't', '\030', '\002', ' ', '\001', '(', '\013', '2', '\025', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'C', 'o', 'n', 'c', 'e', 'p', 't', '\"', 'r', '\n', '\024', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'n', 'c', 'e', 'p', 't', 
  'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', 
  '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 
  't', 'u', 's', '\022', '-', '\n', '\010', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\025', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'B', '\004', '\200', '\265', '\030', '\001', 
  '\"', '\202', '\001', '\n', '\031', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'C', 'o', 'u', 'n', 't', 'R', 'e', 's', 
  'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', 
  '\022', '8', '\n', '\016', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'c', 'o', 'u', 'n', 't', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', 
  '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'C', 'o', 'u', 
  'n', 't', 'B', '\004', '\200', '\265', '\030', '\001', '\"', '\261', '\001', '\n', '\033', 'L', 'i', 's', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'R', 
  'e', 'l', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 
  'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\022', '\n', '\n', 'c', 'o', 'n', 'c', 'e', 'p', 't', 
  '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\021', '\n', '\t', 'p', 'r', 'e', 'd', 'i', 'c', 'a', 't', 'e', '\030', '\003', ' ', 
  '\001', '(', '\t', '\022', '\032', '\n', '\022', 'k', 'n', 'o', 'w', 'l', 'e', 'd', 'g', 'e', '_', 'g', 'r', 'a', 'p', 'h', '_', 'i', 'd', 
  '\030', '\004', ' ', '\001', '(', '\t', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\005', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 
  'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\006', ' ', '\001', '(', '\r', '\"', '\234', '\001', '\n', '\033', 'P', 'o', 's', 't', 'C', 'o', 'n', 
  'c', 'e', 'p', 't', 'R', 'e', 'l', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\022', '\n', '\n', 'c', 'o', 
  'n', 'c', 'e', 'p', 't', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '8', '\n', '\021', 'c', 'o', 'n', 'c', 'e', 'p', 't', 
  '_', 'r', 'e', 'l', 'a', 't', 'i', 'o', 'n', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '\035', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'R', 'e', 'l', 'a', 't', 'i', 'o', 'n', '\"', 'q', '\n', 
  '\035', 'D', 'e', 'l', 'e', 't', 'e', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'R', 'e', 'l', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 
  'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', 
  '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 
  'D', 'S', 'e', 't', '\022', '\022', '\n', '\n', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', 
  '\013', '\n', '\003', 'i', 'd', 's', '\030', '\003', ' ', '\003', '(', '\t', '\"', 'M', '\n', '\032', 'L', 'i', 's', 't', 'K', 'n', 'o', 'w', 'l', 
  'e', 'd', 'g', 'e', 'G', 'r', 'a', 'p', 'h', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\"', '\205', '\001', '\n', '\032', 'P', 'o', 's', 't', 
  'K', 'n', 'o', 'w', 'l', 'e', 'd', 'g', 'e', 'G', 'r', 'a', 'p', 'h', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', 
  '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '6', '\n', '\020', 
  'k', 'n', 'o', 'w', 'l', 'e', 'd', 'g', 'e', '_', 'g', 'r', 'a', 'p', 'h', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\034', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'K', 'n', 'o', 'w', 'l', 'e', 'd', 'g', 'e', 'G', 'r', 'a', 
  'p', 'h', '\"', '\217', '\001', '\n', '\035', 'P', 'o', 's', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'M', 'a', 'p', 'p', 'i', 'n', 'g', 
  'J', 'o', 'b', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 
  'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '=', '\n', '\024', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'm', 'a', 'p', 
  'p', 'i', 'n', 'g', '_', 'j', 'o', 'b', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\037', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'M', 'a', 'p', 'p', 'i', 'n', 'g', 'J', 'o', 'b', '\"', '\213', 
  '\001', '\n', '\034', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'R', 'e', 'l', 'a', 't', 'i', 'o', 'n', 'R', 'e', 
  's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 
  's', '\022', '>', '\n', '\021', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'r', 'e', 'l', 'a', 't', 'i', 'o', 'n', 's', '\030', '\002', ' ', 
  '\003', '(', '\013', '2', '\035', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'C', 'o', 'n', 'c', 'e', 'p', 
  't', 'R', 'e', 'l', 'a', 't', 'i', 'o', 'n', 'B', '\004', '\200', '\265', '\030', '\001', '\"', '\210', '\001', '\n', '\033', 'M', 'u', 'l', 't', 'i', 
  'K', 'n', 'o', 'w', 'l', 'e', 'd', 'g', 'e', 'G', 'r', 'a', 'p', 'h', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', 
  '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '<', '\n', '\020', 'k', 'n', 'o', 'w', 
  'l', 'e', 'd', 'g', 'e', '_', 'g', 'r', 'a', 'p', 'h', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\034', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'K', 'n', 'o', 'w', 'l', 'e', 'd', 'g', 'e', 'G', 'r', 'a', 'p', 'h', 'B', '\004', 
  '\200', '\265', '\030', '\001', '\"', 'Z', '\n', '\036', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'M', 'a', 'p', 'p', 'i', 
  'n', 'g', 'J', 'o', 'b', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', 
  ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 
  's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '\013', '\n', '\003', 'i', 'd', 's', '\030', '\002', ' ', '\003', '(', '\t', '\"', 'r', '\n', '\031', 
  'G', 'e', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 'R', 'e', 'q', 'u', 'e', 's', 't', 
  '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', 
  '\022', '\n', '\n', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\020', '\n', '\010', 'l', 'a', 
  'n', 'g', 'u', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\t', '\"', '\202', '\001', '\n', '\033', 'L', 'i', 's', 't', 'C', 'o', 'n', 'c', 
  'e', 'p', 't', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\022', '\n', '\n', 'c', 'o', 'n', 
  'c', 'e', 'p', 't', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', 
  '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\004', ' ', '\001', '(', '\r', '\"', '\255', '\001', '\n', '\034', 
  'P', 'a', 't', 'c', 'h', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', 'R', 'e', 'q', 'u', 
  'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', 
  '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 
  'e', 't', '\022', '\022', '\n', '\n', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '8', '\n', 
  '\021', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', 
  '\035', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'L', 'a', 'n', 
  'g', 'u', 'a', 'g', 'e', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\004', ' ', '\001', '(', '\t', '\"', '\234', '\001', '\n', 
  '\033', 'P', 'o', 's', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', 'R', 'e', 'q', 'u', 
  'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', 
  '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 
  'e', 't', '\022', '\022', '\n', '\n', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '8', '\n', 
  '\021', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', 
  '\035', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'L', 'a', 'n', 
  'g', 'u', 'a', 'g', 'e', '\"', '\205', '\001', '\n', '\035', 'S', 'i', 'n', 'g', 'l', 'e', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'L', 'a', 
  'n', 'g', 'u', 'a', 'g', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', 
  '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 
  'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '7', '\n', '\020', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'l', 'a', 'n', 'g', 
  'u', 'a', 'g', 'e', '\030', '\002', ' ', '\001', '(', '\013', '2', '\035', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', '\"', '\213', '\001', '\n', '\034', 'M', 'u', 'l', 't', 
  'i', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', 
  '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '>', '\n', '\021', 'c', 'o', 
  'n', 'c', 'e', 'p', 't', '_', 'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\035', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'L', 'a', 'n', 'g', 'u', 'a', 
  'g', 'e', 'B', '\004', '\200', '\265', '\030', '\001', '\"', 'T', '\n', '\017', 'G', 'e', 't', 'I', 'n', 'p', 'u', 't', 'R', 'e', 'q', 'u', 'e', 
  's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 
  't', '\022', '\020', '\n', '\010', 'i', 'n', 'p', 'u', 't', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\"', 'l', '\n', '\026', 'G', 'e', 
  't', 'I', 'n', 'p', 'u', 't', 'S', 'a', 'm', 'p', 'l', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\017', '\n', '\007', 't', 'a', 
  's', 'k', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\020', '\n', '\010', 'u', 's', 'e', 'r', '_', 'i', 'd', 's', '\030', '\003', 
  ' ', '\003', '(', '\t', '\"', '\236', '\001', '\n', '\021', 'L', 'i', 's', 't', 'I', 'n', 'p', 'u', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 
  't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', 
  '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 
  'e', '\030', '\003', ' ', '\001', '(', '\r', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\005', ' ', '\001', '(', '\013', '2', '\033', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 
  'u', 's', '\022', '\013', '\n', '\003', 'i', 'd', 's', '\030', '\004', ' ', '\003', '(', '\t', '\"', '\222', '\001', '\n', '\023', 'S', 't', 'r', 'e', 'a', 
  'm', 'I', 'n', 'p', 'u', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', 
  '\030', '\002', ' ', '\001', '(', '\r', '\022', '\017', '\n', '\007', 'l', 'a', 's', 't', '_', 'i', 'd', '\030', '\003', ' ', '\001', '(', '\t', '\022', '\023', 
  '\n', '\013', 'o', 'r', 'd', 'e', 'r', '_', 'b', 'y', '_', 'i', 'd', '\030', '\005', ' ', '\001', '(', '\010', '\022', '\022', '\n', '\n', 'd', 'e', 
  's', 'c', 'e', 'n', 'd', 'i', 'n', 'g', '\030', '\004', ' ', '\001', '(', '\010', '\"', '\204', '\001', '\n', '\021', 'P', 'o', 's', 't', 'I', 'n', 
  'p', 'u', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 
  'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '#', '\n', '\006', 'i', 'n', 'p', 'u', 't', 's', '\030', '\002', ' ', '\003', '(', 
  '\013', '2', '\023', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'I', 'n', 'p', 'u', 't', '\022', '\031', '\n', 
  '\021', 'i', 'n', 'p', 'u', 't', 's', '_', 'a', 'd', 'd', '_', 'j', 'o', 'b', '_', 'i', 'd', '\030', '\003', ' ', '\001', '(', '\t', '\"', 
  'z', '\n', '\022', 'P', 'a', 't', 'c', 'h', 'I', 'n', 'p', 'u', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 
  'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '#', '\n', '\006', 'i', 
  'n', 'p', 'u', 't', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\023', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'I', 'n', 'p', 'u', 't', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\t', '\"', 'W', 
  '\n', '\022', 'D', 'e', 'l', 'e', 't', 'e', 'I', 'n', 'p', 'u', 't', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 'i', 'n', 
  'p', 'u', 't', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\"', 'Y', '\n', '\023', 'D', 'e', 'l', 'e', 't', 'e', 'I', 'n', 'p', 
  'u', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 
  'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\013', '\n', '\003', 'i', 'd', 's', '\030', '\002', ' ', '\003', '(', '\t', 'J', '\004', '\010', 
  '\003', '\020', '\004', '\"', 'f', '\n', '\023', 'S', 'i', 'n', 'g', 'l', 'e', 'I', 'n', 'p', 'u', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 
  'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '\"', '\n', '\005', 
  'i', 'n', 'p', 'u', 't', '\030', '\002', ' ', '\001', '(', '\013', '2', '\023', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'I', 'n', 'p', 'u', 't', '\"', '\240', '\001', '\n', '\022', 'M', 'u', 'l', 't', 'i', 'I', 'n', 'p', 'u', 't', 'R', 'e', 's', 
  'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', 
  '\022', ')', '\n', '\006', 'i', 'n', 'p', 'u', 't', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\023', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'I', 'n', 'p', 'u', 't', 'B', '\004', '\200', '\265', '\030', '\001', '\022', '2', '\n', '\016', 'i', 'n', 'p', 
  'u', 't', 's', '_', 'a', 'd', 'd', '_', 'j', 'o', 'b', '\030', '\003', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'I', 'n', 'p', 'u', 't', 's', 'A', 'd', 'd', 'J', 'o', 'b', '\"', 'r', '\n', '\034', 'M', 
  'u', 'l', 't', 'i', 'I', 'n', 'p', 'u', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 
  's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '%', '\n', 
  '\004', 'h', 'i', 't', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '\021', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'H', 'i', 't', 'B', '\004', '\200', '\265', '\030', '\001', '\"', 'q', '\n', '\030', 'S', 'i', 'n', 'g', 'l', 'e', 'I', 'n', 'p', 'u', 
  't', 'C', 'o', 'u', 'n', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', 
  '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 
  'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '(', '\n', '\006', 'c', 'o', 'u', 'n', 't', 's', '\030', '\002', ' ', '\001', '(', '\013', 
  '2', '\030', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'I', 'n', 'p', 'u', 't', 'C', 'o', 'u', 'n', 
  't', '\"', 'G', '\n', '\024', 'G', 'e', 't', 'I', 'n', 'p', 'u', 't', 'C', 'o', 'u', 'n', 't', 'R', 'e', 'q', 'u', 'e', 's', 't', 
  '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\"', 
  'f', '\n', '\023', 'L', 'i', 's', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', 
  '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\014', '\n', '\004', 
  'p', 'a', 'g', 'e', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\003', ' ', 
  '\001', '(', '\r', '\"', 'X', '\n', '\021', 'G', 'e', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', 
  '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\022', 
  '\n', '\n', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\"', 'o', '\n', '\023', 'P', 'o', 's', 
  't', 'D', 'a', 't', 'a', 's', 'e', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\'', '\n', '\010', 'd', 'a', 't', 'a', 's', 'e', 
  't', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\025', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 
  'a', 't', 'a', 's', 'e', 't', '\"', '\200', '\001', '\n', '\024', 'P', 'a', 't', 'c', 'h', 'D', 'a', 't', 'a', 's', 'e', 't', 's', 'R', 
  'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', 
  '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 
  'I', 'D', 'S', 'e', 't', '\022', '\'', '\n', '\010', 'd', 'a', 't', 'a', 's', 'e', 't', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\025', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'a', 't', 'a', 's', 'e', 't', '\022', '\016', '\n', '\006', 
  'a', 'c', 't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\t', '\"', '\204', '\001', '\n', '\026', 'P', 'a', 't', 'c', 'h', 'D', 'a', 't', 
  'a', 's', 'e', 't', 'I', 'd', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', ')', '\n', '\003', 'i', 'd', 's', '\030', '\003', ' ', '\003', '(', 
  '\013', '2', '\034', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'I', 'd', 'U', 'p', 'd', 'a', 't', 'e', 
  'S', 'o', 'u', 'r', 'c', 'e', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\004', ' ', '\001', '(', '\t', '\"', ']', '\n', 
  '\025', 'D', 'e', 'l', 'e', 't', 'e', 'D', 'a', 't', 'a', 's', 'e', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', 
  '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\023', '\n', '\013', 
  'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', 's', '\030', '\002', ' ', '\003', '(', '\t', '\"', 'r', '\n', '\024', 'M', 'u', 'l', 't', 
  'i', 'D', 'a', 't', 'a', 's', 'e', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 
  's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 
  'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '-', '\n', '\010', 'd', 'a', 't', 'a', 's', 'e', 't', 's', '\030', '\002', 
  ' ', '\003', '(', '\013', '2', '\025', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'a', 't', 'a', 's', 
  'e', 't', 'B', '\004', '\200', '\265', '\030', '\001', '\"', 'l', '\n', '\025', 'S', 'i', 'n', 'g', 'l', 'e', 'D', 'a', 't', 'a', 's', 'e', 't', 
  'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', 
  '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 
  't', 'u', 's', '\022', '&', '\n', '\007', 'd', 'a', 't', 'a', 's', 'e', 't', '\030', '\002', ' ', '\001', '(', '\013', '2', '\025', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'a', 't', 'a', 's', 'e', 't', '\"', '\177', '\n', '\030', 'L', 'i', 's', 
  't', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 
  'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\022', '\n', '\n', 'd', 
  'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\003', 
  ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\004', ' ', '\001', '(', '\r', '\"', 'o', '\n', 
  '\026', 'G', 'e', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 't', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', 
  '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\022', '\n', 
  '\n', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\020', '\n', '\010', 'i', 'n', 'p', 'u', 
  't', '_', 'i', 'd', '\030', '\003', ' ', '\001', '(', '\t', '\"', '\271', '\001', '\n', '\030', 'P', 'o', 's', 't', 'D', 'a', 't', 'a', 's', 'e', 
  't', 'I', 'n', 'p', 'u', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\022', '\n', '\n', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 
  'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '2', '\n', '\016', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'n', 'p', 'u', 't', 
  's', '\030', '\003', ' ', '\003', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'a', 
  't', 'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 't', '\022', '$', '\n', '\006', 's', 'e', 'a', 'r', 'c', 'h', '\030', '\004', ' ', '\001', '(', 
  '\013', '2', '\024', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'e', 'a', 'r', 'c', 'h', '\"', 't', 
  '\n', '\032', 'D', 'e', 'l', 'e', 't', 'e', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 't', 's', 'R', 'e', 'q', 'u', 
  'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', 
  '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 
  'e', 't', '\022', '\022', '\n', '\n', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\021', '\n', 
  '\t', 'i', 'n', 'p', 'u', 't', '_', 'i', 'd', 's', '\030', '\003', ' ', '\003', '(', '\t', '\"', '\322', '\001', '\n', '\031', 'M', 'u', 'l', 't', 
  'i', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 
  's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '8', '\n', '\016', 'd', 'a', 't', 'a', 's', 
  'e', 't', '_', 'i', 'n', 'p', 'u', 't', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 't', 'B', '\004', '\200', '\265', '\030', '\001', '\022', 
  'N', '\n', '\035', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'n', 'p', 'u', 't', 's', '_', 's', 'e', 'a', 'r', 'c', 'h', '_', 
  'a', 'd', 'd', '_', 'j', 'o', 'b', '\030', '\003', ' ', '\001', '(', '\013', '2', '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 't', 's', 'S', 'e', 'a', 'r', 'c', 'h', 'A', 'd', 
  'd', 'J', 'o', 'b', '\"', '|', '\n', '\032', 'S', 'i', 'n', 'g', 'l', 'e', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 
  't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', 
  '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 
  'a', 't', 'u', 's', '\022', '1', '\n', '\r', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'n', 'p', 'u', 't', '\030', '\002', ' ', '\001', 
  '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'a', 't', 'a', 's', 'e', 't', 
  'I', 'n', 'p', 'u', 't', '\"', '\201', '\001', '\n', '\032', 'L', 'i', 's', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 
  'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 
  'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\022', '\n', '\n', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', '\030', 
  '\002', ' ', '\001', '(', '\t', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 
  'r', '_', 'p', 'a', 'g', 'e', '\030', '\004', ' ', '\001', '(', '\r', '\"', '{', '\n', '\030', 'G', 'e', 't', 'D', 'a', 't', 'a', 's', 'e', 
  't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 
  'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\022', '\n', '\n', 'd', 'a', 't', 'a', 's', 'e', 't', 
  '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\032', '\n', '\022', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'v', 'e', 'r', 's', 
  'i', 'o', 'n', '_', 'i', 'd', '\030', '\003', ' ', '\001', '(', '\t', '\"', '\244', '\002', '\n', '&', 'L', 'i', 's', 't', 'D', 'a', 't', 'a', 
  's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'M', 'e', 't', 'r', 'i', 'c', 's', 'G', 'r', 'o', 'u', 'p', 's', 'R', 'e', 
  'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', 
  '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 
  'D', 'S', 'e', 't', '\022', '\022', '\n', '\n', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', 
  '\032', '\n', '\022', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '\030', '\003', ' ', '\001', 
  '(', '\t', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\004', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 
  'a', 'g', 'e', '\030', '\005', ' ', '\001', '(', '\r', '\022', '\024', '\n', '\014', 'p', 'a', 'r', 'e', 'n', 't', '_', 'p', 'a', 't', 'h', 's', 
  '\030', '\006', ' ', '\003', '(', '\t', '\022', ';', '\n', '\005', 't', 'y', 'p', 'e', 's', '\030', '\007', ' ', '\003', '(', '\016', '2', ',', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 
  'n', 'M', 'e', 't', 'r', 'i', 'c', 's', 'G', 'r', 'o', 'u', 'p', 'T', 'y', 'p', 'e', '\022', '&', '\n', '\006', 'v', 'a', 'l', 'u', 
  'e', 's', '\030', '\010', ' ', '\003', '(', '\013', '2', '\026', '.', 'g', 'o', 'o', 'g', 'l', 'e', '.', 'p', 'r', 'o', 't', 'o', 'b', 'u', 
  'f', '.', 'V', 'a', 'l', 'u', 'e', '\"', '\231', '\001', '\n', '\032', 'P', 'o', 's', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 
  'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', 
  '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\022', '\n', '\n', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 
  'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '6', '\n', '\020', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'v', 'e', 'r', 's', 'i', 'o', 
  'n', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '\034', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 
  'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', '\"', '\252', '\001', '\n', '\033', 'P', 'a', 't', 'c', 'h', 'D', 'a', 
  't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\022', '\n', '\n', 'd', 'a', 
  't', 'a', 's', 'e', 't', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '6', '\n', '\020', 'd', 'a', 't', 'a', 's', 'e', 't', 
  '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '\034', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', '\022', '\016', '\n', '\006', 'a', 
  'c', 't', 'i', 'o', 'n', '\030', '\004', ' ', '\001', '(', '\t', '\"', '\200', '\001', '\n', '\034', 'D', 'e', 'l', 'e', 't', 'e', 'D', 'a', 't', 
  'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\022', '\n', '\n', 'd', 'a', 't', 
  'a', 's', 'e', 't', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\033', '\n', '\023', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 
  'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', 's', '\030', '\003', ' ', '\003', '(', '\t', '\"', '\267', '\001', '\n', '\037', 'P', 'u', 't', 
  'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'E', 'x', 'p', 'o', 'r', 't', 's', 'R', 'e', 'q', 'u', 
  'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', 
  '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 
  'e', 't', '\022', '\022', '\n', '\n', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\032', '\n', 
  '\022', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '\030', '\003', ' ', '\001', '(', '\t', 
  '\022', '3', '\n', '\007', 'e', 'x', 'p', 'o', 'r', 't', 's', '\030', '\004', ' ', '\003', '(', '\013', '2', '\"', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'E', 'x', 'p', 
  'o', 'r', 't', '\"', '\210', '\001', '\n', '\033', 'M', 'u', 'l', 't', 'i', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 
  'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', 
  '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 
  't', 'a', 't', 'u', 's', '\022', '<', '\n', '\020', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', 
  '\030', '\002', ' ', '\003', '(', '\013', '2', '\034', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'a', 't', 
  'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'B', '\004', '\200', '\265', '\030', '\001', '\"', '\213', '\001', '\n', '!', 'M', 'u', 'l', 
  't', 'i', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'E', 'x', 'p', 'o', 'r', 't', 'R', 'e', 's', 
  'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', 
  '\022', '9', '\n', '\007', 'e', 'x', 'p', 'o', 'r', 't', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\"', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'E', 'x', 'p', 
  'o', 'r', 't', 'B', '\004', '\200', '\265', '\030', '\001', '\"', '\256', '\001', '\n', '\'', 'M', 'u', 'l', 't', 'i', 'D', 'a', 't', 'a', 's', 'e', 
  't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'M', 'e', 't', 'r', 'i', 'c', 's', 'G', 'r', 'o', 'u', 'p', 'R', 'e', 's', 'p', 'o', 
  'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', 'V', 
  '\n', '\036', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'm', 'e', 't', 'r', 'i', 'c', 's', 
  '_', 'g', 'r', 'o', 'u', 'p', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '(', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'M', 'e', 't', 'r', 'i', 'c', 's', 
  'G', 'r', 'o', 'u', 'p', 'B', '\004', '\200', '\265', '\030', '\001', '\"', '\202', '\001', '\n', '\034', 'S', 'i', 'n', 'g', 'l', 'e', 'D', 'a', 't', 
  'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 
  'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '5', '\n', '\017', 'd', 'a', 't', 'a', 's', 'e', 't', 
  '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '\030', '\002', ' ', '\001', '(', '\013', '2', '\034', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', '\"', 'f', '\n', '#', 'G', 'e', 
  't', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 't', 's', 'S', 'e', 'a', 'r', 'c', 'h', 'A', 'd', 'd', 'J', 'o', 
  'b', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', 
  ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 
  'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\016', '\n', '\006', 'j', 'o', 'b', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\"', '\214', 
  '\001', '\n', '\'', 'S', 'i', 'n', 'g', 'l', 'e', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 't', 's', 'S', 'e', 'a', 
  'r', 'c', 'h', 'A', 'd', 'd', 'J', 'o', 'b', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 
  'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 
  't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '4', '\n', '\003', 'j', 'o', 'b', '\030', '\002', ' ', '\001', '(', '\013', 
  '2', '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 'n', 
  'p', 'u', 't', 's', 'S', 'e', 'a', 'r', 'c', 'h', 'A', 'd', 'd', 'J', 'o', 'b', '\"', '\271', '\001', '\n', '\027', 'P', 'o', 's', 't', 
  'M', 'o', 'd', 'e', 'l', 'O', 'u', 't', 'p', 'u', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 'm', 'o', 'd', 
  'e', 'l', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\022', '\n', '\n', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', 
  '\030', '\003', ' ', '\001', '(', '\t', '\022', '#', '\n', '\006', 'i', 'n', 'p', 'u', 't', 's', '\030', '\004', ' ', '\003', '(', '\013', '2', '\023', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'I', 'n', 'p', 'u', 't', '\022', '\"', '\n', '\005', 'm', 'o', 'd', 
  'e', 'l', '\030', '\005', ' ', '\001', '(', '\013', '2', '\023', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 
  'o', 'd', 'e', 'l', '\"', '\217', '\001', '\n', '\026', 'L', 'i', 's', 't', 'M', 'o', 'd', 'e', 'l', 'I', 'n', 'p', 'u', 't', 's', 'R', 
  'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', 
  '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 
  'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\022', 
  '\n', '\n', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '\030', '\003', ' ', '\001', '(', '\t', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 
  'e', '\030', '\004', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\005', ' ', '\001', '(', '\r', 
  '\"', 'P', '\n', '\r', 'G', 'e', 't', 'K', 'e', 'y', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\016', '\n', '\006', 'k', 'e', 'y', '_', 'i', 
  'd', '\030', '\002', ' ', '\001', '(', '\t', '\"', 'b', '\n', '\017', 'L', 'i', 's', 't', 'K', 'e', 'y', 's', 'R', 'e', 'q', 'u', 'e', 's', 
  't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', 
  '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 
  'e', '\030', '\003', ' ', '\001', '(', '\r', '\"', 'e', '\n', '\022', 'L', 'i', 's', 't', 'A', 'p', 'p', 'K', 'e', 'y', 's', 'R', 'e', 'q', 
  'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', 
  '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 
  'S', 'e', 't', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 
  'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\"', 'c', '\n', '\017', 'P', 'o', 's', 't', 'K', 'e', 'y', 's', 'R', 'e', 'q', 
  'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', 
  '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 
  'S', 'e', 't', '\022', '\037', '\n', '\004', 'k', 'e', 'y', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\021', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'K', 'e', 'y', '\"', 'S', '\n', '\020', 'D', 'e', 'l', 'e', 't', 'e', 'K', 'e', 'y', 'R', 
  'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', 
  '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 
  'I', 'D', 'S', 'e', 't', '\022', '\016', '\n', '\006', 'k', 'e', 'y', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\"', 't', '\n', '\020', 
  'P', 'a', 't', 'c', 'h', 'K', 'e', 'y', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\037', '\n', '\004', 'k', 'e', 'y', 's', '\030', '\002', 
  ' ', '\003', '(', '\013', '2', '\021', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'K', 'e', 'y', '\022', '\016', 
  '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\t', '\"', '`', '\n', '\021', 'S', 'i', 'n', 'g', 'l', 'e', 'K', 
  'e', 'y', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', 
  '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 
  't', 'a', 't', 'u', 's', '\022', '\036', '\n', '\003', 'k', 'e', 'y', '\030', '\002', ' ', '\001', '(', '\013', '2', '\021', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'K', 'e', 'y', '\"', 'f', '\n', '\020', 'M', 'u', 'l', 't', 'i', 'K', 'e', 'y', 'R', 
  'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 
  'u', 's', '\022', '%', '\n', '\004', 'k', 'e', 'y', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\021', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'K', 'e', 'y', 'B', '\004', '\200', '\265', '\030', '\001', '\"', '\255', '\001', '\n', '\017', 'G', 'e', 't', 'M', 
  'o', 'd', 'e', 'l', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 
  'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '\030', '\002', ' ', 
  '\001', '(', '\t', '\022', '\022', '\n', '\n', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '\030', '\003', ' ', '\001', '(', '\t', '\022', '\020', 
  '\n', '\010', 'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e', '\030', '\004', ' ', '\001', '(', '\t', '\022', '\026', '\n', '\016', 't', 'r', 'a', 'i', 'n', 
  'e', 'd', '_', 'b', 'e', 'f', 'o', 'r', 'e', '\030', '\005', ' ', '\001', '(', '\010', '\022', '\031', '\n', '\021', 'a', 'd', 'd', 'i', 't', 'i', 
  'o', 'n', 'a', 'l', '_', 'f', 'i', 'e', 'l', 'd', 's', '\030', '\023', ' ', '\003', '(', '\t', '\"', '\243', '\004', '\n', '\021', 'L', 'i', 's', 
  't', 'M', 'o', 'd', 'e', 'l', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\002', ' ', '\001', 
  '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\022', '\026', '\n', '\016', 's', 
  'o', 'r', 't', '_', 'a', 's', 'c', 'e', 'n', 'd', 'i', 'n', 'g', '\030', '\n', ' ', '\001', '(', '\010', '\022', '\026', '\n', '\014', 's', 'o', 
  'r', 't', '_', 'b', 'y', '_', 'n', 'a', 'm', 'e', '\030', '\013', ' ', '\001', '(', '\010', 'H', '\000', '\022', '\034', '\n', '\022', 's', 'o', 'r', 
  't', '_', 'b', 'y', '_', 'n', 'u', 'm', '_', 'i', 'n', 'p', 'u', 't', 's', '\030', '\014', ' ', '\001', '(', '\010', 'H', '\000', '\022', '\035', 
  '\n', '\023', 's', 'o', 'r', 't', '_', 'b', 'y', '_', 'm', 'o', 'd', 'i', 'f', 'i', 'e', 'd', '_', 'a', 't', '\030', '\r', ' ', '\001', 
  '(', '\010', 'H', '\000', '\022', '\r', '\n', '\005', 'q', 'u', 'e', 'r', 'y', '\030', '\016', ' ', '\001', '(', '\t', '\022', '\014', '\n', '\004', 'n', 'a', 
  'm', 'e', '\030', '\005', ' ', '\001', '(', '\t', '\022', '\031', '\n', '\021', 'f', 'i', 'l', 't', 'e', 'r', '_', 'b', 'y', '_', 'u', 's', 'e', 
  'r', '_', 'i', 'd', '\030', '\026', ' ', '\001', '(', '\010', '\022', '\025', '\n', '\r', 'm', 'o', 'd', 'e', 'l', '_', 't', 'y', 'p', 'e', '_', 
  'i', 'd', '\030', '\006', ' ', '\001', '(', '\t', '\022', '\024', '\n', '\014', 't', 'r', 'a', 'i', 'n', 'e', 'd', '_', 'o', 'n', 'l', 'y', '\030', 
  '\007', ' ', '\001', '(', '\010', '\022', '\024', '\n', '\014', 'i', 'n', 'p', 'u', 't', '_', 'f', 'i', 'e', 'l', 'd', 's', '\030', '\010', ' ', '\003', 
  '(', '\t', '\022', '\025', '\n', '\r', 'o', 'u', 't', 'p', 'u', 't', '_', 'f', 'i', 'e', 'l', 'd', 's', '\030', '\t', ' ', '\003', '(', '\t', 
  '\022', '\017', '\n', '\007', 'l', 'i', 'c', 'e', 'n', 's', 'e', '\030', '\017', ' ', '\001', '(', '\t', '\022', '\025', '\n', '\r', 'f', 'e', 'a', 't', 
  'u', 'r', 'e', 'd', '_', 'o', 'n', 'l', 'y', '\030', '\020', ' ', '\001', '(', '\010', '\022', '\024', '\n', '\014', 's', 't', 'a', 'r', 'r', 'e', 
  'd', '_', 'o', 'n', 'l', 'y', '\030', '\024', ' ', '\001', '(', '\010', '\022', '\020', '\n', '\010', 't', 'o', 'o', 'l', 'k', 'i', 't', 's', '\030', 
  '\021', ' ', '\003', '(', '\t', '\022', '\021', '\n', '\t', 'u', 's', 'e', '_', 'c', 'a', 's', 'e', 's', '\030', '\022', ' ', '\003', '(', '\t', '\022', 
  '\021', '\n', '\t', 'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', '\030', '\025', ' ', '\003', '(', '\t', '\022', '\031', '\n', '\021', 'a', 'd', 'd', 
  'i', 't', 'i', 'o', 'n', 'a', 'l', '_', 'f', 'i', 'e', 'l', 'd', 's', '\030', '\023', ' ', '\003', '(', '\t', '\022', '\034', '\n', '\024', 'd', 
  'o', 'n', 't', '_', 'f', 'e', 't', 'c', 'h', '_', 'f', 'r', 'o', 'm', '_', 'm', 'a', 'i', 'n', '\030', '\027', ' ', '\001', '(', '\010', 
  'B', '\t', '\n', '\007', 's', 'o', 'r', 't', '_', 'b', 'y', 'J', '\004', '\010', '\004', '\020', '\005', '\"', '\200', '\001', '\n', '\031', 'P', 'a', 't', 
  'c', 'h', 'M', 'o', 'd', 'e', 'l', 'T', 'o', 'o', 'l', 'k', 'i', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', 
  '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 
  'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\020', '\n', '\010', 't', 'o', 'o', 'l', 'k', 'i', 't', 
  's', '\030', '\003', ' ', '\003', '(', '\t', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\004', ' ', '\001', '(', '\t', '\"', '\213', 
  '\001', '\n', '\036', 'P', 'a', 't', 'c', 'h', 'M', 'o', 'd', 'e', 'l', 'C', 'h', 'e', 'c', 'k', 'C', 'o', 'n', 's', 'e', 'n', 't', 
  's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', 
  ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 
  'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', 
  '\022', '\026', '\n', '\016', 'c', 'h', 'e', 'c', 'k', '_', 'c', 'o', 'n', 's', 'e', 'n', 't', 's', '\030', '\003', ' ', '\003', '(', '\t', '\022', 
  '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\004', ' ', '\001', '(', '\t', '\"', '\200', '\001', '\n', '\031', 'P', 'a', 't', 'c', 'h', 
  'M', 'o', 'd', 'e', 'l', 'U', 's', 'e', 'C', 'a', 's', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 'm', 'o', 
  'd', 'e', 'l', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\020', '\n', '\010', 'u', 's', 'e', 'c', 'a', 's', 'e', 's', '\030', 
  '\003', ' ', '\003', '(', '\t', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\004', ' ', '\001', '(', '\t', '\"', '\202', '\001', '\n', 
  '\032', 'P', 'a', 't', 'c', 'h', 'M', 'o', 'd', 'e', 'l', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', 'R', 'e', 'q', 'u', 'e', 
  's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 
  't', '\022', '\020', '\n', '\010', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\021', '\n', '\t', 'l', 'a', 
  'n', 'g', 'u', 'a', 'g', 'e', 's', '\030', '\003', ' ', '\003', '(', '\t', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\004', 
  ' ', '\001', '(', '\t', '\"', 'Z', '\n', '\031', 'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 'e', 'l', 'T', 'o', 'o', 'l', 'k', 'i', 't', 
  'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', 
  '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 
  't', 'u', 's', '\022', '\020', '\n', '\010', 't', 'o', 'o', 'l', 'k', 'i', 't', 's', '\030', '\002', ' ', '\003', '(', '\t', '\"', 'e', '\n', '\036', 
  'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 'e', 'l', 'C', 'h', 'e', 'c', 'k', 'C', 'o', 'n', 's', 'e', 'n', 't', 'R', 'e', 's', 
  'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', 
  '\022', '\026', '\n', '\016', 'c', 'h', 'e', 'c', 'k', '_', 'c', 'o', 'n', 's', 'e', 'n', 't', 's', '\030', '\002', ' ', '\003', '(', '\t', '\"', 
  'Z', '\n', '\031', 'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 'e', 'l', 'U', 's', 'e', 'C', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 
  'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '\020', 
  '\n', '\010', 'u', 's', 'e', 'c', 'a', 's', 'e', 's', '\030', '\002', ' ', '\003', '(', '\t', '\"', '\\', '\n', '\032', 'M', 'u', 'l', 't', 'i', 
  'M', 'o', 'd', 'e', 'l', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 
  's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '\021', '\n', '\t', 'l', 'a', 'n', 'g', 'u', 
  'a', 'g', 'e', 's', '\030', '\002', ' ', '\003', '(', '\t', '\"', '\221', '\001', '\n', '\021', 'P', 'o', 's', 't', 'M', 'o', 'd', 'e', 'l', 's', 
  'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', 
  '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 
  'p', 'I', 'D', 'S', 'e', 't', '\022', '&', '\n', '\005', 'm', 'o', 'd', 'e', 'l', '\030', '\002', ' ', '\001', '(', '\013', '2', '\023', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'o', 'd', 'e', 'l', 'B', '\002', '\030', '\001', '\022', '#', '\n', '\006', 
  'm', 'o', 'd', 'e', 'l', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '\023', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'M', 'o', 'd', 'e', 'l', '\"', 'z', '\n', '\022', 'P', 'a', 't', 'c', 'h', 'M', 'o', 'd', 'e', 'l', 's', 'R', 'e', 
  'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', 
  '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 
  'D', 'S', 'e', 't', '\022', '#', '\n', '\006', 'm', 'o', 'd', 'e', 'l', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\023', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'o', 'd', 'e', 'l', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 
  'n', '\030', '\003', ' ', '\001', '(', '\t', '\"', ',', '\n', '\016', 'I', 'd', 'U', 'p', 'd', 'a', 't', 'e', 'S', 'o', 'u', 'r', 'c', 'e', 
  '\022', '\n', '\n', '\002', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\016', '\n', '\006', 'n', 'e', 'w', '_', 'i', 'd', '\030', '\002', ' ', 
  '\001', '(', '\t', '\"', '\202', '\001', '\n', '\024', 'P', 'a', 't', 'c', 'h', 'M', 'o', 'd', 'e', 'l', 'I', 'd', 's', 'R', 'e', 'q', 'u', 
  'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', 
  '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 
  'e', 't', '\022', ')', '\n', '\003', 'i', 'd', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '\034', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'I', 'd', 'U', 'p', 'd', 'a', 't', 'e', 'S', 'o', 'u', 'r', 'c', 'e', '\022', '\016', '\n', '\006', 'a', 
  'c', 't', 'i', 'o', 'n', '\030', '\004', ' ', '\001', '(', '\t', '\"', 'W', '\n', '\022', 'D', 'e', 'l', 'e', 't', 'e', 'M', 'o', 'd', 'e', 
  'l', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', 
  ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 
  'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', 
  '\"', 'g', '\n', '\023', 'D', 'e', 'l', 'e', 't', 'e', 'M', 'o', 'd', 'e', 'l', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', 
  '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\013', '\n', 
  '\003', 'i', 'd', 's', '\030', '\002', ' ', '\003', '(', '\t', '\022', '\022', '\n', '\n', 'd', 'e', 'l', 'e', 't', 'e', '_', 'a', 'l', 'l', '\030', 
  '\003', ' ', '\001', '(', '\010', '\"', '\251', '\001', '\n', '\031', 'P', 'o', 's', 't', 'M', 'o', 'd', 'e', 'l', 's', 'S', 'e', 'a', 'r', 'c', 
  'h', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 
  'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '-', '\n', '\013', 'm', 'o', 'd', 'e', 'l', '_', 'q', 'u', 'e', 'r', 'y', '\030', 
  '\002', ' ', '\001', '(', '\013', '2', '\030', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'o', 'd', 'e', 
  'l', 'Q', 'u', 'e', 'r', 'y', '\022', ',', '\n', '\n', 'p', 'a', 'g', 'i', 'n', 'a', 't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', 
  '\013', '2', '\030', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 'g', 'i', 'n', 'a', 't', 'i', 
  'o', 'n', '\"', 'f', '\n', '\023', 'S', 'i', 'n', 'g', 'l', 'e', 'M', 'o', 'd', 'e', 'l', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', 
  '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '\"', '\n', '\005', 'm', 
  'o', 'd', 'e', 'l', '\030', '\002', ' ', '\001', '(', '\013', '2', '\023', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'M', 'o', 'd', 'e', 'l', '\"', 'l', '\n', '\022', 'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 'e', 'l', 'R', 'e', 's', 'p', 'o', 
  'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', ')', 
  '\n', '\006', 'm', 'o', 'd', 'e', 'l', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\023', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'M', 'o', 'd', 'e', 'l', 'B', '\004', '\200', '\265', '\030', '\001', '\"', '\242', '\001', '\n', '\031', 'P', 'a', 't', 'c', 
  'h', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 
  'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 'm', 
  'o', 'd', 'e', 'l', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '2', '\n', '\016', 'm', 'o', 'd', 'e', 'l', '_', 'v', 'e', 
  'r', 's', 'i', 'o', 'n', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', 
  '\030', '\004', ' ', '\001', '(', '\t', '\"', 'o', '\n', '\026', 'G', 'e', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 
  'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', 
  '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 
  'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', 
  '\022', '\n', '\n', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '\030', '\003', ' ', '\001', '(', '\t', '\"', '\222', '\001', '\n', '\030', 'L', 
  'i', 's', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', 
  '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', 
  '\010', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\003', 
  ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\004', ' ', '\001', '(', '\r', '\022', '\023', '\n', 
  '\013', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'i', 'd', 's', '\030', '\005', ' ', '\003', '(', '\t', '\"', 'r', '\n', '\031', 'D', 'e', 'l', 
  'e', 't', 'e', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', 
  '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 
  'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '\030', '\003', ' ', '\001', '(', '\t', '\022', '\022', '\n', '\n', 'v', 'e', 'r', 's', 'i', 'o', 'n', 
  '_', 'i', 'd', '\030', '\004', ' ', '\001', '(', '\t', '\"', '|', '\n', '\032', 'S', 'i', 'n', 'g', 'l', 'e', 'M', 'o', 'd', 'e', 'l', 'V', 
  'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', 
  '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 
  'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '1', '\n', '\r', 'm', 'o', 'd', 'e', 'l', '_', 'v', 'e', 'r', 's', 'i', 'o', 
  'n', '\030', '\002', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'o', 
  'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', '\"', '\202', '\001', '\n', '\031', 'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 'e', 'l', 
  'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', 
  '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 
  't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '8', '\n', '\016', 'm', 'o', 'd', 'e', 'l', '_', 'v', 'e', 'r', 's', 'i', 
  'o', 'n', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'B', '\004', '\200', '\265', '\030', '\001', '\"', '\227', '\003', '\n', '\030', 'P', 'o', 
  's', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', 
  '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 
  'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '2', '\n', '\016', 'm', 'o', 'd', 'e', 'l', '_', 'v', 
  'e', 'r', 's', 'i', 'o', 'n', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', '\022', '(', '\n', '\006', 's', 'e', 'a', 'r', 'c', 
  'h', '\030', '\004', ' ', '\001', '(', '\013', '2', '\024', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'e', 
  'a', 'r', 'c', 'h', 'B', '\002', '\030', '\001', '\022', '.', '\n', '\014', 't', 'r', 'a', 'i', 'n', '_', 's', 'e', 'a', 'r', 'c', 'h', '\030', 
  '\005', ' ', '\001', '(', '\013', '2', '\024', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'e', 'a', 'r', 
  'c', 'h', 'B', '\002', '\030', '\001', '\022', '-', '\n', '\013', 't', 'e', 's', 't', '_', 's', 'e', 'a', 'r', 'c', 'h', '\030', '\006', ' ', '\001', 
  '(', '\013', '2', '\024', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'e', 'a', 'r', 'c', 'h', 'B', 
  '\002', '\030', '\001', '\022', '\023', '\n', '\013', 'd', 'e', 's', 'c', 'r', 'i', 'p', 't', 'i', 'o', 'n', '\030', '\010', ' ', '\001', '(', '\t', '\022', 
  '5', '\n', '\017', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '\030', '\t', ' ', '\001', '(', '\013', '2', 
  '\034', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 
  's', 'i', 'o', 'n', '\022', ')', '\n', '\t', 'e', 'v', 'a', 'l', '_', 'i', 'n', 'f', 'o', '\030', '\n', ' ', '\001', '(', '\013', '2', '\026', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'E', 'v', 'a', 'l', 'I', 'n', 'f', 'o', 'J', '\004', '\010', 
  '\007', '\020', '\010', '\"', '\261', '\001', '\n', '$', 'P', 'o', 's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 
  'o', 'n', 's', 'U', 'n', 'P', 'u', 'b', 'l', 'i', 's', 'h', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\023', '\n', '\013', 'w', 'o', 'r', 
  'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', 'C', '\n', '\014', 'p', 'u', 'b', 'l', 'i', 'c', 'a', 
  't', 'i', 'o', 'n', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '-', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'U', 'n', 'P', 'u', 'b', 'l', 'i', 's', 
  'h', 'R', 'e', 'q', 'u', 'e', 's', 't', '\"', '\255', '\001', '\n', '\"', 'P', 'o', 's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 
  'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'P', 'u', 'b', 'l', 'i', 's', 'h', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', 
  '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\023', '\n', '\013', 
  'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', 'A', '\n', '\014', 'p', 'u', 'b', 'l', 
  'i', 'c', 'a', 't', 'i', 'o', 'n', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '+', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'P', 'u', 'b', 'l', 'i', 
  's', 'h', 'R', 'e', 'q', 'u', 'e', 's', 't', '\"', '3', '\n', '\035', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 
  'i', 'o', 'n', 'P', 'u', 'b', 'l', 'i', 's', 'h', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '\022', '\n', '\n', 'v', 'e', 'r', 's', 
  'i', 'o', 'n', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\t', '\"', '5', '\n', '\037', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 
  'e', 'r', 's', 'i', 'o', 'n', 'U', 'n', 'P', 'u', 'b', 'l', 'i', 's', 'h', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '\022', '\n', 
  '\n', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\t', '\"', '0', '\n', '\032', 'M', 'o', 'd', 'e', 
  'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'P', 'u', 'b', 'l', 'i', 's', 'h', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '\022', '\n', 
  '\n', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\t', '\"', '\244', '\001', '\n', '\037', 'P', 'o', 's', 
  't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'P', 'u', 'b', 'l', 'i', 's', 'h', 'R', 'e', 'q', 'u', 
  'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', 
  '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 
  'e', 't', '\022', '\020', '\n', '\010', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '>', '\n', '\014', 'p', 
  'u', 'b', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '(', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'P', 'u', 'b', 'l', 'i', 
  's', 'h', 'R', 'e', 'q', 'u', 'e', 's', 't', '\"', '2', '\n', '\034', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 
  'U', 'n', 'p', 'u', 'b', 'l', 'i', 's', 'h', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '\022', '\n', '\n', 'v', 'e', 'r', 's', 'i', 
  'o', 'n', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\t', '\"', '\250', '\001', '\n', '!', 'P', 'o', 's', 't', 'M', 'o', 'd', 'e', 'l', 
  'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'U', 'n', 'P', 'u', 'b', 'l', 'i', 's', 'h', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', 
  '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', 
  '\n', '\010', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '@', '\n', '\014', 'p', 'u', 'b', 'l', 'i', 
  'c', 'a', 't', 'i', 'o', 'n', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '*', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'U', 'n', 'p', 'u', 'b', 'l', 'i', 's', 'h', 
  'R', 'e', 'q', 'u', 'e', 's', 't', '\"', '\262', '\001', '\n', '\"', 'P', 'o', 's', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 
  'i', 'o', 'n', 'E', 'v', 'a', 'l', 'u', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 
  'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 'm', 
  'o', 'd', 'e', 'l', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\030', '\n', '\020', 'm', 'o', 'd', 'e', 'l', '_', 'v', 'e', 
  'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '\030', '\003', ' ', '\001', '(', '\t', '\022', '/', '\n', '\014', 'e', 'v', 'a', 'l', '_', 'm', 'e', 
  't', 'r', 'i', 'c', 's', '\030', '\004', ' ', '\003', '(', '\013', '2', '\031', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'E', 'v', 'a', 'l', 'M', 'e', 't', 'r', 'i', 'c', 's', '\"', '\241', '\001', '\n', '\"', 'L', 'i', 's', 't', 'M', 'o', 'd', 
  'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'E', 'v', 'a', 'l', 'u', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 
  's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 
  't', '\022', '\020', '\n', '\010', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\030', '\n', '\020', 'm', 'o', 
  'd', 'e', 'l', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '\030', '\003', ' ', '\001', '(', '\t', '\022', '\014', '\n', '\004', 'p', 
  'a', 'g', 'e', '\030', '\004', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\005', ' ', '\001', 
  '(', '\r', '\"', '\301', '\001', '\n', ' ', 'G', 'e', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'E', 'v', 'a', 
  'l', 'u', 'a', 't', 'i', 'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', 
  '\030', '\002', ' ', '\001', '(', '\t', '\022', '\030', '\n', '\020', 'm', 'o', 'd', 'e', 'l', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 
  'd', '\030', '\003', ' ', '\001', '(', '\t', '\022', '\025', '\n', '\r', 'e', 'v', 'a', 'l', 'u', 'a', 't', 'i', 'o', 'n', '_', 'i', 'd', '\030', 
  '\004', ' ', '\001', '(', '\t', '\022', ')', '\n', '\006', 'f', 'i', 'e', 'l', 'd', 's', '\030', '\005', ' ', '\001', '(', '\013', '2', '\031', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'F', 'i', 'e', 'l', 'd', 's', 'V', 'a', 'l', 'u', 'e', '\"', 'y', 
  '\n', '\031', 'S', 'i', 'n', 'g', 'l', 'e', 'E', 'v', 'a', 'l', 'M', 'e', 't', 'r', 'i', 'c', 's', 'R', 'e', 's', 'p', 'o', 'n', 
  's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '/', '\n', 
  '\014', 'e', 'v', 'a', 'l', '_', 'm', 'e', 't', 'r', 'i', 'c', 's', '\030', '\002', ' ', '\001', '(', '\013', '2', '\031', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'E', 'v', 'a', 'l', 'M', 'e', 't', 'r', 'i', 'c', 's', '\"', 'x', '\n', '\030', 
  'M', 'u', 'l', 't', 'i', 'E', 'v', 'a', 'l', 'M', 'e', 't', 'r', 'i', 'c', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', 
  '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '/', '\n', '\014', 'e', 'v', 
  'a', 'l', '_', 'm', 'e', 't', 'r', 'i', 'c', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\031', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'E', 'v', 'a', 'l', 'M', 'e', 't', 'r', 'i', 'c', 's', '\"', '\323', '\001', '\n', '\036', 'P', 'o', 
  's', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'M', 'e', 't', 'r', 'i', 'c', 's', 'R', 'e', 'q', 'u', 
  'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', 
  '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 
  'e', 't', '\022', '\020', '\n', '\010', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\022', '\n', '\n', 'v', 
  'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '\030', '\003', ' ', '\001', '(', '\t', '\022', ')', '\n', '\013', 't', 'e', 's', 't', '_', 's', 
  'e', 'a', 'r', 'c', 'h', '\030', '\005', ' ', '\001', '(', '\013', '2', '\024', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'S', 'e', 'a', 'r', 'c', 'h', '\022', ')', '\n', '\t', 'e', 'v', 'a', 'l', '_', 'i', 'n', 'f', 'o', '\030', '\n', ' ', '\001', 
  '(', '\013', '2', '\026', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'E', 'v', 'a', 'l', 'I', 'n', 'f', 
  'o', 'J', '\004', '\010', '\004', '\020', '\005', '\"', '\241', '\001', '\n', '\035', 'G', 'e', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 
  'o', 'n', 'M', 'e', 't', 'r', 'i', 'c', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 'm', 'o', 'd', 'e', 'l', '_', 
  'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\022', '\n', '\n', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '\030', '\003', ' ', 
  '\001', '(', '\t', '\022', ')', '\n', '\006', 'f', 'i', 'e', 'l', 'd', 's', '\030', '\004', ' ', '\001', '(', '\013', '2', '\031', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'F', 'i', 'e', 'l', 'd', 's', 'V', 'a', 'l', 'u', 'e', '\"', ']', '\n', '\023', 
  'G', 'e', 't', 'M', 'o', 'd', 'e', 'l', 'T', 'y', 'p', 'e', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\025', '\n', '\r', 'm', 'o', 'd', 
  'e', 'l', '_', 't', 'y', 'p', 'e', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\"', 'h', '\n', '\025', 'L', 'i', 's', 't', 'M', 
  'o', 'd', 'e', 'l', 'T', 'y', 'p', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\002', 
  ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\"', '\037', '\n', 
  '\035', 'L', 'i', 's', 't', 'O', 'p', 'e', 'n', 'S', 'o', 'u', 'r', 'c', 'e', 'L', 'i', 'c', 'e', 'n', 's', 'e', 's', 'R', 'e', 
  'q', 'u', 'e', 's', 't', '\"', '_', '\n', '\036', 'L', 'i', 's', 't', 'O', 'p', 'e', 'n', 'S', 'o', 'u', 'r', 'c', 'e', 'L', 'i', 
  'c', 'e', 'n', 's', 'e', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', 
  '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 
  'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '\020', '\n', '\010', 'l', 'i', 'c', 'e', 'n', 's', 'e', 's', '\030', '\002', ' ', '\003', 
  '(', '\t', '\"', 'y', '\n', '\027', 'S', 'i', 'n', 'g', 'l', 'e', 'M', 'o', 'd', 'e', 'l', 'T', 'y', 'p', 'e', 'R', 'e', 's', 'p', 
  'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', 
  '1', '\n', '\n', 'm', 'o', 'd', 'e', 'l', '_', 't', 'y', 'p', 'e', '\030', '\002', ' ', '\001', '(', '\013', '2', '\027', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'o', 'd', 'e', 'l', 'T', 'y', 'p', 'e', 'B', '\004', '\200', '\265', '\030', '\001', 
  '\"', '\260', '\001', '\n', '\026', 'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 'e', 'l', 'T', 'y', 'p', 'e', 'R', 'e', 's', 'p', 'o', 'n', 
  's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '2', '\n', 
  '\013', 'm', 'o', 'd', 'e', 'l', '_', 't', 'y', 'p', 'e', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\027', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'o', 'd', 'e', 'l', 'T', 'y', 'p', 'e', 'B', '\004', '\200', '\265', '\030', '\001', '\022', 
  '5', '\n', '\017', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'm', 'p', 'o', 'r', 't', 'e', 'r', 's', '\030', '\003', ' ', '\001', '(', '\013', '2', 
  '\034', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'o', 'd', 'e', 'l', 'T', 'y', 'p', 'e', 'F', 
  'i', 'e', 'l', 'd', '\"', '\225', '\001', '\n', '\"', 'G', 'e', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'I', 
  'n', 'p', 'u', 't', 'E', 'x', 'a', 'm', 'p', 'l', 'e', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 'm', 'o', 'd', 'e', 
  'l', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\030', '\n', '\020', 'm', 'o', 'd', 'e', 'l', '_', 'v', 'e', 'r', 's', 'i', 
  'o', 'n', '_', 'i', 'd', '\030', '\003', ' ', '\001', '(', '\t', '\022', '\022', '\n', '\n', 'e', 'x', 'a', 'm', 'p', 'l', 'e', '_', 'i', 'd', 
  '\030', '\004', ' ', '\001', '(', '\t', '\"', '\243', '\001', '\n', '$', 'L', 'i', 's', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 
  'o', 'n', 'I', 'n', 'p', 'u', 't', 'E', 'x', 'a', 'm', 'p', 'l', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', 
  '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 
  'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\030', '\n', '\020', 'm', 'o', 'd', 'e', 'l', '_', 'v', 
  'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '\030', '\003', ' ', '\001', '(', '\t', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\004', 
  ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\005', ' ', '\001', '(', '\r', '\"', '\242', '\001', 
  '\n', '&', 'S', 'i', 'n', 'g', 'l', 'e', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'I', 'n', 'p', 'u', 't', 
  'E', 'x', 'a', 'm', 'p', 'l', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', 
  '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 
  't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', 'K', '\n', '\033', 'm', 'o', 'd', 'e', 'l', '_', 'v', 'e', 'r', 's', 'i', 
  'o', 'n', '_', 'i', 'n', 'p', 'u', 't', '_', 'e', 'x', 'a', 'm', 'p', 'l', 'e', '\030', '\002', ' ', '\001', '(', '\013', '2', '&', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 
  'I', 'n', 'p', 'u', 't', 'E', 'x', 'a', 'm', 'p', 'l', 'e', '\"', '\242', '\001', '\n', '%', 'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 
  'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'I', 'n', 'p', 'u', 't', 'E', 'x', 'a', 'm', 'p', 'l', 'e', 'R', 'e', 's', 'p', 
  'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', 
  'L', '\n', '\034', 'm', 'o', 'd', 'e', 'l', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'n', 'p', 'u', 't', '_', 'e', 'x', 
  'a', 'm', 'p', 'l', 'e', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '&', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'I', 'n', 'p', 'u', 't', 'E', 'x', 'a', 'm', 'p', 
  'l', 'e', '\"', '\177', '\n', '\032', 'L', 'i', 's', 't', 'M', 'o', 'd', 'e', 'l', 'R', 'e', 'f', 'e', 'r', 'e', 'n', 'c', 'e', 's', 
  'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', 
  '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 
  'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', 
  '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', 
  '\030', '\004', ' ', '\001', '(', '\r', '\"', '\202', '\001', '\n', '\033', 'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 'e', 'l', 'R', 'e', 'f', 'e', 
  'r', 'e', 'n', 'c', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', 
  ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 
  's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '6', '\n', '\020', 'm', 'o', 'd', 'e', 'l', '_', 'r', 'e', 'f', 'e', 'r', 'e', 'n', 
  'c', 'e', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\034', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'M', 'o', 'd', 'e', 'l', 'R', 'e', 'f', 'e', 'r', 'e', 'n', 'c', 'e', '\"', 'o', '\n', '\023', 'M', 'u', 'l', 't', 'i', 'O', 'u', 
  't', 'p', 'u', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', 
  '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', 
  '.', 'S', 't', 'a', 't', 'u', 's', '\022', '+', '\n', '\007', 'o', 'u', 't', 'p', 'u', 't', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', 
  '\024', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'O', 'u', 't', 'p', 'u', 't', 'B', '\004', '\200', '\265', 
  '\030', '\001', '\"', 'V', '\n', '\021', 'L', 'i', 's', 't', 'S', 'c', 'o', 'p', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '\020', 
  '\n', '\010', 'k', 'e', 'y', '_', 't', 'y', 'p', 'e', '\030', '\001', ' ', '\001', '(', '\t', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\"', 'B', '\n', '\017', 'M', 'y', 'S', 'c', 'o', 'p', 
  'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', 
  '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 
  'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\"', 'F', '\n', '\023', 'M', 'y', 'S', 'c', 'o', 'p', 'e', 's', 'U', 's', 'e', 'r', 'R', 
  'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', 
  '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 
  'I', 'D', 'S', 'e', 't', '\"', '\025', '\n', '\023', 'M', 'y', 'S', 'c', 'o', 'p', 'e', 's', 'R', 'o', 'o', 't', 'R', 'e', 'q', 'u', 
  'e', 's', 't', '\"', '\245', '\001', '\n', '\026', 'M', 'u', 'l', 't', 'i', 'S', 'c', 'o', 'p', 'e', 'D', 'e', 'p', 's', 'R', 'e', 's', 
  'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', 
  '\022', '+', '\n', '\n', 's', 'c', 'o', 'p', 'e', '_', 'd', 'e', 'p', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\027', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'c', 'o', 'p', 'e', 'D', 'e', 'p', 's', '\022', '1', '\n', '\r', 'e', 
  'n', 'd', 'p', 'o', 'i', 'n', 't', '_', 'd', 'e', 'p', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'E', 'n', 'd', 'p', 'o', 'i', 'n', 't', 'D', 'e', 'p', 's', '\"', '\240', '\001', '\n', 
  '\022', 'M', 'u', 'l', 't', 'i', 'S', 'c', 'o', 'p', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 
  'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '\016', '\n', '\006', 's', 'c', 'o', 'p', 'e', 's', '\030', 
  '\002', ' ', '\003', '(', '\t', '\022', '\036', '\n', '\003', 'a', 'p', 'p', '\030', '\003', ' ', '\001', '(', '\013', '2', '\021', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'A', 'p', 'p', '\022', '\021', '\n', '\t', 'e', 'n', 'd', 'p', 'o', 'i', 'n', 't', 's', 
  '\030', '\004', ' ', '\003', '(', '\t', '\022', '\032', '\n', '\022', 'u', 's', 'e', 'r', '_', 'f', 'e', 'a', 't', 'u', 'r', 'e', '_', 'f', 'l', 
  'a', 'g', 's', '\030', '\005', ' ', '\001', '(', '\t', '\"', '\204', '\001', '\n', '\026', 'M', 'u', 'l', 't', 'i', 'S', 'c', 'o', 'p', 'e', 'U', 
  's', 'e', 'r', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', 
  '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 
  'S', 't', 'a', 't', 'u', 's', '\022', '\016', '\n', '\006', 's', 'c', 'o', 'p', 'e', 's', '\030', '\002', ' ', '\003', '(', '\t', '\022', '\021', '\n', 
  '\t', 'e', 'n', 'd', 'p', 'o', 'i', 'n', 't', 's', '\030', '\004', ' ', '\003', '(', '\t', '\022', '\032', '\n', '\022', 'u', 's', 'e', 'r', '_', 
  'f', 'e', 'a', 't', 'u', 'r', 'e', '_', 'f', 'l', 'a', 'g', 's', '\030', '\005', ' ', '\001', '(', '\t', '\"', '\204', '\001', '\n', '\026', 'M', 
  'u', 'l', 't', 'i', 'S', 'c', 'o', 'p', 'e', 'R', 'o', 'o', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 
  's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '\016', '\n', '\006', 's', 'c', 'o', 'p', 'e', 
  's', '\030', '\002', ' ', '\003', '(', '\t', '\022', '\021', '\n', '\t', 'e', 'n', 'd', 'p', 'o', 'i', 'n', 't', 's', '\030', '\004', ' ', '\003', '(', 
  '\t', '\022', '\032', '\n', '\022', 'u', 's', 'e', 'r', '_', 'f', 'e', 'a', 't', 'u', 'r', 'e', '_', 'f', 'l', 'a', 'g', 's', '\030', '\005', 
  ' ', '\001', '(', '\t', '\"', 'O', '\n', '\020', 'G', 'e', 't', 'S', 'e', 'a', 'r', 'c', 'h', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', 
  '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\n', 
  '\n', '\002', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\"', 'f', '\n', '\023', 'L', 'i', 's', 't', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 
  's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', 
  ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 
  'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 
  'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\"', '\304', '\001', '\n', '\023', 'P', 'o', 's', 't', 'S', 'e', 
  'a', 'r', 'c', 'h', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', 
  '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '&', '\n', '\005', 'q', 'u', 'e', 'r', 'y', '\030', '\002', ' ', '\001', 
  '(', '\013', '2', '\023', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'Q', 'u', 'e', 'r', 'y', 'B', '\002', 
  '\030', '\001', '\022', '&', '\n', '\010', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '\024', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'e', 'a', 'r', 'c', 'h', '\022', ',', '\n', '\n', 'p', 'a', 'g', 'i', 
  'n', 'a', 't', 'i', 'o', 'n', '\030', '\004', ' ', '\001', '(', '\013', '2', '\030', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'P', 'a', 'g', 'i', 'n', 'a', 't', 'i', 'o', 'n', '\"', '\205', '\001', '\n', '\032', 'P', 'a', 't', 'c', 'h', 'I', 'n', 
  'p', 'u', 't', 's', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '&', '\n', '\010', 's', 'e', 'a', 
  'r', 'c', 'h', 'e', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\024', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'S', 'e', 'a', 'r', 'c', 'h', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\t', '\"', 
  '\212', '\001', '\n', '\037', 'P', 'a', 't', 'c', 'h', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', 'S', 'e', 'a', 'r', 'c', 
  'h', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 
  'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '&', '\n', '\010', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', '\030', '\002', ' ', '\003', 
  '(', '\013', '2', '\024', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'e', 'a', 'r', 'c', 'h', '\022', 
  '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\t', '\"', '\177', '\n', '\024', 'P', 'a', 't', 'c', 'h', 'S', 
  'e', 'a', 'r', 'c', 'h', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '&', '\n', '\010', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', 
  '\030', '\002', ' ', '\003', '(', '\013', '2', '\024', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'e', 'a', 
  'r', 'c', 'h', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\t', '\"', '\204', '\001', '\n', '\027', 'P', 
  'o', 's', 't', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', 'B', 'y', 'I', 'D', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', 
  '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\n', '\n', '\002', 
  'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', ',', '\n', '\n', 'p', 'a', 'g', 'i', 'n', 'a', 't', 'i', 'o', 'n', '\030', '\003', ' ', 
  '\001', '(', '\013', '2', '\030', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 'g', 'i', 'n', 'a', 
  't', 'i', 'o', 'n', '\"', 'R', '\n', '\023', 'D', 'e', 'l', 'e', 't', 'e', 'S', 'e', 'a', 'r', 'c', 'h', 'R', 'e', 'q', 'u', 'e', 
  's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 
  't', '\022', '\n', '\n', '\002', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\"', '\247', '\001', '\n', '\036', 'P', 'o', 's', 't', 'A', 'n', 'n', 
  'o', 't', 'a', 't', 'i', 'o', 'n', 's', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', 
  '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '&', '\n', 
  '\010', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\024', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'S', 'e', 'a', 'r', 'c', 'h', '\022', ',', '\n', '\n', 'p', 'a', 'g', 'i', 'n', 'a', 't', 'i', 'o', 
  'n', '\030', '\003', ' ', '\001', '(', '\013', '2', '\030', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 
  'g', 'i', 'n', 'a', 't', 'i', 'o', 'n', '\"', 'c', '\n', '$', 'D', 'e', 'l', 'e', 't', 'e', 'A', 'n', 'n', 'o', 't', 'a', 't', 
  'i', 'o', 'n', 'S', 'e', 'a', 'r', 'c', 'h', 'M', 'e', 't', 'r', 'i', 'c', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', 
  '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\n', '\n', 
  '\002', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\"', '\242', '\001', '\n', '\031', 'P', 'o', 's', 't', 'I', 'n', 'p', 'u', 't', 's', 'S', 
  'e', 'a', 'r', 'c', 'h', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '&', '\n', '\010', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', 
  '\030', '\002', ' ', '\003', '(', '\013', '2', '\024', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'e', 'a', 
  'r', 'c', 'h', '\022', ',', '\n', '\n', 'p', 'a', 'g', 'i', 'n', 'a', 't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\013', '2', '\030', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 'g', 'i', 'n', 'a', 't', 'i', 'o', 'n', '\"', 
  'i', '\n', '\024', 'S', 'i', 'n', 'g', 'l', 'e', 'S', 'e', 'a', 'r', 'c', 'h', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', 
  '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '$', '\n', '\006', 's', 'e', 'a', 
  'r', 'c', 'h', '\030', '\005', ' ', '\001', '(', '\013', '2', '\024', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'S', 'e', 'a', 'r', 'c', 'h', '\"', '\301', '\001', '\n', '\023', 'M', 'u', 'l', 't', 'i', 'S', 'e', 'a', 'r', 'c', 'h', 'R', 'e', 's', 
  'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', 
  '\022', '\n', '\n', '\002', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '%', '\n', '\004', 'h', 'i', 't', 's', '\030', '\003', ' ', '\003', '(', 
  '\013', '2', '\021', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'H', 'i', 't', 'B', '\004', '\200', '\265', '\030', 
  '\001', '\022', '\"', '\n', '\005', 'q', 'u', 'e', 'r', 'y', '\030', '\004', ' ', '\001', '(', '\013', '2', '\023', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'Q', 'u', 'e', 'r', 'y', '\022', '&', '\n', '\010', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', '\030', 
  '\005', ' ', '\003', '(', '\013', '2', '\024', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'e', 'a', 'r', 
  'c', 'h', '\"', '\224', '\002', '\n', '\"', 'P', 'o', 's', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'S', 'e', 'a', 'r', 
  'c', 'h', 'M', 'e', 't', 'r', 'i', 'c', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\n', '\n', '\002', 'i', 'd', '\030', '\002', ' ', '\001', 
  '(', '\t', '\022', '*', '\n', '\014', 'g', 'r', 'o', 'u', 'n', 'd', '_', 't', 'r', 'u', 't', 'h', '\030', '\003', ' ', '\001', '(', '\013', '2', 
  '\024', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'e', 'a', 'r', 'c', 'h', '\022', ',', '\n', '\016', 
  's', 'e', 'a', 'r', 'c', 'h', '_', 't', 'o', '_', 'e', 'v', 'a', 'l', '\030', '\004', ' ', '\001', '(', '\013', '2', '\024', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'e', 'a', 'r', 'c', 'h', '\022', ' ', '\n', '\004', 'd', 'a', 't', 'a', 
  '\030', '\005', ' ', '\001', '(', '\013', '2', '\022', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'a', 't', 
  'a', '\022', '5', '\n', '\017', 'e', 'v', 'a', 'l', 'u', 'a', 't', 'i', 'o', 'n', '_', 't', 'y', 'p', 'e', '\030', '\006', ' ', '\001', '(', 
  '\016', '2', '\034', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'E', 'v', 'a', 'l', 'u', 'a', 't', 'i', 
  'o', 'n', 'T', 'y', 'p', 'e', '\"', '`', '\n', '!', 'G', 'e', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'S', 'e', 
  'a', 'r', 'c', 'h', 'M', 'e', 't', 'r', 'i', 'c', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\n', '\n', '\002', 'i', 'd', '\030', '\002', 
  ' ', '\001', '(', '\t', '\"', 'U', '\n', '\"', 'L', 'i', 's', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'S', 'e', 'a', 
  'r', 'c', 'h', 'M', 'e', 't', 'r', 'i', 'c', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\"', '\235', '\001', '\n', '$', 'M', 'u', 'l', 't', 
  'i', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'S', 'e', 'a', 'r', 'c', 'h', 'M', 'e', 't', 'r', 'i', 'c', 's', 'R', 
  'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 
  'u', 's', '\022', 'H', '\n', '\031', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '_', 's', 'e', 'a', 'r', 'c', 'h', '_', 'm', 
  'e', 't', 'r', 'i', 'c', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '%', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'S', 'e', 'a', 'r', 'c', 'h', 'M', 'e', 't', 'r', 'i', 'c', 
  's', '\"', 'o', '\n', '\034', 'L', 'i', 's', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 
  's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', 
  ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 
  'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 
  'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\"', 'k', '\n', '\032', 'G', 'e', 't', 'A', 'n', 'n', 'o', 
  't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\034', '\n', '\024', 'a', 'n', 'n', 
  'o', 't', 'a', 't', 'i', 'o', 'n', '_', 'f', 'i', 'l', 't', 'e', 'r', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\"', '\213', 
  '\001', '\n', '\034', 'P', 'o', 's', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 's', 'R', 
  'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', 
  '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 
  'I', 'D', 'S', 'e', 't', '\022', ':', '\n', '\022', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '_', 'f', 'i', 'l', 't', 'e', 
  'r', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\036', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'A', 
  'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', '\"', '\234', '\001', '\n', '\035', 'P', 'a', 't', 'c', 'h', 
  'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', 
  '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', ':', 
  '\n', '\022', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '_', 'f', 'i', 'l', 't', 'e', 'r', 's', '\030', '\002', ' ', '\003', '(', 
  '\013', '2', '\036', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 
  'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\t', '\"', 
  'p', '\n', '\036', 'D', 'e', 'l', 'e', 't', 'e', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 
  's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', 
  ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 
  'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\035', '\n', '\025', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '_', 'f', 'i', 'l', 
  't', 'e', 'r', '_', 'i', 'd', 's', '\030', '\002', ' ', '\003', '(', '\t', '\"', '\216', '\001', '\n', '\035', 'M', 'u', 'l', 't', 'i', 'A', 'n', 
  'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', 
  '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '@', '\n', '\022', 'a', 'n', 'n', 'o', 
  't', 'a', 't', 'i', 'o', 'n', '_', 'f', 'i', 'l', 't', 'e', 'r', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\036', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 
  'e', 'r', 'B', '\004', '\200', '\265', '\030', '\001', '\"', '\210', '\001', '\n', '\036', 'S', 'i', 'n', 'g', 'l', 'e', 'A', 'n', 'n', 'o', 't', 'a', 
  't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 
  't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '9', '\n', '\021', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 
  'o', 'n', '_', 'f', 'i', 'l', 't', 'e', 'r', '\030', '\002', ' ', '\001', '(', '\013', '2', '\036', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', '\"', 'x', '\n', 
  '\033', 'P', 'o', 's', 't', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'e', 'P', 'a', 's', 's', 'w', 'o', 'r', 'd', 'R', 'e', 'q', 'u', 
  'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', 
  '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 
  'e', 't', '\022', '(', '\n', '\010', 'p', 'a', 's', 's', 'w', 'o', 'r', 'd', '\030', '\002', ' ', '\001', '(', '\013', '2', '\026', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 's', 's', 'w', 'o', 'r', 'd', '\"', '\216', '\001', '\n', ' ', 'S', 
  'i', 'n', 'g', 'l', 'e', 'P', 'a', 's', 's', 'w', 'o', 'r', 'd', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'i', 'o', 'n', 'R', 'e', 
  's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 
  's', '\022', '=', '\n', '\023', 'p', 'a', 's', 's', 'w', 'o', 'r', 'd', '_', 'v', 'i', 'o', 'l', 'a', 't', 'i', 'o', 'n', 's', '\030', 
  '\002', ' ', '\001', '(', '\013', '2', ' ', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 's', 's', 
  'w', 'o', 'r', 'd', 'V', 'i', 'o', 'l', 'a', 't', 'i', 'o', 'n', 's', '\"', '\273', '\001', '\n', '\022', 'G', 'e', 't', 'W', 'o', 'r', 
  'k', 'f', 'l', 'o', 'w', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 
  's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\023', '\n', '\013', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 
  'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', ' ', '\n', '\030', 'f', 'a', 'v', 'o', 'r', '_', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '_', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '\030', '\003', ' ', '\001', '(', '\010', '\022', '\031', '\n', '\021', 'a', 'd', 'd', 'i', 't', 
  'i', 'o', 'n', 'a', 'l', '_', 'f', 'i', 'e', 'l', 'd', 's', '\030', '\004', ' ', '\003', '(', '\t', '\022', '\"', '\n', '\032', 'e', 'x', 'c', 
  'l', 'u', 'd', 'e', '_', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '_', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '\030', '\005', 
  ' ', '\001', '(', '\010', '\"', '\273', '\002', '\n', '\024', 'L', 'i', 's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', 'R', 'e', 'q', 
  'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', 
  '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 
  'S', 'e', 't', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 
  'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\022', '\026', '\n', '\016', 's', 'o', 'r', 't', '_', 'a', 's', 'c', 'e', 'n', 'd', 
  'i', 'n', 'g', '\030', '\005', ' ', '\001', '(', '\010', '\022', '\024', '\n', '\n', 's', 'o', 'r', 't', '_', 'b', 'y', '_', 'i', 'd', '\030', '\006', 
  ' ', '\001', '(', '\010', 'H', '\000', '\022', '\035', '\n', '\023', 's', 'o', 'r', 't', '_', 'b', 'y', '_', 'm', 'o', 'd', 'i', 'f', 'i', 'e', 
  'd', '_', 'a', 't', '\030', '\007', ' ', '\001', '(', '\010', 'H', '\000', '\022', '\r', '\n', '\005', 'q', 'u', 'e', 'r', 'y', '\030', '\010', ' ', '\001', 
  '(', '\t', '\022', '\016', '\n', '\002', 'i', 'd', '\030', '\004', ' ', '\001', '(', '\t', 'B', '\002', '\030', '\001', '\022', '\025', '\n', '\r', 'f', 'e', 'a', 
  't', 'u', 'r', 'e', 'd', '_', 'o', 'n', 'l', 'y', '\030', '\t', ' ', '\001', '(', '\010', '\022', '\024', '\n', '\014', 's', 't', 'a', 'r', 'r', 
  'e', 'd', '_', 'o', 'n', 'l', 'y', '\030', '\013', ' ', '\001', '(', '\010', '\022', '\031', '\n', '\021', 'a', 'd', 'd', 'i', 't', 'i', 'o', 'n', 
  'a', 'l', '_', 'f', 'i', 'e', 'l', 'd', 's', '\030', '\n', ' ', '\003', '(', '\t', '\022', '\023', '\n', '\013', 's', 'e', 'a', 'r', 'c', 'h', 
  '_', 't', 'e', 'r', 'm', '\030', '\014', ' ', '\001', '(', '\t', 'B', '\t', '\n', '\007', 's', 'o', 'r', 't', '_', 'b', 'y', '\"', 'r', '\n', 
  '\024', 'P', 'o', 's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 
  'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', ')', '\n', '\t', 'w', 
  'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\026', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '\"', '\203', '\001', '\n', '\025', 'P', 'a', 't', 'c', 'h', 'W', 'o', 
  'r', 'k', 'f', 'l', 'o', 'w', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', ')', '\n', '\t', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 
  's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\026', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'W', 'o', 
  'r', 'k', 'f', 'l', 'o', 'w', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\t', '\"', '\205', '\001', 
  '\n', '\027', 'P', 'a', 't', 'c', 'h', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'I', 'd', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', 
  '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', 
  ')', '\n', '\003', 'i', 'd', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '\034', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'I', 'd', 'U', 'p', 'd', 'a', 't', 'e', 'S', 'o', 'u', 'r', 'c', 'e', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 
  'o', 'n', '\030', '\004', ' ', '\001', '(', '\t', '\"', ']', '\n', '\025', 'D', 'e', 'l', 'e', 't', 'e', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 
  'w', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', 
  ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 
  'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\023', '\n', '\013', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '\030', '\002', ' ', 
  '\001', '(', '\t', '\"', 'j', '\n', '\026', 'D', 'e', 'l', 'e', 't', 'e', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', 'R', 'e', 'q', 
  'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', 
  '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 
  'S', 'e', 't', '\022', '\013', '\n', '\003', 'i', 'd', 's', '\030', '\002', ' ', '\003', '(', '\t', '\022', '\022', '\n', '\n', 'd', 'e', 'l', 'e', 't', 
  'e', '_', 'a', 'l', 'l', '\030', '\003', ' ', '\001', '(', '\010', '\"', 'o', '\n', '\026', 'S', 'i', 'n', 'g', 'l', 'e', 'W', 'o', 'r', 'k', 
  'f', 'l', 'o', 'w', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', 
  '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', 
  '.', 'S', 't', 'a', 't', 'u', 's', '\022', '(', '\n', '\010', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '\030', '\002', ' ', '\001', '(', '\013', 
  '2', '\026', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '\"', 
  'u', '\n', '\025', 'M', 'u', 'l', 't', 'i', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', 
  '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '/', '\n', '\t', 'w', 'o', 
  'r', 'k', 'f', 'l', 'o', 'w', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\026', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'B', '\004', '\200', '\265', '\030', '\001', '\"', '\245', '\002', '\n', '\032', 'P', 'o', 
  's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'R', 'e', 's', 'u', 'l', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', 
  '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\023', 
  '\n', '\013', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\022', '\n', '\n', 'v', 'e', 
  'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '\030', '\007', ' ', '\001', '(', '\t', '\022', '#', '\n', '\006', 'i', 'n', 'p', 'u', 't', 's', '\030', 
  '\003', ' ', '\003', '(', '\013', '2', '\023', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'I', 'n', 'p', 'u', 
  't', '\022', '1', '\n', '\r', 'o', 'u', 't', 'p', 'u', 't', '_', 'c', 'o', 'n', 'f', 'i', 'g', '\030', '\004', ' ', '\001', '(', '\013', '2', 
  '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'O', 'u', 't', 'p', 'u', 't', 'C', 'o', 'n', 'f', 
  'i', 'g', '\022', ' ', '\n', '\030', 'f', 'a', 'v', 'o', 'r', '_', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '_', 'w', 'o', 'r', 'k', 
  'f', 'l', 'o', 'w', 's', '\030', '\005', ' ', '\001', '(', '\010', '\022', '3', '\n', '\016', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 's', 
  't', 'a', 't', 'e', '\030', '\006', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'S', 't', 'a', 't', 'e', '\"', '\330', '\001', '\n', '\033', 'P', 'o', 's', 't', 'W', 'o', 
  'r', 'k', 'f', 'l', 'o', 'w', 'R', 'e', 's', 'u', 'l', 't', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 
  's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '(', '\n', '\010', 'w', 'o', 'r', 'k', 'f', 
  'l', 'o', 'w', '\030', '\002', ' ', '\001', '(', '\013', '2', '\026', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '\022', '-', '\n', '\007', 'r', 'e', 's', 'u', 'l', 't', 's', '\030', '\003', ' ', '\003', '(', '\013', 
  '2', '\034', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'R', 
  'e', 's', 'u', 'l', 't', '\022', '3', '\n', '\016', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 's', 't', 'a', 't', 'e', '\030', '\004', 
  ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'W', 'o', 'r', 'k', 'f', 
  'l', 'o', 'w', 'S', 't', 'a', 't', 'e', '\"', '\221', '\002', '\n', '$', 'P', 'o', 's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 
  'R', 'e', 's', 'u', 'l', 't', 's', 'S', 'i', 'm', 'i', 'l', 'a', 'r', 'i', 't', 'y', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', 
  '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\023', 
  '\n', '\013', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\022', '\n', '\n', 'v', 'e', 
  'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '\030', '\007', ' ', '\001', '(', '\t', '\022', '\030', '\n', '\020', 'm', 'o', 'd', 'e', 'l', '_', 'v', 
  'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '\030', '\003', ' ', '\001', '(', '\t', '\022', ')', '\n', '\014', 'p', 'r', 'o', 'b', 'e', '_', 
  'i', 'n', 'p', 'u', 't', 's', '\030', '\004', ' ', '\003', '(', '\013', '2', '\023', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'I', 'n', 'p', 'u', 't', '\022', '(', '\n', '\013', 'p', 'o', 'o', 'l', '_', 'i', 'n', 'p', 'u', 't', 's', '\030', '\005', 
  ' ', '\003', '(', '\013', '2', '\023', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'I', 'n', 'p', 'u', 't', 
  '\022', ' ', '\n', '\030', 'f', 'a', 'v', 'o', 'r', '_', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '_', 'w', 'o', 'r', 'k', 'f', 'l', 
  'o', 'w', 's', '\030', '\006', ' ', '\001', '(', '\010', '\"', '\216', '\001', '\n', '%', 'P', 'o', 's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 
  'w', 'R', 'e', 's', 'u', 'l', 't', 's', 'S', 'i', 'm', 'i', 'l', 'a', 'r', 'i', 't', 'y', 'R', 'e', 's', 'p', 'o', 'n', 's', 
  'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '8', '\n', '\007', 
  'r', 'e', 's', 'u', 'l', 't', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'R', 'e', 's', 'u', 'l', 't', 's', 'S', 'i', 'm', 'i', 'l', 'a', 
  'r', 'i', 't', 'y', '\"', '\203', '\001', '\n', '\033', 'L', 'i', 's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 
  'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 
  'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\023', '\n', '\013', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', 
  '\030', '\002', ' ', '\001', '(', '\t', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 
  'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\004', ' ', '\001', '(', '\r', '\"', '~', '\n', '\031', 'G', 'e', 't', 'W', 'o', 'r', 'k', 'f', 
  'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\023', '\n', '\013', 'w', 'o', 'r', 'k', 'f', 
  'l', 'o', 'w', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\033', '\n', '\023', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 
  'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '\030', '\003', ' ', '\001', '(', '\t', '\"', '\203', '\001', '\n', '\035', 'D', 'e', 'l', 'e', 
  't', 'e', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', 
  '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', 
  '\023', '\n', '\013', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\034', '\n', '\024', 'w', 
  'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', 's', '\030', '\003', ' ', '\003', '(', '\t', 
  '\"', '\256', '\001', '\n', '\034', 'P', 'a', 't', 'c', 'h', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 
  's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', 
  ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 
  'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\023', '\n', '\013', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '\030', '\002', ' ', 
  '\001', '(', '\t', '\022', '8', '\n', '\021', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '\030', 
  '\003', ' ', '\003', '(', '\013', '2', '\035', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'W', 'o', 'r', 'k', 
  'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\004', ' ', '\001', 
  '(', '\t', '\"', '\213', '\001', '\n', '\034', 'M', 'u', 'l', 't', 'i', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 
  'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', 
  '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 
  't', 'a', 't', 'u', 's', '\022', '>', '\n', '\021', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', 
  's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\035', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'W', 'o', 
  'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'B', '\004', '\200', '\265', '\030', '\001', '\"', '\205', '\001', '\n', '\035', 'S', 
  'i', 'n', 'g', 'l', 'e', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 
  'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '7', 
  '\n', '\020', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '\030', '\002', ' ', '\001', '(', '\013', '2', 
  '\035', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 
  'r', 's', 'i', 'o', 'n', '\"', '\205', '\001', '\n', '\032', 'P', 'o', 's', 't', 'A', 'p', 'p', 'D', 'u', 'p', 'l', 'i', 'c', 'a', 't', 
  'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 
  'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '6', '\n', '\020', 'a', 'p', 'p', '_', 'd', 'u', 'p', 'l', 'i', 'c', 'a', 
  't', 'i', 'o', 'n', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\034', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'A', 'p', 'p', 'D', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', '\"', 'g', '\n', '\030', 'G', 'e', 't', 'A', 'p', 
  'p', 'D', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\032', '\n', '\022', 'a', 'p', 'p', 
  '_', 'd', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\"', 'm', '\n', '\032', 
  'L', 'i', 's', 't', 'A', 'p', 'p', 'D', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 
  't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', 
  '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 
  'e', '\030', '\003', ' ', '\001', '(', '\r', '\"', '\203', '\001', '\n', '\034', 'M', 'u', 'l', 't', 'i', 'A', 'p', 'p', 'D', 'u', 'p', 'l', 'i', 
  'c', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', 
  '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 
  't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '6', '\n', '\020', 'a', 'p', 'p', '_', 'd', 'u', 'p', 'l', 'i', 'c', 'a', 
  't', 'i', 'o', 'n', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\034', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'A', 'p', 'p', 'D', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', '\"', '\202', '\001', '\n', '\034', 'S', 'i', 'n', 'g', 
  'l', 'e', 'A', 'p', 'p', 'D', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', 
  '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '5', '\n', '\017', 'a', 'p', 
  'p', '_', 'd', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', '\030', '\002', ' ', '\001', '(', '\013', '2', '\034', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'A', 'p', 'p', 'D', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', '\"', 
  'f', '\n', '\020', 'P', 'o', 's', 't', 'T', 'a', 's', 'k', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '!', '\n', '\005', 't', 'a', 's', 
  'k', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\022', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'T', 
  'a', 's', 'k', '\"', 'm', '\n', '\016', 'G', 'e', 't', 'T', 'a', 's', 'k', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 
  'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\017', '\n', '\007', 't', 
  'a', 's', 'k', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\031', '\n', '\021', 'a', 'd', 'd', 'i', 't', 'i', 'o', 'n', 'a', 
  'l', '_', 'f', 'i', 'e', 'l', 'd', 's', '\030', '\003', ' ', '\003', '(', '\t', '\"', '\356', '\001', '\n', '\020', 'L', 'i', 's', 't', 'T', 'a', 
  's', 'k', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 
  'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\020', 
  '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\022', '\027', '\n', '\017', 'w', 'o', 'r', 'k', 'e', 
  'r', '_', 'u', 's', 'e', 'r', '_', 'i', 'd', 's', '\030', '\004', ' ', '\003', '(', '\t', '\022', '\027', '\n', '\017', 'r', 'e', 'v', 'i', 'e', 
  'w', '_', 'u', 's', 'e', 'r', '_', 'i', 'd', 's', '\030', '\005', ' ', '\003', '(', '\t', '\022', '\027', '\n', '\017', 'l', 'a', 'b', 'e', 'l', 
  '_', 'o', 'r', 'd', 'e', 'r', '_', 'i', 'd', 's', '\030', '\010', ' ', '\003', '(', '\t', '\022', '#', '\n', '\033', 'i', 'n', 'c', 'l', 'u', 
  'd', 'i', 'n', 'g', '_', 'l', 'a', 'b', 'e', 'l', '_', 'o', 'r', 'd', 'e', 'r', '_', 't', 'a', 's', 'k', 's', '\030', '\006', ' ', 
  '\001', '(', '\010', '\022', '\031', '\n', '\021', 'a', 'd', 'd', 'i', 't', 'i', 'o', 'n', 'a', 'l', '_', 'f', 'i', 'e', 'l', 'd', 's', '\030', 
  '\007', ' ', '\003', '(', '\t', '\"', 'w', '\n', '\021', 'P', 'a', 't', 'c', 'h', 'T', 'a', 's', 'k', 's', 'R', 'e', 'q', 'u', 'e', 's', 
  't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', 
  '\022', '!', '\n', '\005', 't', 'a', 's', 'k', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\022', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'T', 'a', 's', 'k', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', 
  '\t', '\"', 'R', '\n', '\022', 'D', 'e', 'l', 'e', 't', 'e', 'T', 'a', 's', 'k', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', 
  '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\013', '\n', 
  '\003', 'i', 'd', 's', '\030', '\002', ' ', '\003', '(', '\t', '\"', 'i', '\n', '\021', 'M', 'u', 'l', 't', 'i', 'T', 'a', 's', 'k', 'R', 'e', 
  's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 
  's', '\022', '\'', '\n', '\005', 't', 'a', 's', 'k', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\022', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'T', 'a', 's', 'k', 'B', '\004', '\200', '\265', '\030', '\001', '\"', 'c', '\n', '\022', 'S', 'i', 'n', 'g', 
  'l', 'e', 'T', 'a', 's', 'k', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', 
  '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 
  'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', ' ', '\n', '\004', 't', 'a', 's', 'k', '\030', '\002', ' ', '\001', '(', '\013', '2', '\022', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'T', 'a', 's', 'k', '\"', 'i', '\n', '\023', 'G', 'e', 't', 
  'T', 'a', 's', 'k', 'C', 'o', 'u', 'n', 't', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\017', '\n', '\007', 't', 'a', 's', 'k', '_', 'i', 
  'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\020', '\n', '\010', 'u', 's', 'e', 'r', '_', 'i', 'd', 's', '\030', '\003', ' ', '\003', '(', '\t', 
  '\"', '\235', '\001', '\n', '\027', 'S', 'i', 'n', 'g', 'l', 'e', 'T', 'a', 's', 'k', 'C', 'o', 'u', 'n', 't', 'R', 'e', 's', 'p', 'o', 
  'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '\016', 
  '\n', '\006', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\017', '\n', '\007', 't', 'a', 's', 'k', '_', 'i', 'd', 
  '\030', '\003', ' ', '\001', '(', '\t', '\022', '4', '\n', '\006', 'c', 'o', 'u', 'n', 't', 's', '\030', '\004', ' ', '\003', '(', '\013', '2', '$', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'T', 'a', 's', 'k', 'S', 't', 'a', 't', 'u', 's', 'C', 'o', 
  'u', 'n', 't', 'P', 'e', 'r', 'U', 's', 'e', 'r', '\"', 'y', '\n', '\026', 'P', 'o', 's', 't', 'L', 'a', 'b', 'e', 'l', 'O', 'r', 
  'd', 'e', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 
  'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '.', '\n', '\014', 'l', 'a', 'b', 'e', 'l', '_', 'o', 'r', 'd', 'e', 'r', 
  's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\030', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'a', 
  'b', 'e', 'l', 'O', 'r', 'd', 'e', 'r', '\"', '_', '\n', '\024', 'G', 'e', 't', 'L', 'a', 'b', 'e', 'l', 'O', 'r', 'd', 'e', 'r', 
  'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', 
  '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 
  'p', 'I', 'D', 'S', 'e', 't', '\022', '\026', '\n', '\016', 'l', 'a', 'b', 'e', 'l', '_', 'o', 'r', 'd', 'e', 'r', '_', 'i', 'd', '\030', 
  '\002', ' ', '\001', '(', '\t', '\"', 'i', '\n', '\026', 'L', 'i', 's', 't', 'L', 'a', 'b', 'e', 'l', 'O', 'r', 'd', 'e', 'r', 's', 'R', 
  'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', 
  '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 
  'I', 'D', 'S', 'e', 't', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 
  'r', '_', 'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\"', '\212', '\001', '\n', '\027', 'P', 'a', 't', 'c', 'h', 'L', 'a', 'b', 
  'e', 'l', 'O', 'r', 'd', 'e', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 
  'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '.', '\n', '\014', 'l', 'a', 'b', 'e', 'l', '_', 'o', 
  'r', 'd', 'e', 'r', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\030', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'L', 'a', 'b', 'e', 'l', 'O', 'r', 'd', 'e', 'r', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\003', ' ', 
  '\001', '(', '\t', '\"', 'X', '\n', '\030', 'D', 'e', 'l', 'e', 't', 'e', 'L', 'a', 'b', 'e', 'l', 'O', 'r', 'd', 'e', 'r', 's', 'R', 
  'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', 
  '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 
  'I', 'D', 'S', 'e', 't', '\022', '\013', '\n', '\003', 'i', 'd', 's', '\030', '\002', ' ', '\003', '(', '\t', '\"', '|', '\n', '\027', 'M', 'u', 'l', 
  't', 'i', 'L', 'a', 'b', 'e', 'l', 'O', 'r', 'd', 'e', 'r', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 
  't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '4', '\n', '\014', 'l', 'a', 'b', 'e', 'l', '_', 
  'o', 'r', 'd', 'e', 'r', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\030', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'L', 'a', 'b', 'e', 'l', 'O', 'r', 'd', 'e', 'r', 'B', '\004', '\200', '\265', '\030', '\001', '\"', 'v', '\n', '\030', 'S', 'i', 
  'n', 'g', 'l', 'e', 'L', 'a', 'b', 'e', 'l', 'O', 'r', 'd', 'e', 'r', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', 
  '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '-', '\n', '\013', 'l', 'a', 'b', 'e', 
  'l', '_', 'o', 'r', 'd', 'e', 'r', '\030', '\002', ' ', '\001', '(', '\013', '2', '\030', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'L', 'a', 'b', 'e', 'l', 'O', 'r', 'd', 'e', 'r', '\"', 'u', '\n', '\025', 'P', 'o', 's', 't', 'C', 'o', 'l', 
  'l', 'e', 'c', 't', 'o', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '+', '\n', '\n', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'o', 
  'r', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\027', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'C', 
  'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', '\"', '\206', '\001', '\n', '\026', 'P', 'a', 't', 'c', 'h', 'C', 'o', 'l', 'l', 'e', 'c', 't', 
  'o', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 
  'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '+', '\n', '\n', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 's', '\030', '\002', 
  ' ', '\003', '(', '\013', '2', '\027', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'C', 'o', 'l', 'l', 'e', 
  'c', 't', 'o', 'r', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\t', '\"', 'k', '\n', '\027', 'D', 
  'e', 'l', 'e', 't', 'e', 'C', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', 
  '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\013', '\n', '\003', 
  'i', 'd', 's', '\030', '\002', ' ', '\003', '(', '\t', '\022', '\022', '\n', '\n', 'd', 'e', 'l', 'e', 't', 'e', '_', 'a', 'l', 'l', '\030', '\003', 
  ' ', '\001', '(', '\010', '\"', '\\', '\n', '\023', 'G', 'e', 't', 'C', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 'R', 'e', 'q', 'u', 'e', 
  's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 
  't', '\022', '\024', '\n', '\014', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\"', 'h', 
  '\n', '\025', 'L', 'i', 's', 't', 'C', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', 
  '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\014', '\n', 
  '\004', 'p', 'a', 'g', 'e', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\003', 
  ' ', '\001', '(', '\r', '\"', 'r', '\n', '\026', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 'R', 'e', 's', 
  'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', 
  '\022', '+', '\n', '\n', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\027', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'C', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', '\"', 'r', '\n', '\027', 'S', 
  'i', 'n', 'g', 'l', 'e', 'C', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', 
  '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '*', '\n', '\t', 'c', 'o', 'l', 'l', 
  'e', 'c', 't', 'o', 'r', '\030', '\002', ' ', '\001', '(', '\013', '2', '\027', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'C', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', '\"', 'v', '\n', '\025', 'P', 'o', 's', 't', 'S', 't', 'a', 't', 'V', 'a', 
  'l', 'u', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 
  'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', ',', '\n', '\013', 's', 't', 'a', 't', '_', 'v', 'a', 'l', 'u', 'e', 's', 
  '\030', '\002', ' ', '\003', '(', '\013', '2', '\027', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 't', 'a', 
  't', 'V', 'a', 'l', 'u', 'e', '\"', 'y', '\n', '\026', 'M', 'u', 'l', 't', 'i', 'S', 't', 'a', 't', 'V', 'a', 'l', 'u', 'e', 'R', 
  'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 
  'u', 's', '\022', '2', '\n', '\013', 's', 't', 'a', 't', '_', 'v', 'a', 'l', 'u', 'e', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\027', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 't', 'a', 't', 'V', 'a', 'l', 'u', 'e', 'B', '\004', 
  '\200', '\265', '\030', '\001', '\"', '\236', '\001', '\n', '\036', 'P', 'o', 's', 't', 'S', 't', 'a', 't', 'V', 'a', 'l', 'u', 'e', 's', 'A', 'g', 
  'g', 'r', 'e', 'g', 'a', 't', 'e', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', 'K', '\n', '\034', 's', 't', 'a', 't', '_', 'v', 'a', 'l', 
  'u', 'e', '_', 'a', 'g', 'g', 'r', 'e', 'g', 'a', 't', 'e', '_', 'q', 'u', 'e', 'r', 'i', 'e', 's', '\030', '\002', ' ', '\003', '(', 
  '\013', '2', '%', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 't', 'a', 't', 'V', 'a', 'l', 'u', 
  'e', 'A', 'g', 'g', 'r', 'e', 'g', 'a', 't', 'e', 'Q', 'u', 'e', 'r', 'y', '\"', '\234', '\001', '\n', '\037', 'M', 'u', 'l', 't', 'i', 
  'S', 't', 'a', 't', 'V', 'a', 'l', 'u', 'e', 'A', 'g', 'g', 'r', 'e', 'g', 'a', 't', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 
  'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', 'L', '\n', '\034', 
  's', 't', 'a', 't', '_', 'v', 'a', 'l', 'u', 'e', '_', 'a', 'g', 'g', 'r', 'e', 'g', 'a', 't', 'e', '_', 'r', 'e', 's', 'u', 
  'l', 't', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '&', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'S', 't', 'a', 't', 'V', 'a', 'l', 'u', 'e', 'A', 'g', 'g', 'r', 'e', 'g', 'a', 't', 'e', 'R', 'e', 's', 'u', 'l', 't', '\"', 
  'w', '\n', '\036', 'P', 'o', 's', 't', 'T', 'r', 'e', 'n', 'd', 'i', 'n', 'g', 'M', 'e', 't', 'r', 'i', 'c', 's', 'V', 'i', 'e', 
  'w', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', 
  ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 
  'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\021', '\n', '\t', 'v', 'i', 'e', 'w', '_', 't', 'y', 'p', 'e', '\030', '\002', ' ', '\001', '(', 
  '\t', '\022', '\021', '\n', '\t', 'o', 'b', 'j', 'e', 'c', 't', '_', 'i', 'd', '\030', '\003', ' ', '\001', '(', '\t', '\"', '\205', '\001', '\n', '\037', 
  'L', 'i', 's', 't', 'T', 'r', 'e', 'n', 'd', 'i', 'n', 'g', 'M', 'e', 't', 'r', 'i', 'c', 's', 'V', 'i', 'e', 'w', 's', 'R', 
  'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', 
  '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 
  'I', 'D', 'S', 'e', 't', '\022', '\021', '\n', '\t', 'v', 'i', 'e', 'w', '_', 't', 'y', 'p', 'e', '\030', '\002', ' ', '\001', '(', '\t', '\022', 
  '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', 
  '\030', '\004', ' ', '\001', '(', '\r', '\"', '~', '\n', ' ', 'M', 'u', 'l', 't', 'i', 'T', 'r', 'e', 'n', 'd', 'i', 'n', 'g', 'M', 'e', 
  't', 'r', 'i', 'c', 's', 'V', 'i', 'e', 'w', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 
  'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 
  't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '-', '\n', '\007', 'm', 'e', 't', 'r', 'i', 'c', 's', '\030', '\002', 
  ' ', '\003', '(', '\013', '2', '\034', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'T', 'r', 'e', 'n', 'd', 
  'i', 'n', 'g', 'M', 'e', 't', 'r', 'i', 'c', '\"', 'V', '\n', '\020', 'G', 'e', 't', 'M', 'o', 'd', 'u', 'l', 'e', 'R', 'e', 'q', 
  'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', 
  '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 
  'S', 'e', 't', '\022', '\021', '\n', '\t', 'm', 'o', 'd', 'u', 'l', 'e', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\"', 'e', '\n', 
  '\022', 'L', 'i', 's', 't', 'M', 'o', 'd', 'u', 'l', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 
  'e', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', 
  '\"', 'l', '\n', '\022', 'P', 'o', 's', 't', 'M', 'o', 'd', 'u', 'l', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', 
  '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '%', '\n', '\007', 
  'm', 'o', 'd', 'u', 'l', 'e', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '\024', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'M', 'o', 'd', 'u', 'l', 'e', '\"', '}', '\n', '\023', 'P', 'a', 't', 'c', 'h', 'M', 'o', 'd', 'u', 'l', 'e', 
  's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', 
  ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 
  'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '%', '\n', '\007', 'm', 'o', 'd', 'u', 'l', 'e', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', 
  '\024', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'o', 'd', 'u', 'l', 'e', '\022', '\016', '\n', '\006', 
  'a', 'c', 't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\t', '\"', 'T', '\n', '\024', 'D', 'e', 'l', 'e', 't', 'e', 'M', 'o', 'd', 
  'u', 'l', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 
  'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\013', '\n', '\003', 'i', 'd', 's', '\030', '\002', ' ', '\003', '(', '\t', '\"', 'i', 
  '\n', '\024', 'S', 'i', 'n', 'g', 'l', 'e', 'M', 'o', 'd', 'u', 'l', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', 
  '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '$', '\n', '\006', 'm', 'o', 'd', 'u', 
  'l', 'e', '\030', '\002', ' ', '\001', '(', '\013', '2', '\024', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 
  'o', 'd', 'u', 'l', 'e', '\"', 'o', '\n', '\023', 'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 'u', 'l', 'e', 'R', 'e', 's', 'p', 'o', 
  'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '+', 
  '\n', '\007', 'm', 'o', 'd', 'u', 'l', 'e', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\024', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'M', 'o', 'd', 'u', 'l', 'e', 'B', '\004', '\200', '\265', '\030', '\001', '\"', 'x', '\n', '\027', 'G', 'e', 't', 
  'M', 'o', 'd', 'u', 'l', 'e', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\021', '\n', '\t', 'm', 'o', 
  'd', 'u', 'l', 'e', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\031', '\n', '\021', 'm', 'o', 'd', 'u', 'l', 'e', '_', 'v', 
  'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '\030', '\003', ' ', '\001', '(', '\t', '\"', '\177', '\n', '\031', 'L', 'i', 's', 't', 'M', 'o', 
  'd', 'u', 'l', 'e', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\021', '\n', '\t', 'm', 'o', 'd', 
  'u', 'l', 'e', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', 
  '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\004', ' ', '\001', '(', '\r', '\"', '\225', '\001', '\n', '\031', 'P', 
  'o', 's', 't', 'M', 'o', 'd', 'u', 'l', 'e', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', 
  '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\021', 
  '\n', '\t', 'm', 'o', 'd', 'u', 'l', 'e', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '4', '\n', '\017', 'm', 'o', 'd', 'u', 
  'l', 'e', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'o', 'd', 'u', 'l', 'e', 'V', 'e', 'r', 's', 'i', 'o', 'n', '\"', 'n', '\n', '\033', 
  'D', 'e', 'l', 'e', 't', 'e', 'M', 'o', 'd', 'u', 'l', 'e', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 
  's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 
  't', '\022', '\021', '\n', '\t', 'm', 'o', 'd', 'u', 'l', 'e', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\013', '\n', '\003', 'i', 
  'd', 's', '\030', '\003', ' ', '\003', '(', '\t', '\"', '\177', '\n', '\033', 'S', 'i', 'n', 'g', 'l', 'e', 'M', 'o', 'd', 'u', 'l', 'e', 'V', 
  'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', 
  '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 
  'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '3', '\n', '\016', 'm', 'o', 'd', 'u', 'l', 'e', '_', 'v', 'e', 'r', 's', 'i', 
  'o', 'n', '\030', '\002', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 
  'o', 'd', 'u', 'l', 'e', 'V', 'e', 'r', 's', 'i', 'o', 'n', '\"', '\205', '\001', '\n', '\032', 'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 
  'u', 'l', 'e', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 
  't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', ':', '\n', '\017', 'm', 'o', 'd', 'u', 'l', 'e', '_', 'v', 
  'e', 'r', 's', 'i', 'o', 'n', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'M', 'o', 'd', 'u', 'l', 'e', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'B', '\004', '\200', '\265', '\030', '\001', '\"', 'x', 
  '\n', ' ', 'G', 'e', 't', 'I', 'n', 's', 't', 'a', 'l', 'l', 'e', 'd', 'M', 'o', 'd', 'u', 'l', 'e', 'V', 'e', 'r', 's', 'i', 
  'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', 
  '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 
  'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '#', '\n', '\033', 'i', 'n', 's', 't', 'a', 'l', 'l', 'e', 'd', '_', 'm', 'o', 'd', 
  'u', 'l', 'e', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\"', 'u', '\n', '\"', 'L', 
  'i', 's', 't', 'I', 'n', 's', 't', 'a', 'l', 'l', 'e', 'd', 'M', 'o', 'd', 'u', 'l', 'e', 'V', 'e', 'r', 's', 'i', 'o', 'n', 
  's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', 
  ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 
  'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 
  'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\"', '\236', '\001', '\n', '\"', 'P', 'o', 's', 't', 'I', 'n', 
  's', 't', 'a', 'l', 'l', 'e', 'd', 'M', 'o', 'd', 'u', 'l', 'e', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 
  'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', 
  '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 
  'e', 't', '\022', 'G', '\n', '\031', 'i', 'n', 's', 't', 'a', 'l', 'l', 'e', 'd', '_', 'm', 'o', 'd', 'u', 'l', 'e', '_', 'v', 'e', 
  'r', 's', 'i', 'o', 'n', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '$', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'I', 'n', 's', 't', 'a', 'l', 'l', 'e', 'd', 'M', 'o', 'd', 'u', 'l', 'e', 'V', 'e', 'r', 's', 'i', 'o', 'n', 
  '\"', '}', '\n', '%', 'P', 'o', 's', 't', 'I', 'n', 's', 't', 'a', 'l', 'l', 'e', 'd', 'M', 'o', 'd', 'u', 'l', 'e', 'V', 'e', 
  'r', 's', 'i', 'o', 'n', 's', 'K', 'e', 'y', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '#', '\n', '\033', 'i', 'n', 's', 't', 'a', 'l', 
  'l', 'e', 'd', '_', 'm', 'o', 'd', 'u', 'l', 'e', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '\030', '\002', ' ', '\001', 
  '(', '\t', '\"', 'd', '\n', '$', 'D', 'e', 'l', 'e', 't', 'e', 'I', 'n', 's', 't', 'a', 'l', 'l', 'e', 'd', 'M', 'o', 'd', 'u', 
  'l', 'e', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\013', '\n', '\003', 'i', 'd', 's', '\030', '\002', 
  ' ', '\003', '(', '\t', '\"', '\233', '\001', '\n', '$', 'S', 'i', 'n', 'g', 'l', 'e', 'I', 'n', 's', 't', 'a', 'l', 'l', 'e', 'd', 'M', 
  'o', 'd', 'u', 'l', 'e', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 
  't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', 'F', '\n', '\030', 'i', 'n', 's', 't', 'a', 'l', 
  'l', 'e', 'd', '_', 'm', 'o', 'd', 'u', 'l', 'e', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '\030', '\002', ' ', '\001', '(', '\013', '2', 
  '$', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'I', 'n', 's', 't', 'a', 'l', 'l', 'e', 'd', 'M', 
  'o', 'd', 'u', 'l', 'e', 'V', 'e', 'r', 's', 'i', 'o', 'n', '\"', '\241', '\001', '\n', '#', 'M', 'u', 'l', 't', 'i', 'I', 'n', 's', 
  't', 'a', 'l', 'l', 'e', 'd', 'M', 'o', 'd', 'u', 'l', 'e', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 
  's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', 'M', '\n', 
  '\031', 'i', 'n', 's', 't', 'a', 'l', 'l', 'e', 'd', '_', 'm', 'o', 'd', 'u', 'l', 'e', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', 
  's', '\030', '\002', ' ', '\003', '(', '\013', '2', '$', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'I', 'n', 
  's', 't', 'a', 'l', 'l', 'e', 'd', 'M', 'o', 'd', 'u', 'l', 'e', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'B', '\004', '\200', '\265', '\030', 
  '\001', '\"', '\202', '\001', '\n', '\031', 'P', 'o', 's', 't', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', 'R', 
  'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', 
  '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 
  'I', 'D', 'S', 'e', 't', '\022', '4', '\n', '\017', 'b', 'u', 'l', 'k', '_', 'o', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', '\030', 
  '\002', ' ', '\003', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'B', 'u', 'l', 'k', 
  'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', '\"', 'l', '\n', '\031', 'L', 'i', 's', 't', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 
  'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', 
  '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\002', ' ', '\001', '(', 
  '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\"', 'V', '\n', '\027', 'G', 'e', 
  't', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 
  'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\n', '\n', '\002', 'i', 
  'd', '\030', '\002', ' ', '\001', '(', '\t', '\"', 'Z', '\n', '\032', 'C', 'a', 'n', 'c', 'e', 'l', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 
  'a', 't', 'i', 'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 
  's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\013', '\n', '\003', 'i', 'd', 's', '\030', '\002', ' ', '\003', '(', '\t', '\"', 
  'Z', '\n', '\032', 'D', 'e', 'l', 'e', 't', 'e', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 'R', 'e', 'q', 
  'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', 
  '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 
  'S', 'e', 't', '\022', '\013', '\n', '\003', 'i', 'd', 's', '\030', '\002', ' ', '\003', '(', '\t', '\"', '\200', '\001', '\n', '\034', 'S', 'i', 'n', 'g', 
  'l', 'e', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', 
  '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '3', '\n', '\016', 'b', 'u', 
  'l', 'k', '_', 'o', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', '\030', '\002', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', '\"', '\177', '\n', 
  '\033', 'M', 'u', 'l', 't', 'i', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 's', 'p', 'o', 
  'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '3', 
  '\n', '\016', 'b', 'u', 'l', 'k', '_', 'o', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', '\030', '\002', ' ', '\003', '(', '\013', '2', '\033', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 
  'n', '\"', 'k', '\n', '\030', 'L', 'i', 's', 't', 'I', 'n', 'p', 'u', 't', 's', 'A', 'd', 'd', 'J', 'o', 'b', 's', 'R', 'e', 'q', 
  'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', 
  '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 
  'S', 'e', 't', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 
  'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\"', 'U', '\n', '\026', 'G', 'e', 't', 'I', 'n', 'p', 'u', 't', 's', 'A', 'd', 
  'd', 'J', 'o', 'b', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 
  'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\n', '\n', '\002', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\"', '\203', '\001', 
  '\n', '\031', 'M', 'u', 'l', 't', 'i', 'I', 'n', 'p', 'u', 't', 's', 'A', 'd', 'd', 'J', 'o', 'b', 'R', 'e', 's', 'p', 'o', 'n', 
  's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '9', '\n', 
  '\017', 'i', 'n', 'p', 'u', 't', 's', '_', 'a', 'd', 'd', '_', 'j', 'o', 'b', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\032', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'I', 'n', 'p', 'u', 't', 's', 'A', 'd', 'd', 'J', 'o', 'b', 
  'B', '\004', '\200', '\265', '\030', '\001', '\"', '}', '\n', '\032', 'S', 'i', 'n', 'g', 'l', 'e', 'I', 'n', 'p', 'u', 't', 's', 'A', 'd', 'd', 
  'J', 'o', 'b', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', 
  '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 
  'S', 't', 'a', 't', 'u', 's', '\022', '2', '\n', '\016', 'i', 'n', 'p', 'u', 't', 's', '_', 'a', 'd', 'd', '_', 'j', 'o', 'b', '\030', 
  '\002', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'I', 'n', 'p', 'u', 
  't', 's', 'A', 'd', 'd', 'J', 'o', 'b', '\"', 'l', '\n', '\022', 'P', 'o', 's', 't', 'U', 'p', 'l', 'o', 'a', 'd', 's', 'R', 'e', 
  'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', 
  '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 
  'D', 'S', 'e', 't', '\022', '%', '\n', '\007', 'u', 'p', 'l', 'o', 'a', 'd', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\024', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 'p', 'l', 'o', 'a', 'd', '\"', 'T', '\n', '\024', 'D', 'e', 'l', 
  'e', 't', 'e', 'U', 'p', 'l', 'o', 'a', 'd', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\013', '\n', '\003', 'i', 'd', 's', '\030', '\002', 
  ' ', '\003', '(', '\t', '\"', 'e', '\n', '\022', 'L', 'i', 's', 't', 'U', 'p', 'l', 'o', 'a', 'd', 's', 'R', 'e', 'q', 'u', 'e', 's', 
  't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', 
  '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 
  'e', '\030', '\003', ' ', '\001', '(', '\r', '\"', 'V', '\n', '\020', 'G', 'e', 't', 'U', 'p', 'l', 'o', 'a', 'd', 'R', 'e', 'q', 'u', 'e', 
  's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 
  't', '\022', '\021', '\n', '\t', 'u', 'p', 'l', 'o', 'a', 'd', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\"', 'i', '\n', '\024', 'S', 
  'i', 'n', 'g', 'l', 'e', 'U', 'p', 'l', 'o', 'a', 'd', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 
  'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '$', '\n', '\006', 'u', 'p', 'l', 'o', 'a', 'd', '\030', 
  '\002', ' ', '\001', '(', '\013', '2', '\024', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 'p', 'l', 'o', 
  'a', 'd', '\"', 'i', '\n', '\023', 'M', 'u', 'l', 't', 'i', 'U', 'p', 'l', 'o', 'a', 'd', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', 
  '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '%', '\n', '\007', 'u', 
  'p', 'l', 'o', 'a', 'd', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\024', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'U', 'p', 'l', 'o', 'a', 'd', '\"', '\232', '\001', '\n', '\034', 'P', 'u', 't', 'U', 'p', 'l', 'o', 'a', 'd', 'C', 'o', 
  'n', 't', 'e', 'n', 't', 'P', 'a', 'r', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\021', '\n', '\t', 'u', 'p', 'l', 'o', 'a', 
  'd', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '6', '\n', '\r', 'c', 'o', 'n', 't', 'e', 'n', 't', '_', 'p', 'a', 'r', 
  't', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '\037', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 
  'p', 'l', 'o', 'a', 'd', 'C', 'o', 'n', 't', 'e', 'n', 't', 'P', 'a', 'r', 't', '\"', '\255', '\001', '\n', '\034', 'P', 'o', 's', 't', 
  'I', 'n', 'p', 'u', 't', 's', 'D', 'a', 't', 'a', 'S', 'o', 'u', 'r', 'c', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', 
  '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '4', 
  '\n', '\014', 'd', 'a', 't', 'a', '_', 's', 'o', 'u', 'r', 'c', 'e', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\036', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'I', 'n', 'p', 'u', 't', 's', 'D', 'a', 't', 'a', 'S', 'o', 'u', 'r', 
  'c', 'e', '\022', '\025', '\n', '\r', 'c', 'a', 'l', 'l', '_', 'b', 'a', 'c', 'k', '_', 'u', 'r', 'l', '\030', '\003', ' ', '\001', '(', '\t', 
  '\022', '\017', '\n', '\007', 'a', 'p', 'p', '_', 'p', 'a', 't', '\030', '\004', ' ', '\001', '(', '\t', '\"', 'r', '\n', '\035', 'G', 'e', 't', 'I', 
  'n', 'p', 'u', 't', 's', 'E', 'x', 't', 'r', 'a', 'c', 't', 'i', 'o', 'n', 'J', 'o', 'b', 'R', 'e', 'q', 'u', 'e', 's', 't', 
  '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', 
  ' ', '\n', '\030', 'i', 'n', 'p', 'u', 't', 's', '_', 'e', 'x', 't', 'r', 'a', 'c', 't', 'i', 'o', 'n', '_', 'j', 'o', 'b', '_', 
  'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\"', 'r', '\n', '\037', 'L', 'i', 's', 't', 'I', 'n', 'p', 'u', 't', 's', 'E', 'x', 't', 
  'r', 'a', 'c', 't', 'i', 'o', 'n', 'J', 'o', 'b', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', 
  '\030', '\002', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\"', 
  '\222', '\001', '\n', '!', 'S', 'i', 'n', 'g', 'l', 'e', 'I', 'n', 'p', 'u', 't', 's', 'E', 'x', 't', 'r', 'a', 'c', 't', 'i', 'o', 
  'n', 'J', 'o', 'b', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', 
  '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', 
  '.', 'S', 't', 'a', 't', 'u', 's', '\022', '@', '\n', '\025', 'i', 'n', 'p', 'u', 't', 's', '_', 'e', 'x', 't', 'r', 'a', 'c', 't', 
  'i', 'o', 'n', '_', 'j', 'o', 'b', '\030', '\002', ' ', '\001', '(', '\013', '2', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'I', 'n', 'p', 'u', 't', 's', 'E', 'x', 't', 'r', 'a', 'c', 't', 'i', 'o', 'n', 'J', 'o', 'b', '\"', '\222', 
  '\001', '\n', ' ', 'M', 'u', 'l', 't', 'i', 'I', 'n', 'p', 'u', 't', 's', 'E', 'x', 't', 'r', 'a', 'c', 't', 'i', 'o', 'n', 'J', 
  'o', 'b', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', 
  '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 
  't', 'a', 't', 'u', 's', '\022', 'A', '\n', '\026', 'i', 'n', 'p', 'u', 't', 's', '_', 'e', 'x', 't', 'r', 'a', 'c', 't', 'i', 'o', 
  'n', '_', 'j', 'o', 'b', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'I', 'n', 'p', 'u', 't', 's', 'E', 'x', 't', 'r', 'a', 'c', 't', 'i', 'o', 'n', 'J', 'o', 'b', '*', 'p', '\n', 
  '\034', 'O', 'r', 'g', 'a', 'n', 'i', 'z', 'a', 't', 'i', 'o', 'n', 'I', 'n', 'v', 'i', 't', 'a', 't', 'i', 'o', 'n', 'S', 't', 
  'a', 't', 'u', 's', '\022', '\013', '\n', '\007', 'N', 'O', 'T', '_', 'S', 'E', 'T', '\020', '\000', '\022', '\013', '\n', '\007', 'P', 'E', 'N', 'D', 
  'I', 'N', 'G', '\020', '\001', '\022', '\014', '\n', '\010', 'A', 'C', 'C', 'E', 'P', 'T', 'E', 'D', '\020', '\002', '\022', '\r', '\n', '\t', 'C', 'A', 
  'N', 'C', 'E', 'L', 'L', 'E', 'D', '\020', '\003', '\022', '\014', '\n', '\010', 'D', 'E', 'C', 'L', 'I', 'N', 'E', 'D', '\020', '\004', '\022', '\013', 
  '\n', '\007', 'E', 'X', 'P', 'I', 'R', 'E', 'D', '\020', '\005', '2', '\250', '\352', '\002', '\n', '\002', 'V', '2', '\022', '\252', '\002', '\n', '\024', 'L', 
  'i', 's', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'R', 'e', 'l', 'a', 't', 'i', 'o', 'n', 's', '\022', ')', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'R', 'e', 'l', 'a', 
  't', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '*', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'R', 'e', 'l', 'a', 't', 'i', 'o', 'n', 'R', 'e', 
  's', 'p', 'o', 'n', 's', 'e', '\"', '\272', '\001', '\202', '\323', '\344', '\223', '\002', '\253', '\001', '\022', 'Y', '/', 'v', '2', '/', 'u', 's', 'e', 
  'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 
  'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', 
  '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', '/', '{', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'i', 'd', '}', '/', 'r', 'e', 
  'l', 'a', 't', 'i', 'o', 'n', 's', 'Z', 'N', '\022', 'L', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'c', 'o', 'n', 'c', 'e', 'p', 
  't', 's', '/', 'r', 'e', 'l', 'a', 't', 'i', 'o', 'n', 's', '\230', '\234', '\'', '\005', '\220', '\234', '\'', '\013', '\022', '\337', '\001', '\n', '\024', 
  'P', 'o', 's', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'R', 'e', 'l', 'a', 't', 'i', 'o', 'n', 's', '\022', ')', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'R', 'e', 'l', 
  'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '*', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'R', 'e', 'l', 'a', 't', 'i', 'o', 'n', 'R', 
  'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'p', '\202', '\323', '\344', '\223', '\002', '^', '\"', 'Y', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 
  's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 
  'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 
  'c', 'o', 'n', 'c', 'e', 'p', 't', 's', '/', '{', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'i', 'd', '}', '/', 'r', 'e', 'l', 
  'a', 't', 'i', 'o', 'n', 's', ':', '\001', '*', '\230', '\234', '\'', '\005', '\220', '\234', '\'', '\n', '\220', '\234', '\'', '\013', '\022', '\336', '\001', '\n', 
  '\026', 'D', 'e', 'l', 'e', 't', 'e', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'R', 'e', 'l', 'a', 't', 'i', 'o', 'n', 's', '\022', '+', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'C', 'o', 'n', 'c', 'e', 
  'p', 't', 'R', 'e', 'l', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 
  'n', 's', 'e', '\"', 't', '\202', '\323', '\344', '\223', '\002', '^', '*', 'Y', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', 
  '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'c', 'o', 'n', 'c', 
  'e', 'p', 't', 's', '/', '{', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'i', 'd', '}', '/', 'r', 'e', 'l', 'a', 't', 'i', 'o', 
  'n', 's', ':', '\001', '*', '\230', '\234', '\'', '\005', '\220', '\234', '\'', '\r', '\220', '\234', '\'', '\n', '\220', '\234', '\'', '\013', '\022', '\334', '\001', '\n', 
  '\020', 'G', 'e', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'C', 'o', 'u', 'n', 't', 's', '\022', '%', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'C', 'o', 'u', 'n', 't', 's', 'R', 
  'e', 'q', 'u', 'e', 's', 't', '\032', '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 
  't', 'i', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'C', 'o', 'u', 'n', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'x', '\202', 
  '\323', '\344', '\223', '\002', 'b', '\022', 'I', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', '/', 's', 
  't', 'a', 't', 'u', 's', 'Z', '\025', '\022', '\023', '/', 'v', '2', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', '/', 's', 't', 'a', 
  't', 'u', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\005', '\022', '\320', '\001', '\n', '\n', 'G', 
  'e', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', '\022', '\037', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'G', 'e', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '#', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'R', 'e', 's', 'p', 
  'o', 'n', 's', 'e', '\"', '|', '\202', '\323', '\344', '\223', '\002', 'n', '\022', 'O', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 
  'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', 
  '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'c', 'o', 'n', 
  'c', 'e', 'p', 't', 's', '/', '{', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'i', 'd', '}', 'Z', '\033', '\022', '\031', '/', 'v', '2', 
  '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', '/', '{', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'i', 'd', '}', '\230', '\234', '\'', 
  '\002', '\220', '\234', '\'', '\013', '\022', '\271', '\001', '\n', '\014', 'L', 'i', 's', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 's', '\022', '!', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 's', 
  'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\"', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 
  'l', 't', 'i', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'b', '\202', '\323', '\344', '\223', '\002', 
  'T', '\022', 'B', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', 'Z', '\016', '\022', '\014', '/', 'v', 
  '2', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\013', '\022', '\271', '\002', '\n', '\021', 'L', 'i', 
  's', 't', 'M', 'o', 'd', 'e', 'l', 'C', 'o', 'n', 'c', 'e', 'p', 't', 's', '\022', '&', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'M', 'o', 'd', 'e', 'l', 'C', 'o', 'n', 'c', 'e', 'p', 't', 's', 'R', 'e', 
  'q', 'u', 'e', 's', 't', '\032', '\"', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 
  'i', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\327', '\001', '\202', '\323', '\344', '\223', '\002', '\304', 
  '\001', '\022', 'T', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 
  'i', 'd', '}', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', 'Z', 'l', '\022', 'j', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', 
  '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 
  'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 
  'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', 
  '/', '{', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', '\230', '\234', '\'', 
  '\002', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\017', '\022', '\352', '\001', '\n', '\024', 'P', 'o', 's', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 
  's', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', '\022', ')', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'P', 'o', 's', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 's', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', 'R', 'e', 'q', 'u', 'e', 
  's', 't', '\032', '\"', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'C', 'o', 
  'n', 'c', 'e', 'p', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\202', '\001', '\202', '\323', '\344', '\223', '\002', 'l', '\"', 'K', '/', 
  'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 
  'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 
  'p', 'p', '_', 'i', 'd', '}', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', ':', 
  '\001', '*', 'Z', '\032', '\"', '\025', '/', 'v', '2', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', '/', 's', 'e', 'a', 'r', 'c', 'h', 
  'e', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\023', '\022', '\303', '\001', '\n', 
  '\014', 'P', 'o', 's', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 's', '\022', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\"', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'n', 'c', 'e', 'p', 
  't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'l', '\202', '\323', '\344', '\223', '\002', 'Z', '\"', 'B', '/', 'v', '2', '/', 'u', 's', 
  'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', 
  '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', 
  '}', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', ':', '\001', '*', 'Z', '\021', '\"', '\014', '/', 'v', '2', '/', 'c', 'o', 'n', 'c', 
  'e', 'p', 't', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\n', '\220', '\234', '\'', '\013', '\022', '\305', '\001', '\n', '\r', 'P', 
  'a', 't', 'c', 'h', 'C', 'o', 'n', 'c', 'e', 'p', 't', 's', '\022', '\"', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'C', 'o', 'n', 'c', 'e', 'p', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\"', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'n', 'c', 'e', 'p', 
  't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'l', '\202', '\323', '\344', '\223', '\002', 'Z', '2', 'B', '/', 'v', '2', '/', 'u', 's', 
  'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', 
  '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', 
  '}', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', ':', '\001', '*', 'Z', '\021', '2', '\014', '/', 'v', '2', '/', 'c', 'o', 'n', 'c', 
  'e', 'p', 't', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\n', '\220', '\234', '\'', '\013', '\022', '\224', '\002', '\n', '\022', 'G', 
  'e', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', '\022', '\'', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 
  'e', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '+', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 
  'i', 'n', 'g', 'l', 'e', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 'R', 'e', 's', 'p', 'o', 
  'n', 's', 'e', '\"', '\247', '\001', '\202', '\323', '\344', '\223', '\002', '\230', '\001', '\022', 'd', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', 
  '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 
  's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'c', 'o', 
  'n', 'c', 'e', 'p', 't', 's', '/', '{', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'i', 'd', '}', '/', 'l', 'a', 'n', 'g', 'u', 
  'a', 'g', 'e', 's', '/', '{', 'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e', '}', 'Z', '0', '\022', '.', '/', 'v', '2', '/', 'c', 'o', 
  'n', 'c', 'e', 'p', 't', 's', '/', '{', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'i', 'd', '}', '/', 'l', 'a', 'n', 'g', 'u', 
  'a', 'g', 'e', 's', '/', '{', 'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\013', '\022', '\201', 
  '\002', '\n', '\024', 'L', 'i', 's', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', '\022', ')', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 
  'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '*', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'L', 'a', 'n', 'g', 'u', 'a', 
  'g', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\221', '\001', '\202', '\323', '\344', '\223', '\002', '\202', '\001', '\022', 'Y', '/', 'v', '2', 
  '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 
  'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', 
  '_', 'i', 'd', '}', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', '/', '{', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'i', 'd', 
  '}', '/', 'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', 'Z', '%', '\022', '#', '/', 'v', '2', '/', 'c', 'o', 'n', 'c', 'e', 'p', 
  't', 's', '/', '{', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'i', 'd', '}', '/', 'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', 
  '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\013', '\022', '\213', '\002', '\n', '\024', 'P', 'o', 's', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'L', 
  'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', '\022', ')', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 
  'o', 's', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 
  't', '\032', '*', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'n', 
  'c', 'e', 'p', 't', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\233', '\001', '\202', '\323', 
  '\344', '\223', '\002', '\210', '\001', '\"', 'Y', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', '/', '{', 
  'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'i', 'd', '}', '/', 'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', ':', '\001', '*', 'Z', 
  '(', '\"', '#', '/', 'v', '2', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', '/', '{', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 
  'i', 'd', '}', '/', 'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\n', '\220', 
  '\234', '\'', '\013', '\022', '\215', '\002', '\n', '\025', 'P', 'a', 't', 'c', 'h', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'L', 'a', 'n', 'g', 'u', 
  'a', 'g', 'e', 's', '\022', '*', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 
  'C', 'o', 'n', 'c', 'e', 'p', 't', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '*', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'n', 'c', 'e', 'p', 
  't', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\233', '\001', '\202', '\323', '\344', '\223', '\002', 
  '\210', '\001', '2', 'Y', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', 
  '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', '/', '{', 'c', 'o', 'n', 
  'c', 'e', 'p', 't', '_', 'i', 'd', '}', '/', 'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', ':', '\001', '*', 'Z', '(', '2', '#', 
  '/', 'v', '2', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', '/', '{', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'i', 'd', '}', 
  '/', 'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\n', '\220', '\234', '\'', '\013', 
  '\022', '\361', '\001', '\n', '\023', 'L', 'i', 's', 't', 'K', 'n', 'o', 'w', 'l', 'e', 'd', 'g', 'e', 'G', 'r', 'a', 'p', 'h', 's', '\022', 
  '(', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'K', 'n', 'o', 'w', 'l', 'e', 
  'd', 'g', 'e', 'G', 'r', 'a', 'p', 'h', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ')', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'K', 'n', 'o', 'w', 'l', 'e', 'd', 'g', 'e', 'G', 'r', 'a', 'p', 
  'h', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\204', '\001', '\202', '\323', '\344', '\223', '\002', 'v', '\022', 'S', '/', 'v', '2', '/', 'u', 
  's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', 
  '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 
  'd', '}', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', '/', 'k', 'n', 'o', 'w', 'l', 'e', 'd', 'g', 'e', '_', 'g', 'r', 'a', 
  'p', 'h', 's', 'Z', '\037', '\022', '\035', '/', 'v', '2', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', '/', 'k', 'n', 'o', 'w', 'l', 
  'e', 'd', 'g', 'e', '_', 'g', 'r', 'a', 'p', 'h', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\013', '\022', '\373', '\001', '\n', '\023', 'P', 
  'o', 's', 't', 'K', 'n', 'o', 'w', 'l', 'e', 'd', 'g', 'e', 'G', 'r', 'a', 'p', 'h', 's', '\022', '(', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'K', 'n', 'o', 'w', 'l', 'e', 'd', 'g', 'e', 'G', 'r', 'a', 
  'p', 'h', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ')', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'M', 'u', 'l', 't', 'i', 'K', 'n', 'o', 'w', 'l', 'e', 'd', 'g', 'e', 'G', 'r', 'a', 'p', 'h', 'R', 'e', 's', 'p', 'o', 
  'n', 's', 'e', '\"', '\216', '\001', '\202', '\323', '\344', '\223', '\002', '|', '\"', 'S', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 
  'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', 
  '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'c', 'o', 'n', 
  'c', 'e', 'p', 't', 's', '/', 'k', 'n', 'o', 'w', 'l', 'e', 'd', 'g', 'e', '_', 'g', 'r', 'a', 'p', 'h', 's', ':', '\001', '*', 
  'Z', '\"', '\"', '\035', '/', 'v', '2', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', '/', 'k', 'n', 'o', 'w', 'l', 'e', 'd', 'g', 
  'e', '_', 'g', 'r', 'a', 'p', 'h', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\n', '\220', '\234', '\'', '\013', '\022', '\376', 
  '\001', '\n', '\026', 'P', 'o', 's', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'M', 'a', 'p', 'p', 'i', 'n', 'g', 'J', 'o', 'b', 's', 
  '\022', '+', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'C', 'o', 'n', 'c', 'e', 
  'p', 't', 'M', 'a', 'p', 'p', 'i', 'n', 'g', 'J', 'o', 'b', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ',', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'M', 'a', 
  'p', 'p', 'i', 'n', 'g', 'J', 'o', 'b', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\210', '\001', '\202', '\323', '\344', '\223', '\002', 'v', 
  '\"', 'P', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 
  'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', '/', 'm', 'a', 'p', 'p', 'i', 'n', 
  'g', 's', '/', 'j', 'o', 'b', 's', ':', '\001', '*', 'Z', '\037', '\"', '\032', '/', 'v', '2', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 
  's', '/', 'm', 'a', 'p', 'p', 'i', 'n', 'g', 's', '/', 'j', 'o', 'b', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 
  '\n', '\220', '\234', '\'', '\013', '\022', '\223', '\002', '\n', '\r', 'G', 'e', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '\022', '\"', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 
  'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '&', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'S', 'i', 'n', 'g', 'l', 'e', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 
  '\265', '\001', '\202', '\323', '\344', '\223', '\002', '\236', '\001', '\022', 'g', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', 
  '/', '{', 'i', 'n', 'p', 'u', 't', '_', 'i', 'd', '}', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', '/', '{', 
  'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '_', 'i', 'd', '}', 'Z', '3', '\022', '1', '/', 'v', '2', '/', 'i', 'n', 'p', 
  'u', 't', 's', '/', '{', 'i', 'n', 'p', 'u', 't', '_', 'i', 'd', '}', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 
  's', '/', '{', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '_', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '&', 
  '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\017', '\022', '\320', '\001', '\n', '\017', 'L', 'i', 's', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 
  'o', 'n', 's', '\022', '$', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'A', 'n', 
  'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '%', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'R', 'e', 's', 
  'p', 'o', 'n', 's', 'e', '\"', 'p', '\202', '\323', '\344', '\223', '\002', 'Z', '\022', 'E', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', 
  '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 
  's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'a', 'n', 
  'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', 'Z', '\021', '\022', '\017', '/', 'v', '2', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 
  'o', 'n', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\017', '\022', '\343', '\001', '\n', '\017', 'P', 
  'o', 's', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', '\022', '$', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 
  's', 't', '\032', '%', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'A', 'n', 
  'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\202', '\001', '\202', '\323', '\344', '\223', '\002', '`', 
  '\"', 'E', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 
  'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', ':', '\001', '*', 'Z', 
  '\024', '\"', '\017', '/', 'v', '2', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', 
  '\220', '\234', '\'', '\005', '\220', '\234', '\'', '%', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\023', '\022', 
  '\345', '\001', '\n', '\020', 'P', 'a', 't', 'c', 'h', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', '\022', '%', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 
  'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '%', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'M', 'u', 'l', 't', 'i', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\202', 
  '\001', '\202', '\323', '\344', '\223', '\002', '`', '2', 'E', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 
  'o', 'n', 's', ':', '\001', '*', 'Z', '\024', '2', '\017', '/', 'v', '2', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', 
  ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\005', '\220', '\234', '\'', '%', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', 
  '\'', '\023', '\220', '\234', '\'', '\017', '\022', '\363', '\001', '\n', '\026', 'P', 'a', 't', 'c', 'h', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 
  'n', 's', 'S', 't', 'a', 't', 'u', 's', '\022', '+', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 
  'a', 't', 'c', 'h', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', 'S', 't', 'a', 't', 'u', 's', 'R', 'e', 'q', 'u', 
  'e', 's', 't', '\032', ',', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'A', 
  'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', 'S', 't', 'a', 't', 'u', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 
  '~', '\202', '\323', '\344', '\223', '\002', '`', '2', '[', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 't', 'a', 's', 'k', '/', '{', 't', 'a', 
  's', 'k', '_', 'i', 'd', '}', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', '/', 's', 't', 'a', 't', 'u', 's', 
  ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '%', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\023', '\220', '\234', 
  '\'', '\017', '\022', '\234', '\002', '\n', '\020', 'D', 'e', 'l', 'e', 't', 'e', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '\022', '%', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'A', 'n', 'n', 'o', 't', 
  'a', 't', 'i', 'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\275', '\001', 
  '\202', '\323', '\344', '\223', '\002', '\236', '\001', '*', 'g', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', '/', '{', 
  'i', 'n', 'p', 'u', 't', '_', 'i', 'd', '}', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', '/', '{', 'a', 'n', 
  'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '_', 'i', 'd', '}', 'Z', '3', '*', '1', '/', 'v', '2', '/', 'i', 'n', 'p', 'u', 't', 
  's', '/', '{', 'i', 'n', 'p', 'u', 't', '_', 'i', 'd', '}', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', '/', 
  '{', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '_', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '%', '\220', '\234', 
  '\'', '(', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\023', '\220', '\234', '\'', '\017', '\022', '\320', '\002', '\n', '\021', 'D', 'e', 'l', 'e', 't', 'e', 
  'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', '\022', '&', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 
  't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 
  'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\357', '\001', '\202', '\323', '\344', '\223', '\002', '\320', '\001', '*', 'L', '/', 'v', 
  '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', 
  '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 
  'p', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', ':', 
  '\001', '*', 'Z', '\033', '*', '\026', '/', 'v', '2', '/', 'i', 'n', 'p', 'u', 't', 's', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 
  'o', 'n', 's', ':', '\001', '*', 'Z', 'J', '*', 'E', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 
  'i', 'o', 'n', 's', ':', '\001', '*', 'Z', '\024', '*', '\017', '/', 'v', '2', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 
  's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '%', '\220', '\234', '\'', '(', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\023', '\220', 
  '\234', '\'', '\017', '\022', '\363', '\001', '\n', '\030', 'P', 'a', 't', 'c', 'h', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', 'S', 
  'e', 'a', 'r', 'c', 'h', 'e', 's', '\022', '-', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 
  't', 'c', 'h', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', 'R', 'e', 'q', 
  'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 
  'S', 'e', 'a', 'r', 'c', 'h', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\204', '\001', '\202', '\323', '\344', '\223', '\002', 'r', '2', 'N', 
  '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 
  'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 
  'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', '/', 's', 'e', 'a', 'r', 'c', 
  'h', 'e', 's', ':', '\001', '*', 'Z', '\035', '2', '\030', '/', 'v', '2', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', 
  '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 's', '\220', '\234', '\'', 'r', '\022', 
  '\201', '\002', '\n', '\027', 'P', 'o', 's', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', 'S', 'e', 'a', 'r', 'c', 'h', 
  'e', 's', '\022', ',', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'A', 'n', 'n', 
  'o', 't', 'a', 't', 'i', 'o', 'n', 's', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'S', 'e', 'a', 'r', 'c', 'h', 
  'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\224', '\001', '\202', '\323', '\344', '\223', '\002', 'r', '\"', 'N', '/', 'v', '2', '/', 'u', 's', 
  'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', 
  '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', 
  '}', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', ':', '\001', '*', 
  'Z', '\035', '\"', '\030', '/', 'v', '2', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', '/', 's', 'e', 'a', 'r', 'c', 
  'h', 'e', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\005', '\220', '\234', '\'', 
  '\017', '\220', '\234', '\'', '\003', '\220', '\234', '\'', '\023', '\022', '\321', '\001', '\n', '\r', 'G', 'e', 't', 'I', 'n', 'p', 'u', 't', 'C', 'o', 'u', 
  'n', 't', '\022', '\"', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'I', 'n', 'p', 'u', 
  't', 'C', 'o', 'u', 'n', 't', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '&', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'I', 'n', 'p', 'u', 't', 'C', 'o', 'u', 'n', 't', 'R', 'e', 's', 'p', 'o', 
  'n', 's', 'e', '\"', 't', '\202', '\323', '\344', '\223', '\002', '^', '\022', 'G', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', 
  '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 
  't', 's', '/', 's', 't', 'a', 't', 'u', 's', 'Z', '\023', '\022', '\021', '/', 'v', '2', '/', 'i', 'n', 'p', 'u', 't', 's', '/', 's', 
  't', 'a', 't', 'u', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\005', '\022', '\311', '\001', '\n', 
  '\014', 'S', 't', 'r', 'e', 'a', 'm', 'I', 'n', 'p', 'u', 't', 's', '\022', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'S', 't', 'r', 'e', 'a', 'm', 'I', 'n', 'p', 'u', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ' ', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'I', 'n', 'p', 'u', 't', 'R', 
  'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 't', '\202', '\323', '\344', '\223', '\002', '^', '\022', 'G', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 
  's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 
  'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 
  'i', 'n', 'p', 'u', 't', 's', '/', 's', 't', 'r', 'e', 'a', 'm', 'Z', '\023', '\022', '\021', '/', 'v', '2', '/', 'i', 'n', 'p', 'u', 
  't', 's', '/', 's', 't', 'r', 'e', 'a', 'm', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\005', 
  '\022', '\375', '\001', '\n', '\017', 'G', 'e', 't', 'I', 'n', 'p', 'u', 't', 'S', 'a', 'm', 'p', 'l', 'e', 's', '\022', '$', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'I', 'n', 'p', 'u', 't', 'S', 'a', 'm', 'p', 'l', 'e', 
  's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '*', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 
  'u', 'l', 't', 'i', 'I', 'n', 'p', 'u', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 
  's', 'e', '\"', '\227', '\001', '\202', '\323', '\344', '\223', '\002', '\200', '\001', '\022', 'X', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 
  'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', 
  '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 't', 'a', 's', 
  'k', 's', '/', '{', 't', 'a', 's', 'k', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', '/', 's', 'a', 'm', 'p', 'l', 
  'e', 's', 'Z', '$', '\022', '\"', '/', 'v', '2', '/', 't', 'a', 's', 'k', 's', '/', '{', 't', 'a', 's', 'k', '_', 'i', 'd', '}', 
  '/', 'i', 'n', 'p', 'u', 't', 's', '/', 's', 'a', 'm', 'p', 'l', 'e', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '&', '\220', '\234', 
  '\'', '\013', '\220', '\234', '\'', '\005', '\022', '\312', '\001', '\n', '\010', 'G', 'e', 't', 'I', 'n', 'p', 'u', 't', '\022', '\035', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'I', 'n', 'p', 'u', 't', 'R', 'e', 'q', 'u', 'e', 's', 't', 
  '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'I', 'n', 'p', 
  'u', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '|', '\202', '\323', '\344', '\223', '\002', 'f', '\022', 'K', '/', 'v', '2', '/', 'u', 
  's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', 
  '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 
  'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', '/', '{', 'i', 'n', 'p', 'u', 't', '_', 'i', 'd', '}', 'Z', '\027', '\022', '\025', '/', 
  'v', '2', '/', 'i', 'n', 'p', 'u', 't', 's', '/', '{', 'i', 'n', 'p', 'u', 't', '_', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', 
  '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\005', '\022', '\267', '\001', '\n', '\n', 'L', 'i', 's', 't', 'I', 'n', 'p', 'u', 't', 
  's', '\022', '\037', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'I', 'n', 'p', 'u', 
  't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ' ', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'M', 'u', 'l', 't', 'i', 'I', 'n', 'p', 'u', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'f', '\202', '\323', '\344', '\223', '\002', 
  'P', '\022', '@', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', 'Z', '\014', '\022', '\n', '/', 'v', '2', '/', 
  'i', 'n', 'p', 'u', 't', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\005', '\022', '\322', '\001', 
  '\n', '\n', 'P', 'o', 's', 't', 'I', 'n', 'p', 'u', 't', 's', '\022', '\037', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'P', 'o', 's', 't', 'I', 'n', 'p', 'u', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ' ', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'I', 'n', 'p', 'u', 't', 'R', 'e', 's', 'p', 
  'o', 'n', 's', 'e', '\"', '\200', '\001', '\202', '\323', '\344', '\223', '\002', 'V', '\"', '@', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', 
  '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 
  's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'i', 'n', 
  'p', 'u', 't', 's', ':', '\001', '*', 'Z', '\017', '\"', '\n', '/', 'v', '2', '/', 'i', 'n', 'p', 'u', 't', 's', ':', '\001', '*', '\230', 
  '\234', '\'', '\002', '\220', '\234', '\'', '%', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\004', '\220', '\234', '\'', '\005', '\220', '\234', 
  '\'', '\017', '\220', '\234', '\'', '\002', '\220', '\234', '\'', '\023', '\022', '\313', '\001', '\n', '\013', 'P', 'a', 't', 'c', 'h', 'I', 'n', 'p', 'u', 't', 
  's', '\022', ' ', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'I', 'n', 'p', 
  'u', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ' ', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'M', 'u', 'l', 't', 'i', 'I', 'n', 'p', 'u', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'x', '\202', '\323', '\344', '\223', 
  '\002', 'V', '2', '@', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', 
  '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', ':', '\001', '*', 'Z', '\017', '2', '\n', 
  '/', 'v', '2', '/', 'i', 'n', 'p', 'u', 't', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '%', '\220', '\234', '\'', '&', 
  '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\004', '\220', '\234', '\'', '\005', '\220', '\234', '\'', '\017', '\022', '\345', '\001', '\n', '\013', 'D', 'e', 'l', 'e', 
  't', 'e', 'I', 'n', 'p', 'u', 't', '\022', ' ', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 
  'l', 'e', 't', 'e', 'I', 'n', 'p', 'u', 't', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 
  'e', '\"', '\220', '\001', '\202', '\323', '\344', '\223', '\002', 'f', '*', 'K', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 
  'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 
  's', '/', '{', 'i', 'n', 'p', 'u', 't', '_', 'i', 'd', '}', 'Z', '\027', '*', '\025', '/', 'v', '2', '/', 'i', 'n', 'p', 'u', 't', 
  's', '/', '{', 'i', 'n', 'p', 'u', 't', '_', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '%', '\220', '\234', '\'', '(', '\220', 
  '\234', '\'', '&', '\220', '\234', '\'', '\004', '\220', '\234', '\'', '\010', '\220', '\234', '\'', '\005', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\023', '\022', '\327', 
  '\001', '\n', '\014', 'D', 'e', 'l', 'e', 't', 'e', 'I', 'n', 'p', 'u', 't', 's', '\022', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'I', 'n', 'p', 'u', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', 
  '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 
  's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\200', '\001', '\202', '\323', '\344', '\223', '\002', 'V', '*', '@', '/', 'v', '2', '/', 
  'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 
  'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 
  'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', ':', '\001', '*', 'Z', '\017', '*', '\n', '/', 'v', '2', '/', 'i', 'n', 'p', 'u', 
  't', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '%', '\220', '\234', '\'', '(', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\004', 
  '\220', '\234', '\'', '\010', '\220', '\234', '\'', '\005', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\023', '\022', '\336', '\001', '\n', '\023', 'P', 'a', 't', 'c', 
  'h', 'I', 'n', 'p', 'u', 't', 's', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', '\022', '(', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'I', 'n', 'p', 'u', 't', 's', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', 
  'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 
  'l', 't', 'i', 'S', 'e', 'a', 'r', 'c', 'h', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'z', '\202', '\323', '\344', '\223', '\002', 'h', 
  '2', 'I', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 
  'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', 
  ':', '\001', '*', 'Z', '\030', '2', '\023', '/', 'v', '2', '/', 'i', 'n', 'p', 'u', 't', 's', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 
  's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 's', '\220', '\234', '\'', 'r', '\022', '\355', '\001', '\n', '\022', 'P', 'o', 's', 't', 
  'I', 'n', 'p', 'u', 't', 's', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', '\022', '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'I', 'n', 'p', 'u', 't', 's', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', 'R', 'e', 
  'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 
  'i', 'S', 'e', 'a', 'r', 'c', 'h', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\212', '\001', '\202', '\323', '\344', '\223', '\002', 'h', '\"', 
  'I', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 
  's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', ':', 
  '\001', '*', 'Z', '\030', '\"', '\023', '/', 'v', '2', '/', 'i', 'n', 'p', 'u', 't', 's', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', 
  ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\005', '\220', '\234', '\'', '\017', '\220', '\234', 
  '\'', '\003', '\220', '\234', '\'', '\023', '\022', '\234', '\003', '\n', '\020', 'P', 'o', 's', 't', 'M', 'o', 'd', 'e', 'l', 'O', 'u', 't', 'p', 'u', 
  't', 's', '\022', '%', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'M', 'o', 'd', 
  'e', 'l', 'O', 'u', 't', 'p', 'u', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'O', 'u', 't', 'p', 'u', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 
  'e', '\"', '\275', '\002', '\202', '\323', '\344', '\223', '\002', '\246', '\002', '\"', 'i', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', 
  '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 
  'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'v', 
  'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', '/', 'o', 'u', 't', 'p', 'u', 't', 's', ':', '\001', '*', 'Z', '8', '\"', '3', 
  '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 
  's', 'i', 'o', 'n', 's', '/', '{', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', '/', 'o', 'u', 't', 'p', 'u', 't', 
  's', ':', '\001', '*', 'Z', 'X', '\"', 'S', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 
  'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 
  'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'o', 'u', 't', 'p', 'u', 't', 's', ':', '\001', '*', 'Z', '\"', '\"', '\035', '/', 'v', 
  '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'o', 'u', 't', 'p', 'u', 
  't', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\002', '\022', '\275', '\001', '\n', 
  '\014', 'L', 'i', 's', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 's', '\022', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\"', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'D', 'a', 't', 'a', 's', 'e', 
  't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'f', '\202', '\323', '\344', '\223', '\002', 'T', '\022', 'B', '/', 'v', '2', '/', 'u', 's', 
  'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', 
  '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', 
  '}', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', 'Z', '\016', '\022', '\014', '/', 'v', '2', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 
  's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'i', '\220', '\234', '\'', 'r', '\022', '\325', '\001', '\n', '\n', 'G', 'e', 't', 'D', 'a', 't', 'a', 
  's', 'e', 't', '\022', '\037', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'D', 'a', 't', 
  'a', 's', 'e', 't', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '#', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'D', 'a', 't', 'a', 's', 'e', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\200', 
  '\001', '\202', '\323', '\344', '\223', '\002', 'n', '\022', 'O', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', 
  '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', '}', 'Z', '\033', '\022', '\031', '/', 'v', '2', '/', 'd', 'a', 't', 'a', 
  's', 'e', 't', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'i', 
  '\220', '\234', '\'', 'r', '\022', '\307', '\001', '\n', '\014', 'P', 'o', 's', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 's', '\022', '!', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 's', 'R', 
  'e', 'q', 'u', 'e', 's', 't', '\032', '\"', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 
  't', 'i', 'D', 'a', 't', 'a', 's', 'e', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'p', '\202', '\323', '\344', '\223', '\002', 'Z', 
  '\"', 'B', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 
  'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', ':', '\001', '*', 'Z', '\021', '\"', '\014', 
  '/', 'v', '2', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'i', '\220', '\234', 
  '\'', 'j', '\220', '\234', '\'', 'r', '\022', '\311', '\001', '\n', '\r', 'P', 'a', 't', 'c', 'h', 'D', 'a', 't', 'a', 's', 'e', 't', 's', '\022', 
  '\"', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'D', 'a', 't', 'a', 's', 
  'e', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\"', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'M', 'u', 'l', 't', 'i', 'D', 'a', 't', 'a', 's', 'e', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'p', '\202', '\323', 
  '\344', '\223', '\002', 'Z', '2', 'B', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', 
  '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 
  'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', ':', '\001', '*', 
  'Z', '\021', '2', '\014', '/', 'v', '2', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', 
  '\'', 'i', '\220', '\234', '\'', 'j', '\220', '\234', '\'', 'r', '\022', '\272', '\001', '\n', '\017', 'P', 'a', 't', 'c', 'h', 'D', 'a', 't', 'a', 's', 
  'e', 't', 'I', 'd', 's', '\022', '$', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 
  'h', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 'd', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\"', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'D', 'a', 't', 'a', 's', 'e', 't', 'R', 'e', 's', 'p', 
  'o', 'n', 's', 'e', '\"', ']', '\202', '\323', '\344', '\223', '\002', 'K', '2', 'F', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 
  'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', 
  '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'd', 'a', 't', 
  'a', 's', 'e', 't', 's', '/', 'i', 'd', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'i', '\220', '\234', '\'', 'j', '\022', 
  '\312', '\001', '\n', '\016', 'D', 'e', 'l', 'e', 't', 'e', 'D', 'a', 't', 'a', 's', 'e', 't', 's', '\022', '#', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'D', 'a', 't', 'a', 's', 'e', 't', 's', 'R', 'e', 
  'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 
  'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'p', '\202', '\323', '\344', '\223', '\002', 'Z', '*', 'B', 
  '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 
  'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 
  'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', ':', '\001', '*', 'Z', '\021', '*', '\014', '/', 'v', 
  '2', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'i', '\220', '\234', '\'', 'j', 
  '\220', '\234', '\'', 'k', '\022', '\375', '\001', '\n', '\021', 'L', 'i', 's', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 't', 
  's', '\022', '&', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'D', 'a', 't', 'a', 
  's', 'e', 't', 'I', 'n', 'p', 'u', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 't', 'R', 
  'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\226', '\001', '\202', '\323', '\344', '\223', '\002', '|', '\022', 'V', '/', 'v', '2', '/', 'u', 's', 'e', 
  'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 
  'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', 
  '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', '}', '/', 'i', 'n', 
  'p', 'u', 't', 's', 'Z', '\"', '\022', ' ', '/', 'v', '2', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 't', 
  'a', 's', 'e', 't', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'i', '\220', '\234', 
  '\'', '\005', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\022', '\221', '\002', '\n', '\017', 'G', 'e', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 
  'I', 'n', 'p', 'u', 't', '\022', '$', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'D', 
  'a', 't', 'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 't', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '(', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 'n', 'p', 
  'u', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\255', '\001', '\202', '\323', '\344', '\223', '\002', '\222', '\001', '\022', 'a', '/', 'v', '2', 
  '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 
  'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', 
  '_', 'i', 'd', '}', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', 
  '}', '/', 'i', 'n', 'p', 'u', 't', 's', '/', '{', 'i', 'n', 'p', 'u', 't', '_', 'i', 'd', '}', 'Z', '-', '\022', '+', '/', 'v', 
  '2', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', '}', '/', 'i', 
  'n', 'p', 'u', 't', 's', '/', '{', 'i', 'n', 'p', 'u', 't', '_', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'i', '\220', 
  '\234', '\'', '\005', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\022', '\210', '\002', '\n', '\021', 'P', 'o', 's', 't', 'D', 'a', 't', 'a', 's', 
  'e', 't', 'I', 'n', 'p', 'u', 't', 's', '\022', '&', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 
  'o', 's', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\'', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'D', 'a', 't', 'a', 's', 'e', 
  't', 'I', 'n', 'p', 'u', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\241', '\001', '\202', '\323', '\344', '\223', '\002', '\202', '\001', '\"', 
  'V', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 
  's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 
  't', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', ':', '\001', '*', 'Z', '%', '\"', ' ', '/', 'v', '2', '/', 'd', 'a', 
  't', 'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 
  's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'i', '\220', '\234', '\'', 'j', '\220', '\234', '\'', '\005', '\220', '\234', '\'', '&', '\220', 
  '\234', '\'', '\013', '\022', '\202', '\002', '\n', '\023', 'D', 'e', 'l', 'e', 't', 'e', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 
  't', 's', '\022', '(', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'D', 
  'a', 't', 'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 
  'o', 'n', 's', 'e', '\"', '\235', '\001', '\202', '\323', '\344', '\223', '\002', '\202', '\001', '*', 'V', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', 
  '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 
  'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'd', 
  'a', 't', 'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 
  't', 's', ':', '\001', '*', 'Z', '%', '*', ' ', '/', 'v', '2', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 
  't', 'a', 's', 'e', 't', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', 
  '\'', 'i', '\220', '\234', '\'', 'j', '\220', '\234', '\'', 'k', '\220', '\234', '\'', '\005', '\022', '\200', '\002', '\n', '\023', 'L', 'i', 's', 't', 'D', 'a', 
  't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', '\022', '(', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 
  'q', 'u', 'e', 's', 't', '\032', ')', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 
  'i', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\223', 
  '\001', '\202', '\323', '\344', '\223', '\002', '\200', '\001', '\022', 'X', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 
  's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', 'Z', '$', 
  '\022', '\"', '/', 'v', '2', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 
  'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'i', '\220', '\234', '\'', 'r', '\022', '\247', 
  '\002', '\n', '\021', 'G', 'e', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', '\022', '&', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 
  'i', 'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '*', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'S', 'i', 'n', 'g', 'l', 'e', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 's', 'p', 
  'o', 'n', 's', 'e', '\"', '\275', '\001', '\202', '\323', '\344', '\223', '\002', '\252', '\001', '\022', 'm', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', 
  '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 
  'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'd', 
  'a', 't', 'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 
  'i', 'o', 'n', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', 
  'Z', '9', '\022', '7', '/', 'v', '2', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', 
  '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'v', 'e', 
  'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'i', '\220', '\234', '\'', 'r', '\022', '\346', '\002', '\n', 
  '\037', 'L', 'i', 's', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'M', 'e', 't', 'r', 'i', 'c', 
  's', 'G', 'r', 'o', 'u', 'p', 's', '\022', '4', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 
  's', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'M', 'e', 't', 'r', 'i', 'c', 's', 'G', 'r', 
  'o', 'u', 'p', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '5', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'M', 'u', 'l', 't', 'i', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'M', 'e', 't', 'r', 
  'i', 'c', 's', 'G', 'r', 'o', 'u', 'p', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\325', '\001', '\202', '\323', '\344', '\223', '\002', '\272', 
  '\001', '\022', 'u', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 't', 'a', 
  's', 'e', 't', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', 
  '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', '/', 'm', 'e', 't', 'r', 'i', 'c', 's', 'Z', 'A', '\022', '?', '/', 
  'v', '2', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', '}', '/', 
  'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', 
  '_', 'i', 'd', '}', '/', 'm', 'e', 't', 'r', 'i', 'c', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'i', '\220', '\234', '\'', '&', '\220', 
  '\234', '\'', '\013', '\220', '\234', '\'', '\005', '\022', '\216', '\002', '\n', '\023', 'P', 'o', 's', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 
  'r', 's', 'i', 'o', 'n', 's', '\022', '(', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 
  't', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ')', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'D', 'a', 't', 'a', 's', 'e', 
  't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\241', '\001', '\202', '\323', '\344', '\223', '\002', '\206', 
  '\001', '\"', 'X', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 't', 'a', 
  's', 'e', 't', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', ':', '\001', '*', 'Z', '\'', '\"', '\"', '/', 'v', 
  '2', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', '}', '/', 'v', 
  'e', 'r', 's', 'i', 'o', 'n', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'i', '\220', '\234', '\'', 'j', '\220', '\234', '\'', 
  '\017', '\220', '\234', '\'', '\023', '\022', '\210', '\002', '\n', '\024', 'P', 'a', 't', 'c', 'h', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 
  's', 'i', 'o', 'n', 's', '\022', ')', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 
  'h', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ')', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'D', 'a', 't', 'a', 's', 'e', 
  't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\231', '\001', '\202', '\323', '\344', '\223', '\002', '\206', 
  '\001', '2', 'X', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 't', 'a', 
  's', 'e', 't', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', ':', '\001', '*', 'Z', '\'', '2', '\"', '/', 'v', 
  '2', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', '}', '/', 'v', 
  'e', 'r', 's', 'i', 'o', 'n', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'i', '\220', '\234', '\'', 'j', '\022', '\206', '\002', 
  '\n', '\025', 'D', 'e', 'l', 'e', 't', 'e', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', '\022', '*', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'D', 'a', 't', 'a', 's', 
  'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 
  's', 'e', '\"', '\235', '\001', '\202', '\323', '\344', '\223', '\002', '\206', '\001', '*', 'X', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 
  'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', 
  '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'd', 'a', 't', 
  'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 
  'n', 's', ':', '\001', '*', 'Z', '\'', '*', '\"', '/', 'v', '2', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 
  't', 'a', 's', 'e', 't', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', 
  '\220', '\234', '\'', 'i', '\220', '\234', '\'', 'j', '\220', '\234', '\'', 'k', '\022', '\320', '\002', '\n', '\030', 'P', 'u', 't', 'D', 'a', 't', 'a', 's', 
  'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'E', 'x', 'p', 'o', 'r', 't', 's', '\022', '-', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'u', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'E', 
  'x', 'p', 'o', 'r', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '/', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'E', 'x', 
  'p', 'o', 'r', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\323', '\001', '\202', '\323', '\344', '\223', '\002', '\300', '\001', '\032', 'u', '/', 
  'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 
  'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 
  'p', 'p', '_', 'i', 'd', '}', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 
  'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'v', 'e', 'r', 
  's', 'i', 'o', 'n', '_', 'i', 'd', '}', '/', 'e', 'x', 'p', 'o', 'r', 't', 's', ':', '\001', '*', 'Z', 'D', '\032', '?', '/', 'v', 
  '2', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', '}', '/', 'v', 
  'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 
  'i', 'd', '}', '/', 'e', 'x', 'p', 'o', 'r', 't', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'i', '\220', '\234', '\'', 
  'j', '\022', '\345', '\001', '\n', '\014', 'G', 'e', 't', 'M', 'o', 'd', 'e', 'l', 'T', 'y', 'p', 'e', '\022', '!', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'M', 'o', 'd', 'e', 'l', 'T', 'y', 'p', 'e', 'R', 'e', 'q', 'u', 
  'e', 's', 't', '\032', '%', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 
  'M', 'o', 'd', 'e', 'l', 'T', 'y', 'p', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\212', '\001', '\202', '\323', '\344', '\223', '\002', 
  '|', '\022', 'V', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', 't', 'y', 'p', 'e', 's', '/', '{', 
  'm', 'o', 'd', 'e', 'l', '_', 't', 'y', 'p', 'e', '_', 'i', 'd', '}', 'Z', '\"', '\022', ' ', '/', 'v', '2', '/', 'm', 'o', 'd', 
  'e', 'l', 's', '/', 't', 'y', 'p', 'e', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 't', 'y', 'p', 'e', '_', 'i', 'd', '}', 
  '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\017', '\022', '\231', '\001', '\n', '\026', 'L', 'i', 's', 't', 'O', 'p', 'e', 'n', 'S', 'o', 'u', 'r', 
  'c', 'e', 'L', 'i', 'c', 'e', 'n', 's', 'e', 's', '\022', '+', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'L', 'i', 's', 't', 'O', 'p', 'e', 'n', 'S', 'o', 'u', 'r', 'c', 'e', 'L', 'i', 'c', 'e', 'n', 's', 'e', 's', 'R', 'e', 
  'q', 'u', 'e', 's', 't', '\032', ',', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 
  'O', 'p', 'e', 'n', 'S', 'o', 'u', 'r', 'c', 'e', 'L', 'i', 'c', 'e', 'n', 's', 'e', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 
  'e', '\"', '$', '\202', '\323', '\344', '\223', '\002', '\032', '\022', '\030', '/', 'v', '2', '/', 'o', 'p', 'e', 'n', '_', 's', 'o', 'u', 'r', 'c', 
  'e', '_', 'l', 'i', 'c', 'e', 'n', 's', 'e', 's', '\230', '\234', '\'', '\001', '\022', '\307', '\001', '\n', '\016', 'L', 'i', 's', 't', 'M', 'o', 
  'd', 'e', 'l', 'T', 'y', 'p', 'e', 's', '\022', '#', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 
  'i', 's', 't', 'M', 'o', 'd', 'e', 'l', 'T', 'y', 'p', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '$', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 'e', 'l', 'T', 'y', 'p', 'e', 
  'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'j', '\202', '\323', '\344', '\223', '\002', '\\', '\022', 'F', '/', 'v', '2', '/', 'u', 's', 'e', 
  'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 
  'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', 
  '/', 'm', 'o', 'd', 'e', 'l', 's', '/', 't', 'y', 'p', 'e', 's', 'Z', '\022', '\022', '\020', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 
  'l', 's', '/', 't', 'y', 'p', 'e', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\017', '\022', '\306', '\001', '\n', '\010', 'G', 'e', 't', 'M', 
  'o', 'd', 'e', 'l', '\022', '\035', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'M', 'o', 
  'd', 'e', 'l', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'S', 'i', 'n', 'g', 'l', 'e', 'M', 'o', 'd', 'e', 'l', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'x', '\202', '\323', '\344', 
  '\223', '\002', 'f', '\022', 'K', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 
  'l', '_', 'i', 'd', '}', 'Z', '\027', '\022', '\025', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 
  'l', '_', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\017', '\022', '\226', '\003', '\n', '\022', 'G', 'e', 't', 
  'M', 'o', 'd', 'e', 'l', 'O', 'u', 't', 'p', 'u', 't', 'I', 'n', 'f', 'o', '\022', '\035', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'M', 'o', 'd', 'e', 'l', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'M', 'o', 'd', 'e', 'l', 'R', 'e', 
  's', 'p', 'o', 'n', 's', 'e', '\"', '\275', '\002', '\202', '\323', '\344', '\223', '\002', '\252', '\002', '\022', 'W', '/', 'v', '2', '/', 'u', 's', 'e', 
  'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 
  'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', 
  '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'o', 'u', 't', 'p', 'u', 't', 
  '_', 'i', 'n', 'f', 'o', 'Z', '#', '\022', '!', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 
  'l', '_', 'i', 'd', '}', '/', 'o', 'u', 't', 'p', 'u', 't', '_', 'i', 'n', 'f', 'o', 'Z', 'o', '\022', 'm', '/', 'v', '2', '/', 
  'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 
  'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 
  'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 
  's', 'i', 'o', 'n', 's', '/', '{', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', '/', 'o', 'u', 't', 'p', 'u', 't', 
  '_', 'i', 'n', 'f', 'o', 'Z', '9', '\022', '7', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 
  'l', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 
  'd', '}', '/', 'o', 'u', 't', 'p', 'u', 't', '_', 'i', 'n', 'f', 'o', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\013', '\220', '\234', '\'', 
  '\017', '\022', '\336', '\001', '\n', '\n', 'L', 'i', 's', 't', 'M', 'o', 'd', 'e', 'l', 's', '\022', '\037', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'M', 'o', 'd', 'e', 'l', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', 
  ' ', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 'e', 'l', 
  'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\214', '\001', '\202', '\323', '\344', '\223', '\002', 'z', '\022', '@', '/', 'v', '2', '/', 'u', 's', 
  'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', 
  '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', 
  '}', '/', 'm', 'o', 'd', 'e', 'l', 's', 'Z', '(', '\022', '&', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', 
  'Z', '\014', '\022', '\n', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\013', '\220', '\234', '\'', 
  '\017', '\022', '\333', '\001', '\n', '\022', 'P', 'o', 's', 't', 'M', 'o', 'd', 'e', 'l', 's', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', '\022', 
  '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'M', 'o', 'd', 'e', 'l', 's', 
  'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ' ', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 'e', 'l', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 
  'z', '\202', '\323', '\344', '\223', '\002', 'h', '\"', 'I', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', 's', 
  'e', 'a', 'r', 'c', 'h', 'e', 's', ':', '\001', '*', 'Z', '\030', '\"', '\023', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', 
  's', 'e', 'a', 'r', 'c', 'h', 'e', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\017', '\022', '\306', 
  '\001', '\n', '\n', 'P', 'o', 's', 't', 'M', 'o', 'd', 'e', 'l', 's', '\022', '\037', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'M', 'o', 'd', 'e', 'l', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'M', 'o', 'd', 'e', 'l', 'R', 'e', 
  's', 'p', 'o', 'n', 's', 'e', '\"', 't', '\202', '\323', '\344', '\223', '\002', 'V', '\"', '@', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', 
  '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 
  'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 
  'o', 'd', 'e', 'l', 's', ':', '\001', '*', 'Z', '\017', '\"', '\n', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', ':', '\001', '*', 
  '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\016', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\032', '\220', '\234', '\'', '\023', '\022', 
  '\303', '\001', '\n', '\013', 'P', 'a', 't', 'c', 'h', 'M', 'o', 'd', 'e', 'l', 's', '\022', ' ', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'M', 'o', 'd', 'e', 'l', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', 
  ' ', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 'e', 'l', 
  'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'p', '\202', '\323', '\344', '\223', '\002', 'V', '2', '@', '/', 'v', '2', '/', 'u', 's', 'e', 
  'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 
  'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', 
  '/', 'm', 'o', 'd', 'e', 'l', 's', ':', '\001', '*', 'Z', '\017', '2', '\n', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', ':', 
  '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\016', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\032', '\022', '\262', '\001', 
  '\n', '\r', 'P', 'a', 't', 'c', 'h', 'M', 'o', 'd', 'e', 'l', 'I', 'd', 's', '\022', '\"', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'M', 'o', 'd', 'e', 'l', 'I', 'd', 's', 'R', 'e', 'q', 'u', 'e', 's', 
  't', '\032', ' ', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 
  'e', 'l', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '[', '\202', '\323', '\344', '\223', '\002', 'I', '2', 'D', '/', 'v', '2', '/', 'u', 
  's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', 
  '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 
  'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', 'i', 'd', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\016', '\220', 
  '\234', '\'', '\017', '\022', '\331', '\001', '\n', '\013', 'D', 'e', 'l', 'e', 't', 'e', 'M', 'o', 'd', 'e', 'l', '\022', ' ', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'M', 'o', 'd', 'e', 'l', 'R', 'e', 'q', 'u', 
  'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', 
  '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\204', '\001', '\202', '\323', '\344', '\223', '\002', 'f', '*', 'K', '/', 
  'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 
  'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 
  'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', 'Z', 
  '\027', '*', '\025', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '\230', 
  '\234', '\'', '\002', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\016', '\220', '\234', '\'', '\021', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\023', '\022', '\312', 
  '\001', '\n', '\014', 'D', 'e', 'l', 'e', 't', 'e', 'M', 'o', 'd', 'e', 'l', 's', '\022', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'M', 'o', 'd', 'e', 'l', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', 
  '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 
  's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 't', '\202', '\323', '\344', '\223', '\002', 'V', '*', '@', '/', 'v', '2', '/', 'u', 
  's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', 
  '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 
  'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', ':', '\001', '*', 'Z', '\017', '*', '\n', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 
  's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\016', '\220', '\234', '\'', '\021', '\220', '\234', '\'', '\017', '\220', 
  '\234', '\'', '\023', '\022', '\221', '\002', '\n', '\027', 'P', 'a', 't', 'c', 'h', 'M', 'o', 'd', 'e', 'l', 'C', 'h', 'e', 'c', 'k', 'C', 'o', 
  'n', 's', 'e', 'n', 't', 's', '\022', ',', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 
  'c', 'h', 'M', 'o', 'd', 'e', 'l', 'C', 'h', 'e', 'c', 'k', 'C', 'o', 'n', 's', 'e', 'n', 't', 's', 'R', 'e', 'q', 'u', 'e', 
  's', 't', '\032', ',', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'M', 'o', 
  'd', 'e', 'l', 'C', 'h', 'e', 'c', 'k', 'C', 'o', 'n', 's', 'e', 'n', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\231', 
  '\001', '\202', '\323', '\344', '\223', '\002', '\212', '\001', '2', 'Z', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', 
  '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'c', 'h', 'e', 'c', 'k', '_', 'c', 'o', 'n', 's', 'e', 'n', 't', 's', 
  ':', '\001', '*', 'Z', ')', '2', '$', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 
  'i', 'd', '}', '/', 'c', 'h', 'e', 'c', 'k', '_', 'c', 'o', 'n', 's', 'e', 'n', 't', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', 
  '\220', '\234', '\'', '\017', '\022', '\365', '\001', '\n', '\022', 'P', 'a', 't', 'c', 'h', 'M', 'o', 'd', 'e', 'l', 'T', 'o', 'o', 'l', 'k', 'i', 
  't', 's', '\022', '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'M', 'o', 
  'd', 'e', 'l', 'T', 'o', 'o', 'l', 'k', 'i', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\'', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 'e', 'l', 'T', 'o', 'o', 'l', 'k', 'i', 
  't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\214', '\001', '\202', '\323', '\344', '\223', '\002', '~', '2', 'T', '/', 'v', '2', '/', 'u', 
  's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', 
  '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 
  'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 't', 'o', 'o', 'l', 
  'k', 'i', 't', 's', ':', '\001', '*', 'Z', '#', '2', '\036', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 
  'd', 'e', 'l', '_', 'i', 'd', '}', '/', 't', 'o', 'o', 'l', 'k', 'i', 't', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', 
  '\'', '\017', '\022', '\365', '\001', '\n', '\022', 'P', 'a', 't', 'c', 'h', 'M', 'o', 'd', 'e', 'l', 'U', 's', 'e', 'C', 'a', 's', 'e', 's', 
  '\022', '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'M', 'o', 'd', 'e', 
  'l', 'U', 's', 'e', 'C', 'a', 's', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 'e', 'l', 'U', 's', 'e', 'C', 'a', 's', 'e', 'R', 
  'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\214', '\001', '\202', '\323', '\344', '\223', '\002', '~', '2', 'T', '/', 'v', '2', '/', 'u', 's', 'e', 
  'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 
  'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', 
  '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'u', 's', 'e', 'c', 'a', 's', 
  'e', 's', ':', '\001', '*', 'Z', '#', '2', '\036', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 
  'l', '_', 'i', 'd', '}', '/', 'u', 's', 'e', 'c', 'a', 's', 'e', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\017', 
  '\022', '\373', '\001', '\n', '\023', 'P', 'a', 't', 'c', 'h', 'M', 'o', 'd', 'e', 'l', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', '\022', 
  '(', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'M', 'o', 'd', 'e', 'l', 
  'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '(', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 'e', 'l', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 
  'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\217', '\001', '\202', '\323', '\344', '\223', '\002', '\200', '\001', '2', 'U', '/', 'v', '2', '/', 'u', 
  's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', 
  '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 
  'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'l', 'a', 'n', 'g', 
  'u', 'a', 'g', 'e', 's', ':', '\001', '*', 'Z', '$', '2', '\037', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 
  'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', 
  '\220', '\234', '\'', '\017', '\022', '\215', '\003', '\n', '\017', 'L', 'i', 's', 't', 'M', 'o', 'd', 'e', 'l', 'I', 'n', 'p', 'u', 't', 's', '\022', 
  '$', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'M', 'o', 'd', 'e', 'l', 'I', 
  'n', 'p', 'u', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ' ', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'I', 'n', 'p', 'u', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\261', '\002', '\202', 
  '\323', '\344', '\223', '\002', '\226', '\002', '\022', 'R', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 
  'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 
  'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', 'Z', '\036', '\022', '\034', '/', 'v', '2', '/', 'm', 'o', 
  'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', 'Z', 'j', '\022', 
  'h', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 
  's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', 
  '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', '/', 'i', 
  'n', 'p', 'u', 't', 's', 'Z', '4', '\022', '2', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 
  'l', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 
  'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\005', 
  '\220', '\234', '\'', '\017', '\022', '\211', '\002', '\n', '\017', 'G', 'e', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', '\022', 
  '$', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 
  'r', 's', 'i', 'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '(', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 's', 'p', 
  'o', 'n', 's', 'e', '\"', '\245', '\001', '\202', '\323', '\344', '\223', '\002', '\222', '\001', '\022', 'a', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', 
  '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 
  'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 
  'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', 
  '/', '{', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', 'Z', '-', '\022', '+', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 
  'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'v', 
  'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\017', '\022', '\361', '\001', 
  '\n', '\021', 'L', 'i', 's', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', '\022', '&', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 
  'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', 
  '\"', '\212', '\001', '\202', '\323', '\344', '\223', '\002', 'x', '\022', 'T', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', 
  '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', 'Z', ' ', '\022', '\036', '/', 
  'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 
  'i', 'o', 'n', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\017', '\022', '\270', '\002', '\n', '\035', 'P', 'o', 's', 't', 
  'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'U', 'n', 'P', 'u', 'b', 'l', 'i', 's', 'h', 
  '\022', '2', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'W', 'o', 'r', 'k', 'f', 
  'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'U', 'n', 'P', 'u', 'b', 'l', 'i', 's', 'h', 'R', 'e', 'q', 'u', 'e', 
  's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 
  'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\277', '\001', '\202', '\323', '\344', '\223', '\002', '\214', '\001', '\"', '[', '/', 
  'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 
  'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 
  'p', 'p', '_', 'i', 'd', '}', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '/', '{', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 
  'w', '_', 'i', 'd', '}', '/', 'u', 'n', 'p', 'u', 'b', 'l', 'i', 's', 'h', ':', '\001', '*', 'Z', '*', '\"', '%', '/', 'v', '2', 
  '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '/', '{', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '}', '/', 
  'u', 'n', 'p', 'u', 'b', 'l', 'i', 's', 'h', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'x', '\220', '\234', '\'', '&', '\220', 
  '\234', '\'', '\013', '\220', '\234', '\'', '\005', '\220', '\234', '\'', '\016', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\032', '\220', '\234', '\'', '\023', '\220', '\234', 
  '\'', '5', '\220', '\234', '\'', '6', '\022', '\260', '\002', '\n', '\033', 'P', 'o', 's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 
  'r', 's', 'i', 'o', 'n', 's', 'P', 'u', 'b', 'l', 'i', 's', 'h', '\022', '0', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'P', 
  'u', 'b', 'l', 'i', 's', 'h', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\273', 
  '\001', '\202', '\323', '\344', '\223', '\002', '\210', '\001', '\"', 'Y', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 
  'w', 's', '/', '{', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '}', '/', 'p', 'u', 'b', 'l', 'i', 's', 'h', ':', 
  '\001', '*', 'Z', '(', '\"', '#', '/', 'v', '2', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '/', '{', 'w', 'o', 'r', 'k', 
  'f', 'l', 'o', 'w', '_', 'i', 'd', '}', '/', 'p', 'u', 'b', 'l', 'i', 's', 'h', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', 
  '\'', 'w', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\005', '\220', '\234', '\'', '\016', '\220', '\234', '\'', '\017', '\220', '\234', '\'', 
  '\032', '\220', '\234', '\'', '\023', '\220', '\234', '\'', '5', '\220', '\234', '\'', '6', '\022', '\235', '\002', '\n', '\030', 'P', 'o', 's', 't', 'M', 'o', 'd', 
  'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'P', 'u', 'b', 'l', 'i', 's', 'h', '\022', '-', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 
  'P', 'u', 'b', 'l', 'i', 's', 'h', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 
  '\256', '\001', '\202', '\323', '\344', '\223', '\002', '|', '\"', 'S', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', 
  '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'p', 'u', 'b', 'l', 'i', 's', 'h', ':', '\001', '*', 'Z', '\"', '\"', '\035', 
  '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'p', 'u', 'b', 
  'l', 'i', 's', 'h', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'u', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', 
  '\'', '\005', '\220', '\234', '\'', '\016', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\032', '\220', '\234', '\'', '\023', '\220', '\234', '\'', '5', '\220', '\234', '\'', 
  '6', '\022', '\246', '\002', '\n', '\032', 'P', 'o', 's', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'U', 'n', 
  'P', 'u', 'b', 'l', 'i', 's', 'h', '\022', '/', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 
  's', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'U', 'n', 'P', 'u', 'b', 'l', 'i', 's', 'h', 'R', 
  'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 
  't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\263', '\001', '\202', '\323', '\344', '\223', '\002', '\200', 
  '\001', '\"', 'U', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 
  'i', 'd', '}', '/', 'u', 'n', 'p', 'u', 'b', 'l', 'i', 's', 'h', ':', '\001', '*', 'Z', '$', '\"', '\037', '/', 'v', '2', '/', 'm', 
  'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'u', 'n', 'p', 'u', 'b', 'l', 'i', 's', 
  'h', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'v', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\005', '\220', 
  '\234', '\'', '\016', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\032', '\220', '\234', '\'', '\023', '\220', '\234', '\'', '5', '\220', '\234', '\'', '6', '\022', '\215', 
  '\002', '\n', '\021', 'P', 'o', 's', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', '\022', '&', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 
  'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'S', 'i', 'n', 'g', 'l', 'e', 'M', 'o', 'd', 'e', 'l', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\254', '\001', '\202', '\323', 
  '\344', '\223', '\002', '~', '\"', 'T', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', 
  '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 
  'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 
  'e', 'l', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', ':', '\001', '*', 'Z', '#', '\"', '\036', '/', 'v', '2', 
  '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 
  'n', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\005', '\220', '\234', '\'', '\016', 
  '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\032', '\220', '\234', '\'', '\023', '\220', '\234', '\'', '5', '\220', '\234', '\'', '6', '\022', '\333', '\001', '\n', '\022', 
  'P', 'a', 't', 'c', 'h', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', '\022', '\'', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 
  'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', 
  '\"', 's', '\202', '\323', '\344', '\223', '\002', 'Y', '2', 'T', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', 
  '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', ':', '\001', '*', '\230', '\234', '\'', 
  '\002', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\016', '\220', '\234', '\'', '\032', '\022', '\224', '\002', '\n', '\022', 'D', 'e', 'l', 
  'e', 't', 'e', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', '\022', '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 
  'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 
  't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\261', '\001', '\202', '\323', '\344', '\223', '\002', '\222', 
  '\001', '*', 'a', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 
  'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', 
  'Z', '-', '*', '+', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', 
  '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', '\230', '\234', '\'', 
  '\002', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\016', '\220', '\234', '\'', '\021', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\023', '\022', '\263', '\002', '\n', 
  '\026', 'G', 'e', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'M', 'e', 't', 'r', 'i', 'c', 's', '\022', '+', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 
  's', 'i', 'o', 'n', 'M', 'e', 't', 'r', 'i', 'c', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '(', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 
  'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\301', '\001', '\202', '\323', '\344', '\223', '\002', '\242', '\001', '\022', 'i', '/', 'v', '2', 
  '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 
  'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', 
  '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'v', 'e', 
  'r', 's', 'i', 'o', 'n', 's', '/', '{', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', '/', 'm', 'e', 't', 'r', 'i', 
  'c', 's', 'Z', '5', '\022', '3', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 
  'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', '/', 
  'm', 'e', 't', 'r', 'i', 'c', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\017', '\220', '\234', 
  '\'', '\005', '\220', '\234', '\'', '5', '\022', '\317', '\002', '\n', '\027', 'P', 'o', 's', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 
  'o', 'n', 'M', 'e', 't', 'r', 'i', 'c', 's', '\022', ',', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'P', 'o', 's', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'M', 'e', 't', 'r', 'i', 'c', 's', 'R', 'e', 
  'q', 'u', 'e', 's', 't', '\032', '(', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 
  'l', 'e', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\333', '\001', 
  '\202', '\323', '\344', '\223', '\002', '\250', '\001', '\"', 'i', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 
  'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'v', 'e', 'r', 's', 'i', 
  'o', 'n', '_', 'i', 'd', '}', '/', 'm', 'e', 't', 'r', 'i', 'c', 's', ':', '\001', '*', 'Z', '8', '\"', '3', '/', 'v', '2', '/', 
  'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 
  's', '/', '{', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', '/', 'm', 'e', 't', 'r', 'i', 'c', 's', ':', '\001', '*', 
  '\230', '\234', '\'', '\002', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\005', '\220', '\234', '\'', '\016', '\220', '\234', '\'', '\017', '\220', 
  '\234', '\'', '\032', '\220', '\234', '\'', '\002', '\220', '\234', '\'', '\023', '\220', '\234', '\'', '5', '\220', '\234', '\'', '6', '\022', '\351', '\002', '\n', '\033', 'P', 
  'o', 's', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'E', 'v', 'a', 'l', 'u', 'a', 't', 'i', 'o', 'n', 
  's', '\022', '0', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'M', 'o', 'd', 'e', 
  'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'E', 'v', 'a', 'l', 'u', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 
  't', '\032', '&', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'E', 'v', 'a', 
  'l', 'M', 'e', 't', 'r', 'i', 'c', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\357', '\001', '\202', '\323', '\344', '\223', '\002', '\274', 
  '\001', '\"', 's', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 
  'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'v', 'e', 'r', 's', 'i', 
  'o', 'n', '_', 'i', 'd', '}', '/', 'e', 'v', 'a', 'l', 'u', 'a', 't', 'i', 'o', 'n', 's', ':', '\001', '*', 'Z', 'B', '\"', '=', 
  '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 
  's', 'i', 'o', 'n', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', '/', 
  'e', 'v', 'a', 'l', 'u', 'a', 't', 'i', 'o', 'n', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '&', '\220', '\234', '\'', 
  '\013', '\220', '\234', '\'', '\005', '\220', '\234', '\'', '\016', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\032', '\220', '\234', '\'', '\002', '\220', '\234', '\'', '\023', 
  '\220', '\234', '\'', '5', '\220', '\234', '\'', '6', '\022', '\317', '\002', '\n', '\033', 'L', 'i', 's', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 
  's', 'i', 'o', 'n', 'E', 'v', 'a', 'l', 'u', 'a', 't', 'i', 'o', 'n', 's', '\022', '0', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'E', 'v', 'a', 
  'l', 'u', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '&', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'E', 'v', 'a', 'l', 'M', 'e', 't', 'r', 'i', 'c', 's', 'R', 'e', 's', 
  'p', 'o', 'n', 's', 'e', '\"', '\325', '\001', '\202', '\323', '\344', '\223', '\002', '\266', '\001', '\022', 's', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 
  's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 
  'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 
  'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 
  's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', '/', 'e', 'v', 'a', 'l', 
  'u', 'a', 't', 'i', 'o', 'n', 's', 'Z', '?', '\022', '=', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 
  'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'v', 
  'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', '/', 'e', 'v', 'a', 'l', 'u', 'a', 't', 'i', 'o', 'n', 's', '\230', '\234', '\'', 
  '\002', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\005', '\220', '\234', '\'', '5', '\022', '\355', '\002', '\n', 
  '\031', 'G', 'e', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'E', 'v', 'a', 'l', 'u', 'a', 't', 'i', 'o', 
  'n', '\022', '.', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'M', 'o', 'd', 'e', 'l', 
  'V', 'e', 'r', 's', 'i', 'o', 'n', 'E', 'v', 'a', 'l', 'u', 'a', 't', 'i', 'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', 
  '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'E', 'v', 'a', 'l', 
  'M', 'e', 't', 'r', 'i', 'c', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\366', '\001', '\202', '\323', '\344', '\223', '\002', '\327', '\001', 
  '\022', '\203', '\001', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 
  'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'v', 'e', 'r', 's', 'i', 
  'o', 'n', '_', 'i', 'd', '}', '/', 'e', 'v', 'a', 'l', 'u', 'a', 't', 'i', 'o', 'n', 's', '/', '{', 'e', 'v', 'a', 'l', 'u', 
  'a', 't', 'i', 'o', 'n', '_', 'i', 'd', '}', 'Z', 'O', '\022', 'M', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 
  'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', 
  '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', '/', 'e', 'v', 'a', 'l', 'u', 'a', 't', 'i', 'o', 'n', 's', '/', 
  '{', 'e', 'v', 'a', 'l', 'u', 'a', 't', 'i', 'o', 'n', '_', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '&', '\220', '\234', 
  '\'', '\013', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\005', '\220', '\234', '\'', '5', '\022', '\367', '\001', '\n', '\023', 'L', 'i', 's', 't', 'M', 'o', 
  'd', 'e', 'l', 'R', 'e', 'f', 'e', 'r', 'e', 'n', 'c', 'e', 's', '\022', '(', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'M', 'o', 'd', 'e', 'l', 'R', 'e', 'f', 'e', 'r', 'e', 'n', 'c', 'e', 's', 'R', 'e', 
  'q', 'u', 'e', 's', 't', '\032', ')', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 
  'i', 'M', 'o', 'd', 'e', 'l', 'R', 'e', 'f', 'e', 'r', 'e', 'n', 'c', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\212', 
  '\001', '\202', '\323', '\344', '\223', '\002', '|', '\022', 'V', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 
  'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'r', 'e', 'f', 'e', 'r', 'e', 'n', 'c', 'e', 's', 'Z', '\"', '\022', ' ', '/', 
  'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'r', 'e', 'f', 'e', 
  'r', 'e', 'n', 'c', 'e', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\017', '\022', '\356', '\002', '\n', '\033', 'G', 'e', 't', 'M', 'o', 'd', 
  'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'I', 'n', 'p', 'u', 't', 'E', 'x', 'a', 'm', 'p', 'l', 'e', '\022', '0', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 
  'o', 'n', 'I', 'n', 'p', 'u', 't', 'E', 'x', 'a', 'm', 'p', 'l', 'e', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '4', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 
  'r', 's', 'i', 'o', 'n', 'I', 'n', 'p', 'u', 't', 'E', 'x', 'a', 'm', 'p', 'l', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', 
  '\"', '\346', '\001', '\202', '\323', '\344', '\223', '\002', '\327', '\001', '\022', '\203', '\001', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', 
  '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 
  'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'm', 
  'o', 'd', 'e', 'l', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', '_', 'e', 'x', 
  'a', 'm', 'p', 'l', 'e', 's', '/', '{', 'e', 'x', 'a', 'm', 'p', 'l', 'e', '_', 'i', 'd', '}', 'Z', 'O', '\022', 'M', '/', 'v', 
  '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 
  'o', 'n', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', '/', 'i', 'n', 
  'p', 'u', 't', '_', 'e', 'x', 'a', 'm', 'p', 'l', 'e', 's', '/', '{', 'e', 'x', 'a', 'm', 'p', 'l', 'e', '_', 'i', 'd', '}', 
  '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\017', '\022', '\326', '\002', '\n', '\035', 'L', 'i', 's', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 
  's', 'i', 'o', 'n', 'I', 'n', 'p', 'u', 't', 'E', 'x', 'a', 'm', 'p', 'l', 'e', 's', '\022', '2', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'I', 
  'n', 'p', 'u', 't', 'E', 'x', 'a', 'm', 'p', 'l', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '3', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 
  'o', 'n', 'I', 'n', 'p', 'u', 't', 'E', 'x', 'a', 'm', 'p', 'l', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\313', '\001', 
  '\202', '\323', '\344', '\223', '\002', '\274', '\001', '\022', 'v', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 
  'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', 
  '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', '_', 'e', 'x', 'a', 'm', 'p', 'l', 
  'e', 's', 'Z', 'B', '\022', '@', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 
  'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'v', 'e', 'r', 's', 'i', 'o', 
  'n', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', '_', 'e', 'x', 'a', 'm', 'p', 'l', 'e', 's', '\230', '\234', '\'', '\002', '\220', 
  '\234', '\'', '\017', '\022', '\334', '\001', '\n', '\013', 'G', 'e', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '\022', ' ', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'R', 'e', 'q', 'u', 
  'e', 's', 't', '\032', '$', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 
  'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\204', '\001', '\202', '\323', '\344', '\223', '\002', 'r', 
  '\022', 'Q', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 
  'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '/', '{', 'w', 'o', 'r', 'k', 
  'f', 'l', 'o', 'w', '_', 'i', 'd', '}', 'Z', '\035', '\022', '\033', '/', 'v', '2', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', 
  '/', '{', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\017', '\220', '\234', '\'', 
  '\023', '\022', '\361', '\001', '\n', '\r', 'L', 'i', 's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '\022', '\"', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', 'R', 'e', 
  'q', 'u', 'e', 's', 't', '\032', '#', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 
  'i', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\226', '\001', '\202', '\323', '\344', '\223', '\002', 
  '\203', '\001', '\022', 'C', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', 
  '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', 'Z', '+', '\022', ')', 
  '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 
  'e', 'r', '_', 'i', 'd', '}', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', 'Z', '\017', '\022', '\r', '/', 'v', '2', '/', 'w', 
  'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\023', '\022', '\314', '\001', '\n', '\r', 
  'P', 'o', 's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '\022', '\"', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', 
  '#', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'W', 'o', 'r', 'k', 'f', 
  'l', 'o', 'w', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'r', '\202', '\323', '\344', '\223', '\002', '\\', '\"', 'C', '/', 'v', '2', '/', 
  'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 
  'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 
  'i', 'd', '}', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', ':', '\001', '*', 'Z', '\022', '\"', '\r', '/', 'v', '2', '/', 'w', 
  'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\022', '\220', '\234', 
  '\'', '\023', '\022', '\316', '\001', '\n', '\016', 'P', 'a', 't', 'c', 'h', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '\022', '#', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 
  's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '#', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 
  'u', 'l', 't', 'i', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'r', '\202', '\323', '\344', 
  '\223', '\002', '\\', '2', 'C', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', ':', '\001', '*', 
  'Z', '\022', '2', '\r', '/', 'v', '2', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', 
  '\234', '\'', '\017', '\220', '\234', '\'', '\022', '\220', '\234', '\'', '\023', '\022', '\276', '\001', '\n', '\020', 'P', 'a', 't', 'c', 'h', 'W', 'o', 'r', 'k', 
  'f', 'l', 'o', 'w', 'I', 'd', 's', '\022', '%', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 
  't', 'c', 'h', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'I', 'd', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '#', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 
  'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '^', '\202', '\323', '\344', '\223', '\002', 'L', '2', 'G', '/', 'v', '2', '/', 'u', 's', 'e', 
  'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 
  'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', 
  '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '/', 'i', 'd', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\022', 
  '\220', '\234', '\'', '\023', '\022', '\343', '\001', '\n', '\016', 'D', 'e', 'l', 'e', 't', 'e', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '\022', '#', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'W', 'o', 'r', 'k', 'f', 
  'l', 'o', 'w', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\210', '\001', '\202', '\323', 
  '\344', '\223', '\002', 'r', '*', 'Q', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', 
  '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 
  'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '/', '{', 
  'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '}', 'Z', '\035', '*', '\033', '/', 'v', '2', '/', 'w', 'o', 'r', 'k', 'f', 
  'l', 'o', 'w', 's', '/', '{', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 
  '\022', '\220', '\234', '\'', '\025', '\220', '\234', '\'', '\023', '\022', '\316', '\001', '\n', '\017', 'D', 'e', 'l', 'e', 't', 'e', 'W', 'o', 'r', 'k', 'f', 
  'l', 'o', 'w', 's', '\022', '$', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 
  'e', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 
  's', 'e', '\"', 'r', '\202', '\323', '\344', '\223', '\002', '\\', '*', 'C', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 
  'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'w', 'o', 'r', 'k', 'f', 
  'l', 'o', 'w', 's', ':', '\001', '*', 'Z', '\022', '*', '\r', '/', 'v', '2', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', ':', 
  '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\022', '\220', '\234', '\'', '\025', '\220', '\234', '\'', '\023', '\022', '\206', '\003', '\n', '\023', 'P', 'o', 
  's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'R', 'e', 's', 'u', 'l', 't', 's', '\022', '(', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'R', 'e', 's', 'u', 'l', 
  't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ')', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'P', 'o', 's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'R', 'e', 's', 'u', 'l', 't', 's', 'R', 'e', 's', 'p', 'o', 'n', 
  's', 'e', '\"', '\231', '\002', '\202', '\323', '\344', '\223', '\002', '\376', '\001', '\"', 'o', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 
  'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', 
  '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'w', 'o', 'r', 
  'k', 'f', 'l', 'o', 'w', 's', '/', '{', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 
  'i', 'o', 'n', 's', '/', '{', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', '/', 'r', 'e', 's', 'u', 'l', 't', 's', 
  ':', '\001', '*', 'Z', '^', '\"', 'Y', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '/', 
  '{', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '}', '/', 'r', 'e', 's', 'u', 'l', 't', 's', ':', '\001', '*', 'Z', 
  '(', '\"', '#', '/', 'v', '2', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '/', '{', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 
  'w', '_', 'i', 'd', '}', '/', 'r', 'e', 's', 'u', 'l', 't', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\017', '\220', 
  '\234', '\'', '\013', '\220', '\234', '\'', '\002', '\220', '\234', '\'', '\023', '\022', '\305', '\003', '\n', '\035', 'P', 'o', 's', 't', 'W', 'o', 'r', 'k', 'f', 
  'l', 'o', 'w', 'R', 'e', 's', 'u', 'l', 't', 's', 'S', 'i', 'm', 'i', 'l', 'a', 'r', 'i', 't', 'y', '\022', '2', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'R', 'e', 
  's', 'u', 'l', 't', 's', 'S', 'i', 'm', 'i', 'l', 'a', 'r', 'i', 't', 'y', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '3', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 
  'R', 'e', 's', 'u', 'l', 't', 's', 'S', 'i', 'm', 'i', 'l', 'a', 'r', 'i', 't', 'y', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', 
  '\"', '\272', '\002', '\202', '\323', '\344', '\223', '\002', '\237', '\002', '\"', 'z', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 
  'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'w', 'o', 'r', 'k', 'f', 
  'l', 'o', 'w', 's', '/', '{', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 
  'n', 's', '/', '{', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', '/', 'r', 'e', 's', 'u', 'l', 't', 's', '/', 's', 
  'i', 'm', 'i', 'l', 'a', 'r', 'i', 't', 'y', ':', '\001', '*', 'Z', 'i', '\"', 'd', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', 
  '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 
  'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'w', 
  'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '/', '{', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '}', '/', 'r', 'e', 
  's', 'u', 'l', 't', 's', '/', 's', 'i', 'm', 'i', 'l', 'a', 'r', 'i', 't', 'y', ':', '\001', '*', 'Z', '3', '\"', '.', '/', 'v', 
  '2', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '/', '{', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '}', 
  '/', 'r', 'e', 's', 'u', 'l', 't', 's', '/', 's', 'i', 'm', 'i', 'l', 'a', 'r', 'i', 't', 'y', ':', '\001', '*', '\230', '\234', '\'', 
  '\002', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\002', '\220', '\234', '\'', '\023', '\022', '\207', '\002', '\n', '\024', 'L', 'i', 's', 
  't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', '\022', ')', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 
  'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '*', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'M', 'u', 'l', 't', 'i', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 's', 'p', 
  'o', 'n', 's', 'e', '\"', '\227', '\001', '\202', '\323', '\344', '\223', '\002', '\204', '\001', '\022', 'Z', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', 
  '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 
  'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'w', 
  'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '/', '{', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '}', '/', 'v', 'e', 
  'r', 's', 'i', 'o', 'n', 's', 'Z', '&', '\022', '$', '/', 'v', '2', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '/', '{', 
  'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '\230', '\234', '\'', '\002', 
  '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\023', '\022', '\260', '\002', '\n', '\022', 'G', 'e', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 
  'e', 'r', 's', 'i', 'o', 'n', '\022', '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 
  'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '+', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'W', 'o', 'r', 'k', 'f', 'l', 
  'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\303', '\001', '\202', '\323', '\344', '\223', '\002', 
  '\260', '\001', '\022', 'p', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', 
  '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '/', '{', 'w', 'o', 
  'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'w', 'o', 'r', 'k', 
  'f', 'l', 'o', 'w', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', 'Z', '<', '\022', ':', '/', 'v', '2', '/', 'w', 
  'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '/', '{', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '}', '/', 'v', 'e', 
  'r', 's', 'i', 'o', 'n', 's', '/', '{', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 
  'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\023', '\022', '\214', '\002', '\n', '\026', 'D', 'e', 'l', 'e', 't', 
  'e', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', '\022', '+', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 
  's', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\241', '\001', 
  '\202', '\323', '\344', '\223', '\002', '\212', '\001', '*', 'Z', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 
  's', '/', '{', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', ':', 
  '\001', '*', 'Z', ')', '*', '$', '/', 'v', '2', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '/', '{', 'w', 'o', 'r', 'k', 
  'f', 'l', 'o', 'w', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', 
  '\234', '\'', '\023', '\220', '\234', '\'', '\022', '\220', '\234', '\'', '\025', '\022', '\223', '\002', '\n', '\025', 'P', 'a', 't', 'c', 'h', 'W', 'o', 'r', 'k', 
  'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', '\022', '*', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 
  'e', 'q', 'u', 'e', 's', 't', '\032', '*', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 
  't', 'i', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', 
  '\"', '\241', '\001', '\202', '\323', '\344', '\223', '\002', '\212', '\001', '2', 'Z', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 
  'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'w', 'o', 'r', 'k', 'f', 
  'l', 'o', 'w', 's', '/', '{', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 
  'n', 's', ':', '\001', '*', 'Z', ')', '2', '$', '/', 'v', '2', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '/', '{', 'w', 
  'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', ':', '\001', '*', '\230', '\234', 
  '\'', '\002', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\023', '\220', '\234', '\'', '\022', '\022', '\205', '\001', '\n', '\006', 'G', 'e', 't', 'K', 'e', 'y', 
  '\022', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'K', 'e', 'y', 'R', 'e', 'q', 
  'u', 'e', 's', 't', '\032', '\037', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 
  'e', 'K', 'e', 'y', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '=', '\202', '\323', '\344', '\223', '\002', '/', '\022', '-', '/', 'v', '2', 
  '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 
  'i', 'd', '}', '/', 'k', 'e', 'y', 's', '/', '{', 'k', 'e', 'y', '_', 'i', 'd', '}', '\230', '\234', '\'', '\005', '\220', '\234', '\'', '0', 
  '\022', '\177', '\n', '\010', 'L', 'i', 's', 't', 'K', 'e', 'y', 's', '\022', '\035', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'L', 'i', 's', 't', 'K', 'e', 'y', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\036', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'K', 'e', 'y', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', 
  '\"', '4', '\202', '\323', '\344', '\223', '\002', '&', '\022', '$', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'k', 'e', 'y', 's', '\230', '\234', '\'', '\005', 
  '\220', '\234', '\'', '0', '\022', '\237', '\001', '\n', '\013', 'L', 'i', 's', 't', 'A', 'p', 'p', 'K', 'e', 'y', 's', '\022', ' ', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'A', 'p', 'p', 'K', 'e', 'y', 's', 'R', 'e', 'q', 
  'u', 'e', 's', 't', '\032', '\036', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 
  'K', 'e', 'y', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'N', '\202', '\323', '\344', '\223', '\002', '@', '\022', '>', '/', 'v', '2', '/', 
  'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 
  'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 
  'i', 'd', '}', '/', 'k', 'e', 'y', 's', '\230', '\234', '\'', '\005', '\220', '\234', '\'', '0', '\022', '\225', '\001', '\n', '\t', 'D', 'e', 'l', 'e', 
  't', 'e', 'K', 'e', 'y', '\022', '\036', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 
  't', 'e', 'K', 'e', 'y', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'E', '\202', 
  '\323', '\344', '\223', '\002', '/', '*', '-', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'k', 'e', 'y', 's', '/', '{', 'k', 'e', 'y', '_', 'i', 
  'd', '}', '\230', '\234', '\'', '\005', '\220', '\234', '\'', '/', '\220', '\234', '\'', '1', '\220', '\234', '\'', '0', '\022', '\212', '\001', '\n', '\010', 'P', 'o', 
  's', 't', 'K', 'e', 'y', 's', '\022', '\035', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 
  't', 'K', 'e', 'y', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\036', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'K', 'e', 'y', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '?', '\202', '\323', '\344', '\223', 
  '\002', ')', '\"', '$', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'k', 'e', 'y', 's', ':', '\001', '*', '\230', '\234', '\'', '\005', '\220', '\234', '\'', 
  '-', '\220', '\234', '\'', '/', '\220', '\234', '\'', '0', '\022', '\210', '\001', '\n', '\t', 'P', 'a', 't', 'c', 'h', 'K', 'e', 'y', 's', '\022', '\036', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'K', 'e', 'y', 's', 'R', 'e', 
  'q', 'u', 'e', 's', 't', '\032', '\036', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 
  'i', 'K', 'e', 'y', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', ';', '\202', '\323', '\344', '\223', '\002', ')', '2', '$', '/', 'v', '2', 
  '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 
  'i', 'd', '}', '/', 'k', 'e', 'y', 's', ':', '\001', '*', '\230', '\234', '\'', '\005', '\220', '\234', '\'', '/', '\220', '\234', '\'', '0', '\022', '\274', 
  '\001', '\n', '\010', 'M', 'y', 'S', 'c', 'o', 'p', 'e', 's', '\022', '\035', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'M', 'y', 'S', 'c', 'o', 'p', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ' ', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'S', 'c', 'o', 'p', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 
  'e', '\"', 'o', '\202', '\323', '\344', '\223', '\002', 'e', '\022', 'B', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'y', 's', 'c', 'o', 'p', 
  'e', 's', 'Z', '\016', '\022', '\014', '/', 'v', '2', '/', 'm', 'y', 's', 'c', 'o', 'p', 'e', 's', 'Z', '\017', '\022', '\r', '/', 'v', '2', 
  '/', 'm', 'y', '_', 's', 'c', 'o', 'p', 'e', 's', '\230', '\234', '\'', '\002', '\022', '\215', '\001', '\n', '\014', 'M', 'y', 'S', 'c', 'o', 'p', 
  'e', 's', 'U', 's', 'e', 'r', '\022', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'y', 'S', 
  'c', 'o', 'p', 'e', 's', 'U', 's', 'e', 'r', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '$', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'S', 'c', 'o', 'p', 'e', 'U', 's', 'e', 'r', 'R', 'e', 's', 'p', 
  'o', 'n', 's', 'e', '\"', '4', '\202', '\323', '\344', '\223', '\002', '*', '\022', '(', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 
  'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'm', 'y', 's', 'c', 
  'o', 'p', 'e', 's', '\230', '\234', '\'', '\005', '\022', 'u', '\n', '\014', 'M', 'y', 'S', 'c', 'o', 'p', 'e', 's', 'R', 'o', 'o', 't', '\022', 
  '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'y', 'S', 'c', 'o', 'p', 'e', 's', 'R', 'o', 
  'o', 't', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '$', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'M', 'u', 'l', 't', 'i', 'S', 'c', 'o', 'p', 'e', 'R', 'o', 'o', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\034', '\202', 
  '\323', '\344', '\223', '\002', '\022', '\022', '\020', '/', 'v', '2', '/', 'm', 'y', 's', 'c', 'o', 'p', 'e', 's', 'r', 'o', 'o', 't', '\230', '\234', 
  '\'', '\005', '\022', '\207', '\001', '\n', '\n', 'L', 'i', 's', 't', 'S', 'c', 'o', 'p', 'e', 's', '\022', '\037', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'S', 'c', 'o', 'p', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', 
  '\032', '$', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'S', 'c', 'o', 'p', 
  'e', 'D', 'e', 'p', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '2', '\202', '\323', '\344', '\223', '\002', '(', '\022', '&', '/', 'v', 
  '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', 
  '_', 'i', 'd', '}', '/', 's', 'c', 'o', 'p', 'e', 's', '\230', '\234', '\'', '\003', '\022', '\225', '\001', '\n', '\006', 'G', 'e', 't', 'A', 'p', 
  'p', '\022', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'A', 'p', 'p', 'R', 'e', 
  'q', 'u', 'e', 's', 't', '\032', '\037', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 
  'l', 'e', 'A', 'p', 'p', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'M', '\202', '\323', '\344', '\223', '\002', ';', '\022', '9', '/', 'v', 
  '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', 
  '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 
  'p', '_', 'i', 'd', '}', '\230', '\234', '\'', '\005', '\220', '\234', '\'', '-', '\220', '\234', '\'', '\023', '\022', '\217', '\001', '\n', '\010', 'L', 'i', 's', 
  't', 'A', 'p', 'p', 's', '\022', '\035', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 
  'A', 'p', 'p', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\036', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'M', 'u', 'l', 't', 'i', 'A', 'p', 'p', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'D', '\202', '\323', '\344', '\223', '\002', 
  '2', '\022', '$', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', 'Z', '\n', '\022', '\010', '/', 'v', '2', '/', 'a', 'p', 'p', 
  's', '\230', '\234', '\'', '\005', '\220', '\234', '\'', '-', '\220', '\234', '\'', '\023', '\022', '\245', '\001', '\n', '\t', 'D', 'e', 'l', 'e', 't', 'e', 'A', 
  'p', 'p', '\022', '\036', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'A', 
  'p', 'p', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'U', '\202', '\323', '\344', '\223', 
  '\002', ';', '*', '9', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', 
  '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '\230', '\234', '\'', '\005', '\220', '\234', '\'', ',', '\220', '\234', '\'', '.', '\220', '\234', 
  '\'', '-', '\220', '\234', '\'', '\023', '\022', '\222', '\001', '\n', '\010', 'P', 'o', 's', 't', 'A', 'p', 'p', 's', '\022', '\035', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'A', 'p', 'p', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', 
  '\032', '\036', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'A', 'p', 'p', 'R', 
  'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'G', '\202', '\323', '\344', '\223', '\002', ')', '\"', '$', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 
  's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 
  'p', 'p', 's', ':', '\001', '*', '\230', '\234', '\'', '\005', '\220', '\234', '\'', ',', '\220', '\234', '\'', '-', '\220', '\234', '\'', '\017', '\220', '\234', '\'', 
  '\023', '\220', '\234', '\'', '\022', '\022', '\210', '\001', '\n', '\t', 'P', 'a', 't', 'c', 'h', 'A', 'p', 'p', 's', '\022', '\036', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'A', 'p', 'p', 's', 'R', 'e', 'q', 'u', 'e', 's', 
  't', '\032', '\036', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'A', 'p', 'p', 
  'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', ';', '\202', '\323', '\344', '\223', '\002', ')', '2', '$', '/', 'v', '2', '/', 'u', 's', 'e', 
  'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 
  'a', 'p', 'p', 's', ':', '\001', '*', '\230', '\234', '\'', '\005', '\220', '\234', '\'', ',', '\220', '\234', '\'', '-', '\022', '\222', '\001', '\n', '\014', 'P', 
  'a', 't', 'c', 'h', 'A', 'p', 'p', 's', 'I', 'd', 's', '\022', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'P', 'a', 't', 'c', 'h', 'A', 'p', 'p', 's', 'I', 'd', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\036', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'A', 'p', 'p', 'R', 'e', 's', 'p', 'o', 
  'n', 's', 'e', '\"', '?', '\202', '\323', '\344', '\223', '\002', '-', '2', '(', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', 
  'i', 'd', 's', ':', '\001', '*', '\230', '\234', '\'', '\005', '\220', '\234', '\'', ',', '\220', '\234', '\'', '-', '\022', '\234', '\001', '\n', '\010', 'P', 'a', 
  't', 'c', 'h', 'A', 'p', 'p', '\022', '\035', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 
  'c', 'h', 'A', 'p', 'p', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\037', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'A', 'p', 'p', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'P', '\202', '\323', '\344', 
  '\223', '\002', '>', '2', '9', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', ':', '\001', '*', '\230', '\234', '\'', '\005', '\220', '\234', '\'', ',', '\220', '\234', 
  '\'', '-', '\022', '\237', '\001', '\n', '\020', 'P', 'o', 's', 't', 'A', 'p', 'p', 's', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', '\022', '%', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'A', 'p', 'p', 's', 'S', 'e', 'a', 
  'r', 'c', 'h', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\036', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'A', 'p', 'p', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'D', '\202', '\323', '\344', '\223', 
  '\002', '2', '\"', '-', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', ':', 
  '\001', '*', '\230', '\234', '\'', '\005', '\220', '\234', '\'', '-', '\220', '\234', '\'', '\023', '\022', '\317', '\001', '\n', '\024', 'P', 'o', 's', 't', 'V', 'a', 
  'l', 'i', 'd', 'a', 't', 'e', 'P', 'a', 's', 's', 'w', 'o', 'r', 'd', '\022', ')', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'e', 'P', 'a', 's', 's', 'w', 'o', 'r', 'd', 
  'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '.', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 
  'n', 'g', 'l', 'e', 'P', 'a', 's', 's', 'w', 'o', 'r', 'd', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'i', 'o', 'n', 'R', 'e', 's', 
  'p', 'o', 'n', 's', 'e', '\"', '\\', '\202', '\323', '\344', '\223', '\002', 'R', '\"', '1', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', 
  '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'v', 'a', 'l', 
  'i', 'd', 'a', 't', 'e', '_', 'p', 'a', 's', 's', 'w', 'o', 'r', 'd', ':', '\001', '*', 'Z', '\032', '\"', '\025', '/', 'v', '2', '/', 
  'v', 'a', 'l', 'i', 'd', 'a', 't', 'e', '_', 'p', 'a', 's', 's', 'w', 'o', 'r', 'd', ':', '\001', '*', '\230', '\234', '\'', '\003', '\022', 
  '\275', '\001', '\n', '\t', 'G', 'e', 't', 'S', 'e', 'a', 'r', 'c', 'h', '\022', '\036', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'G', 'e', 't', 'S', 'e', 'a', 'r', 'c', 'h', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\"', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'S', 'e', 'a', 'r', 'c', 'h', 'R', 'e', 
  's', 'p', 'o', 'n', 's', 'e', '\"', 'l', '\202', '\323', '\344', '\223', '\002', '^', '\022', 'G', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', 
  '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 
  'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 's', 
  'e', 'a', 'r', 'c', 'h', 'e', 's', '/', '{', 'i', 'd', '}', 'Z', '\023', '\022', '\021', '/', 'v', '2', '/', 's', 'e', 'a', 'r', 'c', 
  'h', 'e', 's', '/', '{', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'r', '\022', '\270', '\001', '\n', '\014', 'L', 'i', 's', 't', 
  'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', '\022', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 
  'i', 's', 't', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'S', 'e', 'a', 'r', 'c', 'h', 'R', 'e', 's', 'p', 'o', 
  'n', 's', 'e', '\"', 'b', '\202', '\323', '\344', '\223', '\002', 'T', '\022', 'B', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', 
  '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 's', 'e', 'a', 'r', 
  'c', 'h', 'e', 's', 'Z', '\016', '\022', '\014', '/', 'v', '2', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', '\230', '\234', '\'', '\002', '\220', 
  '\234', '\'', 'r', '\022', '\304', '\001', '\n', '\r', 'P', 'a', 't', 'c', 'h', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', '\022', '\"', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', 
  'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 
  'l', 't', 'i', 'S', 'e', 'a', 'r', 'c', 'h', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'l', '\202', '\323', '\344', '\223', '\002', 'Z', 
  '2', 'B', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 
  'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', ':', '\001', '*', 'Z', '\021', '2', '\014', 
  '/', 'v', '2', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 's', '\220', '\234', 
  '\'', 'r', '\022', '\325', '\001', '\n', '\014', 'P', 'o', 's', 't', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', '\022', '!', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', 'R', 'e', 'q', 
  'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 
  'S', 'e', 'a', 'r', 'c', 'h', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\177', '\210', '\002', '\001', '\202', '\323', '\344', '\223', '\002', 'Z', 
  '\"', 'B', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 
  'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', ':', '\001', '*', 'Z', '\021', '\"', '\014', 
  '/', 'v', '2', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '&', '\220', '\234', 
  '\'', '\013', '\220', '\234', '\'', '\005', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\003', '\220', '\234', '\'', '\023', '\022', '\324', '\001', '\n', '\020', 'P', 'o', 
  's', 't', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', 'B', 'y', 'I', 'D', '\022', '%', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', 'B', 'y', 'I', 'D', 'R', 'e', 'q', 'u', 
  'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'S', 
  'e', 'a', 'r', 'c', 'h', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'v', '\202', '\323', '\344', '\223', '\002', 'd', '\"', 'G', '/', 'v', 
  '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', 
  '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 
  'p', '_', 'i', 'd', '}', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', '/', '{', 'i', 'd', '}', ':', '\001', '*', 'Z', '\026', '\"', 
  '\021', '/', 'v', '2', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', '/', '{', 'i', 'd', '}', ':', '\001', '*', '\230', '\234', '\'', '\002', 
  '\220', '\234', '\'', 'r', '\220', '\234', '\'', '\003', '\022', '\257', '\002', '\n', '\033', 'P', 'o', 's', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 
  'o', 'n', 'S', 'e', 'a', 'r', 'c', 'h', 'M', 'e', 't', 'r', 'i', 'c', 's', '\022', '0', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'S', 'e', 'a', 'r', 'c', 
  'h', 'M', 'e', 't', 'r', 'i', 'c', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '2', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'S', 'e', 'a', 'r', 
  'c', 'h', 'M', 'e', 't', 'r', 'i', 'c', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\251', '\001', '\202', '\323', '\344', '\223', '\002', 
  '\202', '\001', '\"', 'V', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', 
  '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', '/', 's', 
  'e', 'a', 'r', 'c', 'h', 'e', 's', '/', 'm', 'e', 't', 'r', 'i', 'c', 's', ':', '\001', '*', 'Z', '%', '\"', ' ', '/', 'v', '2', 
  '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', '/', 'm', 'e', 't', 
  'r', 'i', 'c', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\005', '\220', '\234', 
  '\'', '5', '\220', '\234', '\'', '6', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\023', '\022', '\245', '\002', '\n', '\032', 'G', 'e', 't', 'A', 'n', 'n', 
  'o', 't', 'a', 't', 'i', 'o', 'n', 'S', 'e', 'a', 'r', 'c', 'h', 'M', 'e', 't', 'r', 'i', 'c', 's', '\022', '/', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'S', 
  'e', 'a', 'r', 'c', 'h', 'M', 'e', 't', 'r', 'i', 'c', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '2', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 
  'S', 'e', 'a', 'r', 'c', 'h', 'M', 'e', 't', 'r', 'i', 'c', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\241', '\001', '\202', 
  '\323', '\344', '\223', '\002', '\206', '\001', '\022', '[', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 
  'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 
  'n', 's', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', '/', 'm', 'e', 't', 'r', 'i', 'c', 's', '/', '{', 'i', 'd', '}', 'Z', 
  '\'', '\022', '%', '/', 'v', '2', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', '/', 's', 'e', 'a', 'r', 'c', 'h', 
  'e', 's', '/', 'm', 'e', 't', 'r', 'i', 'c', 's', '/', '{', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '&', '\220', '\234', 
  '\'', '\013', '\220', '\234', '\'', '\005', '\220', '\234', '\'', '5', '\022', '\234', '\002', '\n', '\033', 'L', 'i', 's', 't', 'A', 'n', 'n', 'o', 't', 'a', 
  't', 'i', 'o', 'n', 'S', 'e', 'a', 'r', 'c', 'h', 'M', 'e', 't', 'r', 'i', 'c', 's', '\022', '0', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'S', 'e', 'a', 
  'r', 'c', 'h', 'M', 'e', 't', 'r', 'i', 'c', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '2', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'S', 'e', 
  'a', 'r', 'c', 'h', 'M', 'e', 't', 'r', 'i', 'c', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\226', '\001', '\202', '\323', '\344', 
  '\223', '\002', '|', '\022', 'V', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', '/', 
  's', 'e', 'a', 'r', 'c', 'h', 'e', 's', '/', 'm', 'e', 't', 'r', 'i', 'c', 's', 'Z', '\"', '\022', ' ', '/', 'v', '2', '/', 'a', 
  'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', '/', 'm', 'e', 't', 'r', 'i', 
  'c', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\005', '\220', '\234', '\'', '5', '\022', '\226', '\002', 
  '\n', '\035', 'D', 'e', 'l', 'e', 't', 'e', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'S', 'e', 'a', 'r', 'c', 'h', 'M', 
  'e', 't', 'r', 'i', 'c', 's', '\022', '2', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 
  'e', 't', 'e', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'S', 'e', 'a', 'r', 'c', 'h', 'M', 'e', 't', 'r', 'i', 'c', 
  's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 
  't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\235', '\001', '\202', '\323', '\344', '\223', 
  '\002', '\206', '\001', '*', '[', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', '/', 
  's', 'e', 'a', 'r', 'c', 'h', 'e', 's', '/', 'm', 'e', 't', 'r', 'i', 'c', 's', '/', '{', 'i', 'd', '}', 'Z', '\'', '*', '%', 
  '/', 'v', '2', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', '/', 
  'm', 'e', 't', 'r', 'i', 'c', 's', '/', '{', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '5', '\220', '\234', '\'', '6', '\220', 
  '\234', '\'', '?', '\022', '\312', '\001', '\n', '\014', 'D', 'e', 'l', 'e', 't', 'e', 'S', 'e', 'a', 'r', 'c', 'h', '\022', '!', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'S', 'e', 'a', 'r', 'c', 'h', 'R', 'e', 
  'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 
  'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 't', '\202', '\323', '\344', '\223', '\002', '^', '*', 'G', 
  '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 
  'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 
  'a', 'p', 'p', '_', 'i', 'd', '}', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', '/', '{', 'i', 'd', '}', 'Z', '\023', '*', '\021', 
  '/', 'v', '2', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', '/', '{', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'r', 
  '\220', '\234', '\'', 's', '\220', '\234', '\'', 't', '\022', '\350', '\001', '\n', '\025', 'L', 'i', 's', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 
  'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 's', '\022', '*', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'L', 'i', 's', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 's', 'R', 'e', 'q', 'u', 
  'e', 's', 't', '\032', '+', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'A', 
  'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'v', 
  '\202', '\323', '\344', '\223', '\002', 'h', '\022', 'L', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 
  'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 
  'n', '_', 'f', 'i', 'l', 't', 'e', 'r', 's', 'Z', '\030', '\022', '\026', '/', 'v', '2', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 
  'o', 'n', '_', 'f', 'i', 'l', 't', 'e', 'r', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'r', '\022', '\225', '\002', '\n', '\023', 'G', 'e', 
  't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', '\022', '(', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 
  'e', 'r', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ',', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'S', 'i', 'n', 'g', 'l', 'e', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 'R', 'e', 's', 
  'p', 'o', 'n', 's', 'e', '\"', '\245', '\001', '\202', '\323', '\344', '\223', '\002', '\226', '\001', '\022', 'c', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 
  's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 
  'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 
  'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '_', 'f', 'i', 'l', 't', 'e', 'r', 's', '/', '{', 'a', 'n', 'n', 'o', 't', 
  'a', 't', 'i', 'o', 'n', '_', 'f', 'i', 'l', 't', 'e', 'r', '_', 'i', 'd', '}', 'Z', '/', '\022', '-', '/', 'v', '2', '/', 'a', 
  'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '_', 'f', 'i', 'l', 't', 'e', 'r', 's', '/', '{', 'a', 'n', 'n', 'o', 't', 'a', 
  't', 'i', 'o', 'n', '_', 'f', 'i', 'l', 't', 'e', 'r', '_', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'r', '\022', '\363', 
  '\001', '\n', '\025', 'P', 'o', 's', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 's', '\022', 
  '*', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'A', 'n', 'n', 'o', 't', 'a', 
  't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '+', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 
  'i', 'l', 't', 'e', 'r', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\200', '\001', '\202', '\323', '\344', '\223', '\002', 'n', '\"', 'L', '/', 
  'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 
  'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 
  'p', 'p', '_', 'i', 'd', '}', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '_', 'f', 'i', 'l', 't', 'e', 'r', 's', 
  ':', '\001', '*', 'Z', '\033', '\"', '\026', '/', 'v', '2', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '_', 'f', 'i', 'l', 
  't', 'e', 'r', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'r', '\220', '\234', '\'', 's', '\022', '\365', '\001', '\n', '\026', 'P', 
  'a', 't', 'c', 'h', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 's', '\022', '+', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 
  'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '+', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 
  't', 'e', 'r', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\200', '\001', '\202', '\323', '\344', '\223', '\002', 'n', '2', 'L', '/', 'v', '2', 
  '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 
  'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', 
  '_', 'i', 'd', '}', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '_', 'f', 'i', 'l', 't', 'e', 'r', 's', ':', '\001', 
  '*', 'Z', '\033', '2', '\026', '/', 'v', '2', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '_', 'f', 'i', 'l', 't', 'e', 
  'r', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'r', '\220', '\234', '\'', 's', '\022', '\355', '\001', '\n', '\027', 'D', 'e', 'l', 
  'e', 't', 'e', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 's', '\022', ',', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 
  'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 
  'e', '\"', '\200', '\001', '\202', '\323', '\344', '\223', '\002', 'n', '*', 'L', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 
  'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'a', 'n', 'n', 'o', 't', 
  'a', 't', 'i', 'o', 'n', '_', 'f', 'i', 'l', 't', 'e', 'r', 's', ':', '\001', '*', 'Z', '\033', '*', '\026', '/', 'v', '2', '/', 'a', 
  'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '_', 'f', 'i', 'l', 't', 'e', 'r', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', 
  '\234', '\'', 'r', '\220', '\234', '\'', 's', '\022', '|', '\n', '\017', 'L', 'i', 's', 't', 'S', 't', 'a', 't', 'u', 's', 'C', 'o', 'd', 'e', 
  's', '\022', '$', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'S', 't', 'a', 't', 
  'u', 's', 'C', 'o', 'd', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '%', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'S', 't', 'a', 't', 'u', 's', 'C', 'o', 'd', 'e', 'R', 'e', 's', 'p', 'o', 
  'n', 's', 'e', '\"', '\034', '\202', '\323', '\344', '\223', '\002', '\022', '\022', '\020', '/', 'v', '2', '/', 's', 't', 'a', 't', 'u', 's', '_', 'c', 
  'o', 'd', 'e', 's', '\230', '\234', '\'', '\001', '\022', '\212', '\001', '\n', '\r', 'G', 'e', 't', 'S', 't', 'a', 't', 'u', 's', 'C', 'o', 'd', 
  'e', '\022', '\"', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'S', 't', 'a', 't', 'u', 
  's', 'C', 'o', 'd', 'e', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '&', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'S', 't', 'a', 't', 'u', 's', 'C', 'o', 'd', 'e', 'R', 'e', 's', 'p', 'o', 'n', 
  's', 'e', '\"', '-', '\202', '\323', '\344', '\223', '\002', '#', '\022', '!', '/', 'v', '2', '/', 's', 't', 'a', 't', 'u', 's', '_', 'c', 'o', 
  'd', 'e', 's', '/', '{', 's', 't', 'a', 't', 'u', 's', '_', 'c', 'o', 'd', 'e', '_', 'i', 'd', '}', '\230', '\234', '\'', '\001', '\022', 
  '\276', '\001', '\n', '\021', 'L', 'i', 's', 't', 'C', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', 's', '\022', '&', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'C', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 
  't', 'o', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '(', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', 's', 'R', 'e', 's', 'p', 'o', 
  'n', 's', 'e', '\"', 'W', '\202', '\323', '\344', '\223', '\002', 'I', '\022', 'G', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', 
  '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'c', 'o', 'l', 'l', 
  'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '2', '\022', '\305', '\001', '\n', '\021', 'P', 'o', 's', 
  't', 'C', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', 's', '\022', '&', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'C', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', 's', 'R', 'e', 'q', 
  'u', 'e', 's', 't', '\032', '(', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 
  'C', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '^', '\202', '\323', 
  '\344', '\223', '\002', 'L', '\"', 'G', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', 
  '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 
  'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'c', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 
  'r', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '3', '\220', '\234', '\'', '2', '\022', '\313', '\001', '\n', '\022', 'P', 'a', 't', 
  'c', 'h', 'C', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', 's', '\022', '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'C', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', 's', 'R', 
  'e', 'q', 'u', 'e', 's', 't', '\032', '(', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 
  't', 'i', 'C', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'b', 
  '\202', '\323', '\344', '\223', '\002', 'L', '2', 'G', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 
  'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'c', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 
  't', 'o', 'r', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '3', '\220', '\234', '\'', '2', '\220', '\234', '\'', '4', '\022', '\316', 
  '\001', '\n', '\023', 'D', 'e', 'l', 'e', 't', 'e', 'C', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', 's', '\022', '(', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'C', 'o', 'l', 'l', 'a', 'b', 
  'o', 'r', 'a', 't', 'o', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 
  'j', '\202', '\323', '\344', '\223', '\002', 'L', '*', 'G', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'c', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 
  'a', 't', 'o', 'r', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '3', '\220', '\234', '\'', '2', '\220', '\234', '\'', '4', '\220', 
  '\234', '\'', '7', '\220', '\234', '\'', '8', '\022', '\244', '\001', '\n', '\022', 'L', 'i', 's', 't', 'C', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 
  't', 'i', 'o', 'n', 's', '\022', '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 
  'C', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ')', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 
  'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', ':', '\202', '\323', '\344', '\223', '\002', '0', '\022', '.', '/', 
  'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 
  'r', '_', 'i', 'd', '}', '/', 'c', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'i', 'o', 'n', 's', '\230', '\234', '\'', '\003', '\022', 
  '\357', '\001', '\n', '\023', 'P', 'o', 's', 't', 'A', 'p', 'p', 'D', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 's', '\022', '(', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'A', 'p', 'p', 'D', 'u', 'p', 'l', 
  'i', 'c', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '*', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'A', 'p', 'p', 'D', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 
  's', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\201', '\001', '\202', '\323', '\344', '\223', '\002', 'K', '\"', 'F', '/', 'v', '2', '/', 'u', 
  's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', 
  '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 
  'd', '}', '/', 'd', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 
  '\016', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\032', '\220', '\234', '\'', '\n', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\004', '\220', '\234', '\'', '\005', 
  '\220', '\234', '\'', '%', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\022', '\220', '\234', '\'', '\023', '\022', '\245', '\001', '\n', '\023', 'L', 'i', 's', 't', 
  'A', 'p', 'p', 'D', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 's', '\022', '(', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'A', 'p', 'p', 'D', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 's', 
  'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '*', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 
  'l', 't', 'i', 'A', 'p', 'p', 'D', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 
  'e', '\"', '8', '\202', '\323', '\344', '\223', '\002', '.', '\022', ',', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'd', 'u', 'p', 'l', 'i', 'c', 'a', 
  't', 'i', 'o', 'n', 's', '\230', '\234', '\'', '\005', '\022', '\266', '\001', '\n', '\021', 'G', 'e', 't', 'A', 'p', 'p', 'D', 'u', 'p', 'l', 'i', 
  'c', 'a', 't', 'i', 'o', 'n', '\022', '&', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 
  'A', 'p', 'p', 'D', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '*', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'A', 'p', 'p', 'D', 'u', 'p', 'l', 
  'i', 'c', 'a', 't', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'M', '\202', '\323', '\344', '\223', '\002', 'C', '\022', 'A', 
  '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 
  'e', 'r', '_', 'i', 'd', '}', '/', 'd', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 's', '/', '{', 'a', 'p', 'p', '_', 
  'd', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', '_', 'i', 'd', '}', '\230', '\234', '\'', '\005', '\022', '\325', '\001', '\n', '\t', 'P', 
  'o', 's', 't', 'T', 'a', 's', 'k', 's', '\022', '\036', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 
  'o', 's', 't', 'T', 'a', 's', 'k', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\037', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'T', 'a', 's', 'k', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\206', 
  '\001', '\202', '\323', '\344', '\223', '\002', 'T', '\"', '?', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 't', 'a', 's', 'k', 's', ':', '\001', '*', 
  'Z', '\016', '\"', '\t', '/', 'v', '2', '/', 't', 'a', 's', 'k', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '7', '\220', 
  '\234', '\'', '8', '\220', '\234', '\'', '\005', '\220', '\234', '\'', '\003', '\220', '\234', '\'', 'r', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\023', '\220', '\234', 
  '\'', '\017', '\220', '\234', '\'', '%', '\220', '\234', '\'', '&', '\022', '\372', '\001', '\n', '\026', 'G', 'e', 't', 'T', 'a', 's', 'k', 'A', 'n', 'n', 
  'o', 't', 'a', 't', 'i', 'o', 'n', 'C', 'o', 'u', 'n', 't', '\022', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'G', 'e', 't', 'T', 'a', 's', 'k', 'C', 'o', 'u', 'n', 't', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '%', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'T', 'a', 's', 'k', 'C', 'o', 
  'u', 'n', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\225', '\001', '\202', '\323', '\344', '\223', '\002', '\206', '\001', '\022', '[', '/', 'v', 
  '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', 
  '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 
  'p', '_', 'i', 'd', '}', '/', 't', 'a', 's', 'k', 's', '/', '{', 't', 'a', 's', 'k', '_', 'i', 'd', '}', '/', 'a', 'n', 'n', 
  'o', 't', 'a', 't', 'i', 'o', 'n', 's', '/', 'c', 'o', 'u', 'n', 't', 'Z', '\'', '\022', '%', '/', 'v', '2', '/', 't', 'a', 's', 
  'k', 's', '/', '{', 't', 'a', 's', 'k', '_', 'i', 'd', '}', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', '/', 
  'c', 'o', 'u', 'n', 't', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '8', '\022', '\352', '\001', '\n', '\021', 'G', 'e', 't', 'T', 'a', 's', 'k', 
  'I', 'n', 'p', 'u', 't', 'C', 'o', 'u', 'n', 't', '\022', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'G', 'e', 't', 'T', 'a', 's', 'k', 'C', 'o', 'u', 'n', 't', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '%', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'T', 'a', 's', 'k', 'C', 'o', 'u', 'n', 
  't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\212', '\001', '\202', '\323', '\344', '\223', '\002', '|', '\022', 'V', '/', 'v', '2', '/', 'u', 
  's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', 
  '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 
  'd', '}', '/', 't', 'a', 's', 'k', 's', '/', '{', 't', 'a', 's', 'k', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', 
  '/', 'c', 'o', 'u', 'n', 't', 'Z', '\"', '\022', ' ', '/', 'v', '2', '/', 't', 'a', 's', 'k', 's', '/', '{', 't', 'a', 's', 'k', 
  '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', '/', 'c', 'o', 'u', 'n', 't', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '8', 
  '\022', '\314', '\001', '\n', '\007', 'G', 'e', 't', 'T', 'a', 's', 'k', '\022', '\034', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'G', 'e', 't', 'T', 'a', 's', 'k', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ' ', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'T', 'a', 's', 'k', 'R', 'e', 's', 'p', 'o', 'n', 's', 
  'e', '\"', '\200', '\001', '\202', '\323', '\344', '\223', '\002', 'b', '\022', 'I', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 
  'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 't', 'a', 's', 'k', 's', 
  '/', '{', 't', 'a', 's', 'k', '_', 'i', 'd', '}', 'Z', '\025', '\022', '\023', '/', 'v', '2', '/', 't', 'a', 's', 'k', 's', '/', '{', 
  't', 'a', 's', 'k', '_', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '8', '\220', '\234', '\'', 'r', '\220', '\234', '\'', '\013', '\220', 
  '\234', '\'', '\023', '\220', '\234', '\'', '\017', '\022', '\272', '\001', '\n', '\t', 'L', 'i', 's', 't', 'T', 'a', 's', 'k', 's', '\022', '\036', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'T', 'a', 's', 'k', 's', 'R', 'e', 'q', 'u', 
  'e', 's', 't', '\032', '\037', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'T', 
  'a', 's', 'k', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'l', '\202', '\323', '\344', '\223', '\002', 'N', '\022', '?', '/', 'v', '2', '/', 
  'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 
  'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 
  'i', 'd', '}', '/', 't', 'a', 's', 'k', 's', 'Z', '\013', '\022', '\t', '/', 'v', '2', '/', 't', 'a', 's', 'k', 's', '\230', '\234', '\'', 
  '\002', '\220', '\234', '\'', '8', '\220', '\234', '\'', 'r', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\023', '\220', '\234', '\'', '\017', '\022', '\323', '\001', '\n', 
  '\n', 'P', 'a', 't', 'c', 'h', 'T', 'a', 's', 'k', 's', '\022', '\037', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'P', 'a', 't', 'c', 'h', 'T', 'a', 's', 'k', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\037', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'T', 'a', 's', 'k', 'R', 'e', 's', 'p', 'o', 'n', 
  's', 'e', '\"', '\202', '\001', '\202', '\323', '\344', '\223', '\002', 'T', '2', '?', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', 
  '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 't', 'a', 's', 'k', 
  's', ':', '\001', '*', 'Z', '\016', '2', '\t', '/', 'v', '2', '/', 't', 'a', 's', 'k', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', 
  '\234', '\'', '7', '\220', '\234', '\'', '8', '\220', '\234', '\'', '\005', '\220', '\234', '\'', 'r', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\023', '\220', '\234', 
  '\'', '\017', '\220', '\234', '\'', '%', '\220', '\234', '\'', '&', '\022', '\276', '\001', '\n', '\013', 'D', 'e', 'l', 'e', 't', 'e', 'T', 'a', 's', 'k', 
  's', '\022', ' ', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'T', 'a', 
  's', 'k', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'j', '\202', '\323', '\344', 
  '\223', '\002', 'T', '*', '?', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 't', 'a', 's', 'k', 's', ':', '\001', '*', 'Z', '\016', '*', '\t', 
  '/', 'v', '2', '/', 't', 'a', 's', 'k', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '7', '\220', '\234', '\'', '8', '\220', 
  '\234', '\'', 'F', '\022', '\361', '\001', '\n', '\017', 'P', 'o', 's', 't', 'L', 'a', 'b', 'e', 'l', 'O', 'r', 'd', 'e', 'r', 's', '\022', '$', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'L', 'a', 'b', 'e', 'l', 'O', 'r', 
  'd', 'e', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '%', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'M', 'u', 'l', 't', 'i', 'L', 'a', 'b', 'e', 'l', 'O', 'r', 'd', 'e', 'r', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', 
  '\"', '\220', '\001', '\202', '\323', '\344', '\223', '\002', 'b', '\"', 'F', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'l', 'a', 'b', 'e', 'l', '_', 
  'o', 'r', 'd', 'e', 'r', 's', ':', '\001', '*', 'Z', '\025', '\"', '\020', '/', 'v', '2', '/', 'l', 'a', 'b', 'e', 'l', '_', 'o', 'r', 
  'd', 'e', 'r', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'C', '\220', '\234', '\'', 'D', '\220', '\234', '\'', '7', '\220', '\234', 
  '\'', '8', '\220', '\234', '\'', '\005', '\220', '\234', '\'', 'r', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\023', '\220', '\234', '\'', '\017', '\022', '\362', '\001', 
  '\n', '\r', 'G', 'e', 't', 'L', 'a', 'b', 'e', 'l', 'O', 'r', 'd', 'e', 'r', '\022', '\"', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'L', 'a', 'b', 'e', 'l', 'O', 'r', 'd', 'e', 'r', 'R', 'e', 'q', 'u', 'e', 's', 
  't', '\032', '&', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'L', 'a', 
  'b', 'e', 'l', 'O', 'r', 'd', 'e', 'r', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\224', '\001', '\202', '\323', '\344', '\223', '\002', '~', 
  '\022', 'W', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 
  'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'l', 'a', 'b', 'e', 'l', '_', 'o', 'r', 'd', 'e', 'r', 's', '/', '{', 'l', 
  'a', 'b', 'e', 'l', '_', 'o', 'r', 'd', 'e', 'r', '_', 'i', 'd', '}', 'Z', '#', '\022', '!', '/', 'v', '2', '/', 'l', 'a', 'b', 
  'e', 'l', '_', 'o', 'r', 'd', 'e', 'r', 's', '/', '{', 'l', 'a', 'b', 'e', 'l', '_', 'o', 'r', 'd', 'e', 'r', '_', 'i', 'd', 
  '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'C', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '8', '\022', '\322', '\001', '\n', '\017', 'L', 'i', 's', 
  't', 'L', 'a', 'b', 'e', 'l', 'O', 'r', 'd', 'e', 'r', 's', '\022', '$', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'L', 'i', 's', 't', 'L', 'a', 'b', 'e', 'l', 'O', 'r', 'd', 'e', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', 
  '\032', '%', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'L', 'a', 'b', 'e', 
  'l', 'O', 'r', 'd', 'e', 'r', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'r', '\202', '\323', '\344', '\223', '\002', '\\', '\022', 'F', '/', 
  'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 
  'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 
  'p', 'p', '_', 'i', 'd', '}', '/', 'l', 'a', 'b', 'e', 'l', '_', 'o', 'r', 'd', 'e', 'r', 's', 'Z', '\022', '\022', '\020', '/', 'v', 
  '2', '/', 'l', 'a', 'b', 'e', 'l', '_', 'o', 'r', 'd', 'e', 'r', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'C', '\220', '\234', '\'', 
  '\013', '\220', '\234', '\'', '8', '\022', '\347', '\001', '\n', '\020', 'P', 'a', 't', 'c', 'h', 'L', 'a', 'b', 'e', 'l', 'O', 'r', 'd', 'e', 'r', 
  's', '\022', '%', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'L', 'a', 'b', 
  'e', 'l', 'O', 'r', 'd', 'e', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '%', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'L', 'a', 'b', 'e', 'l', 'O', 'r', 'd', 'e', 'r', 'R', 'e', 's', 'p', 
  'o', 'n', 's', 'e', '\"', '\204', '\001', '\202', '\323', '\344', '\223', '\002', 'b', '2', 'F', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', 
  '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 
  's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'l', 'a', 
  'b', 'e', 'l', '_', 'o', 'r', 'd', 'e', 'r', 's', ':', '\001', '*', 'Z', '\025', '2', '\020', '/', 'v', '2', '/', 'l', 'a', 'b', 'e', 
  'l', '_', 'o', 'r', 'd', 'e', 'r', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'C', '\220', '\234', '\'', 'D', '\220', '\234', 
  '\'', '\013', '\220', '\234', '\'', '7', '\220', '\234', '\'', '8', '\220', '\234', '\'', 'F', '\022', '\341', '\001', '\n', '\021', 'D', 'e', 'l', 'e', 't', 'e', 
  'L', 'a', 'b', 'e', 'l', 'O', 'r', 'd', 'e', 'r', 's', '\022', '&', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'L', 'a', 'b', 'e', 'l', 'O', 'r', 'd', 'e', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 
  't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 
  'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\200', '\001', '\202', '\323', '\344', '\223', '\002', 'b', '*', 'F', '/', 'v', '2', 
  '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 
  'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', 
  '_', 'i', 'd', '}', '/', 'l', 'a', 'b', 'e', 'l', '_', 'o', 'r', 'd', 'e', 'r', 's', ':', '\001', '*', 'Z', '\025', '*', '\020', '/', 
  'v', '2', '/', 'l', 'a', 'b', 'e', 'l', '_', 'o', 'r', 'd', 'e', 'r', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 
  'E', '\220', '\234', '\'', 'C', '\220', '\234', '\'', 'D', '\220', '\234', '\'', '7', '\220', '\234', '\'', '8', '\022', '\356', '\001', '\n', '\016', 'P', 'o', 's', 
  't', 'C', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 's', '\022', '#', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'P', 'o', 's', 't', 'C', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '$', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'l', 'l', 'e', 'c', 
  't', 'o', 'r', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\220', '\001', '\202', '\323', '\344', '\223', '\002', '^', '\"', 'D', '/', 'v', '2', 
  '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 
  'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', 
  '_', 'i', 'd', '}', '/', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 's', ':', '\001', '*', 'Z', '\023', '\"', '\016', '/', 'v', '2', 
  '/', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\004', '\220', '\234', '\'', 
  '%', '\220', '\234', '\'', '&', '\220', '\234', '\'', ')', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\004', '\220', '\234', '\'', '\005', '\220', '\234', '\'', '\017', 
  '\220', '\234', '\'', '\002', '\220', '\234', '\'', '\023', '\022', '\337', '\001', '\n', '\014', 'G', 'e', 't', 'C', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 
  '\022', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'C', 'o', 'l', 'l', 'e', 'c', 
  't', 'o', 'r', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '%', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'S', 'i', 'n', 'g', 'l', 'e', 'C', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 
  '\204', '\001', '\202', '\323', '\344', '\223', '\002', 'v', '\022', 'S', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'c', 'o', 'l', 'l', 'e', 'c', 't', 
  'o', 'r', 's', '/', '{', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', '_', 'i', 'd', '}', 'Z', '\037', '\022', '\035', '/', 'v', '2', 
  '/', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 's', '/', '{', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', '_', 'i', 'd', 
  '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '*', '\022', '\303', '\001', '\n', '\016', 'L', 'i', 's', 't', 'C', 'o', 'l', 'l', 'e', 'c', 't', 
  'o', 'r', 's', '\022', '#', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'C', 'o', 
  'l', 'l', 'e', 'c', 't', 'o', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '$', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 'R', 'e', 's', 'p', 'o', 
  'n', 's', 'e', '\"', 'f', '\202', '\323', '\344', '\223', '\002', 'X', '\022', 'D', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', 
  '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'c', 'o', 'l', 'l', 
  'e', 'c', 't', 'o', 'r', 's', 'Z', '\020', '\022', '\016', '/', 'v', '2', '/', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 's', '\230', 
  '\234', '\'', '\002', '\220', '\234', '\'', '*', '\022', '\317', '\001', '\n', '\017', 'P', 'a', 't', 'c', 'h', 'C', 'o', 'l', 'l', 'e', 'c', 't', 'o', 
  'r', 's', '\022', '$', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'C', 'o', 
  'l', 'l', 'e', 'c', 't', 'o', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '$', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 'R', 'e', 's', 'p', 'o', 
  'n', 's', 'e', '\"', 'p', '\202', '\323', '\344', '\223', '\002', '^', '2', 'D', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', 
  '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'c', 'o', 'l', 'l', 
  'e', 'c', 't', 'o', 'r', 's', ':', '\001', '*', 'Z', '\023', '2', '\016', '/', 'v', '2', '/', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'o', 
  'r', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', ')', '\220', '\234', '\'', '*', '\022', '\322', '\001', '\n', '\020', 'D', 'e', 'l', 
  'e', 't', 'e', 'C', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 's', '\022', '%', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'C', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 's', 'R', 'e', 'q', 'u', 'e', 
  's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 
  'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 't', '\202', '\323', '\344', '\223', '\002', '^', '*', 'D', '/', 'v', '2', 
  '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 
  'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', 
  '_', 'i', 'd', '}', '/', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 's', ':', '\001', '*', 'Z', '\023', '*', '\016', '/', 'v', '2', 
  '/', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', ')', '\220', '\234', '\'', 
  '+', '\220', '\234', '\'', '*', '\022', '\311', '\001', '\n', '\016', 'P', 'o', 's', 't', 'S', 't', 'a', 't', 'V', 'a', 'l', 'u', 'e', 's', '\022', 
  '#', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'S', 't', 'a', 't', 'V', 'a', 
  'l', 'u', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '$', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'M', 'u', 'l', 't', 'i', 'S', 't', 'a', 't', 'V', 'a', 'l', 'u', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 
  'l', '\202', '\323', '\344', '\223', '\002', 'b', '\"', 'F', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 's', 't', 'a', 't', 's', '/', 'v', 'a', 
  'l', 'u', 'e', 's', ':', '\001', '*', 'Z', '\025', '\"', '\020', '/', 'v', '2', '/', 's', 't', 'a', 't', 's', '/', 'v', 'a', 'l', 'u', 
  'e', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\022', '\371', '\001', '\n', '\027', 'P', 'o', 's', 't', 'S', 't', 'a', 't', 'V', 'a', 'l', 
  'u', 'e', 's', 'A', 'g', 'g', 'r', 'e', 'g', 'a', 't', 'e', '\022', ',', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'P', 'o', 's', 't', 'S', 't', 'a', 't', 'V', 'a', 'l', 'u', 'e', 's', 'A', 'g', 'g', 'r', 'e', 'g', 'a', 't', 
  'e', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '-', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 
  'u', 'l', 't', 'i', 'S', 't', 'a', 't', 'V', 'a', 'l', 'u', 'e', 'A', 'g', 'g', 'r', 'e', 'g', 'a', 't', 'e', 'R', 'e', 's', 
  'p', 'o', 'n', 's', 'e', '\"', '\200', '\001', '\202', '\323', '\344', '\223', '\002', 'v', '\"', 'P', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', 
  '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 
  'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 's', 
  't', 'a', 't', 's', '/', 'v', 'a', 'l', 'u', 'e', 's', '/', 'a', 'g', 'g', 'r', 'e', 'g', 'a', 't', 'e', ':', '\001', '*', 'Z', 
  '\037', '\"', '\032', '/', 'v', '2', '/', 's', 't', 'a', 't', 's', '/', 'v', 'a', 'l', 'u', 'e', 's', '/', 'a', 'g', 'g', 'r', 'e', 
  'g', 'a', 't', 'e', ':', '\001', '*', '\230', '\234', '\'', '\002', '\022', '\343', '\001', '\n', '\027', 'P', 'o', 's', 't', 'T', 'r', 'e', 'n', 'd', 
  'i', 'n', 'g', 'M', 'e', 't', 'r', 'i', 'c', 's', 'V', 'i', 'e', 'w', '\022', ',', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'T', 'r', 'e', 'n', 'd', 'i', 'n', 'g', 'M', 'e', 't', 'r', 'i', 'c', 's', 'V', 
  'i', 'e', 'w', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'w', '\202', '\323', '\344', 
  '\223', '\002', 'm', '\"', 'h', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 't', 'r', 'e', 'n', 'd', 'i', 'n', 'g', '_', 'm', 'e', 't', 
  'r', 'i', 'c', 's', '/', 'v', 'i', 'e', 'w', 's', '/', '{', 'v', 'i', 'e', 'w', '_', 't', 'y', 'p', 'e', '}', '/', '{', 'o', 
  'b', 'j', 'e', 'c', 't', '_', 'i', 'd', '}', ':', '\001', '*', '\230', '\234', '\'', '\002', '\022', '\217', '\002', '\n', '\030', 'L', 'i', 's', 't', 
  'T', 'r', 'e', 'n', 'd', 'i', 'n', 'g', 'M', 'e', 't', 'r', 'i', 'c', 's', 'V', 'i', 'e', 'w', 's', '\022', '-', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'T', 'r', 'e', 'n', 'd', 'i', 'n', 'g', 'M', 'e', 
  't', 'r', 'i', 'c', 's', 'V', 'i', 'e', 'w', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '.', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'T', 'r', 'e', 'n', 'd', 'i', 'n', 'g', 'M', 'e', 't', 'r', 
  'i', 'c', 's', 'V', 'i', 'e', 'w', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\223', '\001', '\202', '\323', '\344', '\223', '\002', '\210', '\001', 
  '\022', '\\', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 
  'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 't', 'r', 'e', 'n', 'd', 'i', 'n', 'g', '_', 'm', 'e', 't', 'r', 'i', 'c', 
  's', '/', 'v', 'i', 'e', 'w', 's', '/', '{', 'v', 'i', 'e', 'w', '_', 't', 'y', 'p', 'e', '}', 'Z', '(', '\022', '&', '/', 'v', 
  '2', '/', 't', 'r', 'e', 'n', 'd', 'i', 'n', 'g', '_', 'm', 'e', 't', 'r', 'i', 'c', 's', '/', 'v', 'i', 'e', 'w', 's', '/', 
  '{', 'v', 'i', 'e', 'w', '_', 't', 'y', 'p', 'e', '}', '\230', '\234', '\'', '\002', '\022', '\256', '\001', '\n', '\t', 'G', 'e', 't', 'M', 'o', 
  'd', 'u', 'l', 'e', '\022', '\036', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'M', 'o', 
  'd', 'u', 'l', 'e', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\"', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'M', 'o', 'd', 'u', 'l', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', ']', '\202', 
  '\323', '\344', '\223', '\002', 'O', '\022', 'M', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'u', 'l', 'e', 's', '/', '{', 'm', 
  'o', 'd', 'u', 'l', 'e', '_', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'm', '\022', '\340', '\001', '\n', '\013', 'L', 'i', 's', 
  't', 'M', 'o', 'd', 'u', 'l', 'e', 's', '\022', ' ', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 
  'i', 's', 't', 'M', 'o', 'd', 'u', 'l', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 'u', 'l', 'e', 'R', 'e', 's', 'p', 'o', 'n', 
  's', 'e', '\"', '\213', '\001', '\202', '\323', '\344', '\223', '\002', '}', '\022', 'A', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', 
  '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'u', 
  'l', 'e', 's', 'Z', ')', '\022', '\'', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'u', 'l', 'e', 's', 'Z', '\r', '\022', '\013', 
  '/', 'v', '2', '/', 'm', 'o', 'd', 'u', 'l', 'e', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'm', '\022', '\254', '\001', '\n', '\013', 'P', 
  'o', 's', 't', 'M', 'o', 'd', 'u', 'l', 'e', 's', '\022', ' ', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'P', 'o', 's', 't', 'M', 'o', 'd', 'u', 'l', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 'u', 'l', 'e', 'R', 'e', 's', 'p', 
  'o', 'n', 's', 'e', '\"', 'X', '\202', '\323', '\344', '\223', '\002', 'F', '\"', 'A', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 
  'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', 
  '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 
  'u', 'l', 'e', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'l', '\220', '\234', '\'', 'm', '\022', '\256', '\001', '\n', '\014', 'P', 
  'a', 't', 'c', 'h', 'M', 'o', 'd', 'u', 'l', 'e', 's', '\022', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'P', 'a', 't', 'c', 'h', 'M', 'o', 'd', 'u', 'l', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 'u', 'l', 'e', 'R', 'e', 
  's', 'p', 'o', 'n', 's', 'e', '\"', 'X', '\202', '\323', '\344', '\223', '\002', 'F', '2', 'A', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', 
  '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 
  'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 
  'o', 'd', 'u', 'l', 'e', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'l', '\220', '\234', '\'', 'm', '\022', '\264', '\001', '\n', 
  '\r', 'D', 'e', 'l', 'e', 't', 'e', 'M', 'o', 'd', 'u', 'l', 'e', 's', '\022', '\"', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'M', 'o', 'd', 'u', 'l', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', 
  '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 
  's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\\', '\202', '\323', '\344', '\223', '\002', 'F', '*', 'A', '/', 'v', '2', '/', 'u', 
  's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', 
  '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 
  'd', '}', '/', 'm', 'o', 'd', 'u', 'l', 'e', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'l', '\220', '\234', '\'', 'n', 
  '\220', '\234', '\'', 'm', '\022', '\350', '\001', '\n', '\020', 'G', 'e', 't', 'M', 'o', 'd', 'u', 'l', 'e', 'V', 'e', 'r', 's', 'i', 'o', 'n', 
  '\022', '%', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'M', 'o', 'd', 'u', 'l', 'e', 
  'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ')', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'M', 'o', 'd', 'u', 'l', 'e', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 
  'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\201', '\001', '\202', '\323', '\344', '\223', '\002', 's', '\022', 'q', '/', 'v', '2', '/', 'u', 's', 'e', 
  'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 
  'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', 
  '/', 'm', 'o', 'd', 'u', 'l', 'e', 's', '/', '{', 'm', 'o', 'd', 'u', 'l', 'e', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'u', 
  'l', 'e', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'm', 'o', 'd', 'u', 'l', 'e', '_', 'v', 'e', 'r', 's', 'i', 
  'o', 'n', '_', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'm', '\022', '\326', '\001', '\n', '\022', 'L', 'i', 's', 't', 'M', 'o', 
  'd', 'u', 'l', 'e', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', '\022', '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'L', 'i', 's', 't', 'M', 'o', 'd', 'u', 'l', 'e', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 
  'e', 's', 't', '\032', '(', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'M', 
  'o', 'd', 'u', 'l', 'e', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'm', '\202', '\323', '\344', 
  '\223', '\002', '_', '\022', ']', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'u', 'l', 'e', 's', '/', '{', 'm', 'o', 'd', 
  'u', 'l', 'e', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'u', 'l', 'e', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '\230', '\234', 
  '\'', '\002', '\220', '\234', '\'', 'm', '\022', '\335', '\001', '\n', '\022', 'P', 'o', 's', 't', 'M', 'o', 'd', 'u', 'l', 'e', 'V', 'e', 'r', 's', 
  'i', 'o', 'n', 's', '\022', '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'M', 
  'o', 'd', 'u', 'l', 'e', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '(', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 'u', 'l', 'e', 'V', 'e', 'r', 
  's', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 't', '\202', '\323', '\344', '\223', '\002', 'b', '\"', ']', '/', 'v', '2', 
  '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 
  'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', 
  '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'u', 'l', 'e', 's', '/', '{', 'm', 'o', 'd', 'u', 'l', 'e', '_', 'i', 'd', '}', '/', 
  'm', 'o', 'd', 'u', 'l', 'e', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 
  'l', '\220', '\234', '\'', 'm', '\022', '\336', '\001', '\n', '\024', 'D', 'e', 'l', 'e', 't', 'e', 'M', 'o', 'd', 'u', 'l', 'e', 'V', 'e', 'r', 
  's', 'i', 'o', 'n', 's', '\022', ')', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 
  't', 'e', 'M', 'o', 'd', 'u', 'l', 'e', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 
  'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'x', '\202', '\323', '\344', '\223', '\002', 'b', '*', ']', '/', 'v', '2', '/', 'u', 's', 'e', 
  'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 
  'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', 
  '/', 'm', 'o', 'd', 'u', 'l', 'e', 's', '/', '{', 'm', 'o', 'd', 'u', 'l', 'e', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'u', 
  'l', 'e', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'l', '\220', '\234', '\'', 
  'n', '\220', '\234', '\'', 'm', '\022', '\213', '\002', '\n', '\031', 'G', 'e', 't', 'I', 'n', 's', 't', 'a', 'l', 'l', 'e', 'd', 'M', 'o', 'd', 
  'u', 'l', 'e', 'V', 'e', 'r', 's', 'i', 'o', 'n', '\022', '.', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'G', 'e', 't', 'I', 'n', 's', 't', 'a', 'l', 'l', 'e', 'd', 'M', 'o', 'd', 'u', 'l', 'e', 'V', 'e', 'r', 's', 'i', 'o', 
  'n', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '2', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 
  'i', 'n', 'g', 'l', 'e', 'I', 'n', 's', 't', 'a', 'l', 'l', 'e', 'd', 'M', 'o', 'd', 'u', 'l', 'e', 'V', 'e', 'r', 's', 'i', 
  'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\211', '\001', '\202', '\323', '\344', '\223', '\002', 's', '\022', 'q', '/', 'v', '2', '/', 
  'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 
  'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 
  'i', 'd', '}', '/', 'i', 'n', 's', 't', 'a', 'l', 'l', 'e', 'd', '_', 'm', 'o', 'd', 'u', 'l', 'e', '_', 'v', 'e', 'r', 's', 
  'i', 'o', 'n', 's', '/', '{', 'i', 'n', 's', 't', 'a', 'l', 'l', 'e', 'd', '_', 'm', 'o', 'd', 'u', 'l', 'e', '_', 'v', 'e', 
  'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', '\230', '\234', '\'', '\005', '\220', '\234', '\'', 'p', '\220', '\234', '\'', 'm', '\220', '\234', '\'', '0', 
  '\022', '\357', '\001', '\n', '\033', 'L', 'i', 's', 't', 'I', 'n', 's', 't', 'a', 'l', 'l', 'e', 'd', 'M', 'o', 'd', 'u', 'l', 'e', 'V', 
  'e', 'r', 's', 'i', 'o', 'n', 's', '\022', '0', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 
  's', 't', 'I', 'n', 's', 't', 'a', 'l', 'l', 'e', 'd', 'M', 'o', 'd', 'u', 'l', 'e', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 
  'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '1', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 
  'l', 't', 'i', 'I', 'n', 's', 't', 'a', 'l', 'l', 'e', 'd', 'M', 'o', 'd', 'u', 'l', 'e', 'V', 'e', 'r', 's', 'i', 'o', 'n', 
  'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'k', '\202', '\323', '\344', '\223', '\002', 'U', '\022', 'S', '/', 'v', '2', '/', 'u', 's', 'e', 
  'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 
  'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', 
  '/', 'i', 'n', 's', 't', 'a', 'l', 'l', 'e', 'd', '_', 'm', 'o', 'd', 'u', 'l', 'e', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', 
  's', '\230', '\234', '\'', '\005', '\220', '\234', '\'', 'p', '\220', '\234', '\'', 'm', '\220', '\234', '\'', '0', '\022', '\366', '\001', '\n', '\033', 'P', 'o', 's', 
  't', 'I', 'n', 's', 't', 'a', 'l', 'l', 'e', 'd', 'M', 'o', 'd', 'u', 'l', 'e', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', '\022', 
  '0', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'I', 'n', 's', 't', 'a', 'l', 
  'l', 'e', 'd', 'M', 'o', 'd', 'u', 'l', 'e', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', 
  '1', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'I', 'n', 's', 't', 'a', 
  'l', 'l', 'e', 'd', 'M', 'o', 'd', 'u', 'l', 'e', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', 
  '\"', 'r', '\202', '\323', '\344', '\223', '\002', 'X', '\"', 'S', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'i', 'n', 's', 't', 'a', 'l', 'l', 
  'e', 'd', '_', 'm', 'o', 'd', 'u', 'l', 'e', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', ':', '\001', '*', '\230', '\234', '\'', '\005', 
  '\220', '\234', '\'', 'o', '\220', '\234', '\'', 'p', '\220', '\234', '\'', 'm', '\220', '\234', '\'', '-', '\022', '\366', '\001', '\n', '\035', 'D', 'e', 'l', 'e', 
  't', 'e', 'I', 'n', 's', 't', 'a', 'l', 'l', 'e', 'd', 'M', 'o', 'd', 'u', 'l', 'e', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 
  '\022', '2', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'I', 'n', 's', 
  't', 'a', 'l', 'l', 'e', 'd', 'M', 'o', 'd', 'u', 'l', 'e', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 
  's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 
  'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '~', '\202', '\323', '\344', '\223', '\002', 'X', '*', 'S', '/', 'v', '2', 
  '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 
  'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', 
  '_', 'i', 'd', '}', '/', 'i', 'n', 's', 't', 'a', 'l', 'l', 'e', 'd', '_', 'm', 'o', 'd', 'u', 'l', 'e', '_', 'v', 'e', 'r', 
  's', 'i', 'o', 'n', 's', ':', '\001', '*', '\230', '\234', '\'', '\005', '\220', '\234', '\'', 'o', '\220', '\234', '\'', 'p', '\220', '\234', '\'', 'q', '\220', 
  '\234', '\'', 'm', '\220', '\234', '\'', '1', '\220', '\234', '\'', '/', '\220', '\234', '\'', '0', '\022', '\225', '\002', '\n', '\036', 'P', 'o', 's', 't', 'I', 
  'n', 's', 't', 'a', 'l', 'l', 'e', 'd', 'M', 'o', 'd', 'u', 'l', 'e', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'K', 'e', 'y', 
  '\022', '3', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'I', 'n', 's', 't', 'a', 
  'l', 'l', 'e', 'd', 'M', 'o', 'd', 'u', 'l', 'e', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'K', 'e', 'y', 'R', 'e', 'q', 'u', 
  'e', 's', 't', '\032', '\037', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 
  'K', 'e', 'y', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\234', '\001', '\202', '\323', '\344', '\223', '\002', 'z', '\"', 'u', '/', 'v', '2', 
  '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 
  'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', 
  '_', 'i', 'd', '}', '/', 'i', 'n', 's', 't', 'a', 'l', 'l', 'e', 'd', '_', 'm', 'o', 'd', 'u', 'l', 'e', '_', 'v', 'e', 'r', 
  's', 'i', 'o', 'n', 's', '/', '{', 'i', 'n', 's', 't', 'a', 'l', 'l', 'e', 'd', '_', 'm', 'o', 'd', 'u', 'l', 'e', '_', 'v', 
  'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', '/', 'k', 'e', 'y', ':', '\001', '*', '\230', '\234', '\'', '\005', '\220', '\234', '\'', 'o', 
  '\220', '\234', '\'', 'p', '\220', '\234', '\'', 'm', '\220', '\234', '\'', '-', '\220', '\234', '\'', '/', '\220', '\234', '\'', '0', '\022', '\361', '\001', '\n', '\022', 
  'P', 'o', 's', 't', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', '\022', '\'', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 
  'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ')', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'M', 'u', 'l', 't', 'i', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 's', 'p', 'o', 'n', 
  's', 'e', '\"', '\206', '\001', '\202', '\323', '\344', '\223', '\002', 'h', '\"', 'I', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', 
  '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'b', 'u', 'l', 'k', 
  '_', 'o', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', ':', '\001', '*', 'Z', '\030', '\"', '\023', '/', 'v', '2', '/', 'b', 'u', 'l', 
  'k', '_', 'o', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'z', '\220', '\234', 
  '\'', 'y', '\220', '\234', '\'', '%', '\220', '\234', '\'', '&', '\220', '\234', '\'', '(', '\022', '\332', '\001', '\n', '\022', 'L', 'i', 's', 't', 'B', 'u', 
  'l', 'k', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', '\022', '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'L', 'i', 's', 't', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 
  'e', 's', 't', '\032', ')', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'B', 
  'u', 'l', 'k', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'p', '\202', '\323', 
  '\344', '\223', '\002', 'b', '\022', 'I', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', 
  '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 
  'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'b', 'u', 'l', 'k', '_', 'o', 'p', 'e', 'r', 'a', 't', 
  'i', 'o', 'n', 's', 'Z', '\025', '\022', '\023', '/', 'v', '2', '/', 'b', 'u', 'l', 'k', '_', 'o', 'p', 'e', 'r', 'a', 't', 'i', 'o', 
  'n', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'z', '\022', '\341', '\001', '\n', '\020', 'G', 'e', 't', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 
  'r', 'a', 't', 'i', 'o', 'n', '\022', '%', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 
  'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '*', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 
  'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'z', '\202', '\323', '\344', '\223', '\002', 'l', '\022', 'N', '/', 
  'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 
  'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 
  'p', 'p', '_', 'i', 'd', '}', '/', 'b', 'u', 'l', 'k', '_', 'o', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', '/', '{', 'i', 
  'd', '}', 'Z', '\032', '\022', '\030', '/', 'v', '2', '/', 'b', 'u', 'l', 'k', '_', 'o', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', 
  '/', '{', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'z', '\022', '\347', '\001', '\n', '\024', 'C', 'a', 'n', 'c', 'e', 'l', 'B', 
  'u', 'l', 'k', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', '\022', '(', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'C', 'a', 'n', 'c', 'e', 'l', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 'R', 'e', 
  'q', 'u', 'e', 's', 't', '\032', ')', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 
  'i', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'z', 
  '\202', '\323', '\344', '\223', '\002', 'h', '2', 'I', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 
  'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'b', 'u', 'l', 'k', '_', 'o', 'p', 'e', 'r', 
  'a', 't', 'i', 'o', 'n', 's', ':', '\001', '*', 'Z', '\030', '2', '\023', '/', 'v', '2', '/', 'b', 'u', 'l', 'k', '_', 'o', 'p', 'e', 
  'r', 'a', 't', 'i', 'o', 'n', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'y', '\220', '\234', '\'', 'z', '\022', '\360', '\001', 
  '\n', '\024', 'D', 'e', 'l', 'e', 't', 'e', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', '\022', '(', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'B', 'u', 'l', 'k', 'O', 'p', 
  'e', 'r', 'a', 't', 'i', 'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 
  '\212', '\001', '\202', '\323', '\344', '\223', '\002', 'h', '*', 'I', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'b', 'u', 'l', 'k', '_', 'o', 'p', 
  'e', 'r', 'a', 't', 'i', 'o', 'n', 's', ':', '\001', '*', 'Z', '\030', '*', '\023', '/', 'v', '2', '/', 'b', 'u', 'l', 'k', '_', 'o', 
  'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '&', '\220', '\234', '\'', '%', '\220', 
  '\234', '\'', '(', '\220', '\234', '\'', 'y', '\220', '\234', '\'', 'z', '\220', '\234', '\'', '{', '\022', '\256', '\002', '\n', '\034', 'G', 'e', 't', 'D', 'a', 
  't', 'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 't', 's', 'S', 'e', 'a', 'r', 'c', 'h', 'A', 'd', 'd', 'J', 'o', 'b', '\022', '1', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 
  'n', 'p', 'u', 't', 's', 'S', 'e', 'a', 'r', 'c', 'h', 'A', 'd', 'd', 'J', 'o', 'b', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', 
  '5', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'D', 'a', 't', 'a', 
  's', 'e', 't', 'I', 'n', 'p', 'u', 't', 's', 'S', 'e', 'a', 'r', 'c', 'h', 'A', 'd', 'd', 'J', 'o', 'b', 'R', 'e', 's', 'p', 
  'o', 'n', 's', 'e', '\"', '\243', '\001', '\202', '\323', '\344', '\223', '\002', '\224', '\001', '\022', 'b', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', 
  '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 
  'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'd', 
  'a', 't', 'a', 's', 'e', 't', 's', '/', 'i', 'n', 'p', 'u', 't', 's', '/', 's', 'e', 'a', 'r', 'c', 'h', '_', 'a', 'd', 'd', 
  '/', 'j', 'o', 'b', 's', '/', '{', 'j', 'o', 'b', '_', 'i', 'd', '}', 'Z', '.', '\022', ',', '/', 'v', '2', '/', 'd', 'a', 't', 
  'a', 's', 'e', 't', 's', '/', 'i', 'n', 'p', 'u', 't', 's', '/', 's', 'e', 'a', 'r', 'c', 'h', '_', 'a', 'd', 'd', '/', 'j', 
  'o', 'b', 's', '/', '{', 'j', 'o', 'b', '_', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'i', '\022', '\326', '\001', '\n', '\021', 
  'L', 'i', 's', 't', 'I', 'n', 'p', 'u', 't', 's', 'A', 'd', 'd', 'J', 'o', 'b', 's', '\022', '&', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'I', 'n', 'p', 'u', 't', 's', 'A', 'd', 'd', 'J', 'o', 'b', 's', 
  'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 
  'l', 't', 'i', 'I', 'n', 'p', 'u', 't', 's', 'A', 'd', 'd', 'J', 'o', 'b', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'p', 
  '\202', '\323', '\344', '\223', '\002', 'b', '\022', 'I', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 
  'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', '/', 'j', 'o', 
  'b', 's', '/', 'a', 'd', 'd', 'Z', '\025', '\022', '\023', '/', 'v', '2', '/', 'i', 'n', 'p', 'u', 't', 's', '/', 'j', 'o', 'b', 's', 
  '/', 'a', 'd', 'd', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\005', '\022', '\335', '\001', '\n', '\017', 'G', 'e', 't', 'I', 'n', 'p', 'u', 't', 
  's', 'A', 'd', 'd', 'J', 'o', 'b', '\022', '$', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 
  't', 'I', 'n', 'p', 'u', 't', 's', 'A', 'd', 'd', 'J', 'o', 'b', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '(', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'I', 'n', 'p', 'u', 't', 's', 'A', 'd', 
  'd', 'J', 'o', 'b', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'z', '\202', '\323', '\344', '\223', '\002', 'l', '\022', 'N', '/', 'v', '2', 
  '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 
  'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', 
  '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', '/', 'j', 'o', 'b', 's', '/', 'a', 'd', 'd', '/', '{', 'i', 'd', '}', 
  'Z', '\032', '\022', '\030', '/', 'v', '2', '/', 'i', 'n', 'p', 'u', 't', 's', '/', 'j', 'o', 'b', 's', '/', 'a', 'd', 'd', '/', '{', 
  'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\005', '\022', '\300', '\001', '\n', '\013', 'P', 'o', 's', 't', 'U', 'p', 'l', 'o', 'a', 
  'd', 's', '\022', ' ', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'U', 'p', 'l', 
  'o', 'a', 'd', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'M', 'u', 'l', 't', 'i', 'U', 'p', 'l', 'o', 'a', 'd', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'l', '\202', '\323', 
  '\344', '\223', '\002', 'X', '\"', 'A', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', 
  '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 
  'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'u', 'p', 'l', 'o', 'a', 'd', 's', ':', '\001', '*', 'Z', 
  '\020', '\"', '\013', '/', 'v', '2', '/', 'u', 'p', 'l', 'o', 'a', 'd', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\201', 
  '\001', '\220', '\234', '\'', '\200', '\001', '\022', '\210', '\002', '\n', '\025', 'P', 'u', 't', 'U', 'p', 'l', 'o', 'a', 'd', 'C', 'o', 'n', 't', 'e', 
  'n', 't', 'P', 'a', 'r', 't', 's', '\022', '*', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'u', 
  't', 'U', 'p', 'l', 'o', 'a', 'd', 'C', 'o', 'n', 't', 'e', 'n', 't', 'P', 'a', 'r', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 
  't', '\032', '\"', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'U', 'p', 
  'l', 'o', 'a', 'd', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\236', '\001', '\202', '\323', '\344', '\223', '\002', '\211', '\001', '\032', '[', '/', 
  'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 
  'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 
  'p', 'p', '_', 'i', 'd', '}', '/', 'u', 'p', 'l', 'o', 'a', 'd', 's', '/', '{', 'u', 'p', 'l', 'o', 'a', 'd', '_', 'i', 'd', 
  '}', '/', 'c', 'o', 'n', 't', 'e', 'n', 't', '_', 'p', 'a', 'r', 't', 's', ':', '\001', '*', 'Z', '\'', '\032', '%', '/', 'v', '2', 
  '/', 'u', 'p', 'l', 'o', 'a', 'd', 's', '/', '{', 'u', 'p', 'l', 'o', 'a', 'd', '_', 'i', 'd', '}', '/', 'c', 'o', 'n', 't', 
  'e', 'n', 't', '_', 'p', 'a', 'r', 't', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\201', '\001', '\220', '\234', '\'', '\200', '\001', '\022', '\312', 
  '\001', '\n', '\t', 'G', 'e', 't', 'U', 'p', 'l', 'o', 'a', 'd', '\022', '\036', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'G', 'e', 't', 'U', 'p', 'l', 'o', 'a', 'd', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\"', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'U', 'p', 'l', 'o', 'a', 'd', 'R', 'e', 's', 
  'p', 'o', 'n', 's', 'e', '\"', 'y', '\202', '\323', '\344', '\223', '\002', 'j', '\022', 'M', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', 
  '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 
  's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'u', 'p', 
  'l', 'o', 'a', 'd', 's', '/', '{', 'u', 'p', 'l', 'o', 'a', 'd', '_', 'i', 'd', '}', 'Z', '\031', '\022', '\027', '/', 'v', '2', '/', 
  'u', 'p', 'l', 'o', 'a', 'd', 's', '/', '{', 'u', 'p', 'l', 'o', 'a', 'd', '_', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', 
  '\'', '\200', '\001', '\022', '\265', '\001', '\n', '\013', 'L', 'i', 's', 't', 'U', 'p', 'l', 'o', 'a', 'd', 's', '\022', ' ', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'U', 'p', 'l', 'o', 'a', 'd', 's', 'R', 'e', 'q', 'u', 
  'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'U', 
  'p', 'l', 'o', 'a', 'd', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'a', '\202', '\323', '\344', '\223', '\002', 'R', '\022', 'A', '/', 'v', 
  '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', 
  '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 
  'p', '_', 'i', 'd', '}', '/', 'u', 'p', 'l', 'o', 'a', 'd', 's', 'Z', '\r', '\022', '\013', '/', 'v', '2', '/', 'u', 'p', 'l', 'o', 
  'a', 'd', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\200', '\001', '\022', '\311', '\001', '\n', '\r', 'D', 'e', 'l', 'e', 't', 'e', 'U', 'p', 
  'l', 'o', 'a', 'd', 's', '\022', '\"', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 
  't', 'e', 'U', 'p', 'l', 'o', 'a', 'd', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 
  'e', '\"', 'q', '\202', '\323', '\344', '\223', '\002', 'X', '*', 'A', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'u', 'p', 'l', 'o', 'a', 'd', 
  's', ':', '\001', '*', 'Z', '\020', '*', '\013', '/', 'v', '2', '/', 'u', 'p', 'l', 'o', 'a', 'd', 's', ':', '\001', '*', '\230', '\234', '\'', 
  '\002', '\220', '\234', '\'', '\200', '\001', '\220', '\234', '\'', '\201', '\001', '\220', '\234', '\'', '\202', '\001', '\022', '\211', '\002', '\n', '\025', 'P', 'o', 's', 't', 
  'I', 'n', 'p', 'u', 't', 's', 'D', 'a', 't', 'a', 'S', 'o', 'u', 'r', 'c', 'e', 's', '\022', '*', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'I', 'n', 'p', 'u', 't', 's', 'D', 'a', 't', 'a', 'S', 'o', 'u', 
  'r', 'c', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'M', 'u', 'l', 't', 'i', 'I', 'n', 'p', 'u', 't', 's', 'A', 'd', 'd', 'J', 'o', 'b', 'R', 'e', 's', 'p', 'o', 'n', 
  's', 'e', '\"', '\232', '\001', '\202', '\323', '\344', '\223', '\002', 'p', '\"', 'M', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', 
  '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 
  't', 's', '/', 'd', 'a', 't', 'a', '_', 's', 'o', 'u', 'r', 'c', 'e', 's', ':', '\001', '*', 'Z', '\034', '\"', '\027', '/', 'v', '2', 
  '/', 'i', 'n', 'p', 'u', 't', 's', '/', 'd', 'a', 't', 'a', '_', 's', 'o', 'u', 'r', 'c', 'e', 's', ':', '\001', '*', '\230', '\234', 
  '\'', '\002', '\220', '\234', '\'', '%', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\004', '\220', '\234', '\'', '\005', '\220', '\234', '\'', 
  '\017', '\220', '\234', '\'', '\002', '\220', '\234', '\'', '\023', '\022', '\256', '\002', '\n', '\026', 'G', 'e', 't', 'I', 'n', 'p', 'u', 't', 's', 'E', 'x', 
  't', 'r', 'a', 'c', 't', 'i', 'o', 'n', 'J', 'o', 'b', '\022', '+', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'G', 'e', 't', 'I', 'n', 'p', 'u', 't', 's', 'E', 'x', 't', 'r', 'a', 'c', 't', 'i', 'o', 'n', 'J', 'o', 'b', 'R', 
  'e', 'q', 'u', 'e', 's', 't', '\032', '/', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 
  'g', 'l', 'e', 'I', 'n', 'p', 'u', 't', 's', 'E', 'x', 't', 'r', 'a', 'c', 't', 'i', 'o', 'n', 'J', 'o', 'b', 'R', 'e', 's', 
  'p', 'o', 'n', 's', 'e', '\"', '\265', '\001', '\202', '\323', '\344', '\223', '\002', '\246', '\001', '\022', 'k', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 
  's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 
  'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 
  'i', 'n', 'p', 'u', 't', 's', '/', 'j', 'o', 'b', 's', '/', 'e', 'x', 't', 'r', 'a', 'c', 't', 'i', 'o', 'n', '/', '{', 'i', 
  'n', 'p', 'u', 't', 's', '_', 'e', 'x', 't', 'r', 'a', 'c', 't', 'i', 'o', 'n', '_', 'j', 'o', 'b', '_', 'i', 'd', '}', 'Z', 
  '7', '\022', '5', '/', 'v', '2', '/', 'i', 'n', 'p', 'u', 't', 's', '/', 'j', 'o', 'b', 's', '/', 'e', 'x', 't', 'r', 'a', 'c', 
  't', 'i', 'o', 'n', '/', '{', 'i', 'n', 'p', 'u', 't', 's', '_', 'e', 'x', 't', 'r', 'a', 'c', 't', 'i', 'o', 'n', '_', 'j', 
  'o', 'b', '_', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\005', '\022', '\371', '\001', '\n', '\030', 'L', 'i', 's', 't', 'I', 'n', 
  'p', 'u', 't', 's', 'E', 'x', 't', 'r', 'a', 'c', 't', 'i', 'o', 'n', 'J', 'o', 'b', 's', '\022', '-', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'I', 'n', 'p', 'u', 't', 's', 'E', 'x', 't', 'r', 'a', 'c', 
  't', 'i', 'o', 'n', 'J', 'o', 'b', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '.', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'I', 'n', 'p', 'u', 't', 's', 'E', 'x', 't', 'r', 'a', 'c', 't', 'i', 
  'o', 'n', 'J', 'o', 'b', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '~', '\202', '\323', '\344', '\223', '\002', 'p', '\022', 'P', '/', 'v', 
  '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', 
  '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 
  'p', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', '/', 'j', 'o', 'b', 's', '/', 'e', 'x', 't', 'r', 'a', 'c', 't', 
  'i', 'o', 'n', 'Z', '\034', '\022', '\032', '/', 'v', '2', '/', 'i', 'n', 'p', 'u', 't', 's', '/', 'j', 'o', 'b', 's', '/', 'e', 'x', 
  't', 'r', 'a', 'c', 't', 'i', 'o', 'n', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\005', 'B', 'Y', '\n', '\025', 'c', 'o', 'm', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'g', 'r', 'p', 'c', '.', 'a', 'p', 'i', 'P', '\001', 'Z', '7', 'g', 'i', 't', 'h', 'u', 
  'b', '.', 'c', 'o', 'm', '/', 'C', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '/', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '-', 'g', 
  'o', '-', 'g', 'r', 'p', 'c', '/', 'p', 'r', 'o', 't', 'o', '/', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '/', 'a', 'p', 'i', 
  '\242', '\002', '\004', 'C', 'A', 'I', 'P', 'b', '\006', 'p', 'r', 'o', 't', 'o', '3', 
  '\0' };
static const ::_pbi::DescriptorTable* const descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_deps[10] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto,
  &::descriptor_table_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto,
  &::descriptor_table_proto_2fclarifai_2fapi_2fstatus_2fstatus_5fcode_2eproto,
  &::descriptor_table_proto_2fclarifai_2fapi_2futils_2fextensions_2eproto,
  &::descriptor_table_proto_2fclarifai_2fauth_2fscope_2fscope_2eproto,
  &::descriptor_table_proto_2fclarifai_2fauth_2futil_2fextension_2eproto,
};
static ::_pbi::once_flag descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto = {
    false, false, 85490, descriptor_table_protodef_proto_2fclarifai_2fapi_2fservice_2eproto,
    "proto/clarifai/api/service.proto",
    &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once, descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_deps, 10, 292,
    schemas, file_default_instances, TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto::offsets,
    file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto, file_level_enum_descriptors_proto_2fclarifai_2fapi_2fservice_2eproto,
    file_level_service_descriptors_proto_2fclarifai_2fapi_2fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter() {
  return &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proto_2fclarifai_2fapi_2fservice_2eproto(&descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
namespace clarifai {
namespace api {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrganizationInvitationStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fservice_2eproto[0];
}
bool OrganizationInvitationStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Pagination::_Internal {
 public:
};

Pagination::Pagination(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Pagination)
}
Pagination::Pagination(const Pagination& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Pagination* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.per_page_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Pagination)
}

inline void Pagination::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Pagination::~Pagination() {
  // @@protoc_insertion_point(destructor:clarifai.api.Pagination)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Pagination::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Pagination::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Pagination::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Pagination)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.per_page_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pagination::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pagination::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Pagination)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 page = 1;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_page(), target);
  }

  // uint32 per_page = 2;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Pagination)
  return target;
}

size_t Pagination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Pagination)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 page = 1;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 2;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pagination::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Pagination::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pagination::GetClassData() const { return &_class_data_; }


void Pagination::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Pagination*>(&to_msg);
  auto& from = static_cast<const Pagination&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Pagination)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pagination::CopyFrom(const Pagination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Pagination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pagination::IsInitialized() const {
  return true;
}

void Pagination::InternalSwap(Pagination* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pagination, _impl_.per_page_)
      + sizeof(Pagination::_impl_.per_page_)
      - PROTOBUF_FIELD_OFFSET(Pagination, _impl_.page_)>(
          reinterpret_cast<char*>(&_impl_.page_),
          reinterpret_cast<char*>(&other->_impl_.page_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pagination::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[0]);
}

// ===================================================================

class GetAnnotationRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetAnnotationRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetAnnotationRequest::_Internal::user_app_id(const GetAnnotationRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void GetAnnotationRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
GetAnnotationRequest::GetAnnotationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetAnnotationRequest)
}
GetAnnotationRequest::GetAnnotationRequest(const GetAnnotationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetAnnotationRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.annotation_id_){}
    , decltype(_impl_.input_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.annotation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.annotation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_annotation_id().empty()) {
    _this->_impl_.annotation_id_.Set(from._internal_annotation_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.input_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.input_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_input_id().empty()) {
    _this->_impl_.input_id_.Set(from._internal_input_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetAnnotationRequest)
}

inline void GetAnnotationRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.annotation_id_){}
    , decltype(_impl_.input_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.annotation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.annotation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.input_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.input_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetAnnotationRequest::~GetAnnotationRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetAnnotationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAnnotationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.annotation_id_.Destroy();
  _impl_.input_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void GetAnnotationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetAnnotationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetAnnotationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.annotation_id_.ClearToEmpty();
  _impl_.input_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAnnotationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string annotation_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_annotation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetAnnotationRequest.annotation_id"));
        } else
          goto handle_unusual;
        continue;
      // string input_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_input_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetAnnotationRequest.input_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAnnotationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetAnnotationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string annotation_id = 2;
  if (!this->_internal_annotation_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_annotation_id().data(), static_cast<int>(this->_internal_annotation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetAnnotationRequest.annotation_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_annotation_id(), target);
  }

  // string input_id = 3;
  if (!this->_internal_input_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input_id().data(), static_cast<int>(this->_internal_input_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetAnnotationRequest.input_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_input_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetAnnotationRequest)
  return target;
}

size_t GetAnnotationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetAnnotationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string annotation_id = 2;
  if (!this->_internal_annotation_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_annotation_id());
  }

  // string input_id = 3;
  if (!this->_internal_input_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_input_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAnnotationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetAnnotationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAnnotationRequest::GetClassData() const { return &_class_data_; }


void GetAnnotationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetAnnotationRequest*>(&to_msg);
  auto& from = static_cast<const GetAnnotationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetAnnotationRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_annotation_id().empty()) {
    _this->_internal_set_annotation_id(from._internal_annotation_id());
  }
  if (!from._internal_input_id().empty()) {
    _this->_internal_set_input_id(from._internal_input_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAnnotationRequest::CopyFrom(const GetAnnotationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetAnnotationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAnnotationRequest::IsInitialized() const {
  return true;
}

void GetAnnotationRequest::InternalSwap(GetAnnotationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.annotation_id_, lhs_arena,
      &other->_impl_.annotation_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.input_id_, lhs_arena,
      &other->_impl_.input_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAnnotationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[1]);
}

// ===================================================================

class ListAnnotationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListAnnotationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListAnnotationsRequest::_Internal::user_app_id(const ListAnnotationsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListAnnotationsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void ListAnnotationsRequest::clear_statuses() {
  _impl_.statuses_.Clear();
}
ListAnnotationsRequest::ListAnnotationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListAnnotationsRequest)
}
ListAnnotationsRequest::ListAnnotationsRequest(const ListAnnotationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListAnnotationsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){from._impl_.ids_}
    , decltype(_impl_.input_ids_){from._impl_.input_ids_}
    , decltype(_impl_.statuses_){from._impl_.statuses_}
    , decltype(_impl_.user_ids_){from._impl_.user_ids_}
    , decltype(_impl_.model_version_ids_){from._impl_.model_version_ids_}
    , decltype(_impl_.task_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , decltype(_impl_.list_all_annotations_){}
    , decltype(_impl_.return_model_output_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task_id().empty()) {
    _this->_impl_.task_id_.Set(from._internal_task_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.return_model_output_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.return_model_output_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListAnnotationsRequest)
}

inline void ListAnnotationsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){arena}
    , decltype(_impl_.input_ids_){arena}
    , decltype(_impl_.statuses_){arena}
    , decltype(_impl_.user_ids_){arena}
    , decltype(_impl_.model_version_ids_){arena}
    , decltype(_impl_.task_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , decltype(_impl_.list_all_annotations_){false}
    , decltype(_impl_.return_model_output_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListAnnotationsRequest::~ListAnnotationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListAnnotationsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListAnnotationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_.~RepeatedPtrField();
  _impl_.input_ids_.~RepeatedPtrField();
  _impl_.statuses_.~RepeatedPtrField();
  _impl_.user_ids_.~RepeatedPtrField();
  _impl_.model_version_ids_.~RepeatedPtrField();
  _impl_.task_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void ListAnnotationsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListAnnotationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListAnnotationsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ids_.Clear();
  _impl_.input_ids_.Clear();
  _impl_.statuses_.Clear();
  _impl_.user_ids_.Clear();
  _impl_.model_version_ids_.Clear();
  _impl_.task_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.return_model_output_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.return_model_output_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListAnnotationsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListAnnotationsRequest.ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string input_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListAnnotationsRequest.input_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.status.Status statuses = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_statuses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool list_all_annotations = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.list_all_annotations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string user_ids = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListAnnotationsRequest.user_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string model_version_ids = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_model_version_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListAnnotationsRequest.model_version_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string task_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_task_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListAnnotationsRequest.task_id"));
        } else
          goto handle_unusual;
        continue;
      // bool return_model_output = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.return_model_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListAnnotationsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListAnnotationsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListAnnotationsRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  // repeated string input_ids = 3;
  for (int i = 0, n = this->_internal_input_ids_size(); i < n; i++) {
    const auto& s = this->_internal_input_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListAnnotationsRequest.input_ids");
    target = stream->WriteString(3, s, target);
  }

  // repeated .clarifai.api.status.Status statuses = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_statuses_size()); i < n; i++) {
    const auto& repfield = this->_internal_statuses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool list_all_annotations = 6;
  if (this->_internal_list_all_annotations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_list_all_annotations(), target);
  }

  // uint32 page = 7;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_page(), target);
  }

  // uint32 per_page = 8;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_per_page(), target);
  }

  // repeated string user_ids = 9;
  for (int i = 0, n = this->_internal_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListAnnotationsRequest.user_ids");
    target = stream->WriteString(9, s, target);
  }

  // repeated string model_version_ids = 10;
  for (int i = 0, n = this->_internal_model_version_ids_size(); i < n; i++) {
    const auto& s = this->_internal_model_version_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListAnnotationsRequest.model_version_ids");
    target = stream->WriteString(10, s, target);
  }

  // string task_id = 11;
  if (!this->_internal_task_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListAnnotationsRequest.task_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_task_id(), target);
  }

  // bool return_model_output = 12;
  if (this->_internal_return_model_output() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_return_model_output(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListAnnotationsRequest)
  return target;
}

size_t ListAnnotationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListAnnotationsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.ids_.size());
  for (int i = 0, n = _impl_.ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.ids_.Get(i));
  }

  // repeated string input_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.input_ids_.size());
  for (int i = 0, n = _impl_.input_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.input_ids_.Get(i));
  }

  // repeated .clarifai.api.status.Status statuses = 5;
  total_size += 1UL * this->_internal_statuses_size();
  for (const auto& msg : this->_impl_.statuses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string user_ids = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.user_ids_.size());
  for (int i = 0, n = _impl_.user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.user_ids_.Get(i));
  }

  // repeated string model_version_ids = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.model_version_ids_.size());
  for (int i = 0, n = _impl_.model_version_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.model_version_ids_.Get(i));
  }

  // string task_id = 11;
  if (!this->_internal_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // uint32 page = 7;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 8;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  // bool list_all_annotations = 6;
  if (this->_internal_list_all_annotations() != 0) {
    total_size += 1 + 1;
  }

  // bool return_model_output = 12;
  if (this->_internal_return_model_output() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListAnnotationsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListAnnotationsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListAnnotationsRequest::GetClassData() const { return &_class_data_; }


void ListAnnotationsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListAnnotationsRequest*>(&to_msg);
  auto& from = static_cast<const ListAnnotationsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListAnnotationsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_.MergeFrom(from._impl_.ids_);
  _this->_impl_.input_ids_.MergeFrom(from._impl_.input_ids_);
  _this->_impl_.statuses_.MergeFrom(from._impl_.statuses_);
  _this->_impl_.user_ids_.MergeFrom(from._impl_.user_ids_);
  _this->_impl_.model_version_ids_.MergeFrom(from._impl_.model_version_ids_);
  if (!from._internal_task_id().empty()) {
    _this->_internal_set_task_id(from._internal_task_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  if (from._internal_list_all_annotations() != 0) {
    _this->_internal_set_list_all_annotations(from._internal_list_all_annotations());
  }
  if (from._internal_return_model_output() != 0) {
    _this->_internal_set_return_model_output(from._internal_return_model_output());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListAnnotationsRequest::CopyFrom(const ListAnnotationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListAnnotationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAnnotationsRequest::IsInitialized() const {
  return true;
}

void ListAnnotationsRequest::InternalSwap(ListAnnotationsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ids_.InternalSwap(&other->_impl_.ids_);
  _impl_.input_ids_.InternalSwap(&other->_impl_.input_ids_);
  _impl_.statuses_.InternalSwap(&other->_impl_.statuses_);
  _impl_.user_ids_.InternalSwap(&other->_impl_.user_ids_);
  _impl_.model_version_ids_.InternalSwap(&other->_impl_.model_version_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.task_id_, lhs_arena,
      &other->_impl_.task_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListAnnotationsRequest, _impl_.return_model_output_)
      + sizeof(ListAnnotationsRequest::_impl_.return_model_output_)
      - PROTOBUF_FIELD_OFFSET(ListAnnotationsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAnnotationsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[2]);
}

// ===================================================================

class PostAnnotationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostAnnotationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostAnnotationsRequest::_Internal::user_app_id(const PostAnnotationsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PostAnnotationsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostAnnotationsRequest::clear_annotations() {
  _impl_.annotations_.Clear();
}
PostAnnotationsRequest::PostAnnotationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostAnnotationsRequest)
}
PostAnnotationsRequest::PostAnnotationsRequest(const PostAnnotationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostAnnotationsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.annotations_){from._impl_.annotations_}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostAnnotationsRequest)
}

inline void PostAnnotationsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.annotations_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PostAnnotationsRequest::~PostAnnotationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostAnnotationsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostAnnotationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.annotations_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PostAnnotationsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostAnnotationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostAnnotationsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.annotations_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostAnnotationsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Annotation annotations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostAnnotationsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostAnnotationsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Annotation annotations = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_annotations_size()); i < n; i++) {
    const auto& repfield = this->_internal_annotations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostAnnotationsRequest)
  return target;
}

size_t PostAnnotationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostAnnotationsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Annotation annotations = 2;
  total_size += 1UL * this->_internal_annotations_size();
  for (const auto& msg : this->_impl_.annotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostAnnotationsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostAnnotationsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostAnnotationsRequest::GetClassData() const { return &_class_data_; }


void PostAnnotationsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostAnnotationsRequest*>(&to_msg);
  auto& from = static_cast<const PostAnnotationsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostAnnotationsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.annotations_.MergeFrom(from._impl_.annotations_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostAnnotationsRequest::CopyFrom(const PostAnnotationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostAnnotationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostAnnotationsRequest::IsInitialized() const {
  return true;
}

void PostAnnotationsRequest::InternalSwap(PostAnnotationsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.annotations_.InternalSwap(&other->_impl_.annotations_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostAnnotationsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[3]);
}

// ===================================================================

class PatchAnnotationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchAnnotationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchAnnotationsRequest::_Internal::user_app_id(const PatchAnnotationsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PatchAnnotationsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PatchAnnotationsRequest::clear_annotations() {
  _impl_.annotations_.Clear();
}
PatchAnnotationsRequest::PatchAnnotationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchAnnotationsRequest)
}
PatchAnnotationsRequest::PatchAnnotationsRequest(const PatchAnnotationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PatchAnnotationsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.annotations_){from._impl_.annotations_}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchAnnotationsRequest)
}

inline void PatchAnnotationsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.annotations_){arena}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PatchAnnotationsRequest::~PatchAnnotationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchAnnotationsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatchAnnotationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.annotations_.~RepeatedPtrField();
  _impl_.action_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PatchAnnotationsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatchAnnotationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchAnnotationsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.annotations_.Clear();
  _impl_.action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchAnnotationsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Annotation annotations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchAnnotationsRequest.action"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchAnnotationsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchAnnotationsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Annotation annotations = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_annotations_size()); i < n; i++) {
    const auto& repfield = this->_internal_annotations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchAnnotationsRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchAnnotationsRequest)
  return target;
}

size_t PatchAnnotationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchAnnotationsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Annotation annotations = 2;
  total_size += 1UL * this->_internal_annotations_size();
  for (const auto& msg : this->_impl_.annotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchAnnotationsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PatchAnnotationsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchAnnotationsRequest::GetClassData() const { return &_class_data_; }


void PatchAnnotationsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PatchAnnotationsRequest*>(&to_msg);
  auto& from = static_cast<const PatchAnnotationsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchAnnotationsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.annotations_.MergeFrom(from._impl_.annotations_);
  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchAnnotationsRequest::CopyFrom(const PatchAnnotationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchAnnotationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchAnnotationsRequest::IsInitialized() const {
  return true;
}

void PatchAnnotationsRequest::InternalSwap(PatchAnnotationsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.annotations_.InternalSwap(&other->_impl_.annotations_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchAnnotationsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[4]);
}

// ===================================================================

class PatchAnnotationsStatusRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchAnnotationsStatusRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchAnnotationsStatusRequest::_Internal::user_app_id(const PatchAnnotationsStatusRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PatchAnnotationsStatusRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
PatchAnnotationsStatusRequest::PatchAnnotationsStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchAnnotationsStatusRequest)
}
PatchAnnotationsStatusRequest::PatchAnnotationsStatusRequest(const PatchAnnotationsStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PatchAnnotationsStatusRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_ids_){from._impl_.user_ids_}
    , decltype(_impl_.task_id_){}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.status_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task_id().empty()) {
    _this->_impl_.task_id_.Set(from._internal_task_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  _this->_impl_.status_code_ = from._impl_.status_code_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchAnnotationsStatusRequest)
}

inline void PatchAnnotationsStatusRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_ids_){arena}
    , decltype(_impl_.task_id_){}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.status_code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PatchAnnotationsStatusRequest::~PatchAnnotationsStatusRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchAnnotationsStatusRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatchAnnotationsStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_ids_.~RepeatedPtrField();
  _impl_.task_id_.Destroy();
  _impl_.action_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PatchAnnotationsStatusRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatchAnnotationsStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchAnnotationsStatusRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_ids_.Clear();
  _impl_.task_id_.ClearToEmpty();
  _impl_.action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _impl_.status_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchAnnotationsStatusRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.status.StatusCode status_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status_code(static_cast<::clarifai::api::status::StatusCode>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string user_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchAnnotationsStatusRequest.user_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string task_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_task_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchAnnotationsStatusRequest.task_id"));
        } else
          goto handle_unusual;
        continue;
      // string action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchAnnotationsStatusRequest.action"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchAnnotationsStatusRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchAnnotationsStatusRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.status.StatusCode status_code = 2;
  if (this->_internal_status_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status_code(), target);
  }

  // repeated string user_ids = 3;
  for (int i = 0, n = this->_internal_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchAnnotationsStatusRequest.user_ids");
    target = stream->WriteString(3, s, target);
  }

  // string task_id = 4;
  if (!this->_internal_task_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchAnnotationsStatusRequest.task_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_task_id(), target);
  }

  // string action = 5;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchAnnotationsStatusRequest.action");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchAnnotationsStatusRequest)
  return target;
}

size_t PatchAnnotationsStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchAnnotationsStatusRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string user_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.user_ids_.size());
  for (int i = 0, n = _impl_.user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.user_ids_.Get(i));
  }

  // string task_id = 4;
  if (!this->_internal_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // string action = 5;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // .clarifai.api.status.StatusCode status_code = 2;
  if (this->_internal_status_code() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchAnnotationsStatusRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PatchAnnotationsStatusRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchAnnotationsStatusRequest::GetClassData() const { return &_class_data_; }


void PatchAnnotationsStatusRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PatchAnnotationsStatusRequest*>(&to_msg);
  auto& from = static_cast<const PatchAnnotationsStatusRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchAnnotationsStatusRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.user_ids_.MergeFrom(from._impl_.user_ids_);
  if (!from._internal_task_id().empty()) {
    _this->_internal_set_task_id(from._internal_task_id());
  }
  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_status_code() != 0) {
    _this->_internal_set_status_code(from._internal_status_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchAnnotationsStatusRequest::CopyFrom(const PatchAnnotationsStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchAnnotationsStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchAnnotationsStatusRequest::IsInitialized() const {
  return true;
}

void PatchAnnotationsStatusRequest::InternalSwap(PatchAnnotationsStatusRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.user_ids_.InternalSwap(&other->_impl_.user_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.task_id_, lhs_arena,
      &other->_impl_.task_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PatchAnnotationsStatusRequest, _impl_.status_code_)
      + sizeof(PatchAnnotationsStatusRequest::_impl_.status_code_)
      - PROTOBUF_FIELD_OFFSET(PatchAnnotationsStatusRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchAnnotationsStatusRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[5]);
}

// ===================================================================

class PatchAnnotationsStatusResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const PatchAnnotationsStatusResponse* msg);
};

const ::clarifai::api::status::Status&
PatchAnnotationsStatusResponse::_Internal::status(const PatchAnnotationsStatusResponse* msg) {
  return *msg->_impl_.status_;
}
void PatchAnnotationsStatusResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
PatchAnnotationsStatusResponse::PatchAnnotationsStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchAnnotationsStatusResponse)
}
PatchAnnotationsStatusResponse::PatchAnnotationsStatusResponse(const PatchAnnotationsStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PatchAnnotationsStatusResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_ids_){from._impl_.user_ids_}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.updated_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  _this->_impl_.updated_count_ = from._impl_.updated_count_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchAnnotationsStatusResponse)
}

inline void PatchAnnotationsStatusResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_ids_){arena}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.updated_count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PatchAnnotationsStatusResponse::~PatchAnnotationsStatusResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchAnnotationsStatusResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatchAnnotationsStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_ids_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void PatchAnnotationsStatusResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatchAnnotationsStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchAnnotationsStatusResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_ids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _impl_.updated_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchAnnotationsStatusResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string user_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchAnnotationsStatusResponse.user_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 updated_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.updated_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchAnnotationsStatusResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchAnnotationsStatusResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated string user_ids = 2;
  for (int i = 0, n = this->_internal_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchAnnotationsStatusResponse.user_ids");
    target = stream->WriteString(2, s, target);
  }

  // uint32 updated_count = 3;
  if (this->_internal_updated_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_updated_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchAnnotationsStatusResponse)
  return target;
}

size_t PatchAnnotationsStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchAnnotationsStatusResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string user_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.user_ids_.size());
  for (int i = 0, n = _impl_.user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.user_ids_.Get(i));
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // uint32 updated_count = 3;
  if (this->_internal_updated_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_updated_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchAnnotationsStatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PatchAnnotationsStatusResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchAnnotationsStatusResponse::GetClassData() const { return &_class_data_; }


void PatchAnnotationsStatusResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PatchAnnotationsStatusResponse*>(&to_msg);
  auto& from = static_cast<const PatchAnnotationsStatusResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchAnnotationsStatusResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.user_ids_.MergeFrom(from._impl_.user_ids_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_updated_count() != 0) {
    _this->_internal_set_updated_count(from._internal_updated_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchAnnotationsStatusResponse::CopyFrom(const PatchAnnotationsStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchAnnotationsStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchAnnotationsStatusResponse::IsInitialized() const {
  return true;
}

void PatchAnnotationsStatusResponse::InternalSwap(PatchAnnotationsStatusResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.user_ids_.InternalSwap(&other->_impl_.user_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PatchAnnotationsStatusResponse, _impl_.updated_count_)
      + sizeof(PatchAnnotationsStatusResponse::_impl_.updated_count_)
      - PROTOBUF_FIELD_OFFSET(PatchAnnotationsStatusResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchAnnotationsStatusResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[6]);
}

// ===================================================================

class DeleteAnnotationRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteAnnotationRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteAnnotationRequest::_Internal::user_app_id(const DeleteAnnotationRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void DeleteAnnotationRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
DeleteAnnotationRequest::DeleteAnnotationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteAnnotationRequest)
}
DeleteAnnotationRequest::DeleteAnnotationRequest(const DeleteAnnotationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteAnnotationRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.input_id_){}
    , decltype(_impl_.annotation_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.input_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.input_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_input_id().empty()) {
    _this->_impl_.input_id_.Set(from._internal_input_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.annotation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.annotation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_annotation_id().empty()) {
    _this->_impl_.annotation_id_.Set(from._internal_annotation_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteAnnotationRequest)
}

inline void DeleteAnnotationRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.input_id_){}
    , decltype(_impl_.annotation_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.input_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.input_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.annotation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.annotation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteAnnotationRequest::~DeleteAnnotationRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteAnnotationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteAnnotationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.input_id_.Destroy();
  _impl_.annotation_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void DeleteAnnotationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteAnnotationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteAnnotationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.input_id_.ClearToEmpty();
  _impl_.annotation_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteAnnotationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string input_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_input_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DeleteAnnotationRequest.input_id"));
        } else
          goto handle_unusual;
        continue;
      // string annotation_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_annotation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DeleteAnnotationRequest.annotation_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteAnnotationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteAnnotationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string input_id = 2;
  if (!this->_internal_input_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input_id().data(), static_cast<int>(this->_internal_input_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteAnnotationRequest.input_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_input_id(), target);
  }

  // string annotation_id = 3;
  if (!this->_internal_annotation_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_annotation_id().data(), static_cast<int>(this->_internal_annotation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteAnnotationRequest.annotation_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_annotation_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteAnnotationRequest)
  return target;
}

size_t DeleteAnnotationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteAnnotationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string input_id = 2;
  if (!this->_internal_input_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_input_id());
  }

  // string annotation_id = 3;
  if (!this->_internal_annotation_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_annotation_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteAnnotationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteAnnotationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteAnnotationRequest::GetClassData() const { return &_class_data_; }


void DeleteAnnotationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteAnnotationRequest*>(&to_msg);
  auto& from = static_cast<const DeleteAnnotationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteAnnotationRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_input_id().empty()) {
    _this->_internal_set_input_id(from._internal_input_id());
  }
  if (!from._internal_annotation_id().empty()) {
    _this->_internal_set_annotation_id(from._internal_annotation_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteAnnotationRequest::CopyFrom(const DeleteAnnotationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteAnnotationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAnnotationRequest::IsInitialized() const {
  return true;
}

void DeleteAnnotationRequest::InternalSwap(DeleteAnnotationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.input_id_, lhs_arena,
      &other->_impl_.input_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.annotation_id_, lhs_arena,
      &other->_impl_.annotation_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteAnnotationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[7]);
}

// ===================================================================

class DeleteAnnotationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteAnnotationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteAnnotationsRequest::_Internal::user_app_id(const DeleteAnnotationsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void DeleteAnnotationsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
DeleteAnnotationsRequest::DeleteAnnotationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteAnnotationsRequest)
}
DeleteAnnotationsRequest::DeleteAnnotationsRequest(const DeleteAnnotationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteAnnotationsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){from._impl_.ids_}
    , decltype(_impl_.input_ids_){from._impl_.input_ids_}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteAnnotationsRequest)
}

inline void DeleteAnnotationsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){arena}
    , decltype(_impl_.input_ids_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeleteAnnotationsRequest::~DeleteAnnotationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteAnnotationsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteAnnotationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_.~RepeatedPtrField();
  _impl_.input_ids_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void DeleteAnnotationsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteAnnotationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteAnnotationsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ids_.Clear();
  _impl_.input_ids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteAnnotationsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DeleteAnnotationsRequest.ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string input_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DeleteAnnotationsRequest.input_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteAnnotationsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteAnnotationsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteAnnotationsRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  // repeated string input_ids = 3;
  for (int i = 0, n = this->_internal_input_ids_size(); i < n; i++) {
    const auto& s = this->_internal_input_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteAnnotationsRequest.input_ids");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteAnnotationsRequest)
  return target;
}

size_t DeleteAnnotationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteAnnotationsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.ids_.size());
  for (int i = 0, n = _impl_.ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.ids_.Get(i));
  }

  // repeated string input_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.input_ids_.size());
  for (int i = 0, n = _impl_.input_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.input_ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteAnnotationsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteAnnotationsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteAnnotationsRequest::GetClassData() const { return &_class_data_; }


void DeleteAnnotationsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteAnnotationsRequest*>(&to_msg);
  auto& from = static_cast<const DeleteAnnotationsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteAnnotationsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_.MergeFrom(from._impl_.ids_);
  _this->_impl_.input_ids_.MergeFrom(from._impl_.input_ids_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteAnnotationsRequest::CopyFrom(const DeleteAnnotationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteAnnotationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAnnotationsRequest::IsInitialized() const {
  return true;
}

void DeleteAnnotationsRequest::InternalSwap(DeleteAnnotationsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ids_.InternalSwap(&other->_impl_.ids_);
  _impl_.input_ids_.InternalSwap(&other->_impl_.input_ids_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteAnnotationsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[8]);
}

// ===================================================================

class SingleAnnotationResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleAnnotationResponse* msg);
  static const ::clarifai::api::Annotation& annotation(const SingleAnnotationResponse* msg);
};

const ::clarifai::api::status::Status&
SingleAnnotationResponse::_Internal::status(const SingleAnnotationResponse* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::Annotation&
SingleAnnotationResponse::_Internal::annotation(const SingleAnnotationResponse* msg) {
  return *msg->_impl_.annotation_;
}
void SingleAnnotationResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void SingleAnnotationResponse::clear_annotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.annotation_ != nullptr) {
    delete _impl_.annotation_;
  }
  _impl_.annotation_ = nullptr;
}
SingleAnnotationResponse::SingleAnnotationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleAnnotationResponse)
}
SingleAnnotationResponse::SingleAnnotationResponse(const SingleAnnotationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleAnnotationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.annotation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_annotation()) {
    _this->_impl_.annotation_ = new ::clarifai::api::Annotation(*from._impl_.annotation_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleAnnotationResponse)
}

inline void SingleAnnotationResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.annotation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SingleAnnotationResponse::~SingleAnnotationResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleAnnotationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleAnnotationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.annotation_;
}

void SingleAnnotationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleAnnotationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleAnnotationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.annotation_ != nullptr) {
    delete _impl_.annotation_;
  }
  _impl_.annotation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleAnnotationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Annotation annotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleAnnotationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleAnnotationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Annotation annotation = 2;
  if (this->_internal_has_annotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::annotation(this),
        _Internal::annotation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleAnnotationResponse)
  return target;
}

size_t SingleAnnotationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleAnnotationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.Annotation annotation = 2;
  if (this->_internal_has_annotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.annotation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleAnnotationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleAnnotationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleAnnotationResponse::GetClassData() const { return &_class_data_; }


void SingleAnnotationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleAnnotationResponse*>(&to_msg);
  auto& from = static_cast<const SingleAnnotationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleAnnotationResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_annotation()) {
    _this->_internal_mutable_annotation()->::clarifai::api::Annotation::MergeFrom(
        from._internal_annotation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleAnnotationResponse::CopyFrom(const SingleAnnotationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleAnnotationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleAnnotationResponse::IsInitialized() const {
  return true;
}

void SingleAnnotationResponse::InternalSwap(SingleAnnotationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleAnnotationResponse, _impl_.annotation_)
      + sizeof(SingleAnnotationResponse::_impl_.annotation_)
      - PROTOBUF_FIELD_OFFSET(SingleAnnotationResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleAnnotationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[9]);
}

// ===================================================================

class MultiAnnotationResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiAnnotationResponse* msg);
};

const ::clarifai::api::status::Status&
MultiAnnotationResponse::_Internal::status(const MultiAnnotationResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiAnnotationResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiAnnotationResponse::clear_annotations() {
  _impl_.annotations_.Clear();
}
MultiAnnotationResponse::MultiAnnotationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiAnnotationResponse)
}
MultiAnnotationResponse::MultiAnnotationResponse(const MultiAnnotationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiAnnotationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.annotations_){from._impl_.annotations_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiAnnotationResponse)
}

inline void MultiAnnotationResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.annotations_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiAnnotationResponse::~MultiAnnotationResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiAnnotationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiAnnotationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.annotations_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiAnnotationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiAnnotationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiAnnotationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.annotations_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiAnnotationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Annotation annotations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiAnnotationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiAnnotationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Annotation annotations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_annotations_size()); i < n; i++) {
    const auto& repfield = this->_internal_annotations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiAnnotationResponse)
  return target;
}

size_t MultiAnnotationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiAnnotationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Annotation annotations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_annotations_size();
  for (const auto& msg : this->_impl_.annotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiAnnotationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiAnnotationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiAnnotationResponse::GetClassData() const { return &_class_data_; }


void MultiAnnotationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiAnnotationResponse*>(&to_msg);
  auto& from = static_cast<const MultiAnnotationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiAnnotationResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.annotations_.MergeFrom(from._impl_.annotations_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiAnnotationResponse::CopyFrom(const MultiAnnotationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiAnnotationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiAnnotationResponse::IsInitialized() const {
  return true;
}

void MultiAnnotationResponse::InternalSwap(MultiAnnotationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.annotations_.InternalSwap(&other->_impl_.annotations_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiAnnotationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[10]);
}

// ===================================================================

class GetAppRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetAppRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetAppRequest::_Internal::user_app_id(const GetAppRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void GetAppRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
GetAppRequest::GetAppRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetAppRequest)
}
GetAppRequest::GetAppRequest(const GetAppRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetAppRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.additional_fields_){from._impl_.additional_fields_}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetAppRequest)
}

inline void GetAppRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.additional_fields_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetAppRequest::~GetAppRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetAppRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAppRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.additional_fields_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void GetAppRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetAppRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetAppRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.additional_fields_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAppRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string additional_fields = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_additional_fields();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetAppRequest.additional_fields"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAppRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetAppRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated string additional_fields = 2;
  for (int i = 0, n = this->_internal_additional_fields_size(); i < n; i++) {
    const auto& s = this->_internal_additional_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetAppRequest.additional_fields");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetAppRequest)
  return target;
}

size_t GetAppRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetAppRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string additional_fields = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.additional_fields_.size());
  for (int i = 0, n = _impl_.additional_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.additional_fields_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAppRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetAppRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAppRequest::GetClassData() const { return &_class_data_; }


void GetAppRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetAppRequest*>(&to_msg);
  auto& from = static_cast<const GetAppRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetAppRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.additional_fields_.MergeFrom(from._impl_.additional_fields_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAppRequest::CopyFrom(const GetAppRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetAppRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppRequest::IsInitialized() const {
  return true;
}

void GetAppRequest::InternalSwap(GetAppRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.additional_fields_.InternalSwap(&other->_impl_.additional_fields_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAppRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[11]);
}

// ===================================================================

class ListAppsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListAppsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListAppsRequest::_Internal::user_app_id(const ListAppsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListAppsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
ListAppsRequest::ListAppsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListAppsRequest)
}
ListAppsRequest::ListAppsRequest(const ListAppsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListAppsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.additional_fields_){from._impl_.additional_fields_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.query_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , decltype(_impl_.sort_ascending_){}
    , decltype(_impl_.featured_only_){}
    , decltype(_impl_.starred_only_){}
    , decltype(_impl_.sort_by_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.query_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_query().empty()) {
    _this->_impl_.query_.Set(from._internal_query(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.starred_only_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.starred_only_));
  clear_has_sort_by();
  switch (from.sort_by_case()) {
    case kSortByName: {
      _this->_internal_set_sort_by_name(from._internal_sort_by_name());
      break;
    }
    case kSortByModifiedAt: {
      _this->_internal_set_sort_by_modified_at(from._internal_sort_by_modified_at());
      break;
    }
    case SORT_BY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListAppsRequest)
}

inline void ListAppsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.additional_fields_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.query_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , decltype(_impl_.sort_ascending_){false}
    , decltype(_impl_.featured_only_){false}
    , decltype(_impl_.starred_only_){false}
    , decltype(_impl_.sort_by_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.query_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_sort_by();
}

ListAppsRequest::~ListAppsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListAppsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListAppsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.additional_fields_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.query_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
  if (has_sort_by()) {
    clear_sort_by();
  }
}

void ListAppsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListAppsRequest::clear_sort_by() {
// @@protoc_insertion_point(one_of_clear_start:clarifai.api.ListAppsRequest)
  switch (sort_by_case()) {
    case kSortByName: {
      // No need to clear
      break;
    }
    case kSortByModifiedAt: {
      // No need to clear
      break;
    }
    case SORT_BY_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SORT_BY_NOT_SET;
}


void ListAppsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListAppsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.additional_fields_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.query_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.starred_only_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.starred_only_));
  clear_sort_by();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListAppsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListAppsRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // bool sort_ascending = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.sort_ascending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool sort_by_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _internal_set_sort_by_name(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool sort_by_modified_at = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _internal_set_sort_by_modified_at(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string query = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_query();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListAppsRequest.query"));
        } else
          goto handle_unusual;
        continue;
      // bool featured_only = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.featured_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string additional_fields = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_additional_fields();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListAppsRequest.additional_fields"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool starred_only = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.starred_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListAppsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListAppsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  // string name = 4 [deprecated = true];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListAppsRequest.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // bool sort_ascending = 5;
  if (this->_internal_sort_ascending() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_sort_ascending(), target);
  }

  // bool sort_by_name = 6;
  if (_internal_has_sort_by_name()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_sort_by_name(), target);
  }

  // bool sort_by_modified_at = 7;
  if (_internal_has_sort_by_modified_at()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_sort_by_modified_at(), target);
  }

  // string query = 8;
  if (!this->_internal_query().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListAppsRequest.query");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_query(), target);
  }

  // bool featured_only = 9;
  if (this->_internal_featured_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_featured_only(), target);
  }

  // repeated string additional_fields = 10;
  for (int i = 0, n = this->_internal_additional_fields_size(); i < n; i++) {
    const auto& s = this->_internal_additional_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListAppsRequest.additional_fields");
    target = stream->WriteString(10, s, target);
  }

  // bool starred_only = 11;
  if (this->_internal_starred_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_starred_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListAppsRequest)
  return target;
}

size_t ListAppsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListAppsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string additional_fields = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.additional_fields_.size());
  for (int i = 0, n = _impl_.additional_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.additional_fields_.Get(i));
  }

  // string name = 4 [deprecated = true];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string query = 8;
  if (!this->_internal_query().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  // bool sort_ascending = 5;
  if (this->_internal_sort_ascending() != 0) {
    total_size += 1 + 1;
  }

  // bool featured_only = 9;
  if (this->_internal_featured_only() != 0) {
    total_size += 1 + 1;
  }

  // bool starred_only = 11;
  if (this->_internal_starred_only() != 0) {
    total_size += 1 + 1;
  }

  switch (sort_by_case()) {
    // bool sort_by_name = 6;
    case kSortByName: {
      total_size += 1 + 1;
      break;
    }
    // bool sort_by_modified_at = 7;
    case kSortByModifiedAt: {
      total_size += 1 + 1;
      break;
    }
    case SORT_BY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListAppsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListAppsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListAppsRequest::GetClassData() const { return &_class_data_; }


void ListAppsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListAppsRequest*>(&to_msg);
  auto& from = static_cast<const ListAppsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListAppsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.additional_fields_.MergeFrom(from._impl_.additional_fields_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_query().empty()) {
    _this->_internal_set_query(from._internal_query());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  if (from._internal_sort_ascending() != 0) {
    _this->_internal_set_sort_ascending(from._internal_sort_ascending());
  }
  if (from._internal_featured_only() != 0) {
    _this->_internal_set_featured_only(from._internal_featured_only());
  }
  if (from._internal_starred_only() != 0) {
    _this->_internal_set_starred_only(from._internal_starred_only());
  }
  switch (from.sort_by_case()) {
    case kSortByName: {
      _this->_internal_set_sort_by_name(from._internal_sort_by_name());
      break;
    }
    case kSortByModifiedAt: {
      _this->_internal_set_sort_by_modified_at(from._internal_sort_by_modified_at());
      break;
    }
    case SORT_BY_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListAppsRequest::CopyFrom(const ListAppsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListAppsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAppsRequest::IsInitialized() const {
  return true;
}

void ListAppsRequest::InternalSwap(ListAppsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.additional_fields_.InternalSwap(&other->_impl_.additional_fields_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.query_, lhs_arena,
      &other->_impl_.query_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListAppsRequest, _impl_.starred_only_)
      + sizeof(ListAppsRequest::_impl_.starred_only_)
      - PROTOBUF_FIELD_OFFSET(ListAppsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
  swap(_impl_.sort_by_, other->_impl_.sort_by_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAppsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[12]);
}

// ===================================================================

class PostAppsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostAppsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostAppsRequest::_Internal::user_app_id(const PostAppsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PostAppsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostAppsRequest::clear_apps() {
  _impl_.apps_.Clear();
}
PostAppsRequest::PostAppsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostAppsRequest)
}
PostAppsRequest::PostAppsRequest(const PostAppsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostAppsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.apps_){from._impl_.apps_}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostAppsRequest)
}

inline void PostAppsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.apps_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PostAppsRequest::~PostAppsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostAppsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostAppsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.apps_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PostAppsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostAppsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostAppsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.apps_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostAppsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.App apps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_apps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostAppsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostAppsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.App apps = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_apps_size()); i < n; i++) {
    const auto& repfield = this->_internal_apps(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostAppsRequest)
  return target;
}

size_t PostAppsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostAppsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.App apps = 2;
  total_size += 1UL * this->_internal_apps_size();
  for (const auto& msg : this->_impl_.apps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostAppsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostAppsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostAppsRequest::GetClassData() const { return &_class_data_; }


void PostAppsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostAppsRequest*>(&to_msg);
  auto& from = static_cast<const PostAppsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostAppsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.apps_.MergeFrom(from._impl_.apps_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostAppsRequest::CopyFrom(const PostAppsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostAppsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostAppsRequest::IsInitialized() const {
  return true;
}

void PostAppsRequest::InternalSwap(PostAppsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.apps_.InternalSwap(&other->_impl_.apps_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostAppsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[13]);
}

// ===================================================================

class DeleteAppRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteAppRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteAppRequest::_Internal::user_app_id(const DeleteAppRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void DeleteAppRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
DeleteAppRequest::DeleteAppRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteAppRequest)
}
DeleteAppRequest::DeleteAppRequest(const DeleteAppRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteAppRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteAppRequest)
}

inline void DeleteAppRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeleteAppRequest::~DeleteAppRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteAppRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteAppRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void DeleteAppRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteAppRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteAppRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteAppRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteAppRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteAppRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteAppRequest)
  return target;
}

size_t DeleteAppRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteAppRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteAppRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteAppRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteAppRequest::GetClassData() const { return &_class_data_; }


void DeleteAppRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteAppRequest*>(&to_msg);
  auto& from = static_cast<const DeleteAppRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteAppRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteAppRequest::CopyFrom(const DeleteAppRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteAppRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAppRequest::IsInitialized() const {
  return true;
}

void DeleteAppRequest::InternalSwap(DeleteAppRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteAppRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[14]);
}

// ===================================================================

class PatchAppsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchAppsRequest* msg);
  static const ::clarifai::api::PatchAction& metadata_action(const PatchAppsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchAppsRequest::_Internal::user_app_id(const PatchAppsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
const ::clarifai::api::PatchAction&
PatchAppsRequest::_Internal::metadata_action(const PatchAppsRequest* msg) {
  return *msg->_impl_.metadata_action_;
}
void PatchAppsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PatchAppsRequest::clear_apps() {
  _impl_.apps_.Clear();
}
void PatchAppsRequest::clear_metadata_action() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_action_ != nullptr) {
    delete _impl_.metadata_action_;
  }
  _impl_.metadata_action_ = nullptr;
}
PatchAppsRequest::PatchAppsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchAppsRequest)
}
PatchAppsRequest::PatchAppsRequest(const PatchAppsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PatchAppsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.apps_){from._impl_.apps_}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.metadata_action_){nullptr}
    , decltype(_impl_.reindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  if (from._internal_has_metadata_action()) {
    _this->_impl_.metadata_action_ = new ::clarifai::api::PatchAction(*from._impl_.metadata_action_);
  }
  _this->_impl_.reindex_ = from._impl_.reindex_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchAppsRequest)
}

inline void PatchAppsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.apps_){arena}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.metadata_action_){nullptr}
    , decltype(_impl_.reindex_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PatchAppsRequest::~PatchAppsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchAppsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatchAppsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.apps_.~RepeatedPtrField();
  _impl_.action_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
  if (this != internal_default_instance()) delete _impl_.metadata_action_;
}

void PatchAppsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatchAppsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchAppsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.apps_.Clear();
  _impl_.action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_action_ != nullptr) {
    delete _impl_.metadata_action_;
  }
  _impl_.metadata_action_ = nullptr;
  _impl_.reindex_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchAppsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.App apps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_apps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchAppsRequest.action"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.PatchAction metadata_action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool reindex = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.reindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchAppsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchAppsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.App apps = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_apps_size()); i < n; i++) {
    const auto& repfield = this->_internal_apps(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchAppsRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  // .clarifai.api.PatchAction metadata_action = 4;
  if (this->_internal_has_metadata_action()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::metadata_action(this),
        _Internal::metadata_action(this).GetCachedSize(), target, stream);
  }

  // bool reindex = 5;
  if (this->_internal_reindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_reindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchAppsRequest)
  return target;
}

size_t PatchAppsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchAppsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.App apps = 2;
  total_size += 1UL * this->_internal_apps_size();
  for (const auto& msg : this->_impl_.apps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // .clarifai.api.PatchAction metadata_action = 4;
  if (this->_internal_has_metadata_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_action_);
  }

  // bool reindex = 5;
  if (this->_internal_reindex() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchAppsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PatchAppsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchAppsRequest::GetClassData() const { return &_class_data_; }


void PatchAppsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PatchAppsRequest*>(&to_msg);
  auto& from = static_cast<const PatchAppsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchAppsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.apps_.MergeFrom(from._impl_.apps_);
  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_has_metadata_action()) {
    _this->_internal_mutable_metadata_action()->::clarifai::api::PatchAction::MergeFrom(
        from._internal_metadata_action());
  }
  if (from._internal_reindex() != 0) {
    _this->_internal_set_reindex(from._internal_reindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchAppsRequest::CopyFrom(const PatchAppsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchAppsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchAppsRequest::IsInitialized() const {
  return true;
}

void PatchAppsRequest::InternalSwap(PatchAppsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.apps_.InternalSwap(&other->_impl_.apps_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PatchAppsRequest, _impl_.reindex_)
      + sizeof(PatchAppsRequest::_impl_.reindex_)
      - PROTOBUF_FIELD_OFFSET(PatchAppsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchAppsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[15]);
}

// ===================================================================

class PatchAppRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchAppRequest* msg);
  static const ::clarifai::api::App& app(const PatchAppRequest* msg);
  static const ::clarifai::api::PatchAction& metadata_action(const PatchAppRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchAppRequest::_Internal::user_app_id(const PatchAppRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
const ::clarifai::api::App&
PatchAppRequest::_Internal::app(const PatchAppRequest* msg) {
  return *msg->_impl_.app_;
}
const ::clarifai::api::PatchAction&
PatchAppRequest::_Internal::metadata_action(const PatchAppRequest* msg) {
  return *msg->_impl_.metadata_action_;
}
void PatchAppRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PatchAppRequest::clear_app() {
  if (GetArenaForAllocation() == nullptr && _impl_.app_ != nullptr) {
    delete _impl_.app_;
  }
  _impl_.app_ = nullptr;
}
void PatchAppRequest::clear_metadata_action() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_action_ != nullptr) {
    delete _impl_.metadata_action_;
  }
  _impl_.metadata_action_ = nullptr;
}
PatchAppRequest::PatchAppRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchAppRequest)
}
PatchAppRequest::PatchAppRequest(const PatchAppRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PatchAppRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.app_){nullptr}
    , decltype(_impl_.metadata_action_){nullptr}
    , decltype(_impl_.reindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  if (from._internal_has_app()) {
    _this->_impl_.app_ = new ::clarifai::api::App(*from._impl_.app_);
  }
  if (from._internal_has_metadata_action()) {
    _this->_impl_.metadata_action_ = new ::clarifai::api::PatchAction(*from._impl_.metadata_action_);
  }
  _this->_impl_.reindex_ = from._impl_.reindex_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchAppRequest)
}

inline void PatchAppRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.app_){nullptr}
    , decltype(_impl_.metadata_action_){nullptr}
    , decltype(_impl_.reindex_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PatchAppRequest::~PatchAppRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchAppRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatchAppRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.action_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
  if (this != internal_default_instance()) delete _impl_.app_;
  if (this != internal_default_instance()) delete _impl_.metadata_action_;
}

void PatchAppRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatchAppRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchAppRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.app_ != nullptr) {
    delete _impl_.app_;
  }
  _impl_.app_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_action_ != nullptr) {
    delete _impl_.metadata_action_;
  }
  _impl_.metadata_action_ = nullptr;
  _impl_.reindex_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchAppRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.App app = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_app(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchAppRequest.action"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.PatchAction metadata_action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool reindex = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.reindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchAppRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchAppRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.App app = 2;
  if (this->_internal_has_app()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::app(this),
        _Internal::app(this).GetCachedSize(), target, stream);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchAppRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  // .clarifai.api.PatchAction metadata_action = 4;
  if (this->_internal_has_metadata_action()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::metadata_action(this),
        _Internal::metadata_action(this).GetCachedSize(), target, stream);
  }

  // bool reindex = 5;
  if (this->_internal_reindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_reindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchAppRequest)
  return target;
}

size_t PatchAppRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchAppRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string action = 3;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // .clarifai.api.App app = 2;
  if (this->_internal_has_app()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.app_);
  }

  // .clarifai.api.PatchAction metadata_action = 4;
  if (this->_internal_has_metadata_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_action_);
  }

  // bool reindex = 5;
  if (this->_internal_reindex() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchAppRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PatchAppRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchAppRequest::GetClassData() const { return &_class_data_; }


void PatchAppRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PatchAppRequest*>(&to_msg);
  auto& from = static_cast<const PatchAppRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchAppRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_has_app()) {
    _this->_internal_mutable_app()->::clarifai::api::App::MergeFrom(
        from._internal_app());
  }
  if (from._internal_has_metadata_action()) {
    _this->_internal_mutable_metadata_action()->::clarifai::api::PatchAction::MergeFrom(
        from._internal_metadata_action());
  }
  if (from._internal_reindex() != 0) {
    _this->_internal_set_reindex(from._internal_reindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchAppRequest::CopyFrom(const PatchAppRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchAppRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchAppRequest::IsInitialized() const {
  return true;
}

void PatchAppRequest::InternalSwap(PatchAppRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PatchAppRequest, _impl_.reindex_)
      + sizeof(PatchAppRequest::_impl_.reindex_)
      - PROTOBUF_FIELD_OFFSET(PatchAppRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchAppRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[16]);
}

// ===================================================================

class PatchAppsIdsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchAppsIdsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchAppsIdsRequest::_Internal::user_app_id(const PatchAppsIdsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PatchAppsIdsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
PatchAppsIdsRequest::PatchAppsIdsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchAppsIdsRequest)
}
PatchAppsIdsRequest::PatchAppsIdsRequest(const PatchAppsIdsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PatchAppsIdsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){from._impl_.ids_}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchAppsIdsRequest)
}

inline void PatchAppsIdsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){arena}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PatchAppsIdsRequest::~PatchAppsIdsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchAppsIdsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatchAppsIdsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_.~RepeatedPtrField();
  _impl_.action_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PatchAppsIdsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatchAppsIdsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchAppsIdsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ids_.Clear();
  _impl_.action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchAppsIdsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.IdUpdateSource ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchAppsIdsRequest.action"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchAppsIdsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchAppsIdsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.IdUpdateSource ids = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ids_size()); i < n; i++) {
    const auto& repfield = this->_internal_ids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchAppsIdsRequest.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchAppsIdsRequest)
  return target;
}

size_t PatchAppsIdsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchAppsIdsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.IdUpdateSource ids = 3;
  total_size += 1UL * this->_internal_ids_size();
  for (const auto& msg : this->_impl_.ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchAppsIdsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PatchAppsIdsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchAppsIdsRequest::GetClassData() const { return &_class_data_; }


void PatchAppsIdsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PatchAppsIdsRequest*>(&to_msg);
  auto& from = static_cast<const PatchAppsIdsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchAppsIdsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_.MergeFrom(from._impl_.ids_);
  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchAppsIdsRequest::CopyFrom(const PatchAppsIdsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchAppsIdsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchAppsIdsRequest::IsInitialized() const {
  return true;
}

void PatchAppsIdsRequest::InternalSwap(PatchAppsIdsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ids_.InternalSwap(&other->_impl_.ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchAppsIdsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[17]);
}

// ===================================================================

class PostAppsSearchesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostAppsSearchesRequest* msg);
  static const ::clarifai::api::AppQuery& app_query(const PostAppsSearchesRequest* msg);
  static const ::clarifai::api::Pagination& pagination(const PostAppsSearchesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostAppsSearchesRequest::_Internal::user_app_id(const PostAppsSearchesRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
const ::clarifai::api::AppQuery&
PostAppsSearchesRequest::_Internal::app_query(const PostAppsSearchesRequest* msg) {
  return *msg->_impl_.app_query_;
}
const ::clarifai::api::Pagination&
PostAppsSearchesRequest::_Internal::pagination(const PostAppsSearchesRequest* msg) {
  return *msg->_impl_.pagination_;
}
void PostAppsSearchesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostAppsSearchesRequest::clear_app_query() {
  if (GetArenaForAllocation() == nullptr && _impl_.app_query_ != nullptr) {
    delete _impl_.app_query_;
  }
  _impl_.app_query_ = nullptr;
}
PostAppsSearchesRequest::PostAppsSearchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostAppsSearchesRequest)
}
PostAppsSearchesRequest::PostAppsSearchesRequest(const PostAppsSearchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostAppsSearchesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.app_query_){nullptr}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  if (from._internal_has_app_query()) {
    _this->_impl_.app_query_ = new ::clarifai::api::AppQuery(*from._impl_.app_query_);
  }
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::clarifai::api::Pagination(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostAppsSearchesRequest)
}

inline void PostAppsSearchesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.app_query_){nullptr}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PostAppsSearchesRequest::~PostAppsSearchesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostAppsSearchesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostAppsSearchesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
  if (this != internal_default_instance()) delete _impl_.app_query_;
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void PostAppsSearchesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostAppsSearchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostAppsSearchesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.app_query_ != nullptr) {
    delete _impl_.app_query_;
  }
  _impl_.app_query_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostAppsSearchesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.AppQuery app_query = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_query(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Pagination pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostAppsSearchesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostAppsSearchesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.AppQuery app_query = 2;
  if (this->_internal_has_app_query()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::app_query(this),
        _Internal::app_query(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostAppsSearchesRequest)
  return target;
}

size_t PostAppsSearchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostAppsSearchesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // .clarifai.api.AppQuery app_query = 2;
  if (this->_internal_has_app_query()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.app_query_);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostAppsSearchesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostAppsSearchesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostAppsSearchesRequest::GetClassData() const { return &_class_data_; }


void PostAppsSearchesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostAppsSearchesRequest*>(&to_msg);
  auto& from = static_cast<const PostAppsSearchesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostAppsSearchesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_has_app_query()) {
    _this->_internal_mutable_app_query()->::clarifai::api::AppQuery::MergeFrom(
        from._internal_app_query());
  }
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::clarifai::api::Pagination::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostAppsSearchesRequest::CopyFrom(const PostAppsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostAppsSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostAppsSearchesRequest::IsInitialized() const {
  return true;
}

void PostAppsSearchesRequest::InternalSwap(PostAppsSearchesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostAppsSearchesRequest, _impl_.pagination_)
      + sizeof(PostAppsSearchesRequest::_impl_.pagination_)
      - PROTOBUF_FIELD_OFFSET(PostAppsSearchesRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostAppsSearchesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[18]);
}

// ===================================================================

class SingleAppResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleAppResponse* msg);
  static const ::clarifai::api::App& app(const SingleAppResponse* msg);
};

const ::clarifai::api::status::Status&
SingleAppResponse::_Internal::status(const SingleAppResponse* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::App&
SingleAppResponse::_Internal::app(const SingleAppResponse* msg) {
  return *msg->_impl_.app_;
}
void SingleAppResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void SingleAppResponse::clear_app() {
  if (GetArenaForAllocation() == nullptr && _impl_.app_ != nullptr) {
    delete _impl_.app_;
  }
  _impl_.app_ = nullptr;
}
SingleAppResponse::SingleAppResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleAppResponse)
}
SingleAppResponse::SingleAppResponse(const SingleAppResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleAppResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.app_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_app()) {
    _this->_impl_.app_ = new ::clarifai::api::App(*from._impl_.app_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleAppResponse)
}

inline void SingleAppResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.app_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SingleAppResponse::~SingleAppResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleAppResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleAppResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.app_;
}

void SingleAppResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleAppResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleAppResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.app_ != nullptr) {
    delete _impl_.app_;
  }
  _impl_.app_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleAppResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.App app = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_app(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleAppResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleAppResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.App app = 2;
  if (this->_internal_has_app()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::app(this),
        _Internal::app(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleAppResponse)
  return target;
}

size_t SingleAppResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleAppResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.App app = 2;
  if (this->_internal_has_app()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.app_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleAppResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleAppResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleAppResponse::GetClassData() const { return &_class_data_; }


void SingleAppResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleAppResponse*>(&to_msg);
  auto& from = static_cast<const SingleAppResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleAppResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_app()) {
    _this->_internal_mutable_app()->::clarifai::api::App::MergeFrom(
        from._internal_app());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleAppResponse::CopyFrom(const SingleAppResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleAppResponse::IsInitialized() const {
  return true;
}

void SingleAppResponse::InternalSwap(SingleAppResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleAppResponse, _impl_.app_)
      + sizeof(SingleAppResponse::_impl_.app_)
      - PROTOBUF_FIELD_OFFSET(SingleAppResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleAppResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[19]);
}

// ===================================================================

class MultiAppResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiAppResponse* msg);
};

const ::clarifai::api::status::Status&
MultiAppResponse::_Internal::status(const MultiAppResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiAppResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiAppResponse::clear_apps() {
  _impl_.apps_.Clear();
}
MultiAppResponse::MultiAppResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiAppResponse)
}
MultiAppResponse::MultiAppResponse(const MultiAppResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiAppResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.apps_){from._impl_.apps_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiAppResponse)
}

inline void MultiAppResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.apps_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiAppResponse::~MultiAppResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiAppResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiAppResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.apps_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiAppResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiAppResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiAppResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.apps_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiAppResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.App apps = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_apps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiAppResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiAppResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.App apps = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_apps_size()); i < n; i++) {
    const auto& repfield = this->_internal_apps(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiAppResponse)
  return target;
}

size_t MultiAppResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiAppResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.App apps = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_apps_size();
  for (const auto& msg : this->_impl_.apps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiAppResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiAppResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiAppResponse::GetClassData() const { return &_class_data_; }


void MultiAppResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiAppResponse*>(&to_msg);
  auto& from = static_cast<const MultiAppResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiAppResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.apps_.MergeFrom(from._impl_.apps_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiAppResponse::CopyFrom(const MultiAppResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiAppResponse::IsInitialized() const {
  return true;
}

void MultiAppResponse::InternalSwap(MultiAppResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.apps_.InternalSwap(&other->_impl_.apps_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiAppResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[20]);
}

// ===================================================================

class ListCollaboratorsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListCollaboratorsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListCollaboratorsRequest::_Internal::user_app_id(const ListCollaboratorsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListCollaboratorsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
ListCollaboratorsRequest::ListCollaboratorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListCollaboratorsRequest)
}
ListCollaboratorsRequest::ListCollaboratorsRequest(const ListCollaboratorsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListCollaboratorsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.list_all_collaborators_){}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.list_all_collaborators_, &from._impl_.list_all_collaborators_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.per_page_) -
    reinterpret_cast<char*>(&_impl_.list_all_collaborators_)) + sizeof(_impl_.per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListCollaboratorsRequest)
}

inline void ListCollaboratorsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.list_all_collaborators_){false}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListCollaboratorsRequest::~ListCollaboratorsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListCollaboratorsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListCollaboratorsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void ListCollaboratorsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListCollaboratorsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListCollaboratorsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.list_all_collaborators_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.per_page_) -
      reinterpret_cast<char*>(&_impl_.list_all_collaborators_)) + sizeof(_impl_.per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListCollaboratorsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool list_all_collaborators = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.list_all_collaborators_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListCollaboratorsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListCollaboratorsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // bool list_all_collaborators = 2;
  if (this->_internal_list_all_collaborators() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_list_all_collaborators(), target);
  }

  // uint32 page = 3;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_page(), target);
  }

  // uint32 per_page = 4;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListCollaboratorsRequest)
  return target;
}

size_t ListCollaboratorsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListCollaboratorsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // bool list_all_collaborators = 2;
  if (this->_internal_list_all_collaborators() != 0) {
    total_size += 1 + 1;
  }

  // uint32 page = 3;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 4;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListCollaboratorsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListCollaboratorsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListCollaboratorsRequest::GetClassData() const { return &_class_data_; }


void ListCollaboratorsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListCollaboratorsRequest*>(&to_msg);
  auto& from = static_cast<const ListCollaboratorsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListCollaboratorsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_list_all_collaborators() != 0) {
    _this->_internal_set_list_all_collaborators(from._internal_list_all_collaborators());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListCollaboratorsRequest::CopyFrom(const ListCollaboratorsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListCollaboratorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCollaboratorsRequest::IsInitialized() const {
  return true;
}

void ListCollaboratorsRequest::InternalSwap(ListCollaboratorsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListCollaboratorsRequest, _impl_.per_page_)
      + sizeof(ListCollaboratorsRequest::_impl_.per_page_)
      - PROTOBUF_FIELD_OFFSET(ListCollaboratorsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCollaboratorsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[21]);
}

// ===================================================================

class PostCollaboratorsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostCollaboratorsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostCollaboratorsRequest::_Internal::user_app_id(const PostCollaboratorsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PostCollaboratorsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostCollaboratorsRequest::clear_collaborators() {
  _impl_.collaborators_.Clear();
}
PostCollaboratorsRequest::PostCollaboratorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostCollaboratorsRequest)
}
PostCollaboratorsRequest::PostCollaboratorsRequest(const PostCollaboratorsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostCollaboratorsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.collaborators_){from._impl_.collaborators_}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostCollaboratorsRequest)
}

inline void PostCollaboratorsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.collaborators_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PostCollaboratorsRequest::~PostCollaboratorsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostCollaboratorsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostCollaboratorsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.collaborators_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PostCollaboratorsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostCollaboratorsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostCollaboratorsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.collaborators_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostCollaboratorsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Collaborator collaborators = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collaborators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostCollaboratorsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostCollaboratorsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Collaborator collaborators = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_collaborators_size()); i < n; i++) {
    const auto& repfield = this->_internal_collaborators(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostCollaboratorsRequest)
  return target;
}

size_t PostCollaboratorsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostCollaboratorsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Collaborator collaborators = 2;
  total_size += 1UL * this->_internal_collaborators_size();
  for (const auto& msg : this->_impl_.collaborators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostCollaboratorsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostCollaboratorsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostCollaboratorsRequest::GetClassData() const { return &_class_data_; }


void PostCollaboratorsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostCollaboratorsRequest*>(&to_msg);
  auto& from = static_cast<const PostCollaboratorsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostCollaboratorsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.collaborators_.MergeFrom(from._impl_.collaborators_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostCollaboratorsRequest::CopyFrom(const PostCollaboratorsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostCollaboratorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostCollaboratorsRequest::IsInitialized() const {
  return true;
}

void PostCollaboratorsRequest::InternalSwap(PostCollaboratorsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.collaborators_.InternalSwap(&other->_impl_.collaborators_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostCollaboratorsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[22]);
}

// ===================================================================

class PatchCollaboratorsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchCollaboratorsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchCollaboratorsRequest::_Internal::user_app_id(const PatchCollaboratorsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PatchCollaboratorsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PatchCollaboratorsRequest::clear_collaborators() {
  _impl_.collaborators_.Clear();
}
PatchCollaboratorsRequest::PatchCollaboratorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchCollaboratorsRequest)
}
PatchCollaboratorsRequest::PatchCollaboratorsRequest(const PatchCollaboratorsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PatchCollaboratorsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.collaborators_){from._impl_.collaborators_}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchCollaboratorsRequest)
}

inline void PatchCollaboratorsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.collaborators_){arena}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PatchCollaboratorsRequest::~PatchCollaboratorsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchCollaboratorsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatchCollaboratorsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.collaborators_.~RepeatedPtrField();
  _impl_.action_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PatchCollaboratorsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatchCollaboratorsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchCollaboratorsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.collaborators_.Clear();
  _impl_.action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchCollaboratorsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Collaborator collaborators = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collaborators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchCollaboratorsRequest.action"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchCollaboratorsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchCollaboratorsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Collaborator collaborators = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_collaborators_size()); i < n; i++) {
    const auto& repfield = this->_internal_collaborators(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchCollaboratorsRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchCollaboratorsRequest)
  return target;
}

size_t PatchCollaboratorsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchCollaboratorsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Collaborator collaborators = 2;
  total_size += 1UL * this->_internal_collaborators_size();
  for (const auto& msg : this->_impl_.collaborators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchCollaboratorsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PatchCollaboratorsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchCollaboratorsRequest::GetClassData() const { return &_class_data_; }


void PatchCollaboratorsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PatchCollaboratorsRequest*>(&to_msg);
  auto& from = static_cast<const PatchCollaboratorsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchCollaboratorsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.collaborators_.MergeFrom(from._impl_.collaborators_);
  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchCollaboratorsRequest::CopyFrom(const PatchCollaboratorsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchCollaboratorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchCollaboratorsRequest::IsInitialized() const {
  return true;
}

void PatchCollaboratorsRequest::InternalSwap(PatchCollaboratorsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.collaborators_.InternalSwap(&other->_impl_.collaborators_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchCollaboratorsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[23]);
}

// ===================================================================

class DeleteCollaboratorsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteCollaboratorsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteCollaboratorsRequest::_Internal::user_app_id(const DeleteCollaboratorsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void DeleteCollaboratorsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
DeleteCollaboratorsRequest::DeleteCollaboratorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteCollaboratorsRequest)
}
DeleteCollaboratorsRequest::DeleteCollaboratorsRequest(const DeleteCollaboratorsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteCollaboratorsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.collaborator_ids_){from._impl_.collaborator_ids_}
    , decltype(_impl_.user_emails_){from._impl_.user_emails_}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteCollaboratorsRequest)
}

inline void DeleteCollaboratorsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.collaborator_ids_){arena}
    , decltype(_impl_.user_emails_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeleteCollaboratorsRequest::~DeleteCollaboratorsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteCollaboratorsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteCollaboratorsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.collaborator_ids_.~RepeatedPtrField();
  _impl_.user_emails_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void DeleteCollaboratorsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteCollaboratorsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteCollaboratorsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.collaborator_ids_.Clear();
  _impl_.user_emails_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteCollaboratorsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string collaborator_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_collaborator_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DeleteCollaboratorsRequest.collaborator_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string user_emails = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_emails();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DeleteCollaboratorsRequest.user_emails"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteCollaboratorsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteCollaboratorsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated string collaborator_ids = 2;
  for (int i = 0, n = this->_internal_collaborator_ids_size(); i < n; i++) {
    const auto& s = this->_internal_collaborator_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteCollaboratorsRequest.collaborator_ids");
    target = stream->WriteString(2, s, target);
  }

  // repeated string user_emails = 3;
  for (int i = 0, n = this->_internal_user_emails_size(); i < n; i++) {
    const auto& s = this->_internal_user_emails(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteCollaboratorsRequest.user_emails");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteCollaboratorsRequest)
  return target;
}

size_t DeleteCollaboratorsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteCollaboratorsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string collaborator_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.collaborator_ids_.size());
  for (int i = 0, n = _impl_.collaborator_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.collaborator_ids_.Get(i));
  }

  // repeated string user_emails = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.user_emails_.size());
  for (int i = 0, n = _impl_.user_emails_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.user_emails_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteCollaboratorsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteCollaboratorsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteCollaboratorsRequest::GetClassData() const { return &_class_data_; }


void DeleteCollaboratorsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteCollaboratorsRequest*>(&to_msg);
  auto& from = static_cast<const DeleteCollaboratorsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteCollaboratorsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.collaborator_ids_.MergeFrom(from._impl_.collaborator_ids_);
  _this->_impl_.user_emails_.MergeFrom(from._impl_.user_emails_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteCollaboratorsRequest::CopyFrom(const DeleteCollaboratorsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteCollaboratorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCollaboratorsRequest::IsInitialized() const {
  return true;
}

void DeleteCollaboratorsRequest::InternalSwap(DeleteCollaboratorsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.collaborator_ids_.InternalSwap(&other->_impl_.collaborator_ids_);
  _impl_.user_emails_.InternalSwap(&other->_impl_.user_emails_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteCollaboratorsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[24]);
}

// ===================================================================

class MultiCollaboratorsResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiCollaboratorsResponse* msg);
};

const ::clarifai::api::status::Status&
MultiCollaboratorsResponse::_Internal::status(const MultiCollaboratorsResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiCollaboratorsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiCollaboratorsResponse::clear_collaborators() {
  _impl_.collaborators_.Clear();
}
MultiCollaboratorsResponse::MultiCollaboratorsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiCollaboratorsResponse)
}
MultiCollaboratorsResponse::MultiCollaboratorsResponse(const MultiCollaboratorsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiCollaboratorsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.collaborators_){from._impl_.collaborators_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiCollaboratorsResponse)
}

inline void MultiCollaboratorsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.collaborators_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiCollaboratorsResponse::~MultiCollaboratorsResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiCollaboratorsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiCollaboratorsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.collaborators_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiCollaboratorsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiCollaboratorsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiCollaboratorsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.collaborators_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiCollaboratorsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Collaborator collaborators = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collaborators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiCollaboratorsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiCollaboratorsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Collaborator collaborators = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_collaborators_size()); i < n; i++) {
    const auto& repfield = this->_internal_collaborators(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiCollaboratorsResponse)
  return target;
}

size_t MultiCollaboratorsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiCollaboratorsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Collaborator collaborators = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_collaborators_size();
  for (const auto& msg : this->_impl_.collaborators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiCollaboratorsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiCollaboratorsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiCollaboratorsResponse::GetClassData() const { return &_class_data_; }


void MultiCollaboratorsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiCollaboratorsResponse*>(&to_msg);
  auto& from = static_cast<const MultiCollaboratorsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiCollaboratorsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.collaborators_.MergeFrom(from._impl_.collaborators_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiCollaboratorsResponse::CopyFrom(const MultiCollaboratorsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiCollaboratorsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiCollaboratorsResponse::IsInitialized() const {
  return true;
}

void MultiCollaboratorsResponse::InternalSwap(MultiCollaboratorsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.collaborators_.InternalSwap(&other->_impl_.collaborators_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiCollaboratorsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[25]);
}

// ===================================================================

class ListCollaborationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListCollaborationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListCollaborationsRequest::_Internal::user_app_id(const ListCollaborationsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListCollaborationsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
ListCollaborationsRequest::ListCollaborationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListCollaborationsRequest)
}
ListCollaborationsRequest::ListCollaborationsRequest(const ListCollaborationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListCollaborationsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.per_page_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListCollaborationsRequest)
}

inline void ListCollaborationsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListCollaborationsRequest::~ListCollaborationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListCollaborationsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListCollaborationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void ListCollaborationsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListCollaborationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListCollaborationsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.per_page_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListCollaborationsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListCollaborationsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListCollaborationsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListCollaborationsRequest)
  return target;
}

size_t ListCollaborationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListCollaborationsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListCollaborationsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListCollaborationsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListCollaborationsRequest::GetClassData() const { return &_class_data_; }


void ListCollaborationsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListCollaborationsRequest*>(&to_msg);
  auto& from = static_cast<const ListCollaborationsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListCollaborationsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListCollaborationsRequest::CopyFrom(const ListCollaborationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListCollaborationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCollaborationsRequest::IsInitialized() const {
  return true;
}

void ListCollaborationsRequest::InternalSwap(ListCollaborationsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListCollaborationsRequest, _impl_.per_page_)
      + sizeof(ListCollaborationsRequest::_impl_.per_page_)
      - PROTOBUF_FIELD_OFFSET(ListCollaborationsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCollaborationsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[26]);
}

// ===================================================================

class MultiCollaborationsResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiCollaborationsResponse* msg);
};

const ::clarifai::api::status::Status&
MultiCollaborationsResponse::_Internal::status(const MultiCollaborationsResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiCollaborationsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiCollaborationsResponse::clear_collaborations() {
  _impl_.collaborations_.Clear();
}
MultiCollaborationsResponse::MultiCollaborationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiCollaborationsResponse)
}
MultiCollaborationsResponse::MultiCollaborationsResponse(const MultiCollaborationsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiCollaborationsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.collaborations_){from._impl_.collaborations_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiCollaborationsResponse)
}

inline void MultiCollaborationsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.collaborations_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiCollaborationsResponse::~MultiCollaborationsResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiCollaborationsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiCollaborationsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.collaborations_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiCollaborationsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiCollaborationsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiCollaborationsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.collaborations_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiCollaborationsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Collaboration collaborations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collaborations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiCollaborationsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiCollaborationsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Collaboration collaborations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_collaborations_size()); i < n; i++) {
    const auto& repfield = this->_internal_collaborations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiCollaborationsResponse)
  return target;
}

size_t MultiCollaborationsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiCollaborationsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Collaboration collaborations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_collaborations_size();
  for (const auto& msg : this->_impl_.collaborations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiCollaborationsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiCollaborationsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiCollaborationsResponse::GetClassData() const { return &_class_data_; }


void MultiCollaborationsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiCollaborationsResponse*>(&to_msg);
  auto& from = static_cast<const MultiCollaborationsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiCollaborationsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.collaborations_.MergeFrom(from._impl_.collaborations_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiCollaborationsResponse::CopyFrom(const MultiCollaborationsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiCollaborationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiCollaborationsResponse::IsInitialized() const {
  return true;
}

void MultiCollaborationsResponse::InternalSwap(MultiCollaborationsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.collaborations_.InternalSwap(&other->_impl_.collaborations_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiCollaborationsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[27]);
}

// ===================================================================

class GetStatusCodeRequest::_Internal {
 public:
};

GetStatusCodeRequest::GetStatusCodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetStatusCodeRequest)
}
GetStatusCodeRequest::GetStatusCodeRequest(const GetStatusCodeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetStatusCodeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_code_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.status_code_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_code_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status_code_id().empty()) {
    _this->_impl_.status_code_id_.Set(from._internal_status_code_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetStatusCodeRequest)
}

inline void GetStatusCodeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_code_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.status_code_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_code_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetStatusCodeRequest::~GetStatusCodeRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetStatusCodeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetStatusCodeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.status_code_id_.Destroy();
}

void GetStatusCodeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetStatusCodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetStatusCodeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_code_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStatusCodeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string status_code_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_status_code_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetStatusCodeRequest.status_code_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetStatusCodeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetStatusCodeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string status_code_id = 1;
  if (!this->_internal_status_code_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status_code_id().data(), static_cast<int>(this->_internal_status_code_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetStatusCodeRequest.status_code_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status_code_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetStatusCodeRequest)
  return target;
}

size_t GetStatusCodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetStatusCodeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status_code_id = 1;
  if (!this->_internal_status_code_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status_code_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetStatusCodeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetStatusCodeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetStatusCodeRequest::GetClassData() const { return &_class_data_; }


void GetStatusCodeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetStatusCodeRequest*>(&to_msg);
  auto& from = static_cast<const GetStatusCodeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetStatusCodeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status_code_id().empty()) {
    _this->_internal_set_status_code_id(from._internal_status_code_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetStatusCodeRequest::CopyFrom(const GetStatusCodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetStatusCodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStatusCodeRequest::IsInitialized() const {
  return true;
}

void GetStatusCodeRequest::InternalSwap(GetStatusCodeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_code_id_, lhs_arena,
      &other->_impl_.status_code_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStatusCodeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[28]);
}

// ===================================================================

class ListStatusCodesRequest::_Internal {
 public:
};

ListStatusCodesRequest::ListStatusCodesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListStatusCodesRequest)
}
ListStatusCodesRequest::ListStatusCodesRequest(const ListStatusCodesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ListStatusCodesRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListStatusCodesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListStatusCodesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListStatusCodesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ListStatusCodesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[29]);
}

// ===================================================================

class SingleStatusCodeResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleStatusCodeResponse* msg);
};

const ::clarifai::api::status::Status&
SingleStatusCodeResponse::_Internal::status(const SingleStatusCodeResponse* msg) {
  return *msg->_impl_.status_;
}
void SingleStatusCodeResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
SingleStatusCodeResponse::SingleStatusCodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleStatusCodeResponse)
}
SingleStatusCodeResponse::SingleStatusCodeResponse(const SingleStatusCodeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleStatusCodeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleStatusCodeResponse)
}

inline void SingleStatusCodeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SingleStatusCodeResponse::~SingleStatusCodeResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleStatusCodeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleStatusCodeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void SingleStatusCodeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleStatusCodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleStatusCodeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleStatusCodeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleStatusCodeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleStatusCodeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleStatusCodeResponse)
  return target;
}

size_t SingleStatusCodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleStatusCodeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleStatusCodeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleStatusCodeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleStatusCodeResponse::GetClassData() const { return &_class_data_; }


void SingleStatusCodeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleStatusCodeResponse*>(&to_msg);
  auto& from = static_cast<const SingleStatusCodeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleStatusCodeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleStatusCodeResponse::CopyFrom(const SingleStatusCodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleStatusCodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleStatusCodeResponse::IsInitialized() const {
  return true;
}

void SingleStatusCodeResponse::InternalSwap(SingleStatusCodeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleStatusCodeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[30]);
}

// ===================================================================

class MultiStatusCodeResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiStatusCodeResponse* msg);
};

const ::clarifai::api::status::Status&
MultiStatusCodeResponse::_Internal::status(const MultiStatusCodeResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiStatusCodeResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiStatusCodeResponse::clear_statuses() {
  _impl_.statuses_.Clear();
}
MultiStatusCodeResponse::MultiStatusCodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiStatusCodeResponse)
}
MultiStatusCodeResponse::MultiStatusCodeResponse(const MultiStatusCodeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiStatusCodeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.statuses_){from._impl_.statuses_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiStatusCodeResponse)
}

inline void MultiStatusCodeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.statuses_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiStatusCodeResponse::~MultiStatusCodeResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiStatusCodeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiStatusCodeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.statuses_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiStatusCodeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiStatusCodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiStatusCodeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.statuses_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiStatusCodeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.status.Status statuses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_statuses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiStatusCodeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiStatusCodeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.status.Status statuses = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_statuses_size()); i < n; i++) {
    const auto& repfield = this->_internal_statuses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiStatusCodeResponse)
  return target;
}

size_t MultiStatusCodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiStatusCodeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.status.Status statuses = 2;
  total_size += 1UL * this->_internal_statuses_size();
  for (const auto& msg : this->_impl_.statuses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiStatusCodeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiStatusCodeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiStatusCodeResponse::GetClassData() const { return &_class_data_; }


void MultiStatusCodeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiStatusCodeResponse*>(&to_msg);
  auto& from = static_cast<const MultiStatusCodeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiStatusCodeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.statuses_.MergeFrom(from._impl_.statuses_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiStatusCodeResponse::CopyFrom(const MultiStatusCodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiStatusCodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiStatusCodeResponse::IsInitialized() const {
  return true;
}

void MultiStatusCodeResponse::InternalSwap(MultiStatusCodeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.statuses_.InternalSwap(&other->_impl_.statuses_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiStatusCodeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[31]);
}

// ===================================================================

class GetConceptRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetConceptRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetConceptRequest::_Internal::user_app_id(const GetConceptRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void GetConceptRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
GetConceptRequest::GetConceptRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetConceptRequest)
}
GetConceptRequest::GetConceptRequest(const GetConceptRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetConceptRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.concept_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.concept_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.concept_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_concept_id().empty()) {
    _this->_impl_.concept_id_.Set(from._internal_concept_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetConceptRequest)
}

inline void GetConceptRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.concept_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.concept_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.concept_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetConceptRequest::~GetConceptRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetConceptRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetConceptRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.concept_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void GetConceptRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetConceptRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetConceptRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.concept_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetConceptRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string concept_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_concept_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetConceptRequest.concept_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetConceptRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetConceptRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string concept_id = 2;
  if (!this->_internal_concept_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concept_id().data(), static_cast<int>(this->_internal_concept_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetConceptRequest.concept_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_concept_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetConceptRequest)
  return target;
}

size_t GetConceptRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetConceptRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string concept_id = 2;
  if (!this->_internal_concept_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concept_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetConceptRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetConceptRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetConceptRequest::GetClassData() const { return &_class_data_; }


void GetConceptRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetConceptRequest*>(&to_msg);
  auto& from = static_cast<const GetConceptRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetConceptRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_concept_id().empty()) {
    _this->_internal_set_concept_id(from._internal_concept_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetConceptRequest::CopyFrom(const GetConceptRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetConceptRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConceptRequest::IsInitialized() const {
  return true;
}

void GetConceptRequest::InternalSwap(GetConceptRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.concept_id_, lhs_arena,
      &other->_impl_.concept_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConceptRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[32]);
}

// ===================================================================

class ListConceptsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListConceptsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListConceptsRequest::_Internal::user_app_id(const ListConceptsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListConceptsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
ListConceptsRequest::ListConceptsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListConceptsRequest)
}
ListConceptsRequest::ListConceptsRequest(const ListConceptsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListConceptsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.per_page_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListConceptsRequest)
}

inline void ListConceptsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListConceptsRequest::~ListConceptsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListConceptsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListConceptsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void ListConceptsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListConceptsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListConceptsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.per_page_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListConceptsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListConceptsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListConceptsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListConceptsRequest)
  return target;
}

size_t ListConceptsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListConceptsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListConceptsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListConceptsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListConceptsRequest::GetClassData() const { return &_class_data_; }


void ListConceptsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListConceptsRequest*>(&to_msg);
  auto& from = static_cast<const ListConceptsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListConceptsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListConceptsRequest::CopyFrom(const ListConceptsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListConceptsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListConceptsRequest::IsInitialized() const {
  return true;
}

void ListConceptsRequest::InternalSwap(ListConceptsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListConceptsRequest, _impl_.per_page_)
      + sizeof(ListConceptsRequest::_impl_.per_page_)
      - PROTOBUF_FIELD_OFFSET(ListConceptsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListConceptsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[33]);
}

// ===================================================================

class ListModelConceptsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListModelConceptsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListModelConceptsRequest::_Internal::user_app_id(const ListModelConceptsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListModelConceptsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
ListModelConceptsRequest::ListModelConceptsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListModelConceptsRequest)
}
ListModelConceptsRequest::ListModelConceptsRequest(const ListModelConceptsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListModelConceptsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.model_id_){}
    , decltype(_impl_.version_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    _this->_impl_.model_id_.Set(from._internal_model_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version_id().empty()) {
    _this->_impl_.version_id_.Set(from._internal_version_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.per_page_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListModelConceptsRequest)
}

inline void ListModelConceptsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.model_id_){}
    , decltype(_impl_.version_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListModelConceptsRequest::~ListModelConceptsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListModelConceptsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListModelConceptsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_id_.Destroy();
  _impl_.version_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void ListModelConceptsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListModelConceptsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListModelConceptsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.model_id_.ClearToEmpty();
  _impl_.version_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.per_page_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListModelConceptsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListModelConceptsRequest.model_id"));
        } else
          goto handle_unusual;
        continue;
      // string version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_version_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListModelConceptsRequest.version_id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListModelConceptsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListModelConceptsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelConceptsRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string version_id = 3;
  if (!this->_internal_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelConceptsRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version_id(), target);
  }

  // uint32 page = 4;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_page(), target);
  }

  // uint32 per_page = 5;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListModelConceptsRequest)
  return target;
}

size_t ListModelConceptsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListModelConceptsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string version_id = 3;
  if (!this->_internal_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // uint32 page = 4;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 5;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListModelConceptsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListModelConceptsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListModelConceptsRequest::GetClassData() const { return &_class_data_; }


void ListModelConceptsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListModelConceptsRequest*>(&to_msg);
  auto& from = static_cast<const ListModelConceptsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListModelConceptsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_model_id().empty()) {
    _this->_internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_version_id().empty()) {
    _this->_internal_set_version_id(from._internal_version_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListModelConceptsRequest::CopyFrom(const ListModelConceptsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListModelConceptsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListModelConceptsRequest::IsInitialized() const {
  return true;
}

void ListModelConceptsRequest::InternalSwap(ListModelConceptsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_id_, lhs_arena,
      &other->_impl_.model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_id_, lhs_arena,
      &other->_impl_.version_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListModelConceptsRequest, _impl_.per_page_)
      + sizeof(ListModelConceptsRequest::_impl_.per_page_)
      - PROTOBUF_FIELD_OFFSET(ListModelConceptsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListModelConceptsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[34]);
}

// ===================================================================

class PostConceptsSearchesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostConceptsSearchesRequest* msg);
  static const ::clarifai::api::ConceptQuery& concept_query(const PostConceptsSearchesRequest* msg);
  static const ::clarifai::api::Pagination& pagination(const PostConceptsSearchesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostConceptsSearchesRequest::_Internal::user_app_id(const PostConceptsSearchesRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
const ::clarifai::api::ConceptQuery&
PostConceptsSearchesRequest::_Internal::concept_query(const PostConceptsSearchesRequest* msg) {
  return *msg->_impl_.concept_query_;
}
const ::clarifai::api::Pagination&
PostConceptsSearchesRequest::_Internal::pagination(const PostConceptsSearchesRequest* msg) {
  return *msg->_impl_.pagination_;
}
void PostConceptsSearchesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostConceptsSearchesRequest::clear_concept_query() {
  if (GetArenaForAllocation() == nullptr && _impl_.concept_query_ != nullptr) {
    delete _impl_.concept_query_;
  }
  _impl_.concept_query_ = nullptr;
}
PostConceptsSearchesRequest::PostConceptsSearchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostConceptsSearchesRequest)
}
PostConceptsSearchesRequest::PostConceptsSearchesRequest(const PostConceptsSearchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostConceptsSearchesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.concept_query_){nullptr}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  if (from._internal_has_concept_query()) {
    _this->_impl_.concept_query_ = new ::clarifai::api::ConceptQuery(*from._impl_.concept_query_);
  }
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::clarifai::api::Pagination(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostConceptsSearchesRequest)
}

inline void PostConceptsSearchesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.concept_query_){nullptr}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PostConceptsSearchesRequest::~PostConceptsSearchesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostConceptsSearchesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostConceptsSearchesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
  if (this != internal_default_instance()) delete _impl_.concept_query_;
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void PostConceptsSearchesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostConceptsSearchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostConceptsSearchesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.concept_query_ != nullptr) {
    delete _impl_.concept_query_;
  }
  _impl_.concept_query_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostConceptsSearchesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ConceptQuery concept_query = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_concept_query(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Pagination pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostConceptsSearchesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostConceptsSearchesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.ConceptQuery concept_query = 2;
  if (this->_internal_has_concept_query()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::concept_query(this),
        _Internal::concept_query(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostConceptsSearchesRequest)
  return target;
}

size_t PostConceptsSearchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostConceptsSearchesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // .clarifai.api.ConceptQuery concept_query = 2;
  if (this->_internal_has_concept_query()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.concept_query_);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostConceptsSearchesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostConceptsSearchesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostConceptsSearchesRequest::GetClassData() const { return &_class_data_; }


void PostConceptsSearchesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostConceptsSearchesRequest*>(&to_msg);
  auto& from = static_cast<const PostConceptsSearchesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostConceptsSearchesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_has_concept_query()) {
    _this->_internal_mutable_concept_query()->::clarifai::api::ConceptQuery::MergeFrom(
        from._internal_concept_query());
  }
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::clarifai::api::Pagination::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostConceptsSearchesRequest::CopyFrom(const PostConceptsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostConceptsSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostConceptsSearchesRequest::IsInitialized() const {
  return true;
}

void PostConceptsSearchesRequest::InternalSwap(PostConceptsSearchesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostConceptsSearchesRequest, _impl_.pagination_)
      + sizeof(PostConceptsSearchesRequest::_impl_.pagination_)
      - PROTOBUF_FIELD_OFFSET(PostConceptsSearchesRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostConceptsSearchesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[35]);
}

// ===================================================================

class PostConceptsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostConceptsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostConceptsRequest::_Internal::user_app_id(const PostConceptsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PostConceptsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostConceptsRequest::clear_concepts() {
  _impl_.concepts_.Clear();
}
PostConceptsRequest::PostConceptsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostConceptsRequest)
}
PostConceptsRequest::PostConceptsRequest(const PostConceptsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostConceptsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.concepts_){from._impl_.concepts_}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostConceptsRequest)
}

inline void PostConceptsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.concepts_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PostConceptsRequest::~PostConceptsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostConceptsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostConceptsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.concepts_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PostConceptsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostConceptsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostConceptsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.concepts_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostConceptsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Concept concepts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concepts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostConceptsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostConceptsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Concept concepts = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_concepts_size()); i < n; i++) {
    const auto& repfield = this->_internal_concepts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostConceptsRequest)
  return target;
}

size_t PostConceptsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostConceptsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Concept concepts = 2;
  total_size += 1UL * this->_internal_concepts_size();
  for (const auto& msg : this->_impl_.concepts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostConceptsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostConceptsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostConceptsRequest::GetClassData() const { return &_class_data_; }


void PostConceptsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostConceptsRequest*>(&to_msg);
  auto& from = static_cast<const PostConceptsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostConceptsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.concepts_.MergeFrom(from._impl_.concepts_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostConceptsRequest::CopyFrom(const PostConceptsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostConceptsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostConceptsRequest::IsInitialized() const {
  return true;
}

void PostConceptsRequest::InternalSwap(PostConceptsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.concepts_.InternalSwap(&other->_impl_.concepts_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostConceptsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[36]);
}

// ===================================================================

class PatchConceptsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchConceptsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchConceptsRequest::_Internal::user_app_id(const PatchConceptsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PatchConceptsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PatchConceptsRequest::clear_concepts() {
  _impl_.concepts_.Clear();
}
PatchConceptsRequest::PatchConceptsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchConceptsRequest)
}
PatchConceptsRequest::PatchConceptsRequest(const PatchConceptsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PatchConceptsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.concepts_){from._impl_.concepts_}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchConceptsRequest)
}

inline void PatchConceptsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.concepts_){arena}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PatchConceptsRequest::~PatchConceptsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchConceptsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatchConceptsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.concepts_.~RepeatedPtrField();
  _impl_.action_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PatchConceptsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatchConceptsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchConceptsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.concepts_.Clear();
  _impl_.action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchConceptsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Concept concepts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concepts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchConceptsRequest.action"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchConceptsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchConceptsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Concept concepts = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_concepts_size()); i < n; i++) {
    const auto& repfield = this->_internal_concepts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchConceptsRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchConceptsRequest)
  return target;
}

size_t PatchConceptsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchConceptsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Concept concepts = 2;
  total_size += 1UL * this->_internal_concepts_size();
  for (const auto& msg : this->_impl_.concepts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchConceptsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PatchConceptsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchConceptsRequest::GetClassData() const { return &_class_data_; }


void PatchConceptsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PatchConceptsRequest*>(&to_msg);
  auto& from = static_cast<const PatchConceptsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchConceptsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.concepts_.MergeFrom(from._impl_.concepts_);
  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchConceptsRequest::CopyFrom(const PatchConceptsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchConceptsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchConceptsRequest::IsInitialized() const {
  return true;
}

void PatchConceptsRequest::InternalSwap(PatchConceptsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.concepts_.InternalSwap(&other->_impl_.concepts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchConceptsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[37]);
}

// ===================================================================

class GetConceptCountsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetConceptCountsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetConceptCountsRequest::_Internal::user_app_id(const GetConceptCountsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void GetConceptCountsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
GetConceptCountsRequest::GetConceptCountsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetConceptCountsRequest)
}
GetConceptCountsRequest::GetConceptCountsRequest(const GetConceptCountsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetConceptCountsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.per_page_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetConceptCountsRequest)
}

inline void GetConceptCountsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetConceptCountsRequest::~GetConceptCountsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetConceptCountsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetConceptCountsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void GetConceptCountsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetConceptCountsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetConceptCountsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.per_page_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetConceptCountsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetConceptCountsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetConceptCountsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetConceptCountsRequest)
  return target;
}

size_t GetConceptCountsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetConceptCountsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetConceptCountsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetConceptCountsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetConceptCountsRequest::GetClassData() const { return &_class_data_; }


void GetConceptCountsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetConceptCountsRequest*>(&to_msg);
  auto& from = static_cast<const GetConceptCountsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetConceptCountsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetConceptCountsRequest::CopyFrom(const GetConceptCountsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetConceptCountsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConceptCountsRequest::IsInitialized() const {
  return true;
}

void GetConceptCountsRequest::InternalSwap(GetConceptCountsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetConceptCountsRequest, _impl_.per_page_)
      + sizeof(GetConceptCountsRequest::_impl_.per_page_)
      - PROTOBUF_FIELD_OFFSET(GetConceptCountsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConceptCountsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[38]);
}

// ===================================================================

class SingleConceptResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleConceptResponse* msg);
  static const ::clarifai::api::Concept& concept(const SingleConceptResponse* msg);
};

const ::clarifai::api::status::Status&
SingleConceptResponse::_Internal::status(const SingleConceptResponse* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::Concept&
SingleConceptResponse::_Internal::concept(const SingleConceptResponse* msg) {
  return *msg->_impl_.concept_;
}
void SingleConceptResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void SingleConceptResponse::clear_concept() {
  if (GetArenaForAllocation() == nullptr && _impl_.concept_ != nullptr) {
    delete _impl_.concept_;
  }
  _impl_.concept_ = nullptr;
}
SingleConceptResponse::SingleConceptResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleConceptResponse)
}
SingleConceptResponse::SingleConceptResponse(const SingleConceptResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleConceptResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.concept_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_concept()) {
    _this->_impl_.concept_ = new ::clarifai::api::Concept(*from._impl_.concept_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleConceptResponse)
}

inline void SingleConceptResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.concept_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SingleConceptResponse::~SingleConceptResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleConceptResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleConceptResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.concept_;
}

void SingleConceptResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleConceptResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleConceptResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.concept_ != nullptr) {
    delete _impl_.concept_;
  }
  _impl_.concept_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleConceptResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Concept concept = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_concept(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleConceptResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleConceptResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Concept concept = 2;
  if (this->_internal_has_concept()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::concept(this),
        _Internal::concept(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleConceptResponse)
  return target;
}

size_t SingleConceptResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleConceptResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.Concept concept = 2;
  if (this->_internal_has_concept()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.concept_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleConceptResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleConceptResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleConceptResponse::GetClassData() const { return &_class_data_; }


void SingleConceptResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleConceptResponse*>(&to_msg);
  auto& from = static_cast<const SingleConceptResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleConceptResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_concept()) {
    _this->_internal_mutable_concept()->::clarifai::api::Concept::MergeFrom(
        from._internal_concept());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleConceptResponse::CopyFrom(const SingleConceptResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleConceptResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleConceptResponse::IsInitialized() const {
  return true;
}

void SingleConceptResponse::InternalSwap(SingleConceptResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleConceptResponse, _impl_.concept_)
      + sizeof(SingleConceptResponse::_impl_.concept_)
      - PROTOBUF_FIELD_OFFSET(SingleConceptResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleConceptResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[39]);
}

// ===================================================================

class MultiConceptResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiConceptResponse* msg);
};

const ::clarifai::api::status::Status&
MultiConceptResponse::_Internal::status(const MultiConceptResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiConceptResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiConceptResponse::clear_concepts() {
  _impl_.concepts_.Clear();
}
MultiConceptResponse::MultiConceptResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiConceptResponse)
}
MultiConceptResponse::MultiConceptResponse(const MultiConceptResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiConceptResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.concepts_){from._impl_.concepts_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiConceptResponse)
}

inline void MultiConceptResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.concepts_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiConceptResponse::~MultiConceptResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiConceptResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiConceptResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.concepts_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiConceptResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiConceptResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiConceptResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.concepts_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiConceptResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Concept concepts = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concepts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiConceptResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiConceptResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Concept concepts = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_concepts_size()); i < n; i++) {
    const auto& repfield = this->_internal_concepts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiConceptResponse)
  return target;
}

size_t MultiConceptResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiConceptResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Concept concepts = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_concepts_size();
  for (const auto& msg : this->_impl_.concepts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiConceptResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiConceptResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiConceptResponse::GetClassData() const { return &_class_data_; }


void MultiConceptResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiConceptResponse*>(&to_msg);
  auto& from = static_cast<const MultiConceptResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiConceptResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.concepts_.MergeFrom(from._impl_.concepts_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiConceptResponse::CopyFrom(const MultiConceptResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiConceptResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiConceptResponse::IsInitialized() const {
  return true;
}

void MultiConceptResponse::InternalSwap(MultiConceptResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.concepts_.InternalSwap(&other->_impl_.concepts_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiConceptResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[40]);
}

// ===================================================================

class MultiConceptCountResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiConceptCountResponse* msg);
};

const ::clarifai::api::status::Status&
MultiConceptCountResponse::_Internal::status(const MultiConceptCountResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiConceptCountResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiConceptCountResponse::clear_concept_counts() {
  _impl_.concept_counts_.Clear();
}
MultiConceptCountResponse::MultiConceptCountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiConceptCountResponse)
}
MultiConceptCountResponse::MultiConceptCountResponse(const MultiConceptCountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiConceptCountResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.concept_counts_){from._impl_.concept_counts_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiConceptCountResponse)
}

inline void MultiConceptCountResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.concept_counts_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiConceptCountResponse::~MultiConceptCountResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiConceptCountResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiConceptCountResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.concept_counts_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiConceptCountResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiConceptCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiConceptCountResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.concept_counts_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiConceptCountResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ConceptCount concept_counts = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concept_counts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiConceptCountResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiConceptCountResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.ConceptCount concept_counts = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_concept_counts_size()); i < n; i++) {
    const auto& repfield = this->_internal_concept_counts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiConceptCountResponse)
  return target;
}

size_t MultiConceptCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiConceptCountResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ConceptCount concept_counts = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_concept_counts_size();
  for (const auto& msg : this->_impl_.concept_counts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiConceptCountResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiConceptCountResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiConceptCountResponse::GetClassData() const { return &_class_data_; }


void MultiConceptCountResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiConceptCountResponse*>(&to_msg);
  auto& from = static_cast<const MultiConceptCountResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiConceptCountResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.concept_counts_.MergeFrom(from._impl_.concept_counts_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiConceptCountResponse::CopyFrom(const MultiConceptCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiConceptCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiConceptCountResponse::IsInitialized() const {
  return true;
}

void MultiConceptCountResponse::InternalSwap(MultiConceptCountResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.concept_counts_.InternalSwap(&other->_impl_.concept_counts_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiConceptCountResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[41]);
}

// ===================================================================

class ListConceptRelationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListConceptRelationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListConceptRelationsRequest::_Internal::user_app_id(const ListConceptRelationsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListConceptRelationsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
ListConceptRelationsRequest::ListConceptRelationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListConceptRelationsRequest)
}
ListConceptRelationsRequest::ListConceptRelationsRequest(const ListConceptRelationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListConceptRelationsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.concept_id_){}
    , decltype(_impl_.predicate_){}
    , decltype(_impl_.knowledge_graph_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.concept_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.concept_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_concept_id().empty()) {
    _this->_impl_.concept_id_.Set(from._internal_concept_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.predicate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.predicate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_predicate().empty()) {
    _this->_impl_.predicate_.Set(from._internal_predicate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.knowledge_graph_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.knowledge_graph_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_knowledge_graph_id().empty()) {
    _this->_impl_.knowledge_graph_id_.Set(from._internal_knowledge_graph_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.per_page_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListConceptRelationsRequest)
}

inline void ListConceptRelationsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.concept_id_){}
    , decltype(_impl_.predicate_){}
    , decltype(_impl_.knowledge_graph_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.concept_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.concept_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.predicate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.predicate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.knowledge_graph_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.knowledge_graph_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListConceptRelationsRequest::~ListConceptRelationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListConceptRelationsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListConceptRelationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.concept_id_.Destroy();
  _impl_.predicate_.Destroy();
  _impl_.knowledge_graph_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void ListConceptRelationsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListConceptRelationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListConceptRelationsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.concept_id_.ClearToEmpty();
  _impl_.predicate_.ClearToEmpty();
  _impl_.knowledge_graph_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.per_page_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListConceptRelationsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string concept_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_concept_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListConceptRelationsRequest.concept_id"));
        } else
          goto handle_unusual;
        continue;
      // string predicate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_predicate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListConceptRelationsRequest.predicate"));
        } else
          goto handle_unusual;
        continue;
      // string knowledge_graph_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_knowledge_graph_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListConceptRelationsRequest.knowledge_graph_id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListConceptRelationsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListConceptRelationsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string concept_id = 2;
  if (!this->_internal_concept_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concept_id().data(), static_cast<int>(this->_internal_concept_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListConceptRelationsRequest.concept_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_concept_id(), target);
  }

  // string predicate = 3;
  if (!this->_internal_predicate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_predicate().data(), static_cast<int>(this->_internal_predicate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListConceptRelationsRequest.predicate");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_predicate(), target);
  }

  // string knowledge_graph_id = 4;
  if (!this->_internal_knowledge_graph_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_knowledge_graph_id().data(), static_cast<int>(this->_internal_knowledge_graph_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListConceptRelationsRequest.knowledge_graph_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_knowledge_graph_id(), target);
  }

  // uint32 page = 5;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_page(), target);
  }

  // uint32 per_page = 6;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListConceptRelationsRequest)
  return target;
}

size_t ListConceptRelationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListConceptRelationsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string concept_id = 2;
  if (!this->_internal_concept_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concept_id());
  }

  // string predicate = 3;
  if (!this->_internal_predicate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_predicate());
  }

  // string knowledge_graph_id = 4;
  if (!this->_internal_knowledge_graph_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_knowledge_graph_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // uint32 page = 5;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 6;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListConceptRelationsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListConceptRelationsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListConceptRelationsRequest::GetClassData() const { return &_class_data_; }


void ListConceptRelationsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListConceptRelationsRequest*>(&to_msg);
  auto& from = static_cast<const ListConceptRelationsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListConceptRelationsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_concept_id().empty()) {
    _this->_internal_set_concept_id(from._internal_concept_id());
  }
  if (!from._internal_predicate().empty()) {
    _this->_internal_set_predicate(from._internal_predicate());
  }
  if (!from._internal_knowledge_graph_id().empty()) {
    _this->_internal_set_knowledge_graph_id(from._internal_knowledge_graph_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListConceptRelationsRequest::CopyFrom(const ListConceptRelationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListConceptRelationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListConceptRelationsRequest::IsInitialized() const {
  return true;
}

void ListConceptRelationsRequest::InternalSwap(ListConceptRelationsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.concept_id_, lhs_arena,
      &other->_impl_.concept_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.predicate_, lhs_arena,
      &other->_impl_.predicate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.knowledge_graph_id_, lhs_arena,
      &other->_impl_.knowledge_graph_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListConceptRelationsRequest, _impl_.per_page_)
      + sizeof(ListConceptRelationsRequest::_impl_.per_page_)
      - PROTOBUF_FIELD_OFFSET(ListConceptRelationsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListConceptRelationsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[42]);
}

// ===================================================================

class PostConceptRelationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostConceptRelationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostConceptRelationsRequest::_Internal::user_app_id(const PostConceptRelationsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PostConceptRelationsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostConceptRelationsRequest::clear_concept_relations() {
  _impl_.concept_relations_.Clear();
}
PostConceptRelationsRequest::PostConceptRelationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostConceptRelationsRequest)
}
PostConceptRelationsRequest::PostConceptRelationsRequest(const PostConceptRelationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostConceptRelationsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.concept_relations_){from._impl_.concept_relations_}
    , decltype(_impl_.concept_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.concept_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.concept_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_concept_id().empty()) {
    _this->_impl_.concept_id_.Set(from._internal_concept_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostConceptRelationsRequest)
}

inline void PostConceptRelationsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.concept_relations_){arena}
    , decltype(_impl_.concept_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.concept_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.concept_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PostConceptRelationsRequest::~PostConceptRelationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostConceptRelationsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostConceptRelationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.concept_relations_.~RepeatedPtrField();
  _impl_.concept_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PostConceptRelationsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostConceptRelationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostConceptRelationsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.concept_relations_.Clear();
  _impl_.concept_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostConceptRelationsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string concept_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_concept_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PostConceptRelationsRequest.concept_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ConceptRelation concept_relations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concept_relations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostConceptRelationsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostConceptRelationsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string concept_id = 2;
  if (!this->_internal_concept_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concept_id().data(), static_cast<int>(this->_internal_concept_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostConceptRelationsRequest.concept_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_concept_id(), target);
  }

  // repeated .clarifai.api.ConceptRelation concept_relations = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_concept_relations_size()); i < n; i++) {
    const auto& repfield = this->_internal_concept_relations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostConceptRelationsRequest)
  return target;
}

size_t PostConceptRelationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostConceptRelationsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ConceptRelation concept_relations = 3;
  total_size += 1UL * this->_internal_concept_relations_size();
  for (const auto& msg : this->_impl_.concept_relations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string concept_id = 2;
  if (!this->_internal_concept_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concept_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostConceptRelationsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostConceptRelationsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostConceptRelationsRequest::GetClassData() const { return &_class_data_; }


void PostConceptRelationsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostConceptRelationsRequest*>(&to_msg);
  auto& from = static_cast<const PostConceptRelationsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostConceptRelationsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.concept_relations_.MergeFrom(from._impl_.concept_relations_);
  if (!from._internal_concept_id().empty()) {
    _this->_internal_set_concept_id(from._internal_concept_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostConceptRelationsRequest::CopyFrom(const PostConceptRelationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostConceptRelationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostConceptRelationsRequest::IsInitialized() const {
  return true;
}

void PostConceptRelationsRequest::InternalSwap(PostConceptRelationsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.concept_relations_.InternalSwap(&other->_impl_.concept_relations_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.concept_id_, lhs_arena,
      &other->_impl_.concept_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostConceptRelationsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[43]);
}

// ===================================================================

class DeleteConceptRelationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteConceptRelationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteConceptRelationsRequest::_Internal::user_app_id(const DeleteConceptRelationsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void DeleteConceptRelationsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
DeleteConceptRelationsRequest::DeleteConceptRelationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteConceptRelationsRequest)
}
DeleteConceptRelationsRequest::DeleteConceptRelationsRequest(const DeleteConceptRelationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteConceptRelationsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){from._impl_.ids_}
    , decltype(_impl_.concept_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.concept_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.concept_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_concept_id().empty()) {
    _this->_impl_.concept_id_.Set(from._internal_concept_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteConceptRelationsRequest)
}

inline void DeleteConceptRelationsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){arena}
    , decltype(_impl_.concept_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.concept_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.concept_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteConceptRelationsRequest::~DeleteConceptRelationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteConceptRelationsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteConceptRelationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_.~RepeatedPtrField();
  _impl_.concept_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void DeleteConceptRelationsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteConceptRelationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteConceptRelationsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ids_.Clear();
  _impl_.concept_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteConceptRelationsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string concept_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_concept_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DeleteConceptRelationsRequest.concept_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DeleteConceptRelationsRequest.ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteConceptRelationsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteConceptRelationsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string concept_id = 2;
  if (!this->_internal_concept_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concept_id().data(), static_cast<int>(this->_internal_concept_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteConceptRelationsRequest.concept_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_concept_id(), target);
  }

  // repeated string ids = 3;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteConceptRelationsRequest.ids");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteConceptRelationsRequest)
  return target;
}

size_t DeleteConceptRelationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteConceptRelationsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.ids_.size());
  for (int i = 0, n = _impl_.ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.ids_.Get(i));
  }

  // string concept_id = 2;
  if (!this->_internal_concept_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concept_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteConceptRelationsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteConceptRelationsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteConceptRelationsRequest::GetClassData() const { return &_class_data_; }


void DeleteConceptRelationsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteConceptRelationsRequest*>(&to_msg);
  auto& from = static_cast<const DeleteConceptRelationsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteConceptRelationsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_.MergeFrom(from._impl_.ids_);
  if (!from._internal_concept_id().empty()) {
    _this->_internal_set_concept_id(from._internal_concept_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteConceptRelationsRequest::CopyFrom(const DeleteConceptRelationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteConceptRelationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteConceptRelationsRequest::IsInitialized() const {
  return true;
}

void DeleteConceptRelationsRequest::InternalSwap(DeleteConceptRelationsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ids_.InternalSwap(&other->_impl_.ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.concept_id_, lhs_arena,
      &other->_impl_.concept_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteConceptRelationsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[44]);
}

// ===================================================================

class ListKnowledgeGraphsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListKnowledgeGraphsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListKnowledgeGraphsRequest::_Internal::user_app_id(const ListKnowledgeGraphsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListKnowledgeGraphsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
ListKnowledgeGraphsRequest::ListKnowledgeGraphsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListKnowledgeGraphsRequest)
}
ListKnowledgeGraphsRequest::ListKnowledgeGraphsRequest(const ListKnowledgeGraphsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListKnowledgeGraphsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListKnowledgeGraphsRequest)
}

inline void ListKnowledgeGraphsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListKnowledgeGraphsRequest::~ListKnowledgeGraphsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListKnowledgeGraphsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListKnowledgeGraphsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void ListKnowledgeGraphsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListKnowledgeGraphsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListKnowledgeGraphsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListKnowledgeGraphsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListKnowledgeGraphsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListKnowledgeGraphsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListKnowledgeGraphsRequest)
  return target;
}

size_t ListKnowledgeGraphsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListKnowledgeGraphsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListKnowledgeGraphsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListKnowledgeGraphsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListKnowledgeGraphsRequest::GetClassData() const { return &_class_data_; }


void ListKnowledgeGraphsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListKnowledgeGraphsRequest*>(&to_msg);
  auto& from = static_cast<const ListKnowledgeGraphsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListKnowledgeGraphsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListKnowledgeGraphsRequest::CopyFrom(const ListKnowledgeGraphsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListKnowledgeGraphsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListKnowledgeGraphsRequest::IsInitialized() const {
  return true;
}

void ListKnowledgeGraphsRequest::InternalSwap(ListKnowledgeGraphsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListKnowledgeGraphsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[45]);
}

// ===================================================================

class PostKnowledgeGraphsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostKnowledgeGraphsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostKnowledgeGraphsRequest::_Internal::user_app_id(const PostKnowledgeGraphsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PostKnowledgeGraphsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostKnowledgeGraphsRequest::clear_knowledge_graphs() {
  _impl_.knowledge_graphs_.Clear();
}
PostKnowledgeGraphsRequest::PostKnowledgeGraphsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostKnowledgeGraphsRequest)
}
PostKnowledgeGraphsRequest::PostKnowledgeGraphsRequest(const PostKnowledgeGraphsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostKnowledgeGraphsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.knowledge_graphs_){from._impl_.knowledge_graphs_}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostKnowledgeGraphsRequest)
}

inline void PostKnowledgeGraphsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.knowledge_graphs_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PostKnowledgeGraphsRequest::~PostKnowledgeGraphsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostKnowledgeGraphsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostKnowledgeGraphsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.knowledge_graphs_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PostKnowledgeGraphsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostKnowledgeGraphsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostKnowledgeGraphsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.knowledge_graphs_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostKnowledgeGraphsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.KnowledgeGraph knowledge_graphs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_knowledge_graphs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostKnowledgeGraphsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostKnowledgeGraphsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.KnowledgeGraph knowledge_graphs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_knowledge_graphs_size()); i < n; i++) {
    const auto& repfield = this->_internal_knowledge_graphs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostKnowledgeGraphsRequest)
  return target;
}

size_t PostKnowledgeGraphsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostKnowledgeGraphsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.KnowledgeGraph knowledge_graphs = 2;
  total_size += 1UL * this->_internal_knowledge_graphs_size();
  for (const auto& msg : this->_impl_.knowledge_graphs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostKnowledgeGraphsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostKnowledgeGraphsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostKnowledgeGraphsRequest::GetClassData() const { return &_class_data_; }


void PostKnowledgeGraphsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostKnowledgeGraphsRequest*>(&to_msg);
  auto& from = static_cast<const PostKnowledgeGraphsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostKnowledgeGraphsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.knowledge_graphs_.MergeFrom(from._impl_.knowledge_graphs_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostKnowledgeGraphsRequest::CopyFrom(const PostKnowledgeGraphsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostKnowledgeGraphsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostKnowledgeGraphsRequest::IsInitialized() const {
  return true;
}

void PostKnowledgeGraphsRequest::InternalSwap(PostKnowledgeGraphsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.knowledge_graphs_.InternalSwap(&other->_impl_.knowledge_graphs_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostKnowledgeGraphsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[46]);
}

// ===================================================================

class PostConceptMappingJobsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostConceptMappingJobsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostConceptMappingJobsRequest::_Internal::user_app_id(const PostConceptMappingJobsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PostConceptMappingJobsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostConceptMappingJobsRequest::clear_concept_mapping_jobs() {
  _impl_.concept_mapping_jobs_.Clear();
}
PostConceptMappingJobsRequest::PostConceptMappingJobsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostConceptMappingJobsRequest)
}
PostConceptMappingJobsRequest::PostConceptMappingJobsRequest(const PostConceptMappingJobsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostConceptMappingJobsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.concept_mapping_jobs_){from._impl_.concept_mapping_jobs_}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostConceptMappingJobsRequest)
}

inline void PostConceptMappingJobsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.concept_mapping_jobs_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PostConceptMappingJobsRequest::~PostConceptMappingJobsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostConceptMappingJobsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostConceptMappingJobsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.concept_mapping_jobs_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PostConceptMappingJobsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostConceptMappingJobsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostConceptMappingJobsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.concept_mapping_jobs_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostConceptMappingJobsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ConceptMappingJob concept_mapping_jobs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concept_mapping_jobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostConceptMappingJobsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostConceptMappingJobsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.ConceptMappingJob concept_mapping_jobs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_concept_mapping_jobs_size()); i < n; i++) {
    const auto& repfield = this->_internal_concept_mapping_jobs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostConceptMappingJobsRequest)
  return target;
}

size_t PostConceptMappingJobsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostConceptMappingJobsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ConceptMappingJob concept_mapping_jobs = 2;
  total_size += 1UL * this->_internal_concept_mapping_jobs_size();
  for (const auto& msg : this->_impl_.concept_mapping_jobs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostConceptMappingJobsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostConceptMappingJobsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostConceptMappingJobsRequest::GetClassData() const { return &_class_data_; }


void PostConceptMappingJobsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostConceptMappingJobsRequest*>(&to_msg);
  auto& from = static_cast<const PostConceptMappingJobsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostConceptMappingJobsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.concept_mapping_jobs_.MergeFrom(from._impl_.concept_mapping_jobs_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostConceptMappingJobsRequest::CopyFrom(const PostConceptMappingJobsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostConceptMappingJobsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostConceptMappingJobsRequest::IsInitialized() const {
  return true;
}

void PostConceptMappingJobsRequest::InternalSwap(PostConceptMappingJobsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.concept_mapping_jobs_.InternalSwap(&other->_impl_.concept_mapping_jobs_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostConceptMappingJobsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[47]);
}

// ===================================================================

class MultiConceptRelationResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiConceptRelationResponse* msg);
};

const ::clarifai::api::status::Status&
MultiConceptRelationResponse::_Internal::status(const MultiConceptRelationResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiConceptRelationResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiConceptRelationResponse::clear_concept_relations() {
  _impl_.concept_relations_.Clear();
}
MultiConceptRelationResponse::MultiConceptRelationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiConceptRelationResponse)
}
MultiConceptRelationResponse::MultiConceptRelationResponse(const MultiConceptRelationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiConceptRelationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.concept_relations_){from._impl_.concept_relations_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiConceptRelationResponse)
}

inline void MultiConceptRelationResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.concept_relations_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiConceptRelationResponse::~MultiConceptRelationResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiConceptRelationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiConceptRelationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.concept_relations_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiConceptRelationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiConceptRelationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiConceptRelationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.concept_relations_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiConceptRelationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ConceptRelation concept_relations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concept_relations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiConceptRelationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiConceptRelationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.ConceptRelation concept_relations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_concept_relations_size()); i < n; i++) {
    const auto& repfield = this->_internal_concept_relations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiConceptRelationResponse)
  return target;
}

size_t MultiConceptRelationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiConceptRelationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ConceptRelation concept_relations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_concept_relations_size();
  for (const auto& msg : this->_impl_.concept_relations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiConceptRelationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiConceptRelationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiConceptRelationResponse::GetClassData() const { return &_class_data_; }


void MultiConceptRelationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiConceptRelationResponse*>(&to_msg);
  auto& from = static_cast<const MultiConceptRelationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiConceptRelationResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.concept_relations_.MergeFrom(from._impl_.concept_relations_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiConceptRelationResponse::CopyFrom(const MultiConceptRelationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiConceptRelationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiConceptRelationResponse::IsInitialized() const {
  return true;
}

void MultiConceptRelationResponse::InternalSwap(MultiConceptRelationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.concept_relations_.InternalSwap(&other->_impl_.concept_relations_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiConceptRelationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[48]);
}

// ===================================================================

class MultiKnowledgeGraphResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiKnowledgeGraphResponse* msg);
};

const ::clarifai::api::status::Status&
MultiKnowledgeGraphResponse::_Internal::status(const MultiKnowledgeGraphResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiKnowledgeGraphResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiKnowledgeGraphResponse::clear_knowledge_graphs() {
  _impl_.knowledge_graphs_.Clear();
}
MultiKnowledgeGraphResponse::MultiKnowledgeGraphResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiKnowledgeGraphResponse)
}
MultiKnowledgeGraphResponse::MultiKnowledgeGraphResponse(const MultiKnowledgeGraphResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiKnowledgeGraphResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.knowledge_graphs_){from._impl_.knowledge_graphs_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiKnowledgeGraphResponse)
}

inline void MultiKnowledgeGraphResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.knowledge_graphs_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiKnowledgeGraphResponse::~MultiKnowledgeGraphResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiKnowledgeGraphResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiKnowledgeGraphResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.knowledge_graphs_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiKnowledgeGraphResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiKnowledgeGraphResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiKnowledgeGraphResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.knowledge_graphs_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiKnowledgeGraphResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.KnowledgeGraph knowledge_graphs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_knowledge_graphs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiKnowledgeGraphResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiKnowledgeGraphResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.KnowledgeGraph knowledge_graphs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_knowledge_graphs_size()); i < n; i++) {
    const auto& repfield = this->_internal_knowledge_graphs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiKnowledgeGraphResponse)
  return target;
}

size_t MultiKnowledgeGraphResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiKnowledgeGraphResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.KnowledgeGraph knowledge_graphs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_knowledge_graphs_size();
  for (const auto& msg : this->_impl_.knowledge_graphs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiKnowledgeGraphResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiKnowledgeGraphResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiKnowledgeGraphResponse::GetClassData() const { return &_class_data_; }


void MultiKnowledgeGraphResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiKnowledgeGraphResponse*>(&to_msg);
  auto& from = static_cast<const MultiKnowledgeGraphResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiKnowledgeGraphResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.knowledge_graphs_.MergeFrom(from._impl_.knowledge_graphs_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiKnowledgeGraphResponse::CopyFrom(const MultiKnowledgeGraphResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiKnowledgeGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiKnowledgeGraphResponse::IsInitialized() const {
  return true;
}

void MultiKnowledgeGraphResponse::InternalSwap(MultiKnowledgeGraphResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.knowledge_graphs_.InternalSwap(&other->_impl_.knowledge_graphs_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiKnowledgeGraphResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[49]);
}

// ===================================================================

class MultiConceptMappingJobResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiConceptMappingJobResponse* msg);
};

const ::clarifai::api::status::Status&
MultiConceptMappingJobResponse::_Internal::status(const MultiConceptMappingJobResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiConceptMappingJobResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
MultiConceptMappingJobResponse::MultiConceptMappingJobResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiConceptMappingJobResponse)
}
MultiConceptMappingJobResponse::MultiConceptMappingJobResponse(const MultiConceptMappingJobResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiConceptMappingJobResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){from._impl_.ids_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiConceptMappingJobResponse)
}

inline void MultiConceptMappingJobResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiConceptMappingJobResponse::~MultiConceptMappingJobResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiConceptMappingJobResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiConceptMappingJobResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiConceptMappingJobResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiConceptMappingJobResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiConceptMappingJobResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiConceptMappingJobResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.MultiConceptMappingJobResponse.ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiConceptMappingJobResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiConceptMappingJobResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.MultiConceptMappingJobResponse.ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiConceptMappingJobResponse)
  return target;
}

size_t MultiConceptMappingJobResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiConceptMappingJobResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.ids_.size());
  for (int i = 0, n = _impl_.ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.ids_.Get(i));
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiConceptMappingJobResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiConceptMappingJobResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiConceptMappingJobResponse::GetClassData() const { return &_class_data_; }


void MultiConceptMappingJobResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiConceptMappingJobResponse*>(&to_msg);
  auto& from = static_cast<const MultiConceptMappingJobResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiConceptMappingJobResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_.MergeFrom(from._impl_.ids_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiConceptMappingJobResponse::CopyFrom(const MultiConceptMappingJobResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiConceptMappingJobResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiConceptMappingJobResponse::IsInitialized() const {
  return true;
}

void MultiConceptMappingJobResponse::InternalSwap(MultiConceptMappingJobResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ids_.InternalSwap(&other->_impl_.ids_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiConceptMappingJobResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[50]);
}

// ===================================================================

class GetConceptLanguageRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetConceptLanguageRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetConceptLanguageRequest::_Internal::user_app_id(const GetConceptLanguageRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void GetConceptLanguageRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
GetConceptLanguageRequest::GetConceptLanguageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetConceptLanguageRequest)
}
GetConceptLanguageRequest::GetConceptLanguageRequest(const GetConceptLanguageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetConceptLanguageRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.concept_id_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.concept_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.concept_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_concept_id().empty()) {
    _this->_impl_.concept_id_.Set(from._internal_concept_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_language().empty()) {
    _this->_impl_.language_.Set(from._internal_language(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetConceptLanguageRequest)
}

inline void GetConceptLanguageRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.concept_id_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.concept_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.concept_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetConceptLanguageRequest::~GetConceptLanguageRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetConceptLanguageRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetConceptLanguageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.concept_id_.Destroy();
  _impl_.language_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void GetConceptLanguageRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetConceptLanguageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetConceptLanguageRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.concept_id_.ClearToEmpty();
  _impl_.language_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetConceptLanguageRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string concept_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_concept_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetConceptLanguageRequest.concept_id"));
        } else
          goto handle_unusual;
        continue;
      // string language = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetConceptLanguageRequest.language"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetConceptLanguageRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetConceptLanguageRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string concept_id = 2;
  if (!this->_internal_concept_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concept_id().data(), static_cast<int>(this->_internal_concept_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetConceptLanguageRequest.concept_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_concept_id(), target);
  }

  // string language = 3;
  if (!this->_internal_language().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetConceptLanguageRequest.language");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetConceptLanguageRequest)
  return target;
}

size_t GetConceptLanguageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetConceptLanguageRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string concept_id = 2;
  if (!this->_internal_concept_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concept_id());
  }

  // string language = 3;
  if (!this->_internal_language().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetConceptLanguageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetConceptLanguageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetConceptLanguageRequest::GetClassData() const { return &_class_data_; }


void GetConceptLanguageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetConceptLanguageRequest*>(&to_msg);
  auto& from = static_cast<const GetConceptLanguageRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetConceptLanguageRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_concept_id().empty()) {
    _this->_internal_set_concept_id(from._internal_concept_id());
  }
  if (!from._internal_language().empty()) {
    _this->_internal_set_language(from._internal_language());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetConceptLanguageRequest::CopyFrom(const GetConceptLanguageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetConceptLanguageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConceptLanguageRequest::IsInitialized() const {
  return true;
}

void GetConceptLanguageRequest::InternalSwap(GetConceptLanguageRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.concept_id_, lhs_arena,
      &other->_impl_.concept_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.language_, lhs_arena,
      &other->_impl_.language_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConceptLanguageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[51]);
}

// ===================================================================

class ListConceptLanguagesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListConceptLanguagesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListConceptLanguagesRequest::_Internal::user_app_id(const ListConceptLanguagesRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListConceptLanguagesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
ListConceptLanguagesRequest::ListConceptLanguagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListConceptLanguagesRequest)
}
ListConceptLanguagesRequest::ListConceptLanguagesRequest(const ListConceptLanguagesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListConceptLanguagesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.concept_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.concept_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.concept_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_concept_id().empty()) {
    _this->_impl_.concept_id_.Set(from._internal_concept_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.per_page_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListConceptLanguagesRequest)
}

inline void ListConceptLanguagesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.concept_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.concept_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.concept_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListConceptLanguagesRequest::~ListConceptLanguagesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListConceptLanguagesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListConceptLanguagesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.concept_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void ListConceptLanguagesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListConceptLanguagesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListConceptLanguagesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.concept_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.per_page_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListConceptLanguagesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string concept_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_concept_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListConceptLanguagesRequest.concept_id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListConceptLanguagesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListConceptLanguagesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string concept_id = 2;
  if (!this->_internal_concept_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concept_id().data(), static_cast<int>(this->_internal_concept_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListConceptLanguagesRequest.concept_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_concept_id(), target);
  }

  // uint32 page = 3;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_page(), target);
  }

  // uint32 per_page = 4;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListConceptLanguagesRequest)
  return target;
}

size_t ListConceptLanguagesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListConceptLanguagesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string concept_id = 2;
  if (!this->_internal_concept_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concept_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // uint32 page = 3;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 4;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListConceptLanguagesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListConceptLanguagesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListConceptLanguagesRequest::GetClassData() const { return &_class_data_; }


void ListConceptLanguagesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListConceptLanguagesRequest*>(&to_msg);
  auto& from = static_cast<const ListConceptLanguagesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListConceptLanguagesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_concept_id().empty()) {
    _this->_internal_set_concept_id(from._internal_concept_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListConceptLanguagesRequest::CopyFrom(const ListConceptLanguagesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListConceptLanguagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListConceptLanguagesRequest::IsInitialized() const {
  return true;
}

void ListConceptLanguagesRequest::InternalSwap(ListConceptLanguagesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.concept_id_, lhs_arena,
      &other->_impl_.concept_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListConceptLanguagesRequest, _impl_.per_page_)
      + sizeof(ListConceptLanguagesRequest::_impl_.per_page_)
      - PROTOBUF_FIELD_OFFSET(ListConceptLanguagesRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListConceptLanguagesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[52]);
}

// ===================================================================

class PatchConceptLanguagesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchConceptLanguagesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchConceptLanguagesRequest::_Internal::user_app_id(const PatchConceptLanguagesRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PatchConceptLanguagesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PatchConceptLanguagesRequest::clear_concept_languages() {
  _impl_.concept_languages_.Clear();
}
PatchConceptLanguagesRequest::PatchConceptLanguagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchConceptLanguagesRequest)
}
PatchConceptLanguagesRequest::PatchConceptLanguagesRequest(const PatchConceptLanguagesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PatchConceptLanguagesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.concept_languages_){from._impl_.concept_languages_}
    , decltype(_impl_.concept_id_){}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.concept_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.concept_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_concept_id().empty()) {
    _this->_impl_.concept_id_.Set(from._internal_concept_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchConceptLanguagesRequest)
}

inline void PatchConceptLanguagesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.concept_languages_){arena}
    , decltype(_impl_.concept_id_){}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.concept_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.concept_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PatchConceptLanguagesRequest::~PatchConceptLanguagesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchConceptLanguagesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatchConceptLanguagesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.concept_languages_.~RepeatedPtrField();
  _impl_.concept_id_.Destroy();
  _impl_.action_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PatchConceptLanguagesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatchConceptLanguagesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchConceptLanguagesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.concept_languages_.Clear();
  _impl_.concept_id_.ClearToEmpty();
  _impl_.action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchConceptLanguagesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string concept_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_concept_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchConceptLanguagesRequest.concept_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ConceptLanguage concept_languages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concept_languages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchConceptLanguagesRequest.action"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchConceptLanguagesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchConceptLanguagesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string concept_id = 2;
  if (!this->_internal_concept_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concept_id().data(), static_cast<int>(this->_internal_concept_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchConceptLanguagesRequest.concept_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_concept_id(), target);
  }

  // repeated .clarifai.api.ConceptLanguage concept_languages = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_concept_languages_size()); i < n; i++) {
    const auto& repfield = this->_internal_concept_languages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchConceptLanguagesRequest.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchConceptLanguagesRequest)
  return target;
}

size_t PatchConceptLanguagesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchConceptLanguagesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ConceptLanguage concept_languages = 3;
  total_size += 1UL * this->_internal_concept_languages_size();
  for (const auto& msg : this->_impl_.concept_languages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string concept_id = 2;
  if (!this->_internal_concept_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concept_id());
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchConceptLanguagesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PatchConceptLanguagesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchConceptLanguagesRequest::GetClassData() const { return &_class_data_; }


void PatchConceptLanguagesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PatchConceptLanguagesRequest*>(&to_msg);
  auto& from = static_cast<const PatchConceptLanguagesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchConceptLanguagesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.concept_languages_.MergeFrom(from._impl_.concept_languages_);
  if (!from._internal_concept_id().empty()) {
    _this->_internal_set_concept_id(from._internal_concept_id());
  }
  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchConceptLanguagesRequest::CopyFrom(const PatchConceptLanguagesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchConceptLanguagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchConceptLanguagesRequest::IsInitialized() const {
  return true;
}

void PatchConceptLanguagesRequest::InternalSwap(PatchConceptLanguagesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.concept_languages_.InternalSwap(&other->_impl_.concept_languages_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.concept_id_, lhs_arena,
      &other->_impl_.concept_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchConceptLanguagesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[53]);
}

// ===================================================================

class PostConceptLanguagesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostConceptLanguagesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostConceptLanguagesRequest::_Internal::user_app_id(const PostConceptLanguagesRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PostConceptLanguagesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostConceptLanguagesRequest::clear_concept_languages() {
  _impl_.concept_languages_.Clear();
}
PostConceptLanguagesRequest::PostConceptLanguagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostConceptLanguagesRequest)
}
PostConceptLanguagesRequest::PostConceptLanguagesRequest(const PostConceptLanguagesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostConceptLanguagesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.concept_languages_){from._impl_.concept_languages_}
    , decltype(_impl_.concept_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.concept_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.concept_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_concept_id().empty()) {
    _this->_impl_.concept_id_.Set(from._internal_concept_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostConceptLanguagesRequest)
}

inline void PostConceptLanguagesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.concept_languages_){arena}
    , decltype(_impl_.concept_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.concept_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.concept_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PostConceptLanguagesRequest::~PostConceptLanguagesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostConceptLanguagesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostConceptLanguagesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.concept_languages_.~RepeatedPtrField();
  _impl_.concept_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PostConceptLanguagesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostConceptLanguagesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostConceptLanguagesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.concept_languages_.Clear();
  _impl_.concept_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostConceptLanguagesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string concept_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_concept_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PostConceptLanguagesRequest.concept_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ConceptLanguage concept_languages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concept_languages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostConceptLanguagesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostConceptLanguagesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string concept_id = 2;
  if (!this->_internal_concept_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concept_id().data(), static_cast<int>(this->_internal_concept_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostConceptLanguagesRequest.concept_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_concept_id(), target);
  }

  // repeated .clarifai.api.ConceptLanguage concept_languages = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_concept_languages_size()); i < n; i++) {
    const auto& repfield = this->_internal_concept_languages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostConceptLanguagesRequest)
  return target;
}

size_t PostConceptLanguagesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostConceptLanguagesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ConceptLanguage concept_languages = 3;
  total_size += 1UL * this->_internal_concept_languages_size();
  for (const auto& msg : this->_impl_.concept_languages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string concept_id = 2;
  if (!this->_internal_concept_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concept_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostConceptLanguagesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostConceptLanguagesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostConceptLanguagesRequest::GetClassData() const { return &_class_data_; }


void PostConceptLanguagesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostConceptLanguagesRequest*>(&to_msg);
  auto& from = static_cast<const PostConceptLanguagesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostConceptLanguagesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.concept_languages_.MergeFrom(from._impl_.concept_languages_);
  if (!from._internal_concept_id().empty()) {
    _this->_internal_set_concept_id(from._internal_concept_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostConceptLanguagesRequest::CopyFrom(const PostConceptLanguagesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostConceptLanguagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostConceptLanguagesRequest::IsInitialized() const {
  return true;
}

void PostConceptLanguagesRequest::InternalSwap(PostConceptLanguagesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.concept_languages_.InternalSwap(&other->_impl_.concept_languages_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.concept_id_, lhs_arena,
      &other->_impl_.concept_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostConceptLanguagesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[54]);
}

// ===================================================================

class SingleConceptLanguageResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleConceptLanguageResponse* msg);
  static const ::clarifai::api::ConceptLanguage& concept_language(const SingleConceptLanguageResponse* msg);
};

const ::clarifai::api::status::Status&
SingleConceptLanguageResponse::_Internal::status(const SingleConceptLanguageResponse* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::ConceptLanguage&
SingleConceptLanguageResponse::_Internal::concept_language(const SingleConceptLanguageResponse* msg) {
  return *msg->_impl_.concept_language_;
}
void SingleConceptLanguageResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void SingleConceptLanguageResponse::clear_concept_language() {
  if (GetArenaForAllocation() == nullptr && _impl_.concept_language_ != nullptr) {
    delete _impl_.concept_language_;
  }
  _impl_.concept_language_ = nullptr;
}
SingleConceptLanguageResponse::SingleConceptLanguageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleConceptLanguageResponse)
}
SingleConceptLanguageResponse::SingleConceptLanguageResponse(const SingleConceptLanguageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleConceptLanguageResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.concept_language_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_concept_language()) {
    _this->_impl_.concept_language_ = new ::clarifai::api::ConceptLanguage(*from._impl_.concept_language_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleConceptLanguageResponse)
}

inline void SingleConceptLanguageResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.concept_language_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SingleConceptLanguageResponse::~SingleConceptLanguageResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleConceptLanguageResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleConceptLanguageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.concept_language_;
}

void SingleConceptLanguageResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleConceptLanguageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleConceptLanguageResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.concept_language_ != nullptr) {
    delete _impl_.concept_language_;
  }
  _impl_.concept_language_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleConceptLanguageResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ConceptLanguage concept_language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_concept_language(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleConceptLanguageResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleConceptLanguageResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.ConceptLanguage concept_language = 2;
  if (this->_internal_has_concept_language()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::concept_language(this),
        _Internal::concept_language(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleConceptLanguageResponse)
  return target;
}

size_t SingleConceptLanguageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleConceptLanguageResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.ConceptLanguage concept_language = 2;
  if (this->_internal_has_concept_language()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.concept_language_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleConceptLanguageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleConceptLanguageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleConceptLanguageResponse::GetClassData() const { return &_class_data_; }


void SingleConceptLanguageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleConceptLanguageResponse*>(&to_msg);
  auto& from = static_cast<const SingleConceptLanguageResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleConceptLanguageResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_concept_language()) {
    _this->_internal_mutable_concept_language()->::clarifai::api::ConceptLanguage::MergeFrom(
        from._internal_concept_language());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleConceptLanguageResponse::CopyFrom(const SingleConceptLanguageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleConceptLanguageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleConceptLanguageResponse::IsInitialized() const {
  return true;
}

void SingleConceptLanguageResponse::InternalSwap(SingleConceptLanguageResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleConceptLanguageResponse, _impl_.concept_language_)
      + sizeof(SingleConceptLanguageResponse::_impl_.concept_language_)
      - PROTOBUF_FIELD_OFFSET(SingleConceptLanguageResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleConceptLanguageResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[55]);
}

// ===================================================================

class MultiConceptLanguageResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiConceptLanguageResponse* msg);
};

const ::clarifai::api::status::Status&
MultiConceptLanguageResponse::_Internal::status(const MultiConceptLanguageResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiConceptLanguageResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiConceptLanguageResponse::clear_concept_languages() {
  _impl_.concept_languages_.Clear();
}
MultiConceptLanguageResponse::MultiConceptLanguageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiConceptLanguageResponse)
}
MultiConceptLanguageResponse::MultiConceptLanguageResponse(const MultiConceptLanguageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiConceptLanguageResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.concept_languages_){from._impl_.concept_languages_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiConceptLanguageResponse)
}

inline void MultiConceptLanguageResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.concept_languages_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiConceptLanguageResponse::~MultiConceptLanguageResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiConceptLanguageResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiConceptLanguageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.concept_languages_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiConceptLanguageResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiConceptLanguageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiConceptLanguageResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.concept_languages_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiConceptLanguageResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ConceptLanguage concept_languages = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concept_languages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiConceptLanguageResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiConceptLanguageResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.ConceptLanguage concept_languages = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_concept_languages_size()); i < n; i++) {
    const auto& repfield = this->_internal_concept_languages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiConceptLanguageResponse)
  return target;
}

size_t MultiConceptLanguageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiConceptLanguageResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ConceptLanguage concept_languages = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_concept_languages_size();
  for (const auto& msg : this->_impl_.concept_languages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiConceptLanguageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiConceptLanguageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiConceptLanguageResponse::GetClassData() const { return &_class_data_; }


void MultiConceptLanguageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiConceptLanguageResponse*>(&to_msg);
  auto& from = static_cast<const MultiConceptLanguageResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiConceptLanguageResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.concept_languages_.MergeFrom(from._impl_.concept_languages_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiConceptLanguageResponse::CopyFrom(const MultiConceptLanguageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiConceptLanguageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiConceptLanguageResponse::IsInitialized() const {
  return true;
}

void MultiConceptLanguageResponse::InternalSwap(MultiConceptLanguageResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.concept_languages_.InternalSwap(&other->_impl_.concept_languages_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiConceptLanguageResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[56]);
}

// ===================================================================

class GetInputRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetInputRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetInputRequest::_Internal::user_app_id(const GetInputRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void GetInputRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
GetInputRequest::GetInputRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetInputRequest)
}
GetInputRequest::GetInputRequest(const GetInputRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetInputRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.input_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.input_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.input_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_input_id().empty()) {
    _this->_impl_.input_id_.Set(from._internal_input_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetInputRequest)
}

inline void GetInputRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.input_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.input_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.input_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetInputRequest::~GetInputRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetInputRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetInputRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.input_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void GetInputRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetInputRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetInputRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.input_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetInputRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string input_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_input_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetInputRequest.input_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetInputRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetInputRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string input_id = 2;
  if (!this->_internal_input_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input_id().data(), static_cast<int>(this->_internal_input_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetInputRequest.input_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_input_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetInputRequest)
  return target;
}

size_t GetInputRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetInputRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string input_id = 2;
  if (!this->_internal_input_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_input_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetInputRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetInputRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetInputRequest::GetClassData() const { return &_class_data_; }


void GetInputRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetInputRequest*>(&to_msg);
  auto& from = static_cast<const GetInputRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetInputRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_input_id().empty()) {
    _this->_internal_set_input_id(from._internal_input_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetInputRequest::CopyFrom(const GetInputRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetInputRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInputRequest::IsInitialized() const {
  return true;
}

void GetInputRequest::InternalSwap(GetInputRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.input_id_, lhs_arena,
      &other->_impl_.input_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInputRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[57]);
}

// ===================================================================

class GetInputSamplesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetInputSamplesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetInputSamplesRequest::_Internal::user_app_id(const GetInputSamplesRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void GetInputSamplesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
GetInputSamplesRequest::GetInputSamplesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetInputSamplesRequest)
}
GetInputSamplesRequest::GetInputSamplesRequest(const GetInputSamplesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetInputSamplesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_ids_){from._impl_.user_ids_}
    , decltype(_impl_.task_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task_id().empty()) {
    _this->_impl_.task_id_.Set(from._internal_task_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetInputSamplesRequest)
}

inline void GetInputSamplesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_ids_){arena}
    , decltype(_impl_.task_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetInputSamplesRequest::~GetInputSamplesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetInputSamplesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetInputSamplesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_ids_.~RepeatedPtrField();
  _impl_.task_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void GetInputSamplesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetInputSamplesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetInputSamplesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_ids_.Clear();
  _impl_.task_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetInputSamplesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string task_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_task_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetInputSamplesRequest.task_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string user_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetInputSamplesRequest.user_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetInputSamplesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetInputSamplesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string task_id = 2;
  if (!this->_internal_task_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetInputSamplesRequest.task_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_task_id(), target);
  }

  // repeated string user_ids = 3;
  for (int i = 0, n = this->_internal_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetInputSamplesRequest.user_ids");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetInputSamplesRequest)
  return target;
}

size_t GetInputSamplesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetInputSamplesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string user_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.user_ids_.size());
  for (int i = 0, n = _impl_.user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.user_ids_.Get(i));
  }

  // string task_id = 2;
  if (!this->_internal_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetInputSamplesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetInputSamplesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetInputSamplesRequest::GetClassData() const { return &_class_data_; }


void GetInputSamplesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetInputSamplesRequest*>(&to_msg);
  auto& from = static_cast<const GetInputSamplesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetInputSamplesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.user_ids_.MergeFrom(from._impl_.user_ids_);
  if (!from._internal_task_id().empty()) {
    _this->_internal_set_task_id(from._internal_task_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetInputSamplesRequest::CopyFrom(const GetInputSamplesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetInputSamplesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInputSamplesRequest::IsInitialized() const {
  return true;
}

void GetInputSamplesRequest::InternalSwap(GetInputSamplesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.user_ids_.InternalSwap(&other->_impl_.user_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.task_id_, lhs_arena,
      &other->_impl_.task_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInputSamplesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[58]);
}

// ===================================================================

class ListInputsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListInputsRequest* msg);
  static const ::clarifai::api::status::Status& status(const ListInputsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListInputsRequest::_Internal::user_app_id(const ListInputsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
const ::clarifai::api::status::Status&
ListInputsRequest::_Internal::status(const ListInputsRequest* msg) {
  return *msg->_impl_.status_;
}
void ListInputsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void ListInputsRequest::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
ListInputsRequest::ListInputsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListInputsRequest)
}
ListInputsRequest::ListInputsRequest(const ListInputsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListInputsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){from._impl_.ids_}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.per_page_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListInputsRequest)
}

inline void ListInputsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListInputsRequest::~ListInputsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListInputsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListInputsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
  if (this != internal_default_instance()) delete _impl_.status_;
}

void ListInputsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListInputsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListInputsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.per_page_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListInputsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListInputsRequest.ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListInputsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListInputsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  // repeated string ids = 4;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListInputsRequest.ids");
    target = stream->WriteString(4, s, target);
  }

  // .clarifai.api.status.Status status = 5;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListInputsRequest)
  return target;
}

size_t ListInputsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListInputsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.ids_.size());
  for (int i = 0, n = _impl_.ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // .clarifai.api.status.Status status = 5;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListInputsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListInputsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListInputsRequest::GetClassData() const { return &_class_data_; }


void ListInputsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListInputsRequest*>(&to_msg);
  auto& from = static_cast<const ListInputsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListInputsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_.MergeFrom(from._impl_.ids_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListInputsRequest::CopyFrom(const ListInputsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListInputsRequest::IsInitialized() const {
  return true;
}

void ListInputsRequest::InternalSwap(ListInputsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ids_.InternalSwap(&other->_impl_.ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListInputsRequest, _impl_.per_page_)
      + sizeof(ListInputsRequest::_impl_.per_page_)
      - PROTOBUF_FIELD_OFFSET(ListInputsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListInputsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[59]);
}

// ===================================================================

class StreamInputsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const StreamInputsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
StreamInputsRequest::_Internal::user_app_id(const StreamInputsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void StreamInputsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
StreamInputsRequest::StreamInputsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.StreamInputsRequest)
}
StreamInputsRequest::StreamInputsRequest(const StreamInputsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamInputsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.last_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.per_page_){}
    , decltype(_impl_.order_by_id_){}
    , decltype(_impl_.descending_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.last_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.last_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_last_id().empty()) {
    _this->_impl_.last_id_.Set(from._internal_last_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.per_page_, &from._impl_.per_page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.descending_) -
    reinterpret_cast<char*>(&_impl_.per_page_)) + sizeof(_impl_.descending_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.StreamInputsRequest)
}

inline void StreamInputsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.last_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.per_page_){0u}
    , decltype(_impl_.order_by_id_){false}
    , decltype(_impl_.descending_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.last_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.last_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamInputsRequest::~StreamInputsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.StreamInputsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamInputsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.last_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void StreamInputsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamInputsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.StreamInputsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.last_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.per_page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.descending_) -
      reinterpret_cast<char*>(&_impl_.per_page_)) + sizeof(_impl_.descending_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamInputsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string last_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_last_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.StreamInputsRequest.last_id"));
        } else
          goto handle_unusual;
        continue;
      // bool descending = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.descending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool order_by_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.order_by_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamInputsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.StreamInputsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // uint32 per_page = 2;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_per_page(), target);
  }

  // string last_id = 3;
  if (!this->_internal_last_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_id().data(), static_cast<int>(this->_internal_last_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.StreamInputsRequest.last_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_last_id(), target);
  }

  // bool descending = 4;
  if (this->_internal_descending() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_descending(), target);
  }

  // bool order_by_id = 5;
  if (this->_internal_order_by_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_order_by_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.StreamInputsRequest)
  return target;
}

size_t StreamInputsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.StreamInputsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string last_id = 3;
  if (!this->_internal_last_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // uint32 per_page = 2;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  // bool order_by_id = 5;
  if (this->_internal_order_by_id() != 0) {
    total_size += 1 + 1;
  }

  // bool descending = 4;
  if (this->_internal_descending() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamInputsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamInputsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamInputsRequest::GetClassData() const { return &_class_data_; }


void StreamInputsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamInputsRequest*>(&to_msg);
  auto& from = static_cast<const StreamInputsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.StreamInputsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_last_id().empty()) {
    _this->_internal_set_last_id(from._internal_last_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  if (from._internal_order_by_id() != 0) {
    _this->_internal_set_order_by_id(from._internal_order_by_id());
  }
  if (from._internal_descending() != 0) {
    _this->_internal_set_descending(from._internal_descending());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamInputsRequest::CopyFrom(const StreamInputsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.StreamInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamInputsRequest::IsInitialized() const {
  return true;
}

void StreamInputsRequest::InternalSwap(StreamInputsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.last_id_, lhs_arena,
      &other->_impl_.last_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamInputsRequest, _impl_.descending_)
      + sizeof(StreamInputsRequest::_impl_.descending_)
      - PROTOBUF_FIELD_OFFSET(StreamInputsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamInputsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[60]);
}

// ===================================================================

class PostInputsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostInputsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostInputsRequest::_Internal::user_app_id(const PostInputsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PostInputsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostInputsRequest::clear_inputs() {
  _impl_.inputs_.Clear();
}
PostInputsRequest::PostInputsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostInputsRequest)
}
PostInputsRequest::PostInputsRequest(const PostInputsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostInputsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.inputs_){from._impl_.inputs_}
    , decltype(_impl_.inputs_add_job_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.inputs_add_job_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.inputs_add_job_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_inputs_add_job_id().empty()) {
    _this->_impl_.inputs_add_job_id_.Set(from._internal_inputs_add_job_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostInputsRequest)
}

inline void PostInputsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.inputs_){arena}
    , decltype(_impl_.inputs_add_job_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.inputs_add_job_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.inputs_add_job_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PostInputsRequest::~PostInputsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostInputsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostInputsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.inputs_.~RepeatedPtrField();
  _impl_.inputs_add_job_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PostInputsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostInputsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostInputsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.inputs_.Clear();
  _impl_.inputs_add_job_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostInputsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Input inputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string inputs_add_job_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_inputs_add_job_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PostInputsRequest.inputs_add_job_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostInputsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostInputsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Input inputs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_inputs_size()); i < n; i++) {
    const auto& repfield = this->_internal_inputs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string inputs_add_job_id = 3;
  if (!this->_internal_inputs_add_job_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inputs_add_job_id().data(), static_cast<int>(this->_internal_inputs_add_job_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostInputsRequest.inputs_add_job_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_inputs_add_job_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostInputsRequest)
  return target;
}

size_t PostInputsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostInputsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Input inputs = 2;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->_impl_.inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string inputs_add_job_id = 3;
  if (!this->_internal_inputs_add_job_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inputs_add_job_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostInputsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostInputsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostInputsRequest::GetClassData() const { return &_class_data_; }


void PostInputsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostInputsRequest*>(&to_msg);
  auto& from = static_cast<const PostInputsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostInputsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.inputs_.MergeFrom(from._impl_.inputs_);
  if (!from._internal_inputs_add_job_id().empty()) {
    _this->_internal_set_inputs_add_job_id(from._internal_inputs_add_job_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostInputsRequest::CopyFrom(const PostInputsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostInputsRequest::IsInitialized() const {
  return true;
}

void PostInputsRequest::InternalSwap(PostInputsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.inputs_.InternalSwap(&other->_impl_.inputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.inputs_add_job_id_, lhs_arena,
      &other->_impl_.inputs_add_job_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostInputsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[61]);
}

// ===================================================================

class PatchInputsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchInputsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchInputsRequest::_Internal::user_app_id(const PatchInputsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PatchInputsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PatchInputsRequest::clear_inputs() {
  _impl_.inputs_.Clear();
}
PatchInputsRequest::PatchInputsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchInputsRequest)
}
PatchInputsRequest::PatchInputsRequest(const PatchInputsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PatchInputsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.inputs_){from._impl_.inputs_}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchInputsRequest)
}

inline void PatchInputsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.inputs_){arena}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PatchInputsRequest::~PatchInputsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchInputsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatchInputsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.inputs_.~RepeatedPtrField();
  _impl_.action_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PatchInputsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatchInputsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchInputsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.inputs_.Clear();
  _impl_.action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchInputsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Input inputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchInputsRequest.action"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchInputsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchInputsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Input inputs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_inputs_size()); i < n; i++) {
    const auto& repfield = this->_internal_inputs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchInputsRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchInputsRequest)
  return target;
}

size_t PatchInputsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchInputsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Input inputs = 2;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->_impl_.inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchInputsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PatchInputsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchInputsRequest::GetClassData() const { return &_class_data_; }


void PatchInputsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PatchInputsRequest*>(&to_msg);
  auto& from = static_cast<const PatchInputsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchInputsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.inputs_.MergeFrom(from._impl_.inputs_);
  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchInputsRequest::CopyFrom(const PatchInputsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchInputsRequest::IsInitialized() const {
  return true;
}

void PatchInputsRequest::InternalSwap(PatchInputsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.inputs_.InternalSwap(&other->_impl_.inputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchInputsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[62]);
}

// ===================================================================

class DeleteInputRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteInputRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteInputRequest::_Internal::user_app_id(const DeleteInputRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void DeleteInputRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
DeleteInputRequest::DeleteInputRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteInputRequest)
}
DeleteInputRequest::DeleteInputRequest(const DeleteInputRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteInputRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.input_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.input_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.input_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_input_id().empty()) {
    _this->_impl_.input_id_.Set(from._internal_input_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteInputRequest)
}

inline void DeleteInputRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.input_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.input_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.input_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteInputRequest::~DeleteInputRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteInputRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteInputRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.input_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void DeleteInputRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteInputRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteInputRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.input_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteInputRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string input_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_input_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DeleteInputRequest.input_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteInputRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteInputRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string input_id = 2;
  if (!this->_internal_input_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input_id().data(), static_cast<int>(this->_internal_input_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteInputRequest.input_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_input_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteInputRequest)
  return target;
}

size_t DeleteInputRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteInputRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string input_id = 2;
  if (!this->_internal_input_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_input_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteInputRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteInputRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteInputRequest::GetClassData() const { return &_class_data_; }


void DeleteInputRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteInputRequest*>(&to_msg);
  auto& from = static_cast<const DeleteInputRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteInputRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_input_id().empty()) {
    _this->_internal_set_input_id(from._internal_input_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteInputRequest::CopyFrom(const DeleteInputRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteInputRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteInputRequest::IsInitialized() const {
  return true;
}

void DeleteInputRequest::InternalSwap(DeleteInputRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.input_id_, lhs_arena,
      &other->_impl_.input_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteInputRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[63]);
}

// ===================================================================

class DeleteInputsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteInputsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteInputsRequest::_Internal::user_app_id(const DeleteInputsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void DeleteInputsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
DeleteInputsRequest::DeleteInputsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteInputsRequest)
}
DeleteInputsRequest::DeleteInputsRequest(const DeleteInputsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteInputsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){from._impl_.ids_}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteInputsRequest)
}

inline void DeleteInputsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeleteInputsRequest::~DeleteInputsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteInputsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteInputsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void DeleteInputsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteInputsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteInputsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteInputsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DeleteInputsRequest.ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteInputsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteInputsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteInputsRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteInputsRequest)
  return target;
}

size_t DeleteInputsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteInputsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.ids_.size());
  for (int i = 0, n = _impl_.ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteInputsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteInputsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteInputsRequest::GetClassData() const { return &_class_data_; }


void DeleteInputsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteInputsRequest*>(&to_msg);
  auto& from = static_cast<const DeleteInputsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteInputsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_.MergeFrom(from._impl_.ids_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteInputsRequest::CopyFrom(const DeleteInputsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteInputsRequest::IsInitialized() const {
  return true;
}

void DeleteInputsRequest::InternalSwap(DeleteInputsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ids_.InternalSwap(&other->_impl_.ids_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteInputsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[64]);
}

// ===================================================================

class SingleInputResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleInputResponse* msg);
  static const ::clarifai::api::Input& input(const SingleInputResponse* msg);
};

const ::clarifai::api::status::Status&
SingleInputResponse::_Internal::status(const SingleInputResponse* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::Input&
SingleInputResponse::_Internal::input(const SingleInputResponse* msg) {
  return *msg->_impl_.input_;
}
void SingleInputResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void SingleInputResponse::clear_input() {
  if (GetArenaForAllocation() == nullptr && _impl_.input_ != nullptr) {
    delete _impl_.input_;
  }
  _impl_.input_ = nullptr;
}
SingleInputResponse::SingleInputResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleInputResponse)
}
SingleInputResponse::SingleInputResponse(const SingleInputResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleInputResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.input_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_input()) {
    _this->_impl_.input_ = new ::clarifai::api::Input(*from._impl_.input_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleInputResponse)
}

inline void SingleInputResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.input_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SingleInputResponse::~SingleInputResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleInputResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleInputResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.input_;
}

void SingleInputResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleInputResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleInputResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.input_ != nullptr) {
    delete _impl_.input_;
  }
  _impl_.input_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleInputResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Input input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleInputResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleInputResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Input input = 2;
  if (this->_internal_has_input()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::input(this),
        _Internal::input(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleInputResponse)
  return target;
}

size_t SingleInputResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleInputResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.Input input = 2;
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.input_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleInputResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleInputResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleInputResponse::GetClassData() const { return &_class_data_; }


void SingleInputResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleInputResponse*>(&to_msg);
  auto& from = static_cast<const SingleInputResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleInputResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_input()) {
    _this->_internal_mutable_input()->::clarifai::api::Input::MergeFrom(
        from._internal_input());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleInputResponse::CopyFrom(const SingleInputResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleInputResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleInputResponse::IsInitialized() const {
  return true;
}

void SingleInputResponse::InternalSwap(SingleInputResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleInputResponse, _impl_.input_)
      + sizeof(SingleInputResponse::_impl_.input_)
      - PROTOBUF_FIELD_OFFSET(SingleInputResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleInputResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[65]);
}

// ===================================================================

class MultiInputResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiInputResponse* msg);
  static const ::clarifai::api::InputsAddJob& inputs_add_job(const MultiInputResponse* msg);
};

const ::clarifai::api::status::Status&
MultiInputResponse::_Internal::status(const MultiInputResponse* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::InputsAddJob&
MultiInputResponse::_Internal::inputs_add_job(const MultiInputResponse* msg) {
  return *msg->_impl_.inputs_add_job_;
}
void MultiInputResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiInputResponse::clear_inputs() {
  _impl_.inputs_.Clear();
}
void MultiInputResponse::clear_inputs_add_job() {
  if (GetArenaForAllocation() == nullptr && _impl_.inputs_add_job_ != nullptr) {
    delete _impl_.inputs_add_job_;
  }
  _impl_.inputs_add_job_ = nullptr;
}
MultiInputResponse::MultiInputResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiInputResponse)
}
MultiInputResponse::MultiInputResponse(const MultiInputResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiInputResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.inputs_){from._impl_.inputs_}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.inputs_add_job_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_inputs_add_job()) {
    _this->_impl_.inputs_add_job_ = new ::clarifai::api::InputsAddJob(*from._impl_.inputs_add_job_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiInputResponse)
}

inline void MultiInputResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.inputs_){arena}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.inputs_add_job_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiInputResponse::~MultiInputResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiInputResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiInputResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.inputs_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.inputs_add_job_;
}

void MultiInputResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiInputResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiInputResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.inputs_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.inputs_add_job_ != nullptr) {
    delete _impl_.inputs_add_job_;
  }
  _impl_.inputs_add_job_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiInputResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Input inputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.InputsAddJob inputs_add_job = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_inputs_add_job(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiInputResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiInputResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Input inputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_inputs_size()); i < n; i++) {
    const auto& repfield = this->_internal_inputs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .clarifai.api.InputsAddJob inputs_add_job = 3;
  if (this->_internal_has_inputs_add_job()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::inputs_add_job(this),
        _Internal::inputs_add_job(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiInputResponse)
  return target;
}

size_t MultiInputResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiInputResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Input inputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->_impl_.inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.InputsAddJob inputs_add_job = 3;
  if (this->_internal_has_inputs_add_job()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inputs_add_job_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiInputResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiInputResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiInputResponse::GetClassData() const { return &_class_data_; }


void MultiInputResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiInputResponse*>(&to_msg);
  auto& from = static_cast<const MultiInputResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiInputResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.inputs_.MergeFrom(from._impl_.inputs_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_inputs_add_job()) {
    _this->_internal_mutable_inputs_add_job()->::clarifai::api::InputsAddJob::MergeFrom(
        from._internal_inputs_add_job());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiInputResponse::CopyFrom(const MultiInputResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiInputResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiInputResponse::IsInitialized() const {
  return true;
}

void MultiInputResponse::InternalSwap(MultiInputResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.inputs_.InternalSwap(&other->_impl_.inputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MultiInputResponse, _impl_.inputs_add_job_)
      + sizeof(MultiInputResponse::_impl_.inputs_add_job_)
      - PROTOBUF_FIELD_OFFSET(MultiInputResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiInputResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[66]);
}

// ===================================================================

class MultiInputAnnotationResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiInputAnnotationResponse* msg);
};

const ::clarifai::api::status::Status&
MultiInputAnnotationResponse::_Internal::status(const MultiInputAnnotationResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiInputAnnotationResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiInputAnnotationResponse::clear_hits() {
  _impl_.hits_.Clear();
}
MultiInputAnnotationResponse::MultiInputAnnotationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiInputAnnotationResponse)
}
MultiInputAnnotationResponse::MultiInputAnnotationResponse(const MultiInputAnnotationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiInputAnnotationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hits_){from._impl_.hits_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiInputAnnotationResponse)
}

inline void MultiInputAnnotationResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hits_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiInputAnnotationResponse::~MultiInputAnnotationResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiInputAnnotationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiInputAnnotationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hits_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiInputAnnotationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiInputAnnotationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiInputAnnotationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hits_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiInputAnnotationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Hit hits = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiInputAnnotationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiInputAnnotationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Hit hits = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hits_size()); i < n; i++) {
    const auto& repfield = this->_internal_hits(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiInputAnnotationResponse)
  return target;
}

size_t MultiInputAnnotationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiInputAnnotationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Hit hits = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_hits_size();
  for (const auto& msg : this->_impl_.hits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiInputAnnotationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiInputAnnotationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiInputAnnotationResponse::GetClassData() const { return &_class_data_; }


void MultiInputAnnotationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiInputAnnotationResponse*>(&to_msg);
  auto& from = static_cast<const MultiInputAnnotationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiInputAnnotationResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.hits_.MergeFrom(from._impl_.hits_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiInputAnnotationResponse::CopyFrom(const MultiInputAnnotationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiInputAnnotationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiInputAnnotationResponse::IsInitialized() const {
  return true;
}

void MultiInputAnnotationResponse::InternalSwap(MultiInputAnnotationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.hits_.InternalSwap(&other->_impl_.hits_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiInputAnnotationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[67]);
}

// ===================================================================

class SingleInputCountResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleInputCountResponse* msg);
  static const ::clarifai::api::InputCount& counts(const SingleInputCountResponse* msg);
};

const ::clarifai::api::status::Status&
SingleInputCountResponse::_Internal::status(const SingleInputCountResponse* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::InputCount&
SingleInputCountResponse::_Internal::counts(const SingleInputCountResponse* msg) {
  return *msg->_impl_.counts_;
}
void SingleInputCountResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void SingleInputCountResponse::clear_counts() {
  if (GetArenaForAllocation() == nullptr && _impl_.counts_ != nullptr) {
    delete _impl_.counts_;
  }
  _impl_.counts_ = nullptr;
}
SingleInputCountResponse::SingleInputCountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleInputCountResponse)
}
SingleInputCountResponse::SingleInputCountResponse(const SingleInputCountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleInputCountResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.counts_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_counts()) {
    _this->_impl_.counts_ = new ::clarifai::api::InputCount(*from._impl_.counts_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleInputCountResponse)
}

inline void SingleInputCountResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.counts_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SingleInputCountResponse::~SingleInputCountResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleInputCountResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleInputCountResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.counts_;
}

void SingleInputCountResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleInputCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleInputCountResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.counts_ != nullptr) {
    delete _impl_.counts_;
  }
  _impl_.counts_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleInputCountResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.InputCount counts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_counts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleInputCountResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleInputCountResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.InputCount counts = 2;
  if (this->_internal_has_counts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::counts(this),
        _Internal::counts(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleInputCountResponse)
  return target;
}

size_t SingleInputCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleInputCountResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.InputCount counts = 2;
  if (this->_internal_has_counts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.counts_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleInputCountResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleInputCountResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleInputCountResponse::GetClassData() const { return &_class_data_; }


void SingleInputCountResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleInputCountResponse*>(&to_msg);
  auto& from = static_cast<const SingleInputCountResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleInputCountResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_counts()) {
    _this->_internal_mutable_counts()->::clarifai::api::InputCount::MergeFrom(
        from._internal_counts());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleInputCountResponse::CopyFrom(const SingleInputCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleInputCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleInputCountResponse::IsInitialized() const {
  return true;
}

void SingleInputCountResponse::InternalSwap(SingleInputCountResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleInputCountResponse, _impl_.counts_)
      + sizeof(SingleInputCountResponse::_impl_.counts_)
      - PROTOBUF_FIELD_OFFSET(SingleInputCountResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleInputCountResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[68]);
}

// ===================================================================

class GetInputCountRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetInputCountRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetInputCountRequest::_Internal::user_app_id(const GetInputCountRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void GetInputCountRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
GetInputCountRequest::GetInputCountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetInputCountRequest)
}
GetInputCountRequest::GetInputCountRequest(const GetInputCountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetInputCountRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetInputCountRequest)
}

inline void GetInputCountRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetInputCountRequest::~GetInputCountRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetInputCountRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetInputCountRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void GetInputCountRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetInputCountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetInputCountRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetInputCountRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetInputCountRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetInputCountRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetInputCountRequest)
  return target;
}

size_t GetInputCountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetInputCountRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetInputCountRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetInputCountRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetInputCountRequest::GetClassData() const { return &_class_data_; }


void GetInputCountRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetInputCountRequest*>(&to_msg);
  auto& from = static_cast<const GetInputCountRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetInputCountRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetInputCountRequest::CopyFrom(const GetInputCountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetInputCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInputCountRequest::IsInitialized() const {
  return true;
}

void GetInputCountRequest::InternalSwap(GetInputCountRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInputCountRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[69]);
}

// ===================================================================

class ListDatasetsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListDatasetsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListDatasetsRequest::_Internal::user_app_id(const ListDatasetsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListDatasetsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
ListDatasetsRequest::ListDatasetsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListDatasetsRequest)
}
ListDatasetsRequest::ListDatasetsRequest(const ListDatasetsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListDatasetsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.per_page_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListDatasetsRequest)
}

inline void ListDatasetsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListDatasetsRequest::~ListDatasetsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListDatasetsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListDatasetsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void ListDatasetsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListDatasetsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListDatasetsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.per_page_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDatasetsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListDatasetsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListDatasetsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListDatasetsRequest)
  return target;
}

size_t ListDatasetsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListDatasetsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListDatasetsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListDatasetsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListDatasetsRequest::GetClassData() const { return &_class_data_; }


void ListDatasetsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListDatasetsRequest*>(&to_msg);
  auto& from = static_cast<const ListDatasetsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListDatasetsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListDatasetsRequest::CopyFrom(const ListDatasetsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListDatasetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDatasetsRequest::IsInitialized() const {
  return true;
}

void ListDatasetsRequest::InternalSwap(ListDatasetsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListDatasetsRequest, _impl_.per_page_)
      + sizeof(ListDatasetsRequest::_impl_.per_page_)
      - PROTOBUF_FIELD_OFFSET(ListDatasetsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDatasetsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[70]);
}

// ===================================================================

class GetDatasetRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetDatasetRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetDatasetRequest::_Internal::user_app_id(const GetDatasetRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void GetDatasetRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
GetDatasetRequest::GetDatasetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetDatasetRequest)
}
GetDatasetRequest::GetDatasetRequest(const GetDatasetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDatasetRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dataset_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dataset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dataset_id().empty()) {
    _this->_impl_.dataset_id_.Set(from._internal_dataset_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetDatasetRequest)
}

inline void GetDatasetRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dataset_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dataset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetDatasetRequest::~GetDatasetRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetDatasetRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDatasetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dataset_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void GetDatasetRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDatasetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetDatasetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dataset_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDatasetRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dataset_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dataset_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetDatasetRequest.dataset_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDatasetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetDatasetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_id().data(), static_cast<int>(this->_internal_dataset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetDatasetRequest.dataset_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dataset_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetDatasetRequest)
  return target;
}

size_t GetDatasetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetDatasetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDatasetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDatasetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDatasetRequest::GetClassData() const { return &_class_data_; }


void GetDatasetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDatasetRequest*>(&to_msg);
  auto& from = static_cast<const GetDatasetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetDatasetRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dataset_id().empty()) {
    _this->_internal_set_dataset_id(from._internal_dataset_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDatasetRequest::CopyFrom(const GetDatasetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetDatasetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDatasetRequest::IsInitialized() const {
  return true;
}

void GetDatasetRequest::InternalSwap(GetDatasetRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dataset_id_, lhs_arena,
      &other->_impl_.dataset_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDatasetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[71]);
}

// ===================================================================

class PostDatasetsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostDatasetsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostDatasetsRequest::_Internal::user_app_id(const PostDatasetsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PostDatasetsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostDatasetsRequest::clear_datasets() {
  _impl_.datasets_.Clear();
}
PostDatasetsRequest::PostDatasetsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostDatasetsRequest)
}
PostDatasetsRequest::PostDatasetsRequest(const PostDatasetsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostDatasetsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.datasets_){from._impl_.datasets_}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostDatasetsRequest)
}

inline void PostDatasetsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.datasets_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PostDatasetsRequest::~PostDatasetsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostDatasetsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostDatasetsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.datasets_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PostDatasetsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostDatasetsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostDatasetsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.datasets_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostDatasetsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Dataset datasets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datasets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostDatasetsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostDatasetsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Dataset datasets = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_datasets_size()); i < n; i++) {
    const auto& repfield = this->_internal_datasets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostDatasetsRequest)
  return target;
}

size_t PostDatasetsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostDatasetsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Dataset datasets = 2;
  total_size += 1UL * this->_internal_datasets_size();
  for (const auto& msg : this->_impl_.datasets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostDatasetsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostDatasetsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostDatasetsRequest::GetClassData() const { return &_class_data_; }


void PostDatasetsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostDatasetsRequest*>(&to_msg);
  auto& from = static_cast<const PostDatasetsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostDatasetsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.datasets_.MergeFrom(from._impl_.datasets_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostDatasetsRequest::CopyFrom(const PostDatasetsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostDatasetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostDatasetsRequest::IsInitialized() const {
  return true;
}

void PostDatasetsRequest::InternalSwap(PostDatasetsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.datasets_.InternalSwap(&other->_impl_.datasets_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostDatasetsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[72]);
}

// ===================================================================

class PatchDatasetsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchDatasetsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchDatasetsRequest::_Internal::user_app_id(const PatchDatasetsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PatchDatasetsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PatchDatasetsRequest::clear_datasets() {
  _impl_.datasets_.Clear();
}
PatchDatasetsRequest::PatchDatasetsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchDatasetsRequest)
}
PatchDatasetsRequest::PatchDatasetsRequest(const PatchDatasetsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PatchDatasetsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.datasets_){from._impl_.datasets_}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchDatasetsRequest)
}

inline void PatchDatasetsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.datasets_){arena}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PatchDatasetsRequest::~PatchDatasetsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchDatasetsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatchDatasetsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.datasets_.~RepeatedPtrField();
  _impl_.action_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PatchDatasetsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatchDatasetsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchDatasetsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.datasets_.Clear();
  _impl_.action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchDatasetsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Dataset datasets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datasets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchDatasetsRequest.action"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchDatasetsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchDatasetsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Dataset datasets = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_datasets_size()); i < n; i++) {
    const auto& repfield = this->_internal_datasets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchDatasetsRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchDatasetsRequest)
  return target;
}

size_t PatchDatasetsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchDatasetsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Dataset datasets = 2;
  total_size += 1UL * this->_internal_datasets_size();
  for (const auto& msg : this->_impl_.datasets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchDatasetsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PatchDatasetsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchDatasetsRequest::GetClassData() const { return &_class_data_; }


void PatchDatasetsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PatchDatasetsRequest*>(&to_msg);
  auto& from = static_cast<const PatchDatasetsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchDatasetsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.datasets_.MergeFrom(from._impl_.datasets_);
  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchDatasetsRequest::CopyFrom(const PatchDatasetsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchDatasetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchDatasetsRequest::IsInitialized() const {
  return true;
}

void PatchDatasetsRequest::InternalSwap(PatchDatasetsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.datasets_.InternalSwap(&other->_impl_.datasets_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchDatasetsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[73]);
}

// ===================================================================

class PatchDatasetIdsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchDatasetIdsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchDatasetIdsRequest::_Internal::user_app_id(const PatchDatasetIdsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PatchDatasetIdsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
PatchDatasetIdsRequest::PatchDatasetIdsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchDatasetIdsRequest)
}
PatchDatasetIdsRequest::PatchDatasetIdsRequest(const PatchDatasetIdsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PatchDatasetIdsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){from._impl_.ids_}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchDatasetIdsRequest)
}

inline void PatchDatasetIdsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){arena}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PatchDatasetIdsRequest::~PatchDatasetIdsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchDatasetIdsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatchDatasetIdsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_.~RepeatedPtrField();
  _impl_.action_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PatchDatasetIdsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatchDatasetIdsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchDatasetIdsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ids_.Clear();
  _impl_.action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchDatasetIdsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.IdUpdateSource ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchDatasetIdsRequest.action"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchDatasetIdsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchDatasetIdsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.IdUpdateSource ids = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ids_size()); i < n; i++) {
    const auto& repfield = this->_internal_ids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchDatasetIdsRequest.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchDatasetIdsRequest)
  return target;
}

size_t PatchDatasetIdsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchDatasetIdsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.IdUpdateSource ids = 3;
  total_size += 1UL * this->_internal_ids_size();
  for (const auto& msg : this->_impl_.ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchDatasetIdsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PatchDatasetIdsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchDatasetIdsRequest::GetClassData() const { return &_class_data_; }


void PatchDatasetIdsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PatchDatasetIdsRequest*>(&to_msg);
  auto& from = static_cast<const PatchDatasetIdsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchDatasetIdsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_.MergeFrom(from._impl_.ids_);
  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchDatasetIdsRequest::CopyFrom(const PatchDatasetIdsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchDatasetIdsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchDatasetIdsRequest::IsInitialized() const {
  return true;
}

void PatchDatasetIdsRequest::InternalSwap(PatchDatasetIdsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ids_.InternalSwap(&other->_impl_.ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchDatasetIdsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[74]);
}

// ===================================================================

class DeleteDatasetsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteDatasetsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteDatasetsRequest::_Internal::user_app_id(const DeleteDatasetsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void DeleteDatasetsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
DeleteDatasetsRequest::DeleteDatasetsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteDatasetsRequest)
}
DeleteDatasetsRequest::DeleteDatasetsRequest(const DeleteDatasetsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteDatasetsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dataset_ids_){from._impl_.dataset_ids_}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteDatasetsRequest)
}

inline void DeleteDatasetsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dataset_ids_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeleteDatasetsRequest::~DeleteDatasetsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteDatasetsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteDatasetsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dataset_ids_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void DeleteDatasetsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteDatasetsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteDatasetsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dataset_ids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteDatasetsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string dataset_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dataset_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DeleteDatasetsRequest.dataset_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteDatasetsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteDatasetsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated string dataset_ids = 2;
  for (int i = 0, n = this->_internal_dataset_ids_size(); i < n; i++) {
    const auto& s = this->_internal_dataset_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteDatasetsRequest.dataset_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteDatasetsRequest)
  return target;
}

size_t DeleteDatasetsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteDatasetsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dataset_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.dataset_ids_.size());
  for (int i = 0, n = _impl_.dataset_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.dataset_ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteDatasetsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteDatasetsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteDatasetsRequest::GetClassData() const { return &_class_data_; }


void DeleteDatasetsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteDatasetsRequest*>(&to_msg);
  auto& from = static_cast<const DeleteDatasetsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteDatasetsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dataset_ids_.MergeFrom(from._impl_.dataset_ids_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteDatasetsRequest::CopyFrom(const DeleteDatasetsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteDatasetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDatasetsRequest::IsInitialized() const {
  return true;
}

void DeleteDatasetsRequest::InternalSwap(DeleteDatasetsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dataset_ids_.InternalSwap(&other->_impl_.dataset_ids_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteDatasetsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[75]);
}

// ===================================================================

class MultiDatasetResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiDatasetResponse* msg);
};

const ::clarifai::api::status::Status&
MultiDatasetResponse::_Internal::status(const MultiDatasetResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiDatasetResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiDatasetResponse::clear_datasets() {
  _impl_.datasets_.Clear();
}
MultiDatasetResponse::MultiDatasetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiDatasetResponse)
}
MultiDatasetResponse::MultiDatasetResponse(const MultiDatasetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiDatasetResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.datasets_){from._impl_.datasets_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiDatasetResponse)
}

inline void MultiDatasetResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.datasets_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiDatasetResponse::~MultiDatasetResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiDatasetResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiDatasetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.datasets_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiDatasetResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiDatasetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiDatasetResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.datasets_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiDatasetResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Dataset datasets = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datasets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiDatasetResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiDatasetResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Dataset datasets = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_datasets_size()); i < n; i++) {
    const auto& repfield = this->_internal_datasets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiDatasetResponse)
  return target;
}

size_t MultiDatasetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiDatasetResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Dataset datasets = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_datasets_size();
  for (const auto& msg : this->_impl_.datasets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiDatasetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiDatasetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiDatasetResponse::GetClassData() const { return &_class_data_; }


void MultiDatasetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiDatasetResponse*>(&to_msg);
  auto& from = static_cast<const MultiDatasetResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiDatasetResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.datasets_.MergeFrom(from._impl_.datasets_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiDatasetResponse::CopyFrom(const MultiDatasetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiDatasetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiDatasetResponse::IsInitialized() const {
  return true;
}

void MultiDatasetResponse::InternalSwap(MultiDatasetResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.datasets_.InternalSwap(&other->_impl_.datasets_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiDatasetResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[76]);
}

// ===================================================================

class SingleDatasetResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleDatasetResponse* msg);
  static const ::clarifai::api::Dataset& dataset(const SingleDatasetResponse* msg);
};

const ::clarifai::api::status::Status&
SingleDatasetResponse::_Internal::status(const SingleDatasetResponse* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::Dataset&
SingleDatasetResponse::_Internal::dataset(const SingleDatasetResponse* msg) {
  return *msg->_impl_.dataset_;
}
void SingleDatasetResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void SingleDatasetResponse::clear_dataset() {
  if (GetArenaForAllocation() == nullptr && _impl_.dataset_ != nullptr) {
    delete _impl_.dataset_;
  }
  _impl_.dataset_ = nullptr;
}
SingleDatasetResponse::SingleDatasetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleDatasetResponse)
}
SingleDatasetResponse::SingleDatasetResponse(const SingleDatasetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleDatasetResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.dataset_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_dataset()) {
    _this->_impl_.dataset_ = new ::clarifai::api::Dataset(*from._impl_.dataset_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleDatasetResponse)
}

inline void SingleDatasetResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.dataset_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SingleDatasetResponse::~SingleDatasetResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleDatasetResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleDatasetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.dataset_;
}

void SingleDatasetResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleDatasetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleDatasetResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dataset_ != nullptr) {
    delete _impl_.dataset_;
  }
  _impl_.dataset_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleDatasetResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Dataset dataset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dataset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleDatasetResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleDatasetResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Dataset dataset = 2;
  if (this->_internal_has_dataset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::dataset(this),
        _Internal::dataset(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleDatasetResponse)
  return target;
}

size_t SingleDatasetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleDatasetResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.Dataset dataset = 2;
  if (this->_internal_has_dataset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dataset_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleDatasetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleDatasetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleDatasetResponse::GetClassData() const { return &_class_data_; }


void SingleDatasetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleDatasetResponse*>(&to_msg);
  auto& from = static_cast<const SingleDatasetResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleDatasetResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_dataset()) {
    _this->_internal_mutable_dataset()->::clarifai::api::Dataset::MergeFrom(
        from._internal_dataset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleDatasetResponse::CopyFrom(const SingleDatasetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleDatasetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleDatasetResponse::IsInitialized() const {
  return true;
}

void SingleDatasetResponse::InternalSwap(SingleDatasetResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleDatasetResponse, _impl_.dataset_)
      + sizeof(SingleDatasetResponse::_impl_.dataset_)
      - PROTOBUF_FIELD_OFFSET(SingleDatasetResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleDatasetResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[77]);
}

// ===================================================================

class ListDatasetInputsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListDatasetInputsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListDatasetInputsRequest::_Internal::user_app_id(const ListDatasetInputsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListDatasetInputsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
ListDatasetInputsRequest::ListDatasetInputsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListDatasetInputsRequest)
}
ListDatasetInputsRequest::ListDatasetInputsRequest(const ListDatasetInputsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListDatasetInputsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dataset_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dataset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dataset_id().empty()) {
    _this->_impl_.dataset_id_.Set(from._internal_dataset_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.per_page_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListDatasetInputsRequest)
}

inline void ListDatasetInputsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dataset_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dataset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListDatasetInputsRequest::~ListDatasetInputsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListDatasetInputsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListDatasetInputsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dataset_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void ListDatasetInputsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListDatasetInputsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListDatasetInputsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dataset_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.per_page_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDatasetInputsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dataset_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dataset_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListDatasetInputsRequest.dataset_id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListDatasetInputsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListDatasetInputsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_id().data(), static_cast<int>(this->_internal_dataset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListDatasetInputsRequest.dataset_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dataset_id(), target);
  }

  // uint32 page = 3;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_page(), target);
  }

  // uint32 per_page = 4;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListDatasetInputsRequest)
  return target;
}

size_t ListDatasetInputsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListDatasetInputsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // uint32 page = 3;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 4;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListDatasetInputsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListDatasetInputsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListDatasetInputsRequest::GetClassData() const { return &_class_data_; }


void ListDatasetInputsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListDatasetInputsRequest*>(&to_msg);
  auto& from = static_cast<const ListDatasetInputsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListDatasetInputsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dataset_id().empty()) {
    _this->_internal_set_dataset_id(from._internal_dataset_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListDatasetInputsRequest::CopyFrom(const ListDatasetInputsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListDatasetInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDatasetInputsRequest::IsInitialized() const {
  return true;
}

void ListDatasetInputsRequest::InternalSwap(ListDatasetInputsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dataset_id_, lhs_arena,
      &other->_impl_.dataset_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListDatasetInputsRequest, _impl_.per_page_)
      + sizeof(ListDatasetInputsRequest::_impl_.per_page_)
      - PROTOBUF_FIELD_OFFSET(ListDatasetInputsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDatasetInputsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[78]);
}

// ===================================================================

class GetDatasetInputRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetDatasetInputRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetDatasetInputRequest::_Internal::user_app_id(const GetDatasetInputRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void GetDatasetInputRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
GetDatasetInputRequest::GetDatasetInputRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetDatasetInputRequest)
}
GetDatasetInputRequest::GetDatasetInputRequest(const GetDatasetInputRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDatasetInputRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dataset_id_){}
    , decltype(_impl_.input_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dataset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dataset_id().empty()) {
    _this->_impl_.dataset_id_.Set(from._internal_dataset_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.input_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.input_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_input_id().empty()) {
    _this->_impl_.input_id_.Set(from._internal_input_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetDatasetInputRequest)
}

inline void GetDatasetInputRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dataset_id_){}
    , decltype(_impl_.input_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dataset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.input_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.input_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetDatasetInputRequest::~GetDatasetInputRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetDatasetInputRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDatasetInputRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dataset_id_.Destroy();
  _impl_.input_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void GetDatasetInputRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDatasetInputRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetDatasetInputRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dataset_id_.ClearToEmpty();
  _impl_.input_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDatasetInputRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dataset_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dataset_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetDatasetInputRequest.dataset_id"));
        } else
          goto handle_unusual;
        continue;
      // string input_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_input_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetDatasetInputRequest.input_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDatasetInputRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetDatasetInputRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_id().data(), static_cast<int>(this->_internal_dataset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetDatasetInputRequest.dataset_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dataset_id(), target);
  }

  // string input_id = 3;
  if (!this->_internal_input_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input_id().data(), static_cast<int>(this->_internal_input_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetDatasetInputRequest.input_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_input_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetDatasetInputRequest)
  return target;
}

size_t GetDatasetInputRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetDatasetInputRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_id());
  }

  // string input_id = 3;
  if (!this->_internal_input_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_input_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDatasetInputRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDatasetInputRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDatasetInputRequest::GetClassData() const { return &_class_data_; }


void GetDatasetInputRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDatasetInputRequest*>(&to_msg);
  auto& from = static_cast<const GetDatasetInputRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetDatasetInputRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dataset_id().empty()) {
    _this->_internal_set_dataset_id(from._internal_dataset_id());
  }
  if (!from._internal_input_id().empty()) {
    _this->_internal_set_input_id(from._internal_input_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDatasetInputRequest::CopyFrom(const GetDatasetInputRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetDatasetInputRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDatasetInputRequest::IsInitialized() const {
  return true;
}

void GetDatasetInputRequest::InternalSwap(GetDatasetInputRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dataset_id_, lhs_arena,
      &other->_impl_.dataset_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.input_id_, lhs_arena,
      &other->_impl_.input_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDatasetInputRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[79]);
}

// ===================================================================

class PostDatasetInputsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostDatasetInputsRequest* msg);
  static const ::clarifai::api::Search& search(const PostDatasetInputsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostDatasetInputsRequest::_Internal::user_app_id(const PostDatasetInputsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
const ::clarifai::api::Search&
PostDatasetInputsRequest::_Internal::search(const PostDatasetInputsRequest* msg) {
  return *msg->_impl_.search_;
}
void PostDatasetInputsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostDatasetInputsRequest::clear_dataset_inputs() {
  _impl_.dataset_inputs_.Clear();
}
void PostDatasetInputsRequest::clear_search() {
  if (GetArenaForAllocation() == nullptr && _impl_.search_ != nullptr) {
    delete _impl_.search_;
  }
  _impl_.search_ = nullptr;
}
PostDatasetInputsRequest::PostDatasetInputsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostDatasetInputsRequest)
}
PostDatasetInputsRequest::PostDatasetInputsRequest(const PostDatasetInputsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostDatasetInputsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dataset_inputs_){from._impl_.dataset_inputs_}
    , decltype(_impl_.dataset_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.search_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dataset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dataset_id().empty()) {
    _this->_impl_.dataset_id_.Set(from._internal_dataset_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  if (from._internal_has_search()) {
    _this->_impl_.search_ = new ::clarifai::api::Search(*from._impl_.search_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostDatasetInputsRequest)
}

inline void PostDatasetInputsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dataset_inputs_){arena}
    , decltype(_impl_.dataset_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.search_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dataset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PostDatasetInputsRequest::~PostDatasetInputsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostDatasetInputsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostDatasetInputsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dataset_inputs_.~RepeatedPtrField();
  _impl_.dataset_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
  if (this != internal_default_instance()) delete _impl_.search_;
}

void PostDatasetInputsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostDatasetInputsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostDatasetInputsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dataset_inputs_.Clear();
  _impl_.dataset_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.search_ != nullptr) {
    delete _impl_.search_;
  }
  _impl_.search_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostDatasetInputsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dataset_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dataset_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PostDatasetInputsRequest.dataset_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.DatasetInput dataset_inputs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dataset_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Search search = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_search(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostDatasetInputsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostDatasetInputsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_id().data(), static_cast<int>(this->_internal_dataset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostDatasetInputsRequest.dataset_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dataset_id(), target);
  }

  // repeated .clarifai.api.DatasetInput dataset_inputs = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dataset_inputs_size()); i < n; i++) {
    const auto& repfield = this->_internal_dataset_inputs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .clarifai.api.Search search = 4;
  if (this->_internal_has_search()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::search(this),
        _Internal::search(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostDatasetInputsRequest)
  return target;
}

size_t PostDatasetInputsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostDatasetInputsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.DatasetInput dataset_inputs = 3;
  total_size += 1UL * this->_internal_dataset_inputs_size();
  for (const auto& msg : this->_impl_.dataset_inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // .clarifai.api.Search search = 4;
  if (this->_internal_has_search()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.search_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostDatasetInputsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostDatasetInputsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostDatasetInputsRequest::GetClassData() const { return &_class_data_; }


void PostDatasetInputsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostDatasetInputsRequest*>(&to_msg);
  auto& from = static_cast<const PostDatasetInputsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostDatasetInputsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dataset_inputs_.MergeFrom(from._impl_.dataset_inputs_);
  if (!from._internal_dataset_id().empty()) {
    _this->_internal_set_dataset_id(from._internal_dataset_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_has_search()) {
    _this->_internal_mutable_search()->::clarifai::api::Search::MergeFrom(
        from._internal_search());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostDatasetInputsRequest::CopyFrom(const PostDatasetInputsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostDatasetInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostDatasetInputsRequest::IsInitialized() const {
  return true;
}

void PostDatasetInputsRequest::InternalSwap(PostDatasetInputsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dataset_inputs_.InternalSwap(&other->_impl_.dataset_inputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dataset_id_, lhs_arena,
      &other->_impl_.dataset_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostDatasetInputsRequest, _impl_.search_)
      + sizeof(PostDatasetInputsRequest::_impl_.search_)
      - PROTOBUF_FIELD_OFFSET(PostDatasetInputsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostDatasetInputsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[80]);
}

// ===================================================================

class DeleteDatasetInputsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteDatasetInputsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteDatasetInputsRequest::_Internal::user_app_id(const DeleteDatasetInputsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void DeleteDatasetInputsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
DeleteDatasetInputsRequest::DeleteDatasetInputsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteDatasetInputsRequest)
}
DeleteDatasetInputsRequest::DeleteDatasetInputsRequest(const DeleteDatasetInputsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteDatasetInputsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.input_ids_){from._impl_.input_ids_}
    , decltype(_impl_.dataset_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dataset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dataset_id().empty()) {
    _this->_impl_.dataset_id_.Set(from._internal_dataset_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteDatasetInputsRequest)
}

inline void DeleteDatasetInputsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.input_ids_){arena}
    , decltype(_impl_.dataset_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dataset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteDatasetInputsRequest::~DeleteDatasetInputsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteDatasetInputsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteDatasetInputsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.input_ids_.~RepeatedPtrField();
  _impl_.dataset_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void DeleteDatasetInputsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteDatasetInputsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteDatasetInputsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.input_ids_.Clear();
  _impl_.dataset_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteDatasetInputsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dataset_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dataset_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DeleteDatasetInputsRequest.dataset_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string input_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DeleteDatasetInputsRequest.input_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteDatasetInputsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteDatasetInputsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_id().data(), static_cast<int>(this->_internal_dataset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteDatasetInputsRequest.dataset_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dataset_id(), target);
  }

  // repeated string input_ids = 3;
  for (int i = 0, n = this->_internal_input_ids_size(); i < n; i++) {
    const auto& s = this->_internal_input_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteDatasetInputsRequest.input_ids");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteDatasetInputsRequest)
  return target;
}

size_t DeleteDatasetInputsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteDatasetInputsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string input_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.input_ids_.size());
  for (int i = 0, n = _impl_.input_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.input_ids_.Get(i));
  }

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteDatasetInputsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteDatasetInputsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteDatasetInputsRequest::GetClassData() const { return &_class_data_; }


void DeleteDatasetInputsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteDatasetInputsRequest*>(&to_msg);
  auto& from = static_cast<const DeleteDatasetInputsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteDatasetInputsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.input_ids_.MergeFrom(from._impl_.input_ids_);
  if (!from._internal_dataset_id().empty()) {
    _this->_internal_set_dataset_id(from._internal_dataset_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteDatasetInputsRequest::CopyFrom(const DeleteDatasetInputsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteDatasetInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDatasetInputsRequest::IsInitialized() const {
  return true;
}

void DeleteDatasetInputsRequest::InternalSwap(DeleteDatasetInputsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.input_ids_.InternalSwap(&other->_impl_.input_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dataset_id_, lhs_arena,
      &other->_impl_.dataset_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteDatasetInputsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[81]);
}

// ===================================================================

class MultiDatasetInputResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiDatasetInputResponse* msg);
  static const ::clarifai::api::DatasetInputsSearchAddJob& dataset_inputs_search_add_job(const MultiDatasetInputResponse* msg);
};

const ::clarifai::api::status::Status&
MultiDatasetInputResponse::_Internal::status(const MultiDatasetInputResponse* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::DatasetInputsSearchAddJob&
MultiDatasetInputResponse::_Internal::dataset_inputs_search_add_job(const MultiDatasetInputResponse* msg) {
  return *msg->_impl_.dataset_inputs_search_add_job_;
}
void MultiDatasetInputResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiDatasetInputResponse::clear_dataset_inputs() {
  _impl_.dataset_inputs_.Clear();
}
void MultiDatasetInputResponse::clear_dataset_inputs_search_add_job() {
  if (GetArenaForAllocation() == nullptr && _impl_.dataset_inputs_search_add_job_ != nullptr) {
    delete _impl_.dataset_inputs_search_add_job_;
  }
  _impl_.dataset_inputs_search_add_job_ = nullptr;
}
MultiDatasetInputResponse::MultiDatasetInputResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiDatasetInputResponse)
}
MultiDatasetInputResponse::MultiDatasetInputResponse(const MultiDatasetInputResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiDatasetInputResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dataset_inputs_){from._impl_.dataset_inputs_}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.dataset_inputs_search_add_job_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_dataset_inputs_search_add_job()) {
    _this->_impl_.dataset_inputs_search_add_job_ = new ::clarifai::api::DatasetInputsSearchAddJob(*from._impl_.dataset_inputs_search_add_job_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiDatasetInputResponse)
}

inline void MultiDatasetInputResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dataset_inputs_){arena}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.dataset_inputs_search_add_job_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiDatasetInputResponse::~MultiDatasetInputResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiDatasetInputResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiDatasetInputResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dataset_inputs_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.dataset_inputs_search_add_job_;
}

void MultiDatasetInputResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiDatasetInputResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiDatasetInputResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dataset_inputs_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dataset_inputs_search_add_job_ != nullptr) {
    delete _impl_.dataset_inputs_search_add_job_;
  }
  _impl_.dataset_inputs_search_add_job_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiDatasetInputResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.DatasetInput dataset_inputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dataset_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.DatasetInputsSearchAddJob dataset_inputs_search_add_job = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dataset_inputs_search_add_job(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiDatasetInputResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiDatasetInputResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.DatasetInput dataset_inputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dataset_inputs_size()); i < n; i++) {
    const auto& repfield = this->_internal_dataset_inputs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .clarifai.api.DatasetInputsSearchAddJob dataset_inputs_search_add_job = 3;
  if (this->_internal_has_dataset_inputs_search_add_job()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::dataset_inputs_search_add_job(this),
        _Internal::dataset_inputs_search_add_job(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiDatasetInputResponse)
  return target;
}

size_t MultiDatasetInputResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiDatasetInputResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.DatasetInput dataset_inputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_dataset_inputs_size();
  for (const auto& msg : this->_impl_.dataset_inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.DatasetInputsSearchAddJob dataset_inputs_search_add_job = 3;
  if (this->_internal_has_dataset_inputs_search_add_job()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dataset_inputs_search_add_job_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiDatasetInputResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiDatasetInputResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiDatasetInputResponse::GetClassData() const { return &_class_data_; }


void MultiDatasetInputResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiDatasetInputResponse*>(&to_msg);
  auto& from = static_cast<const MultiDatasetInputResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiDatasetInputResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dataset_inputs_.MergeFrom(from._impl_.dataset_inputs_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_dataset_inputs_search_add_job()) {
    _this->_internal_mutable_dataset_inputs_search_add_job()->::clarifai::api::DatasetInputsSearchAddJob::MergeFrom(
        from._internal_dataset_inputs_search_add_job());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiDatasetInputResponse::CopyFrom(const MultiDatasetInputResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiDatasetInputResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiDatasetInputResponse::IsInitialized() const {
  return true;
}

void MultiDatasetInputResponse::InternalSwap(MultiDatasetInputResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dataset_inputs_.InternalSwap(&other->_impl_.dataset_inputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MultiDatasetInputResponse, _impl_.dataset_inputs_search_add_job_)
      + sizeof(MultiDatasetInputResponse::_impl_.dataset_inputs_search_add_job_)
      - PROTOBUF_FIELD_OFFSET(MultiDatasetInputResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiDatasetInputResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[82]);
}

// ===================================================================

class SingleDatasetInputResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleDatasetInputResponse* msg);
  static const ::clarifai::api::DatasetInput& dataset_input(const SingleDatasetInputResponse* msg);
};

const ::clarifai::api::status::Status&
SingleDatasetInputResponse::_Internal::status(const SingleDatasetInputResponse* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::DatasetInput&
SingleDatasetInputResponse::_Internal::dataset_input(const SingleDatasetInputResponse* msg) {
  return *msg->_impl_.dataset_input_;
}
void SingleDatasetInputResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void SingleDatasetInputResponse::clear_dataset_input() {
  if (GetArenaForAllocation() == nullptr && _impl_.dataset_input_ != nullptr) {
    delete _impl_.dataset_input_;
  }
  _impl_.dataset_input_ = nullptr;
}
SingleDatasetInputResponse::SingleDatasetInputResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleDatasetInputResponse)
}
SingleDatasetInputResponse::SingleDatasetInputResponse(const SingleDatasetInputResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleDatasetInputResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.dataset_input_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_dataset_input()) {
    _this->_impl_.dataset_input_ = new ::clarifai::api::DatasetInput(*from._impl_.dataset_input_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleDatasetInputResponse)
}

inline void SingleDatasetInputResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.dataset_input_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SingleDatasetInputResponse::~SingleDatasetInputResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleDatasetInputResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleDatasetInputResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.dataset_input_;
}

void SingleDatasetInputResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleDatasetInputResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleDatasetInputResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dataset_input_ != nullptr) {
    delete _impl_.dataset_input_;
  }
  _impl_.dataset_input_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleDatasetInputResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.DatasetInput dataset_input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dataset_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleDatasetInputResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleDatasetInputResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.DatasetInput dataset_input = 2;
  if (this->_internal_has_dataset_input()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::dataset_input(this),
        _Internal::dataset_input(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleDatasetInputResponse)
  return target;
}

size_t SingleDatasetInputResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleDatasetInputResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.DatasetInput dataset_input = 2;
  if (this->_internal_has_dataset_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dataset_input_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleDatasetInputResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleDatasetInputResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleDatasetInputResponse::GetClassData() const { return &_class_data_; }


void SingleDatasetInputResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleDatasetInputResponse*>(&to_msg);
  auto& from = static_cast<const SingleDatasetInputResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleDatasetInputResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_dataset_input()) {
    _this->_internal_mutable_dataset_input()->::clarifai::api::DatasetInput::MergeFrom(
        from._internal_dataset_input());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleDatasetInputResponse::CopyFrom(const SingleDatasetInputResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleDatasetInputResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleDatasetInputResponse::IsInitialized() const {
  return true;
}

void SingleDatasetInputResponse::InternalSwap(SingleDatasetInputResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleDatasetInputResponse, _impl_.dataset_input_)
      + sizeof(SingleDatasetInputResponse::_impl_.dataset_input_)
      - PROTOBUF_FIELD_OFFSET(SingleDatasetInputResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleDatasetInputResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[83]);
}

// ===================================================================

class ListDatasetVersionsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListDatasetVersionsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListDatasetVersionsRequest::_Internal::user_app_id(const ListDatasetVersionsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListDatasetVersionsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
ListDatasetVersionsRequest::ListDatasetVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListDatasetVersionsRequest)
}
ListDatasetVersionsRequest::ListDatasetVersionsRequest(const ListDatasetVersionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListDatasetVersionsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dataset_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dataset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dataset_id().empty()) {
    _this->_impl_.dataset_id_.Set(from._internal_dataset_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.per_page_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListDatasetVersionsRequest)
}

inline void ListDatasetVersionsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dataset_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dataset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListDatasetVersionsRequest::~ListDatasetVersionsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListDatasetVersionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListDatasetVersionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dataset_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void ListDatasetVersionsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListDatasetVersionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListDatasetVersionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dataset_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.per_page_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDatasetVersionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dataset_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dataset_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListDatasetVersionsRequest.dataset_id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListDatasetVersionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListDatasetVersionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_id().data(), static_cast<int>(this->_internal_dataset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListDatasetVersionsRequest.dataset_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dataset_id(), target);
  }

  // uint32 page = 3;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_page(), target);
  }

  // uint32 per_page = 4;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListDatasetVersionsRequest)
  return target;
}

size_t ListDatasetVersionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListDatasetVersionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // uint32 page = 3;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 4;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListDatasetVersionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListDatasetVersionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListDatasetVersionsRequest::GetClassData() const { return &_class_data_; }


void ListDatasetVersionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListDatasetVersionsRequest*>(&to_msg);
  auto& from = static_cast<const ListDatasetVersionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListDatasetVersionsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dataset_id().empty()) {
    _this->_internal_set_dataset_id(from._internal_dataset_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListDatasetVersionsRequest::CopyFrom(const ListDatasetVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListDatasetVersionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDatasetVersionsRequest::IsInitialized() const {
  return true;
}

void ListDatasetVersionsRequest::InternalSwap(ListDatasetVersionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dataset_id_, lhs_arena,
      &other->_impl_.dataset_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListDatasetVersionsRequest, _impl_.per_page_)
      + sizeof(ListDatasetVersionsRequest::_impl_.per_page_)
      - PROTOBUF_FIELD_OFFSET(ListDatasetVersionsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDatasetVersionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[84]);
}

// ===================================================================

class GetDatasetVersionRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetDatasetVersionRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetDatasetVersionRequest::_Internal::user_app_id(const GetDatasetVersionRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void GetDatasetVersionRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
GetDatasetVersionRequest::GetDatasetVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetDatasetVersionRequest)
}
GetDatasetVersionRequest::GetDatasetVersionRequest(const GetDatasetVersionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDatasetVersionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dataset_id_){}
    , decltype(_impl_.dataset_version_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dataset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dataset_id().empty()) {
    _this->_impl_.dataset_id_.Set(from._internal_dataset_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dataset_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dataset_version_id().empty()) {
    _this->_impl_.dataset_version_id_.Set(from._internal_dataset_version_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetDatasetVersionRequest)
}

inline void GetDatasetVersionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dataset_id_){}
    , decltype(_impl_.dataset_version_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dataset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dataset_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetDatasetVersionRequest::~GetDatasetVersionRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetDatasetVersionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDatasetVersionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dataset_id_.Destroy();
  _impl_.dataset_version_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void GetDatasetVersionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDatasetVersionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetDatasetVersionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dataset_id_.ClearToEmpty();
  _impl_.dataset_version_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDatasetVersionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dataset_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dataset_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetDatasetVersionRequest.dataset_id"));
        } else
          goto handle_unusual;
        continue;
      // string dataset_version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_dataset_version_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetDatasetVersionRequest.dataset_version_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDatasetVersionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetDatasetVersionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_id().data(), static_cast<int>(this->_internal_dataset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetDatasetVersionRequest.dataset_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dataset_id(), target);
  }

  // string dataset_version_id = 3;
  if (!this->_internal_dataset_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_version_id().data(), static_cast<int>(this->_internal_dataset_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetDatasetVersionRequest.dataset_version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_dataset_version_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetDatasetVersionRequest)
  return target;
}

size_t GetDatasetVersionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetDatasetVersionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_id());
  }

  // string dataset_version_id = 3;
  if (!this->_internal_dataset_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDatasetVersionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDatasetVersionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDatasetVersionRequest::GetClassData() const { return &_class_data_; }


void GetDatasetVersionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDatasetVersionRequest*>(&to_msg);
  auto& from = static_cast<const GetDatasetVersionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetDatasetVersionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dataset_id().empty()) {
    _this->_internal_set_dataset_id(from._internal_dataset_id());
  }
  if (!from._internal_dataset_version_id().empty()) {
    _this->_internal_set_dataset_version_id(from._internal_dataset_version_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDatasetVersionRequest::CopyFrom(const GetDatasetVersionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetDatasetVersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDatasetVersionRequest::IsInitialized() const {
  return true;
}

void GetDatasetVersionRequest::InternalSwap(GetDatasetVersionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dataset_id_, lhs_arena,
      &other->_impl_.dataset_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dataset_version_id_, lhs_arena,
      &other->_impl_.dataset_version_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDatasetVersionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[85]);
}

// ===================================================================

class ListDatasetVersionMetricsGroupsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListDatasetVersionMetricsGroupsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListDatasetVersionMetricsGroupsRequest::_Internal::user_app_id(const ListDatasetVersionMetricsGroupsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListDatasetVersionMetricsGroupsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void ListDatasetVersionMetricsGroupsRequest::clear_values() {
  _impl_.values_.Clear();
}
ListDatasetVersionMetricsGroupsRequest::ListDatasetVersionMetricsGroupsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListDatasetVersionMetricsGroupsRequest)
}
ListDatasetVersionMetricsGroupsRequest::ListDatasetVersionMetricsGroupsRequest(const ListDatasetVersionMetricsGroupsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListDatasetVersionMetricsGroupsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.parent_paths_){from._impl_.parent_paths_}
    , decltype(_impl_.types_){from._impl_.types_}
    , /*decltype(_impl_._types_cached_byte_size_)*/{0}
    , decltype(_impl_.values_){from._impl_.values_}
    , decltype(_impl_.dataset_id_){}
    , decltype(_impl_.dataset_version_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dataset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dataset_id().empty()) {
    _this->_impl_.dataset_id_.Set(from._internal_dataset_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dataset_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dataset_version_id().empty()) {
    _this->_impl_.dataset_version_id_.Set(from._internal_dataset_version_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.per_page_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListDatasetVersionMetricsGroupsRequest)
}

inline void ListDatasetVersionMetricsGroupsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.parent_paths_){arena}
    , decltype(_impl_.types_){arena}
    , /*decltype(_impl_._types_cached_byte_size_)*/{0}
    , decltype(_impl_.values_){arena}
    , decltype(_impl_.dataset_id_){}
    , decltype(_impl_.dataset_version_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dataset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dataset_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListDatasetVersionMetricsGroupsRequest::~ListDatasetVersionMetricsGroupsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListDatasetVersionMetricsGroupsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListDatasetVersionMetricsGroupsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.parent_paths_.~RepeatedPtrField();
  _impl_.types_.~RepeatedField();
  _impl_.values_.~RepeatedPtrField();
  _impl_.dataset_id_.Destroy();
  _impl_.dataset_version_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void ListDatasetVersionMetricsGroupsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListDatasetVersionMetricsGroupsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListDatasetVersionMetricsGroupsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.parent_paths_.Clear();
  _impl_.types_.Clear();
  _impl_.values_.Clear();
  _impl_.dataset_id_.ClearToEmpty();
  _impl_.dataset_version_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.per_page_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDatasetVersionMetricsGroupsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dataset_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dataset_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListDatasetVersionMetricsGroupsRequest.dataset_id"));
        } else
          goto handle_unusual;
        continue;
      // string dataset_version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_dataset_version_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListDatasetVersionMetricsGroupsRequest.dataset_version_id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string parent_paths = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_parent_paths();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListDatasetVersionMetricsGroupsRequest.parent_paths"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.DatasetVersionMetricsGroupType types = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_types(static_cast<::clarifai::api::DatasetVersionMetricsGroupType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .google.protobuf.Value values = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListDatasetVersionMetricsGroupsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListDatasetVersionMetricsGroupsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_id().data(), static_cast<int>(this->_internal_dataset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListDatasetVersionMetricsGroupsRequest.dataset_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dataset_id(), target);
  }

  // string dataset_version_id = 3;
  if (!this->_internal_dataset_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_version_id().data(), static_cast<int>(this->_internal_dataset_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListDatasetVersionMetricsGroupsRequest.dataset_version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_dataset_version_id(), target);
  }

  // uint32 page = 4;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_page(), target);
  }

  // uint32 per_page = 5;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_per_page(), target);
  }

  // repeated string parent_paths = 6;
  for (int i = 0, n = this->_internal_parent_paths_size(); i < n; i++) {
    const auto& s = this->_internal_parent_paths(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListDatasetVersionMetricsGroupsRequest.parent_paths");
    target = stream->WriteString(6, s, target);
  }

  // repeated .clarifai.api.DatasetVersionMetricsGroupType types = 7;
  {
    int byte_size = _impl_._types_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          7, _impl_.types_, byte_size, target);
    }
  }

  // repeated .google.protobuf.Value values = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListDatasetVersionMetricsGroupsRequest)
  return target;
}

size_t ListDatasetVersionMetricsGroupsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListDatasetVersionMetricsGroupsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string parent_paths = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.parent_paths_.size());
  for (int i = 0, n = _impl_.parent_paths_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.parent_paths_.Get(i));
  }

  // repeated .clarifai.api.DatasetVersionMetricsGroupType types = 7;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .google.protobuf.Value values = 8;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->_impl_.values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_id());
  }

  // string dataset_version_id = 3;
  if (!this->_internal_dataset_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // uint32 page = 4;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 5;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListDatasetVersionMetricsGroupsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListDatasetVersionMetricsGroupsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListDatasetVersionMetricsGroupsRequest::GetClassData() const { return &_class_data_; }


void ListDatasetVersionMetricsGroupsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListDatasetVersionMetricsGroupsRequest*>(&to_msg);
  auto& from = static_cast<const ListDatasetVersionMetricsGroupsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListDatasetVersionMetricsGroupsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.parent_paths_.MergeFrom(from._impl_.parent_paths_);
  _this->_impl_.types_.MergeFrom(from._impl_.types_);
  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  if (!from._internal_dataset_id().empty()) {
    _this->_internal_set_dataset_id(from._internal_dataset_id());
  }
  if (!from._internal_dataset_version_id().empty()) {
    _this->_internal_set_dataset_version_id(from._internal_dataset_version_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListDatasetVersionMetricsGroupsRequest::CopyFrom(const ListDatasetVersionMetricsGroupsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListDatasetVersionMetricsGroupsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDatasetVersionMetricsGroupsRequest::IsInitialized() const {
  return true;
}

void ListDatasetVersionMetricsGroupsRequest::InternalSwap(ListDatasetVersionMetricsGroupsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.parent_paths_.InternalSwap(&other->_impl_.parent_paths_);
  _impl_.types_.InternalSwap(&other->_impl_.types_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dataset_id_, lhs_arena,
      &other->_impl_.dataset_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dataset_version_id_, lhs_arena,
      &other->_impl_.dataset_version_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListDatasetVersionMetricsGroupsRequest, _impl_.per_page_)
      + sizeof(ListDatasetVersionMetricsGroupsRequest::_impl_.per_page_)
      - PROTOBUF_FIELD_OFFSET(ListDatasetVersionMetricsGroupsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDatasetVersionMetricsGroupsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[86]);
}

// ===================================================================

class PostDatasetVersionsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostDatasetVersionsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostDatasetVersionsRequest::_Internal::user_app_id(const PostDatasetVersionsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PostDatasetVersionsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostDatasetVersionsRequest::clear_dataset_versions() {
  _impl_.dataset_versions_.Clear();
}
PostDatasetVersionsRequest::PostDatasetVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostDatasetVersionsRequest)
}
PostDatasetVersionsRequest::PostDatasetVersionsRequest(const PostDatasetVersionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostDatasetVersionsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dataset_versions_){from._impl_.dataset_versions_}
    , decltype(_impl_.dataset_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dataset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dataset_id().empty()) {
    _this->_impl_.dataset_id_.Set(from._internal_dataset_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostDatasetVersionsRequest)
}

inline void PostDatasetVersionsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dataset_versions_){arena}
    , decltype(_impl_.dataset_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dataset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PostDatasetVersionsRequest::~PostDatasetVersionsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostDatasetVersionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostDatasetVersionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dataset_versions_.~RepeatedPtrField();
  _impl_.dataset_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PostDatasetVersionsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostDatasetVersionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostDatasetVersionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dataset_versions_.Clear();
  _impl_.dataset_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostDatasetVersionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dataset_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dataset_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PostDatasetVersionsRequest.dataset_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.DatasetVersion dataset_versions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dataset_versions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostDatasetVersionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostDatasetVersionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_id().data(), static_cast<int>(this->_internal_dataset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostDatasetVersionsRequest.dataset_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dataset_id(), target);
  }

  // repeated .clarifai.api.DatasetVersion dataset_versions = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dataset_versions_size()); i < n; i++) {
    const auto& repfield = this->_internal_dataset_versions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostDatasetVersionsRequest)
  return target;
}

size_t PostDatasetVersionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostDatasetVersionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.DatasetVersion dataset_versions = 3;
  total_size += 1UL * this->_internal_dataset_versions_size();
  for (const auto& msg : this->_impl_.dataset_versions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostDatasetVersionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostDatasetVersionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostDatasetVersionsRequest::GetClassData() const { return &_class_data_; }


void PostDatasetVersionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostDatasetVersionsRequest*>(&to_msg);
  auto& from = static_cast<const PostDatasetVersionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostDatasetVersionsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dataset_versions_.MergeFrom(from._impl_.dataset_versions_);
  if (!from._internal_dataset_id().empty()) {
    _this->_internal_set_dataset_id(from._internal_dataset_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostDatasetVersionsRequest::CopyFrom(const PostDatasetVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostDatasetVersionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostDatasetVersionsRequest::IsInitialized() const {
  return true;
}

void PostDatasetVersionsRequest::InternalSwap(PostDatasetVersionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dataset_versions_.InternalSwap(&other->_impl_.dataset_versions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dataset_id_, lhs_arena,
      &other->_impl_.dataset_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostDatasetVersionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[87]);
}

// ===================================================================

class PatchDatasetVersionsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchDatasetVersionsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchDatasetVersionsRequest::_Internal::user_app_id(const PatchDatasetVersionsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PatchDatasetVersionsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PatchDatasetVersionsRequest::clear_dataset_versions() {
  _impl_.dataset_versions_.Clear();
}
PatchDatasetVersionsRequest::PatchDatasetVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchDatasetVersionsRequest)
}
PatchDatasetVersionsRequest::PatchDatasetVersionsRequest(const PatchDatasetVersionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PatchDatasetVersionsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dataset_versions_){from._impl_.dataset_versions_}
    , decltype(_impl_.dataset_id_){}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dataset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dataset_id().empty()) {
    _this->_impl_.dataset_id_.Set(from._internal_dataset_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchDatasetVersionsRequest)
}

inline void PatchDatasetVersionsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dataset_versions_){arena}
    , decltype(_impl_.dataset_id_){}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dataset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PatchDatasetVersionsRequest::~PatchDatasetVersionsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchDatasetVersionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatchDatasetVersionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dataset_versions_.~RepeatedPtrField();
  _impl_.dataset_id_.Destroy();
  _impl_.action_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PatchDatasetVersionsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatchDatasetVersionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchDatasetVersionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dataset_versions_.Clear();
  _impl_.dataset_id_.ClearToEmpty();
  _impl_.action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchDatasetVersionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dataset_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dataset_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchDatasetVersionsRequest.dataset_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.DatasetVersion dataset_versions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dataset_versions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchDatasetVersionsRequest.action"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchDatasetVersionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchDatasetVersionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_id().data(), static_cast<int>(this->_internal_dataset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchDatasetVersionsRequest.dataset_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dataset_id(), target);
  }

  // repeated .clarifai.api.DatasetVersion dataset_versions = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dataset_versions_size()); i < n; i++) {
    const auto& repfield = this->_internal_dataset_versions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchDatasetVersionsRequest.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchDatasetVersionsRequest)
  return target;
}

size_t PatchDatasetVersionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchDatasetVersionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.DatasetVersion dataset_versions = 3;
  total_size += 1UL * this->_internal_dataset_versions_size();
  for (const auto& msg : this->_impl_.dataset_versions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_id());
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchDatasetVersionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PatchDatasetVersionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchDatasetVersionsRequest::GetClassData() const { return &_class_data_; }


void PatchDatasetVersionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PatchDatasetVersionsRequest*>(&to_msg);
  auto& from = static_cast<const PatchDatasetVersionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchDatasetVersionsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dataset_versions_.MergeFrom(from._impl_.dataset_versions_);
  if (!from._internal_dataset_id().empty()) {
    _this->_internal_set_dataset_id(from._internal_dataset_id());
  }
  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchDatasetVersionsRequest::CopyFrom(const PatchDatasetVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchDatasetVersionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchDatasetVersionsRequest::IsInitialized() const {
  return true;
}

void PatchDatasetVersionsRequest::InternalSwap(PatchDatasetVersionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dataset_versions_.InternalSwap(&other->_impl_.dataset_versions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dataset_id_, lhs_arena,
      &other->_impl_.dataset_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchDatasetVersionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[88]);
}

// ===================================================================

class DeleteDatasetVersionsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteDatasetVersionsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteDatasetVersionsRequest::_Internal::user_app_id(const DeleteDatasetVersionsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void DeleteDatasetVersionsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
DeleteDatasetVersionsRequest::DeleteDatasetVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteDatasetVersionsRequest)
}
DeleteDatasetVersionsRequest::DeleteDatasetVersionsRequest(const DeleteDatasetVersionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteDatasetVersionsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dataset_version_ids_){from._impl_.dataset_version_ids_}
    , decltype(_impl_.dataset_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dataset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dataset_id().empty()) {
    _this->_impl_.dataset_id_.Set(from._internal_dataset_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteDatasetVersionsRequest)
}

inline void DeleteDatasetVersionsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dataset_version_ids_){arena}
    , decltype(_impl_.dataset_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dataset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteDatasetVersionsRequest::~DeleteDatasetVersionsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteDatasetVersionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteDatasetVersionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dataset_version_ids_.~RepeatedPtrField();
  _impl_.dataset_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void DeleteDatasetVersionsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteDatasetVersionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteDatasetVersionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dataset_version_ids_.Clear();
  _impl_.dataset_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteDatasetVersionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dataset_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dataset_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DeleteDatasetVersionsRequest.dataset_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string dataset_version_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dataset_version_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DeleteDatasetVersionsRequest.dataset_version_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteDatasetVersionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteDatasetVersionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_id().data(), static_cast<int>(this->_internal_dataset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteDatasetVersionsRequest.dataset_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dataset_id(), target);
  }

  // repeated string dataset_version_ids = 3;
  for (int i = 0, n = this->_internal_dataset_version_ids_size(); i < n; i++) {
    const auto& s = this->_internal_dataset_version_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteDatasetVersionsRequest.dataset_version_ids");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteDatasetVersionsRequest)
  return target;
}

size_t DeleteDatasetVersionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteDatasetVersionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dataset_version_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.dataset_version_ids_.size());
  for (int i = 0, n = _impl_.dataset_version_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.dataset_version_ids_.Get(i));
  }

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteDatasetVersionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteDatasetVersionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteDatasetVersionsRequest::GetClassData() const { return &_class_data_; }


void DeleteDatasetVersionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteDatasetVersionsRequest*>(&to_msg);
  auto& from = static_cast<const DeleteDatasetVersionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteDatasetVersionsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dataset_version_ids_.MergeFrom(from._impl_.dataset_version_ids_);
  if (!from._internal_dataset_id().empty()) {
    _this->_internal_set_dataset_id(from._internal_dataset_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteDatasetVersionsRequest::CopyFrom(const DeleteDatasetVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteDatasetVersionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDatasetVersionsRequest::IsInitialized() const {
  return true;
}

void DeleteDatasetVersionsRequest::InternalSwap(DeleteDatasetVersionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dataset_version_ids_.InternalSwap(&other->_impl_.dataset_version_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dataset_id_, lhs_arena,
      &other->_impl_.dataset_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteDatasetVersionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[89]);
}

// ===================================================================

class PutDatasetVersionExportsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PutDatasetVersionExportsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PutDatasetVersionExportsRequest::_Internal::user_app_id(const PutDatasetVersionExportsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PutDatasetVersionExportsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PutDatasetVersionExportsRequest::clear_exports() {
  _impl_.exports_.Clear();
}
PutDatasetVersionExportsRequest::PutDatasetVersionExportsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PutDatasetVersionExportsRequest)
}
PutDatasetVersionExportsRequest::PutDatasetVersionExportsRequest(const PutDatasetVersionExportsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PutDatasetVersionExportsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.exports_){from._impl_.exports_}
    , decltype(_impl_.dataset_id_){}
    , decltype(_impl_.dataset_version_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dataset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dataset_id().empty()) {
    _this->_impl_.dataset_id_.Set(from._internal_dataset_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dataset_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dataset_version_id().empty()) {
    _this->_impl_.dataset_version_id_.Set(from._internal_dataset_version_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PutDatasetVersionExportsRequest)
}

inline void PutDatasetVersionExportsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.exports_){arena}
    , decltype(_impl_.dataset_id_){}
    , decltype(_impl_.dataset_version_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dataset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dataset_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataset_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PutDatasetVersionExportsRequest::~PutDatasetVersionExportsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PutDatasetVersionExportsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PutDatasetVersionExportsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.exports_.~RepeatedPtrField();
  _impl_.dataset_id_.Destroy();
  _impl_.dataset_version_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PutDatasetVersionExportsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PutDatasetVersionExportsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PutDatasetVersionExportsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exports_.Clear();
  _impl_.dataset_id_.ClearToEmpty();
  _impl_.dataset_version_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PutDatasetVersionExportsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dataset_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dataset_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PutDatasetVersionExportsRequest.dataset_id"));
        } else
          goto handle_unusual;
        continue;
      // string dataset_version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_dataset_version_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PutDatasetVersionExportsRequest.dataset_version_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.DatasetVersionExport exports = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exports(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PutDatasetVersionExportsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PutDatasetVersionExportsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_id().data(), static_cast<int>(this->_internal_dataset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PutDatasetVersionExportsRequest.dataset_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dataset_id(), target);
  }

  // string dataset_version_id = 3;
  if (!this->_internal_dataset_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_version_id().data(), static_cast<int>(this->_internal_dataset_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PutDatasetVersionExportsRequest.dataset_version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_dataset_version_id(), target);
  }

  // repeated .clarifai.api.DatasetVersionExport exports = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_exports_size()); i < n; i++) {
    const auto& repfield = this->_internal_exports(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PutDatasetVersionExportsRequest)
  return target;
}

size_t PutDatasetVersionExportsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PutDatasetVersionExportsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.DatasetVersionExport exports = 4;
  total_size += 1UL * this->_internal_exports_size();
  for (const auto& msg : this->_impl_.exports_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_id());
  }

  // string dataset_version_id = 3;
  if (!this->_internal_dataset_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PutDatasetVersionExportsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PutDatasetVersionExportsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PutDatasetVersionExportsRequest::GetClassData() const { return &_class_data_; }


void PutDatasetVersionExportsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PutDatasetVersionExportsRequest*>(&to_msg);
  auto& from = static_cast<const PutDatasetVersionExportsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PutDatasetVersionExportsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.exports_.MergeFrom(from._impl_.exports_);
  if (!from._internal_dataset_id().empty()) {
    _this->_internal_set_dataset_id(from._internal_dataset_id());
  }
  if (!from._internal_dataset_version_id().empty()) {
    _this->_internal_set_dataset_version_id(from._internal_dataset_version_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PutDatasetVersionExportsRequest::CopyFrom(const PutDatasetVersionExportsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PutDatasetVersionExportsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutDatasetVersionExportsRequest::IsInitialized() const {
  return true;
}

void PutDatasetVersionExportsRequest::InternalSwap(PutDatasetVersionExportsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.exports_.InternalSwap(&other->_impl_.exports_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dataset_id_, lhs_arena,
      &other->_impl_.dataset_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dataset_version_id_, lhs_arena,
      &other->_impl_.dataset_version_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PutDatasetVersionExportsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[90]);
}

// ===================================================================

class MultiDatasetVersionResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiDatasetVersionResponse* msg);
};

const ::clarifai::api::status::Status&
MultiDatasetVersionResponse::_Internal::status(const MultiDatasetVersionResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiDatasetVersionResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiDatasetVersionResponse::clear_dataset_versions() {
  _impl_.dataset_versions_.Clear();
}
MultiDatasetVersionResponse::MultiDatasetVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiDatasetVersionResponse)
}
MultiDatasetVersionResponse::MultiDatasetVersionResponse(const MultiDatasetVersionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiDatasetVersionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dataset_versions_){from._impl_.dataset_versions_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiDatasetVersionResponse)
}

inline void MultiDatasetVersionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dataset_versions_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiDatasetVersionResponse::~MultiDatasetVersionResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiDatasetVersionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiDatasetVersionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dataset_versions_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiDatasetVersionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiDatasetVersionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiDatasetVersionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dataset_versions_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiDatasetVersionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.DatasetVersion dataset_versions = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dataset_versions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiDatasetVersionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiDatasetVersionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.DatasetVersion dataset_versions = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dataset_versions_size()); i < n; i++) {
    const auto& repfield = this->_internal_dataset_versions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiDatasetVersionResponse)
  return target;
}

size_t MultiDatasetVersionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiDatasetVersionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.DatasetVersion dataset_versions = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_dataset_versions_size();
  for (const auto& msg : this->_impl_.dataset_versions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiDatasetVersionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiDatasetVersionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiDatasetVersionResponse::GetClassData() const { return &_class_data_; }


void MultiDatasetVersionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiDatasetVersionResponse*>(&to_msg);
  auto& from = static_cast<const MultiDatasetVersionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiDatasetVersionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dataset_versions_.MergeFrom(from._impl_.dataset_versions_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiDatasetVersionResponse::CopyFrom(const MultiDatasetVersionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiDatasetVersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiDatasetVersionResponse::IsInitialized() const {
  return true;
}

void MultiDatasetVersionResponse::InternalSwap(MultiDatasetVersionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dataset_versions_.InternalSwap(&other->_impl_.dataset_versions_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiDatasetVersionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[91]);
}

// ===================================================================

class MultiDatasetVersionExportResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiDatasetVersionExportResponse* msg);
};

const ::clarifai::api::status::Status&
MultiDatasetVersionExportResponse::_Internal::status(const MultiDatasetVersionExportResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiDatasetVersionExportResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiDatasetVersionExportResponse::clear_exports() {
  _impl_.exports_.Clear();
}
MultiDatasetVersionExportResponse::MultiDatasetVersionExportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiDatasetVersionExportResponse)
}
MultiDatasetVersionExportResponse::MultiDatasetVersionExportResponse(const MultiDatasetVersionExportResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiDatasetVersionExportResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.exports_){from._impl_.exports_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiDatasetVersionExportResponse)
}

inline void MultiDatasetVersionExportResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.exports_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiDatasetVersionExportResponse::~MultiDatasetVersionExportResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiDatasetVersionExportResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiDatasetVersionExportResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.exports_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiDatasetVersionExportResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiDatasetVersionExportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiDatasetVersionExportResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exports_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiDatasetVersionExportResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.DatasetVersionExport exports = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exports(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiDatasetVersionExportResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiDatasetVersionExportResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.DatasetVersionExport exports = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_exports_size()); i < n; i++) {
    const auto& repfield = this->_internal_exports(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiDatasetVersionExportResponse)
  return target;
}

size_t MultiDatasetVersionExportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiDatasetVersionExportResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.DatasetVersionExport exports = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_exports_size();
  for (const auto& msg : this->_impl_.exports_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiDatasetVersionExportResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiDatasetVersionExportResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiDatasetVersionExportResponse::GetClassData() const { return &_class_data_; }


void MultiDatasetVersionExportResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiDatasetVersionExportResponse*>(&to_msg);
  auto& from = static_cast<const MultiDatasetVersionExportResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiDatasetVersionExportResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.exports_.MergeFrom(from._impl_.exports_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiDatasetVersionExportResponse::CopyFrom(const MultiDatasetVersionExportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiDatasetVersionExportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiDatasetVersionExportResponse::IsInitialized() const {
  return true;
}

void MultiDatasetVersionExportResponse::InternalSwap(MultiDatasetVersionExportResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.exports_.InternalSwap(&other->_impl_.exports_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiDatasetVersionExportResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[92]);
}

// ===================================================================

class MultiDatasetVersionMetricsGroupResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiDatasetVersionMetricsGroupResponse* msg);
};

const ::clarifai::api::status::Status&
MultiDatasetVersionMetricsGroupResponse::_Internal::status(const MultiDatasetVersionMetricsGroupResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiDatasetVersionMetricsGroupResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiDatasetVersionMetricsGroupResponse::clear_dataset_version_metrics_groups() {
  _impl_.dataset_version_metrics_groups_.Clear();
}
MultiDatasetVersionMetricsGroupResponse::MultiDatasetVersionMetricsGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiDatasetVersionMetricsGroupResponse)
}
MultiDatasetVersionMetricsGroupResponse::MultiDatasetVersionMetricsGroupResponse(const MultiDatasetVersionMetricsGroupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiDatasetVersionMetricsGroupResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dataset_version_metrics_groups_){from._impl_.dataset_version_metrics_groups_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiDatasetVersionMetricsGroupResponse)
}

inline void MultiDatasetVersionMetricsGroupResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dataset_version_metrics_groups_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiDatasetVersionMetricsGroupResponse::~MultiDatasetVersionMetricsGroupResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiDatasetVersionMetricsGroupResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiDatasetVersionMetricsGroupResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dataset_version_metrics_groups_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiDatasetVersionMetricsGroupResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiDatasetVersionMetricsGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiDatasetVersionMetricsGroupResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dataset_version_metrics_groups_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiDatasetVersionMetricsGroupResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.DatasetVersionMetricsGroup dataset_version_metrics_groups = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dataset_version_metrics_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiDatasetVersionMetricsGroupResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiDatasetVersionMetricsGroupResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.DatasetVersionMetricsGroup dataset_version_metrics_groups = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dataset_version_metrics_groups_size()); i < n; i++) {
    const auto& repfield = this->_internal_dataset_version_metrics_groups(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiDatasetVersionMetricsGroupResponse)
  return target;
}

size_t MultiDatasetVersionMetricsGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiDatasetVersionMetricsGroupResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.DatasetVersionMetricsGroup dataset_version_metrics_groups = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_dataset_version_metrics_groups_size();
  for (const auto& msg : this->_impl_.dataset_version_metrics_groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiDatasetVersionMetricsGroupResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiDatasetVersionMetricsGroupResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiDatasetVersionMetricsGroupResponse::GetClassData() const { return &_class_data_; }


void MultiDatasetVersionMetricsGroupResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiDatasetVersionMetricsGroupResponse*>(&to_msg);
  auto& from = static_cast<const MultiDatasetVersionMetricsGroupResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiDatasetVersionMetricsGroupResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dataset_version_metrics_groups_.MergeFrom(from._impl_.dataset_version_metrics_groups_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiDatasetVersionMetricsGroupResponse::CopyFrom(const MultiDatasetVersionMetricsGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiDatasetVersionMetricsGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiDatasetVersionMetricsGroupResponse::IsInitialized() const {
  return true;
}

void MultiDatasetVersionMetricsGroupResponse::InternalSwap(MultiDatasetVersionMetricsGroupResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dataset_version_metrics_groups_.InternalSwap(&other->_impl_.dataset_version_metrics_groups_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiDatasetVersionMetricsGroupResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[93]);
}

// ===================================================================

class SingleDatasetVersionResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleDatasetVersionResponse* msg);
  static const ::clarifai::api::DatasetVersion& dataset_version(const SingleDatasetVersionResponse* msg);
};

const ::clarifai::api::status::Status&
SingleDatasetVersionResponse::_Internal::status(const SingleDatasetVersionResponse* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::DatasetVersion&
SingleDatasetVersionResponse::_Internal::dataset_version(const SingleDatasetVersionResponse* msg) {
  return *msg->_impl_.dataset_version_;
}
void SingleDatasetVersionResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void SingleDatasetVersionResponse::clear_dataset_version() {
  if (GetArenaForAllocation() == nullptr && _impl_.dataset_version_ != nullptr) {
    delete _impl_.dataset_version_;
  }
  _impl_.dataset_version_ = nullptr;
}
SingleDatasetVersionResponse::SingleDatasetVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleDatasetVersionResponse)
}
SingleDatasetVersionResponse::SingleDatasetVersionResponse(const SingleDatasetVersionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleDatasetVersionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.dataset_version_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_dataset_version()) {
    _this->_impl_.dataset_version_ = new ::clarifai::api::DatasetVersion(*from._impl_.dataset_version_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleDatasetVersionResponse)
}

inline void SingleDatasetVersionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.dataset_version_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SingleDatasetVersionResponse::~SingleDatasetVersionResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleDatasetVersionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleDatasetVersionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.dataset_version_;
}

void SingleDatasetVersionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleDatasetVersionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleDatasetVersionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dataset_version_ != nullptr) {
    delete _impl_.dataset_version_;
  }
  _impl_.dataset_version_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleDatasetVersionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.DatasetVersion dataset_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dataset_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleDatasetVersionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleDatasetVersionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.DatasetVersion dataset_version = 2;
  if (this->_internal_has_dataset_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::dataset_version(this),
        _Internal::dataset_version(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleDatasetVersionResponse)
  return target;
}

size_t SingleDatasetVersionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleDatasetVersionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.DatasetVersion dataset_version = 2;
  if (this->_internal_has_dataset_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dataset_version_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleDatasetVersionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleDatasetVersionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleDatasetVersionResponse::GetClassData() const { return &_class_data_; }


void SingleDatasetVersionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleDatasetVersionResponse*>(&to_msg);
  auto& from = static_cast<const SingleDatasetVersionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleDatasetVersionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_dataset_version()) {
    _this->_internal_mutable_dataset_version()->::clarifai::api::DatasetVersion::MergeFrom(
        from._internal_dataset_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleDatasetVersionResponse::CopyFrom(const SingleDatasetVersionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleDatasetVersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleDatasetVersionResponse::IsInitialized() const {
  return true;
}

void SingleDatasetVersionResponse::InternalSwap(SingleDatasetVersionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleDatasetVersionResponse, _impl_.dataset_version_)
      + sizeof(SingleDatasetVersionResponse::_impl_.dataset_version_)
      - PROTOBUF_FIELD_OFFSET(SingleDatasetVersionResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleDatasetVersionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[94]);
}

// ===================================================================

class GetDatasetInputsSearchAddJobRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetDatasetInputsSearchAddJobRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetDatasetInputsSearchAddJobRequest::_Internal::user_app_id(const GetDatasetInputsSearchAddJobRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void GetDatasetInputsSearchAddJobRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
GetDatasetInputsSearchAddJobRequest::GetDatasetInputsSearchAddJobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetDatasetInputsSearchAddJobRequest)
}
GetDatasetInputsSearchAddJobRequest::GetDatasetInputsSearchAddJobRequest(const GetDatasetInputsSearchAddJobRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDatasetInputsSearchAddJobRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.job_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.job_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.job_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_job_id().empty()) {
    _this->_impl_.job_id_.Set(from._internal_job_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetDatasetInputsSearchAddJobRequest)
}

inline void GetDatasetInputsSearchAddJobRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.job_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.job_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.job_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetDatasetInputsSearchAddJobRequest::~GetDatasetInputsSearchAddJobRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetDatasetInputsSearchAddJobRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDatasetInputsSearchAddJobRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.job_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void GetDatasetInputsSearchAddJobRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDatasetInputsSearchAddJobRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetDatasetInputsSearchAddJobRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.job_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDatasetInputsSearchAddJobRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string job_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_job_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetDatasetInputsSearchAddJobRequest.job_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDatasetInputsSearchAddJobRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetDatasetInputsSearchAddJobRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string job_id = 2;
  if (!this->_internal_job_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_job_id().data(), static_cast<int>(this->_internal_job_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetDatasetInputsSearchAddJobRequest.job_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_job_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetDatasetInputsSearchAddJobRequest)
  return target;
}

size_t GetDatasetInputsSearchAddJobRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetDatasetInputsSearchAddJobRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string job_id = 2;
  if (!this->_internal_job_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_job_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDatasetInputsSearchAddJobRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDatasetInputsSearchAddJobRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDatasetInputsSearchAddJobRequest::GetClassData() const { return &_class_data_; }


void GetDatasetInputsSearchAddJobRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDatasetInputsSearchAddJobRequest*>(&to_msg);
  auto& from = static_cast<const GetDatasetInputsSearchAddJobRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetDatasetInputsSearchAddJobRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_job_id().empty()) {
    _this->_internal_set_job_id(from._internal_job_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDatasetInputsSearchAddJobRequest::CopyFrom(const GetDatasetInputsSearchAddJobRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetDatasetInputsSearchAddJobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDatasetInputsSearchAddJobRequest::IsInitialized() const {
  return true;
}

void GetDatasetInputsSearchAddJobRequest::InternalSwap(GetDatasetInputsSearchAddJobRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.job_id_, lhs_arena,
      &other->_impl_.job_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDatasetInputsSearchAddJobRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[95]);
}

// ===================================================================

class SingleDatasetInputsSearchAddJobResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleDatasetInputsSearchAddJobResponse* msg);
  static const ::clarifai::api::DatasetInputsSearchAddJob& job(const SingleDatasetInputsSearchAddJobResponse* msg);
};

const ::clarifai::api::status::Status&
SingleDatasetInputsSearchAddJobResponse::_Internal::status(const SingleDatasetInputsSearchAddJobResponse* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::DatasetInputsSearchAddJob&
SingleDatasetInputsSearchAddJobResponse::_Internal::job(const SingleDatasetInputsSearchAddJobResponse* msg) {
  return *msg->_impl_.job_;
}
void SingleDatasetInputsSearchAddJobResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void SingleDatasetInputsSearchAddJobResponse::clear_job() {
  if (GetArenaForAllocation() == nullptr && _impl_.job_ != nullptr) {
    delete _impl_.job_;
  }
  _impl_.job_ = nullptr;
}
SingleDatasetInputsSearchAddJobResponse::SingleDatasetInputsSearchAddJobResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleDatasetInputsSearchAddJobResponse)
}
SingleDatasetInputsSearchAddJobResponse::SingleDatasetInputsSearchAddJobResponse(const SingleDatasetInputsSearchAddJobResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleDatasetInputsSearchAddJobResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.job_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_job()) {
    _this->_impl_.job_ = new ::clarifai::api::DatasetInputsSearchAddJob(*from._impl_.job_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleDatasetInputsSearchAddJobResponse)
}

inline void SingleDatasetInputsSearchAddJobResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.job_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SingleDatasetInputsSearchAddJobResponse::~SingleDatasetInputsSearchAddJobResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleDatasetInputsSearchAddJobResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleDatasetInputsSearchAddJobResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.job_;
}

void SingleDatasetInputsSearchAddJobResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleDatasetInputsSearchAddJobResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleDatasetInputsSearchAddJobResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.job_ != nullptr) {
    delete _impl_.job_;
  }
  _impl_.job_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleDatasetInputsSearchAddJobResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.DatasetInputsSearchAddJob job = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_job(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleDatasetInputsSearchAddJobResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleDatasetInputsSearchAddJobResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.DatasetInputsSearchAddJob job = 2;
  if (this->_internal_has_job()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::job(this),
        _Internal::job(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleDatasetInputsSearchAddJobResponse)
  return target;
}

size_t SingleDatasetInputsSearchAddJobResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleDatasetInputsSearchAddJobResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.DatasetInputsSearchAddJob job = 2;
  if (this->_internal_has_job()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.job_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleDatasetInputsSearchAddJobResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleDatasetInputsSearchAddJobResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleDatasetInputsSearchAddJobResponse::GetClassData() const { return &_class_data_; }


void SingleDatasetInputsSearchAddJobResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleDatasetInputsSearchAddJobResponse*>(&to_msg);
  auto& from = static_cast<const SingleDatasetInputsSearchAddJobResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleDatasetInputsSearchAddJobResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_job()) {
    _this->_internal_mutable_job()->::clarifai::api::DatasetInputsSearchAddJob::MergeFrom(
        from._internal_job());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleDatasetInputsSearchAddJobResponse::CopyFrom(const SingleDatasetInputsSearchAddJobResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleDatasetInputsSearchAddJobResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleDatasetInputsSearchAddJobResponse::IsInitialized() const {
  return true;
}

void SingleDatasetInputsSearchAddJobResponse::InternalSwap(SingleDatasetInputsSearchAddJobResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleDatasetInputsSearchAddJobResponse, _impl_.job_)
      + sizeof(SingleDatasetInputsSearchAddJobResponse::_impl_.job_)
      - PROTOBUF_FIELD_OFFSET(SingleDatasetInputsSearchAddJobResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleDatasetInputsSearchAddJobResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[96]);
}

// ===================================================================

class PostModelOutputsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostModelOutputsRequest* msg);
  static const ::clarifai::api::Model& model(const PostModelOutputsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostModelOutputsRequest::_Internal::user_app_id(const PostModelOutputsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
const ::clarifai::api::Model&
PostModelOutputsRequest::_Internal::model(const PostModelOutputsRequest* msg) {
  return *msg->_impl_.model_;
}
void PostModelOutputsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostModelOutputsRequest::clear_inputs() {
  _impl_.inputs_.Clear();
}
void PostModelOutputsRequest::clear_model() {
  if (GetArenaForAllocation() == nullptr && _impl_.model_ != nullptr) {
    delete _impl_.model_;
  }
  _impl_.model_ = nullptr;
}
PostModelOutputsRequest::PostModelOutputsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostModelOutputsRequest)
}
PostModelOutputsRequest::PostModelOutputsRequest(const PostModelOutputsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostModelOutputsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.inputs_){from._impl_.inputs_}
    , decltype(_impl_.model_id_){}
    , decltype(_impl_.version_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.model_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    _this->_impl_.model_id_.Set(from._internal_model_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version_id().empty()) {
    _this->_impl_.version_id_.Set(from._internal_version_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  if (from._internal_has_model()) {
    _this->_impl_.model_ = new ::clarifai::api::Model(*from._impl_.model_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostModelOutputsRequest)
}

inline void PostModelOutputsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.inputs_){arena}
    , decltype(_impl_.model_id_){}
    , decltype(_impl_.version_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.model_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PostModelOutputsRequest::~PostModelOutputsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostModelOutputsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostModelOutputsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.inputs_.~RepeatedPtrField();
  _impl_.model_id_.Destroy();
  _impl_.version_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
  if (this != internal_default_instance()) delete _impl_.model_;
}

void PostModelOutputsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostModelOutputsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostModelOutputsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.inputs_.Clear();
  _impl_.model_id_.ClearToEmpty();
  _impl_.version_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.model_ != nullptr) {
    delete _impl_.model_;
  }
  _impl_.model_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostModelOutputsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PostModelOutputsRequest.model_id"));
        } else
          goto handle_unusual;
        continue;
      // string version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_version_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PostModelOutputsRequest.version_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Input inputs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Model model = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostModelOutputsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostModelOutputsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostModelOutputsRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string version_id = 3;
  if (!this->_internal_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostModelOutputsRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version_id(), target);
  }

  // repeated .clarifai.api.Input inputs = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_inputs_size()); i < n; i++) {
    const auto& repfield = this->_internal_inputs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .clarifai.api.Model model = 5;
  if (this->_internal_has_model()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::model(this),
        _Internal::model(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostModelOutputsRequest)
  return target;
}

size_t PostModelOutputsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostModelOutputsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Input inputs = 4;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->_impl_.inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string version_id = 3;
  if (!this->_internal_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // .clarifai.api.Model model = 5;
  if (this->_internal_has_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.model_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostModelOutputsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostModelOutputsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostModelOutputsRequest::GetClassData() const { return &_class_data_; }


void PostModelOutputsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostModelOutputsRequest*>(&to_msg);
  auto& from = static_cast<const PostModelOutputsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostModelOutputsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.inputs_.MergeFrom(from._impl_.inputs_);
  if (!from._internal_model_id().empty()) {
    _this->_internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_version_id().empty()) {
    _this->_internal_set_version_id(from._internal_version_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_has_model()) {
    _this->_internal_mutable_model()->::clarifai::api::Model::MergeFrom(
        from._internal_model());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostModelOutputsRequest::CopyFrom(const PostModelOutputsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostModelOutputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostModelOutputsRequest::IsInitialized() const {
  return true;
}

void PostModelOutputsRequest::InternalSwap(PostModelOutputsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.inputs_.InternalSwap(&other->_impl_.inputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_id_, lhs_arena,
      &other->_impl_.model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_id_, lhs_arena,
      &other->_impl_.version_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostModelOutputsRequest, _impl_.model_)
      + sizeof(PostModelOutputsRequest::_impl_.model_)
      - PROTOBUF_FIELD_OFFSET(PostModelOutputsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostModelOutputsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[97]);
}

// ===================================================================

class ListModelInputsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListModelInputsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListModelInputsRequest::_Internal::user_app_id(const ListModelInputsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListModelInputsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
ListModelInputsRequest::ListModelInputsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListModelInputsRequest)
}
ListModelInputsRequest::ListModelInputsRequest(const ListModelInputsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListModelInputsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.model_id_){}
    , decltype(_impl_.version_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    _this->_impl_.model_id_.Set(from._internal_model_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version_id().empty()) {
    _this->_impl_.version_id_.Set(from._internal_version_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.per_page_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListModelInputsRequest)
}

inline void ListModelInputsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.model_id_){}
    , decltype(_impl_.version_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListModelInputsRequest::~ListModelInputsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListModelInputsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListModelInputsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_id_.Destroy();
  _impl_.version_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void ListModelInputsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListModelInputsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListModelInputsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.model_id_.ClearToEmpty();
  _impl_.version_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.per_page_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListModelInputsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListModelInputsRequest.model_id"));
        } else
          goto handle_unusual;
        continue;
      // string version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_version_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListModelInputsRequest.version_id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListModelInputsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListModelInputsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelInputsRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string version_id = 3;
  if (!this->_internal_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelInputsRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version_id(), target);
  }

  // uint32 page = 4;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_page(), target);
  }

  // uint32 per_page = 5;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListModelInputsRequest)
  return target;
}

size_t ListModelInputsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListModelInputsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string version_id = 3;
  if (!this->_internal_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // uint32 page = 4;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 5;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListModelInputsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListModelInputsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListModelInputsRequest::GetClassData() const { return &_class_data_; }


void ListModelInputsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListModelInputsRequest*>(&to_msg);
  auto& from = static_cast<const ListModelInputsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListModelInputsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_model_id().empty()) {
    _this->_internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_version_id().empty()) {
    _this->_internal_set_version_id(from._internal_version_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListModelInputsRequest::CopyFrom(const ListModelInputsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListModelInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListModelInputsRequest::IsInitialized() const {
  return true;
}

void ListModelInputsRequest::InternalSwap(ListModelInputsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_id_, lhs_arena,
      &other->_impl_.model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_id_, lhs_arena,
      &other->_impl_.version_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListModelInputsRequest, _impl_.per_page_)
      + sizeof(ListModelInputsRequest::_impl_.per_page_)
      - PROTOBUF_FIELD_OFFSET(ListModelInputsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListModelInputsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[98]);
}

// ===================================================================

class GetKeyRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetKeyRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetKeyRequest::_Internal::user_app_id(const GetKeyRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void GetKeyRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
GetKeyRequest::GetKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetKeyRequest)
}
GetKeyRequest::GetKeyRequest(const GetKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetKeyRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key_id().empty()) {
    _this->_impl_.key_id_.Set(from._internal_key_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetKeyRequest)
}

inline void GetKeyRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetKeyRequest::~GetKeyRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetKeyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetKeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void GetKeyRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetKeyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetKeyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string key_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetKeyRequest.key_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetKeyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetKeyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string key_id = 2;
  if (!this->_internal_key_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key_id().data(), static_cast<int>(this->_internal_key_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetKeyRequest.key_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetKeyRequest)
  return target;
}

size_t GetKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetKeyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key_id = 2;
  if (!this->_internal_key_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetKeyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetKeyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetKeyRequest::GetClassData() const { return &_class_data_; }


void GetKeyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetKeyRequest*>(&to_msg);
  auto& from = static_cast<const GetKeyRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetKeyRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key_id().empty()) {
    _this->_internal_set_key_id(from._internal_key_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetKeyRequest::CopyFrom(const GetKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetKeyRequest::IsInitialized() const {
  return true;
}

void GetKeyRequest::InternalSwap(GetKeyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_id_, lhs_arena,
      &other->_impl_.key_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetKeyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[99]);
}

// ===================================================================

class ListKeysRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListKeysRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListKeysRequest::_Internal::user_app_id(const ListKeysRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListKeysRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
ListKeysRequest::ListKeysRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListKeysRequest)
}
ListKeysRequest::ListKeysRequest(const ListKeysRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListKeysRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.per_page_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListKeysRequest)
}

inline void ListKeysRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListKeysRequest::~ListKeysRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListKeysRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListKeysRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void ListKeysRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListKeysRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListKeysRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.per_page_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListKeysRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListKeysRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListKeysRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListKeysRequest)
  return target;
}

size_t ListKeysRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListKeysRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListKeysRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListKeysRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListKeysRequest::GetClassData() const { return &_class_data_; }


void ListKeysRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListKeysRequest*>(&to_msg);
  auto& from = static_cast<const ListKeysRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListKeysRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListKeysRequest::CopyFrom(const ListKeysRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListKeysRequest::IsInitialized() const {
  return true;
}

void ListKeysRequest::InternalSwap(ListKeysRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListKeysRequest, _impl_.per_page_)
      + sizeof(ListKeysRequest::_impl_.per_page_)
      - PROTOBUF_FIELD_OFFSET(ListKeysRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListKeysRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[100]);
}

// ===================================================================

class ListAppKeysRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListAppKeysRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListAppKeysRequest::_Internal::user_app_id(const ListAppKeysRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListAppKeysRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
ListAppKeysRequest::ListAppKeysRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListAppKeysRequest)
}
ListAppKeysRequest::ListAppKeysRequest(const ListAppKeysRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListAppKeysRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.per_page_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListAppKeysRequest)
}

inline void ListAppKeysRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListAppKeysRequest::~ListAppKeysRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListAppKeysRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListAppKeysRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void ListAppKeysRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListAppKeysRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListAppKeysRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.per_page_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListAppKeysRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListAppKeysRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListAppKeysRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListAppKeysRequest)
  return target;
}

size_t ListAppKeysRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListAppKeysRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListAppKeysRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListAppKeysRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListAppKeysRequest::GetClassData() const { return &_class_data_; }


void ListAppKeysRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListAppKeysRequest*>(&to_msg);
  auto& from = static_cast<const ListAppKeysRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListAppKeysRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListAppKeysRequest::CopyFrom(const ListAppKeysRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListAppKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAppKeysRequest::IsInitialized() const {
  return true;
}

void ListAppKeysRequest::InternalSwap(ListAppKeysRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListAppKeysRequest, _impl_.per_page_)
      + sizeof(ListAppKeysRequest::_impl_.per_page_)
      - PROTOBUF_FIELD_OFFSET(ListAppKeysRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAppKeysRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[101]);
}

// ===================================================================

class PostKeysRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostKeysRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostKeysRequest::_Internal::user_app_id(const PostKeysRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PostKeysRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostKeysRequest::clear_keys() {
  _impl_.keys_.Clear();
}
PostKeysRequest::PostKeysRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostKeysRequest)
}
PostKeysRequest::PostKeysRequest(const PostKeysRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostKeysRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){from._impl_.keys_}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostKeysRequest)
}

inline void PostKeysRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PostKeysRequest::~PostKeysRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostKeysRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostKeysRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keys_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PostKeysRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostKeysRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostKeysRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keys_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostKeysRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Key keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostKeysRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostKeysRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Key keys = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_keys_size()); i < n; i++) {
    const auto& repfield = this->_internal_keys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostKeysRequest)
  return target;
}

size_t PostKeysRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostKeysRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Key keys = 2;
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->_impl_.keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostKeysRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostKeysRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostKeysRequest::GetClassData() const { return &_class_data_; }


void PostKeysRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostKeysRequest*>(&to_msg);
  auto& from = static_cast<const PostKeysRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostKeysRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keys_.MergeFrom(from._impl_.keys_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostKeysRequest::CopyFrom(const PostKeysRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostKeysRequest::IsInitialized() const {
  return true;
}

void PostKeysRequest::InternalSwap(PostKeysRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostKeysRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[102]);
}

// ===================================================================

class DeleteKeyRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteKeyRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteKeyRequest::_Internal::user_app_id(const DeleteKeyRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void DeleteKeyRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
DeleteKeyRequest::DeleteKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteKeyRequest)
}
DeleteKeyRequest::DeleteKeyRequest(const DeleteKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteKeyRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key_id().empty()) {
    _this->_impl_.key_id_.Set(from._internal_key_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteKeyRequest)
}

inline void DeleteKeyRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteKeyRequest::~DeleteKeyRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteKeyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteKeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void DeleteKeyRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteKeyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteKeyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string key_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DeleteKeyRequest.key_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteKeyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteKeyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string key_id = 2;
  if (!this->_internal_key_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key_id().data(), static_cast<int>(this->_internal_key_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteKeyRequest.key_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteKeyRequest)
  return target;
}

size_t DeleteKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteKeyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key_id = 2;
  if (!this->_internal_key_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteKeyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteKeyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteKeyRequest::GetClassData() const { return &_class_data_; }


void DeleteKeyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteKeyRequest*>(&to_msg);
  auto& from = static_cast<const DeleteKeyRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteKeyRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key_id().empty()) {
    _this->_internal_set_key_id(from._internal_key_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteKeyRequest::CopyFrom(const DeleteKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteKeyRequest::IsInitialized() const {
  return true;
}

void DeleteKeyRequest::InternalSwap(DeleteKeyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_id_, lhs_arena,
      &other->_impl_.key_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteKeyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[103]);
}

// ===================================================================

class PatchKeysRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchKeysRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchKeysRequest::_Internal::user_app_id(const PatchKeysRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PatchKeysRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PatchKeysRequest::clear_keys() {
  _impl_.keys_.Clear();
}
PatchKeysRequest::PatchKeysRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchKeysRequest)
}
PatchKeysRequest::PatchKeysRequest(const PatchKeysRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PatchKeysRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){from._impl_.keys_}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchKeysRequest)
}

inline void PatchKeysRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){arena}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PatchKeysRequest::~PatchKeysRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchKeysRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatchKeysRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keys_.~RepeatedPtrField();
  _impl_.action_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PatchKeysRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatchKeysRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchKeysRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keys_.Clear();
  _impl_.action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchKeysRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Key keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchKeysRequest.action"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchKeysRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchKeysRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Key keys = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_keys_size()); i < n; i++) {
    const auto& repfield = this->_internal_keys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchKeysRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchKeysRequest)
  return target;
}

size_t PatchKeysRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchKeysRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Key keys = 2;
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->_impl_.keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchKeysRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PatchKeysRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchKeysRequest::GetClassData() const { return &_class_data_; }


void PatchKeysRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PatchKeysRequest*>(&to_msg);
  auto& from = static_cast<const PatchKeysRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchKeysRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keys_.MergeFrom(from._impl_.keys_);
  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchKeysRequest::CopyFrom(const PatchKeysRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchKeysRequest::IsInitialized() const {
  return true;
}

void PatchKeysRequest::InternalSwap(PatchKeysRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchKeysRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[104]);
}

// ===================================================================

class SingleKeyResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleKeyResponse* msg);
  static const ::clarifai::api::Key& key(const SingleKeyResponse* msg);
};

const ::clarifai::api::status::Status&
SingleKeyResponse::_Internal::status(const SingleKeyResponse* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::Key&
SingleKeyResponse::_Internal::key(const SingleKeyResponse* msg) {
  return *msg->_impl_.key_;
}
void SingleKeyResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void SingleKeyResponse::clear_key() {
  if (GetArenaForAllocation() == nullptr && _impl_.key_ != nullptr) {
    delete _impl_.key_;
  }
  _impl_.key_ = nullptr;
}
SingleKeyResponse::SingleKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleKeyResponse)
}
SingleKeyResponse::SingleKeyResponse(const SingleKeyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleKeyResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.key_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_key()) {
    _this->_impl_.key_ = new ::clarifai::api::Key(*from._impl_.key_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleKeyResponse)
}

inline void SingleKeyResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.key_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SingleKeyResponse::~SingleKeyResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleKeyResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleKeyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.key_;
}

void SingleKeyResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleKeyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleKeyResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.key_ != nullptr) {
    delete _impl_.key_;
  }
  _impl_.key_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleKeyResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Key key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleKeyResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleKeyResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Key key = 2;
  if (this->_internal_has_key()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::key(this),
        _Internal::key(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleKeyResponse)
  return target;
}

size_t SingleKeyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleKeyResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.Key key = 2;
  if (this->_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.key_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleKeyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleKeyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleKeyResponse::GetClassData() const { return &_class_data_; }


void SingleKeyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleKeyResponse*>(&to_msg);
  auto& from = static_cast<const SingleKeyResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleKeyResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_key()) {
    _this->_internal_mutable_key()->::clarifai::api::Key::MergeFrom(
        from._internal_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleKeyResponse::CopyFrom(const SingleKeyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleKeyResponse::IsInitialized() const {
  return true;
}

void SingleKeyResponse::InternalSwap(SingleKeyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleKeyResponse, _impl_.key_)
      + sizeof(SingleKeyResponse::_impl_.key_)
      - PROTOBUF_FIELD_OFFSET(SingleKeyResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleKeyResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[105]);
}

// ===================================================================

class MultiKeyResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiKeyResponse* msg);
};

const ::clarifai::api::status::Status&
MultiKeyResponse::_Internal::status(const MultiKeyResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiKeyResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiKeyResponse::clear_keys() {
  _impl_.keys_.Clear();
}
MultiKeyResponse::MultiKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiKeyResponse)
}
MultiKeyResponse::MultiKeyResponse(const MultiKeyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiKeyResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){from._impl_.keys_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiKeyResponse)
}

inline void MultiKeyResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiKeyResponse::~MultiKeyResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiKeyResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiKeyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keys_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiKeyResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiKeyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiKeyResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keys_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiKeyResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Key keys = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiKeyResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiKeyResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Key keys = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_keys_size()); i < n; i++) {
    const auto& repfield = this->_internal_keys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiKeyResponse)
  return target;
}

size_t MultiKeyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiKeyResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Key keys = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->_impl_.keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiKeyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiKeyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiKeyResponse::GetClassData() const { return &_class_data_; }


void MultiKeyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiKeyResponse*>(&to_msg);
  auto& from = static_cast<const MultiKeyResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiKeyResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keys_.MergeFrom(from._impl_.keys_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiKeyResponse::CopyFrom(const MultiKeyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiKeyResponse::IsInitialized() const {
  return true;
}

void MultiKeyResponse::InternalSwap(MultiKeyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiKeyResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[106]);
}

// ===================================================================

class GetModelRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetModelRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetModelRequest::_Internal::user_app_id(const GetModelRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void GetModelRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
GetModelRequest::GetModelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetModelRequest)
}
GetModelRequest::GetModelRequest(const GetModelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetModelRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.additional_fields_){from._impl_.additional_fields_}
    , decltype(_impl_.model_id_){}
    , decltype(_impl_.version_id_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.trained_before_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    _this->_impl_.model_id_.Set(from._internal_model_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version_id().empty()) {
    _this->_impl_.version_id_.Set(from._internal_version_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_language().empty()) {
    _this->_impl_.language_.Set(from._internal_language(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  _this->_impl_.trained_before_ = from._impl_.trained_before_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetModelRequest)
}

inline void GetModelRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.additional_fields_){arena}
    , decltype(_impl_.model_id_){}
    , decltype(_impl_.version_id_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.trained_before_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetModelRequest::~GetModelRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetModelRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetModelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.additional_fields_.~RepeatedPtrField();
  _impl_.model_id_.Destroy();
  _impl_.version_id_.Destroy();
  _impl_.language_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void GetModelRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetModelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetModelRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.additional_fields_.Clear();
  _impl_.model_id_.ClearToEmpty();
  _impl_.version_id_.ClearToEmpty();
  _impl_.language_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _impl_.trained_before_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetModelRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetModelRequest.model_id"));
        } else
          goto handle_unusual;
        continue;
      // string version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_version_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetModelRequest.version_id"));
        } else
          goto handle_unusual;
        continue;
      // string language = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetModelRequest.language"));
        } else
          goto handle_unusual;
        continue;
      // bool trained_before = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.trained_before_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string additional_fields = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_additional_fields();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetModelRequest.additional_fields"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetModelRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetModelRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string version_id = 3;
  if (!this->_internal_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version_id(), target);
  }

  // string language = 4;
  if (!this->_internal_language().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelRequest.language");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_language(), target);
  }

  // bool trained_before = 5;
  if (this->_internal_trained_before() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_trained_before(), target);
  }

  // repeated string additional_fields = 19;
  for (int i = 0, n = this->_internal_additional_fields_size(); i < n; i++) {
    const auto& s = this->_internal_additional_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelRequest.additional_fields");
    target = stream->WriteString(19, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetModelRequest)
  return target;
}

size_t GetModelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetModelRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string additional_fields = 19;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.additional_fields_.size());
  for (int i = 0, n = _impl_.additional_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.additional_fields_.Get(i));
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string version_id = 3;
  if (!this->_internal_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  // string language = 4;
  if (!this->_internal_language().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // bool trained_before = 5;
  if (this->_internal_trained_before() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetModelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetModelRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetModelRequest::GetClassData() const { return &_class_data_; }


void GetModelRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetModelRequest*>(&to_msg);
  auto& from = static_cast<const GetModelRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetModelRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.additional_fields_.MergeFrom(from._impl_.additional_fields_);
  if (!from._internal_model_id().empty()) {
    _this->_internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_version_id().empty()) {
    _this->_internal_set_version_id(from._internal_version_id());
  }
  if (!from._internal_language().empty()) {
    _this->_internal_set_language(from._internal_language());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_trained_before() != 0) {
    _this->_internal_set_trained_before(from._internal_trained_before());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetModelRequest::CopyFrom(const GetModelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetModelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModelRequest::IsInitialized() const {
  return true;
}

void GetModelRequest::InternalSwap(GetModelRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.additional_fields_.InternalSwap(&other->_impl_.additional_fields_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_id_, lhs_arena,
      &other->_impl_.model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_id_, lhs_arena,
      &other->_impl_.version_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.language_, lhs_arena,
      &other->_impl_.language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetModelRequest, _impl_.trained_before_)
      + sizeof(GetModelRequest::_impl_.trained_before_)
      - PROTOBUF_FIELD_OFFSET(GetModelRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetModelRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[107]);
}

// ===================================================================

class ListModelsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListModelsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListModelsRequest::_Internal::user_app_id(const ListModelsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListModelsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
ListModelsRequest::ListModelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListModelsRequest)
}
ListModelsRequest::ListModelsRequest(const ListModelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListModelsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.input_fields_){from._impl_.input_fields_}
    , decltype(_impl_.output_fields_){from._impl_.output_fields_}
    , decltype(_impl_.toolkits_){from._impl_.toolkits_}
    , decltype(_impl_.use_cases_){from._impl_.use_cases_}
    , decltype(_impl_.additional_fields_){from._impl_.additional_fields_}
    , decltype(_impl_.languages_){from._impl_.languages_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.model_type_id_){}
    , decltype(_impl_.query_){}
    , decltype(_impl_.license_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , decltype(_impl_.sort_ascending_){}
    , decltype(_impl_.filter_by_user_id_){}
    , decltype(_impl_.trained_only_){}
    , decltype(_impl_.featured_only_){}
    , decltype(_impl_.starred_only_){}
    , decltype(_impl_.dont_fetch_from_main_){}
    , decltype(_impl_.sort_by_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.model_type_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_type_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_type_id().empty()) {
    _this->_impl_.model_type_id_.Set(from._internal_model_type_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.query_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_query().empty()) {
    _this->_impl_.query_.Set(from._internal_query(), 
      _this->GetArenaForAllocation());
  }
  _impl_.license_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.license_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_license().empty()) {
    _this->_impl_.license_.Set(from._internal_license(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dont_fetch_from_main_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.dont_fetch_from_main_));
  clear_has_sort_by();
  switch (from.sort_by_case()) {
    case kSortByName: {
      _this->_internal_set_sort_by_name(from._internal_sort_by_name());
      break;
    }
    case kSortByNumInputs: {
      _this->_internal_set_sort_by_num_inputs(from._internal_sort_by_num_inputs());
      break;
    }
    case kSortByModifiedAt: {
      _this->_internal_set_sort_by_modified_at(from._internal_sort_by_modified_at());
      break;
    }
    case SORT_BY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListModelsRequest)
}

inline void ListModelsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.input_fields_){arena}
    , decltype(_impl_.output_fields_){arena}
    , decltype(_impl_.toolkits_){arena}
    , decltype(_impl_.use_cases_){arena}
    , decltype(_impl_.additional_fields_){arena}
    , decltype(_impl_.languages_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.model_type_id_){}
    , decltype(_impl_.query_){}
    , decltype(_impl_.license_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , decltype(_impl_.sort_ascending_){false}
    , decltype(_impl_.filter_by_user_id_){false}
    , decltype(_impl_.trained_only_){false}
    , decltype(_impl_.featured_only_){false}
    , decltype(_impl_.starred_only_){false}
    , decltype(_impl_.dont_fetch_from_main_){false}
    , decltype(_impl_.sort_by_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_type_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_type_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.query_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.license_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.license_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_sort_by();
}

ListModelsRequest::~ListModelsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListModelsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListModelsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.input_fields_.~RepeatedPtrField();
  _impl_.output_fields_.~RepeatedPtrField();
  _impl_.toolkits_.~RepeatedPtrField();
  _impl_.use_cases_.~RepeatedPtrField();
  _impl_.additional_fields_.~RepeatedPtrField();
  _impl_.languages_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.model_type_id_.Destroy();
  _impl_.query_.Destroy();
  _impl_.license_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
  if (has_sort_by()) {
    clear_sort_by();
  }
}

void ListModelsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListModelsRequest::clear_sort_by() {
// @@protoc_insertion_point(one_of_clear_start:clarifai.api.ListModelsRequest)
  switch (sort_by_case()) {
    case kSortByName: {
      // No need to clear
      break;
    }
    case kSortByNumInputs: {
      // No need to clear
      break;
    }
    case kSortByModifiedAt: {
      // No need to clear
      break;
    }
    case SORT_BY_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SORT_BY_NOT_SET;
}


void ListModelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListModelsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.input_fields_.Clear();
  _impl_.output_fields_.Clear();
  _impl_.toolkits_.Clear();
  _impl_.use_cases_.Clear();
  _impl_.additional_fields_.Clear();
  _impl_.languages_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.model_type_id_.ClearToEmpty();
  _impl_.query_.ClearToEmpty();
  _impl_.license_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dont_fetch_from_main_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.dont_fetch_from_main_));
  clear_sort_by();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListModelsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListModelsRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // string model_type_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_model_type_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListModelsRequest.model_type_id"));
        } else
          goto handle_unusual;
        continue;
      // bool trained_only = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.trained_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string input_fields = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input_fields();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListModelsRequest.input_fields"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string output_fields = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_output_fields();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListModelsRequest.output_fields"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool sort_ascending = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.sort_ascending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool sort_by_name = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _internal_set_sort_by_name(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool sort_by_num_inputs = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _internal_set_sort_by_num_inputs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool sort_by_modified_at = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _internal_set_sort_by_modified_at(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string query = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_query();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListModelsRequest.query"));
        } else
          goto handle_unusual;
        continue;
      // string license = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_license();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListModelsRequest.license"));
        } else
          goto handle_unusual;
        continue;
      // bool featured_only = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.featured_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string toolkits = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_toolkits();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListModelsRequest.toolkits"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string use_cases = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_use_cases();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListModelsRequest.use_cases"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string additional_fields = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_additional_fields();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListModelsRequest.additional_fields"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool starred_only = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.starred_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string languages = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_languages();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListModelsRequest.languages"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool filter_by_user_id = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.filter_by_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool dont_fetch_from_main = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.dont_fetch_from_main_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListModelsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListModelsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  // string name = 5;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelsRequest.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // string model_type_id = 6;
  if (!this->_internal_model_type_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_type_id().data(), static_cast<int>(this->_internal_model_type_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelsRequest.model_type_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_model_type_id(), target);
  }

  // bool trained_only = 7;
  if (this->_internal_trained_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_trained_only(), target);
  }

  // repeated string input_fields = 8;
  for (int i = 0, n = this->_internal_input_fields_size(); i < n; i++) {
    const auto& s = this->_internal_input_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelsRequest.input_fields");
    target = stream->WriteString(8, s, target);
  }

  // repeated string output_fields = 9;
  for (int i = 0, n = this->_internal_output_fields_size(); i < n; i++) {
    const auto& s = this->_internal_output_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelsRequest.output_fields");
    target = stream->WriteString(9, s, target);
  }

  // bool sort_ascending = 10;
  if (this->_internal_sort_ascending() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_sort_ascending(), target);
  }

  // bool sort_by_name = 11;
  if (_internal_has_sort_by_name()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_sort_by_name(), target);
  }

  // bool sort_by_num_inputs = 12;
  if (_internal_has_sort_by_num_inputs()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_sort_by_num_inputs(), target);
  }

  // bool sort_by_modified_at = 13;
  if (_internal_has_sort_by_modified_at()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_sort_by_modified_at(), target);
  }

  // string query = 14;
  if (!this->_internal_query().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelsRequest.query");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_query(), target);
  }

  // string license = 15;
  if (!this->_internal_license().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_license().data(), static_cast<int>(this->_internal_license().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelsRequest.license");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_license(), target);
  }

  // bool featured_only = 16;
  if (this->_internal_featured_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_featured_only(), target);
  }

  // repeated string toolkits = 17;
  for (int i = 0, n = this->_internal_toolkits_size(); i < n; i++) {
    const auto& s = this->_internal_toolkits(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelsRequest.toolkits");
    target = stream->WriteString(17, s, target);
  }

  // repeated string use_cases = 18;
  for (int i = 0, n = this->_internal_use_cases_size(); i < n; i++) {
    const auto& s = this->_internal_use_cases(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelsRequest.use_cases");
    target = stream->WriteString(18, s, target);
  }

  // repeated string additional_fields = 19;
  for (int i = 0, n = this->_internal_additional_fields_size(); i < n; i++) {
    const auto& s = this->_internal_additional_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelsRequest.additional_fields");
    target = stream->WriteString(19, s, target);
  }

  // bool starred_only = 20;
  if (this->_internal_starred_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_starred_only(), target);
  }

  // repeated string languages = 21;
  for (int i = 0, n = this->_internal_languages_size(); i < n; i++) {
    const auto& s = this->_internal_languages(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelsRequest.languages");
    target = stream->WriteString(21, s, target);
  }

  // bool filter_by_user_id = 22;
  if (this->_internal_filter_by_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_filter_by_user_id(), target);
  }

  // bool dont_fetch_from_main = 23;
  if (this->_internal_dont_fetch_from_main() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(23, this->_internal_dont_fetch_from_main(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListModelsRequest)
  return target;
}

size_t ListModelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListModelsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string input_fields = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.input_fields_.size());
  for (int i = 0, n = _impl_.input_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.input_fields_.Get(i));
  }

  // repeated string output_fields = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.output_fields_.size());
  for (int i = 0, n = _impl_.output_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.output_fields_.Get(i));
  }

  // repeated string toolkits = 17;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.toolkits_.size());
  for (int i = 0, n = _impl_.toolkits_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.toolkits_.Get(i));
  }

  // repeated string use_cases = 18;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.use_cases_.size());
  for (int i = 0, n = _impl_.use_cases_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.use_cases_.Get(i));
  }

  // repeated string additional_fields = 19;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.additional_fields_.size());
  for (int i = 0, n = _impl_.additional_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.additional_fields_.Get(i));
  }

  // repeated string languages = 21;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.languages_.size());
  for (int i = 0, n = _impl_.languages_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.languages_.Get(i));
  }

  // string name = 5;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string model_type_id = 6;
  if (!this->_internal_model_type_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_type_id());
  }

  // string query = 14;
  if (!this->_internal_query().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  // string license = 15;
  if (!this->_internal_license().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_license());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  // bool sort_ascending = 10;
  if (this->_internal_sort_ascending() != 0) {
    total_size += 1 + 1;
  }

  // bool filter_by_user_id = 22;
  if (this->_internal_filter_by_user_id() != 0) {
    total_size += 2 + 1;
  }

  // bool trained_only = 7;
  if (this->_internal_trained_only() != 0) {
    total_size += 1 + 1;
  }

  // bool featured_only = 16;
  if (this->_internal_featured_only() != 0) {
    total_size += 2 + 1;
  }

  // bool starred_only = 20;
  if (this->_internal_starred_only() != 0) {
    total_size += 2 + 1;
  }

  // bool dont_fetch_from_main = 23;
  if (this->_internal_dont_fetch_from_main() != 0) {
    total_size += 2 + 1;
  }

  switch (sort_by_case()) {
    // bool sort_by_name = 11;
    case kSortByName: {
      total_size += 1 + 1;
      break;
    }
    // bool sort_by_num_inputs = 12;
    case kSortByNumInputs: {
      total_size += 1 + 1;
      break;
    }
    // bool sort_by_modified_at = 13;
    case kSortByModifiedAt: {
      total_size += 1 + 1;
      break;
    }
    case SORT_BY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListModelsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListModelsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListModelsRequest::GetClassData() const { return &_class_data_; }


void ListModelsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListModelsRequest*>(&to_msg);
  auto& from = static_cast<const ListModelsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListModelsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.input_fields_.MergeFrom(from._impl_.input_fields_);
  _this->_impl_.output_fields_.MergeFrom(from._impl_.output_fields_);
  _this->_impl_.toolkits_.MergeFrom(from._impl_.toolkits_);
  _this->_impl_.use_cases_.MergeFrom(from._impl_.use_cases_);
  _this->_impl_.additional_fields_.MergeFrom(from._impl_.additional_fields_);
  _this->_impl_.languages_.MergeFrom(from._impl_.languages_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_model_type_id().empty()) {
    _this->_internal_set_model_type_id(from._internal_model_type_id());
  }
  if (!from._internal_query().empty()) {
    _this->_internal_set_query(from._internal_query());
  }
  if (!from._internal_license().empty()) {
    _this->_internal_set_license(from._internal_license());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  if (from._internal_sort_ascending() != 0) {
    _this->_internal_set_sort_ascending(from._internal_sort_ascending());
  }
  if (from._internal_filter_by_user_id() != 0) {
    _this->_internal_set_filter_by_user_id(from._internal_filter_by_user_id());
  }
  if (from._internal_trained_only() != 0) {
    _this->_internal_set_trained_only(from._internal_trained_only());
  }
  if (from._internal_featured_only() != 0) {
    _this->_internal_set_featured_only(from._internal_featured_only());
  }
  if (from._internal_starred_only() != 0) {
    _this->_internal_set_starred_only(from._internal_starred_only());
  }
  if (from._internal_dont_fetch_from_main() != 0) {
    _this->_internal_set_dont_fetch_from_main(from._internal_dont_fetch_from_main());
  }
  switch (from.sort_by_case()) {
    case kSortByName: {
      _this->_internal_set_sort_by_name(from._internal_sort_by_name());
      break;
    }
    case kSortByNumInputs: {
      _this->_internal_set_sort_by_num_inputs(from._internal_sort_by_num_inputs());
      break;
    }
    case kSortByModifiedAt: {
      _this->_internal_set_sort_by_modified_at(from._internal_sort_by_modified_at());
      break;
    }
    case SORT_BY_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListModelsRequest::CopyFrom(const ListModelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListModelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListModelsRequest::IsInitialized() const {
  return true;
}

void ListModelsRequest::InternalSwap(ListModelsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.input_fields_.InternalSwap(&other->_impl_.input_fields_);
  _impl_.output_fields_.InternalSwap(&other->_impl_.output_fields_);
  _impl_.toolkits_.InternalSwap(&other->_impl_.toolkits_);
  _impl_.use_cases_.InternalSwap(&other->_impl_.use_cases_);
  _impl_.additional_fields_.InternalSwap(&other->_impl_.additional_fields_);
  _impl_.languages_.InternalSwap(&other->_impl_.languages_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_type_id_, lhs_arena,
      &other->_impl_.model_type_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.query_, lhs_arena,
      &other->_impl_.query_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.license_, lhs_arena,
      &other->_impl_.license_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListModelsRequest, _impl_.dont_fetch_from_main_)
      + sizeof(ListModelsRequest::_impl_.dont_fetch_from_main_)
      - PROTOBUF_FIELD_OFFSET(ListModelsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
  swap(_impl_.sort_by_, other->_impl_.sort_by_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListModelsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[108]);
}

// ===================================================================

class PatchModelToolkitsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchModelToolkitsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchModelToolkitsRequest::_Internal::user_app_id(const PatchModelToolkitsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PatchModelToolkitsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
PatchModelToolkitsRequest::PatchModelToolkitsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchModelToolkitsRequest)
}
PatchModelToolkitsRequest::PatchModelToolkitsRequest(const PatchModelToolkitsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PatchModelToolkitsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.toolkits_){from._impl_.toolkits_}
    , decltype(_impl_.model_id_){}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    _this->_impl_.model_id_.Set(from._internal_model_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchModelToolkitsRequest)
}

inline void PatchModelToolkitsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.toolkits_){arena}
    , decltype(_impl_.model_id_){}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PatchModelToolkitsRequest::~PatchModelToolkitsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchModelToolkitsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatchModelToolkitsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.toolkits_.~RepeatedPtrField();
  _impl_.model_id_.Destroy();
  _impl_.action_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PatchModelToolkitsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatchModelToolkitsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchModelToolkitsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.toolkits_.Clear();
  _impl_.model_id_.ClearToEmpty();
  _impl_.action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchModelToolkitsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchModelToolkitsRequest.model_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string toolkits = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_toolkits();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchModelToolkitsRequest.toolkits"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchModelToolkitsRequest.action"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchModelToolkitsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchModelToolkitsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchModelToolkitsRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // repeated string toolkits = 3;
  for (int i = 0, n = this->_internal_toolkits_size(); i < n; i++) {
    const auto& s = this->_internal_toolkits(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchModelToolkitsRequest.toolkits");
    target = stream->WriteString(3, s, target);
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchModelToolkitsRequest.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchModelToolkitsRequest)
  return target;
}

size_t PatchModelToolkitsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchModelToolkitsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string toolkits = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.toolkits_.size());
  for (int i = 0, n = _impl_.toolkits_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.toolkits_.Get(i));
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchModelToolkitsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PatchModelToolkitsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchModelToolkitsRequest::GetClassData() const { return &_class_data_; }


void PatchModelToolkitsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PatchModelToolkitsRequest*>(&to_msg);
  auto& from = static_cast<const PatchModelToolkitsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchModelToolkitsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.toolkits_.MergeFrom(from._impl_.toolkits_);
  if (!from._internal_model_id().empty()) {
    _this->_internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchModelToolkitsRequest::CopyFrom(const PatchModelToolkitsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchModelToolkitsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchModelToolkitsRequest::IsInitialized() const {
  return true;
}

void PatchModelToolkitsRequest::InternalSwap(PatchModelToolkitsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.toolkits_.InternalSwap(&other->_impl_.toolkits_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_id_, lhs_arena,
      &other->_impl_.model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchModelToolkitsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[109]);
}

// ===================================================================

class PatchModelCheckConsentsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchModelCheckConsentsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchModelCheckConsentsRequest::_Internal::user_app_id(const PatchModelCheckConsentsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PatchModelCheckConsentsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
PatchModelCheckConsentsRequest::PatchModelCheckConsentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchModelCheckConsentsRequest)
}
PatchModelCheckConsentsRequest::PatchModelCheckConsentsRequest(const PatchModelCheckConsentsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PatchModelCheckConsentsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.check_consents_){from._impl_.check_consents_}
    , decltype(_impl_.model_id_){}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    _this->_impl_.model_id_.Set(from._internal_model_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchModelCheckConsentsRequest)
}

inline void PatchModelCheckConsentsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.check_consents_){arena}
    , decltype(_impl_.model_id_){}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PatchModelCheckConsentsRequest::~PatchModelCheckConsentsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchModelCheckConsentsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatchModelCheckConsentsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.check_consents_.~RepeatedPtrField();
  _impl_.model_id_.Destroy();
  _impl_.action_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PatchModelCheckConsentsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatchModelCheckConsentsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchModelCheckConsentsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.check_consents_.Clear();
  _impl_.model_id_.ClearToEmpty();
  _impl_.action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchModelCheckConsentsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchModelCheckConsentsRequest.model_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string check_consents = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_check_consents();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchModelCheckConsentsRequest.check_consents"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchModelCheckConsentsRequest.action"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchModelCheckConsentsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchModelCheckConsentsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchModelCheckConsentsRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // repeated string check_consents = 3;
  for (int i = 0, n = this->_internal_check_consents_size(); i < n; i++) {
    const auto& s = this->_internal_check_consents(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchModelCheckConsentsRequest.check_consents");
    target = stream->WriteString(3, s, target);
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchModelCheckConsentsRequest.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchModelCheckConsentsRequest)
  return target;
}

size_t PatchModelCheckConsentsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchModelCheckConsentsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string check_consents = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.check_consents_.size());
  for (int i = 0, n = _impl_.check_consents_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.check_consents_.Get(i));
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchModelCheckConsentsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PatchModelCheckConsentsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchModelCheckConsentsRequest::GetClassData() const { return &_class_data_; }


void PatchModelCheckConsentsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PatchModelCheckConsentsRequest*>(&to_msg);
  auto& from = static_cast<const PatchModelCheckConsentsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchModelCheckConsentsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.check_consents_.MergeFrom(from._impl_.check_consents_);
  if (!from._internal_model_id().empty()) {
    _this->_internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchModelCheckConsentsRequest::CopyFrom(const PatchModelCheckConsentsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchModelCheckConsentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchModelCheckConsentsRequest::IsInitialized() const {
  return true;
}

void PatchModelCheckConsentsRequest::InternalSwap(PatchModelCheckConsentsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.check_consents_.InternalSwap(&other->_impl_.check_consents_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_id_, lhs_arena,
      &other->_impl_.model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchModelCheckConsentsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[110]);
}

// ===================================================================

class PatchModelUseCasesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchModelUseCasesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchModelUseCasesRequest::_Internal::user_app_id(const PatchModelUseCasesRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PatchModelUseCasesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
PatchModelUseCasesRequest::PatchModelUseCasesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchModelUseCasesRequest)
}
PatchModelUseCasesRequest::PatchModelUseCasesRequest(const PatchModelUseCasesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PatchModelUseCasesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.usecases_){from._impl_.usecases_}
    , decltype(_impl_.model_id_){}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    _this->_impl_.model_id_.Set(from._internal_model_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchModelUseCasesRequest)
}

inline void PatchModelUseCasesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.usecases_){arena}
    , decltype(_impl_.model_id_){}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PatchModelUseCasesRequest::~PatchModelUseCasesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchModelUseCasesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatchModelUseCasesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.usecases_.~RepeatedPtrField();
  _impl_.model_id_.Destroy();
  _impl_.action_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PatchModelUseCasesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatchModelUseCasesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchModelUseCasesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.usecases_.Clear();
  _impl_.model_id_.ClearToEmpty();
  _impl_.action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchModelUseCasesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchModelUseCasesRequest.model_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string usecases = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_usecases();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchModelUseCasesRequest.usecases"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchModelUseCasesRequest.action"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchModelUseCasesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchModelUseCasesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchModelUseCasesRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // repeated string usecases = 3;
  for (int i = 0, n = this->_internal_usecases_size(); i < n; i++) {
    const auto& s = this->_internal_usecases(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchModelUseCasesRequest.usecases");
    target = stream->WriteString(3, s, target);
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchModelUseCasesRequest.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchModelUseCasesRequest)
  return target;
}

size_t PatchModelUseCasesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchModelUseCasesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string usecases = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.usecases_.size());
  for (int i = 0, n = _impl_.usecases_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.usecases_.Get(i));
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchModelUseCasesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PatchModelUseCasesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchModelUseCasesRequest::GetClassData() const { return &_class_data_; }


void PatchModelUseCasesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PatchModelUseCasesRequest*>(&to_msg);
  auto& from = static_cast<const PatchModelUseCasesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchModelUseCasesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.usecases_.MergeFrom(from._impl_.usecases_);
  if (!from._internal_model_id().empty()) {
    _this->_internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchModelUseCasesRequest::CopyFrom(const PatchModelUseCasesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchModelUseCasesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchModelUseCasesRequest::IsInitialized() const {
  return true;
}

void PatchModelUseCasesRequest::InternalSwap(PatchModelUseCasesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.usecases_.InternalSwap(&other->_impl_.usecases_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_id_, lhs_arena,
      &other->_impl_.model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchModelUseCasesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[111]);
}

// ===================================================================

class PatchModelLanguagesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchModelLanguagesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchModelLanguagesRequest::_Internal::user_app_id(const PatchModelLanguagesRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PatchModelLanguagesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
PatchModelLanguagesRequest::PatchModelLanguagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchModelLanguagesRequest)
}
PatchModelLanguagesRequest::PatchModelLanguagesRequest(const PatchModelLanguagesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PatchModelLanguagesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.languages_){from._impl_.languages_}
    , decltype(_impl_.model_id_){}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    _this->_impl_.model_id_.Set(from._internal_model_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchModelLanguagesRequest)
}

inline void PatchModelLanguagesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.languages_){arena}
    , decltype(_impl_.model_id_){}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PatchModelLanguagesRequest::~PatchModelLanguagesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchModelLanguagesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatchModelLanguagesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.languages_.~RepeatedPtrField();
  _impl_.model_id_.Destroy();
  _impl_.action_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PatchModelLanguagesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatchModelLanguagesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchModelLanguagesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.languages_.Clear();
  _impl_.model_id_.ClearToEmpty();
  _impl_.action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchModelLanguagesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchModelLanguagesRequest.model_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string languages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_languages();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchModelLanguagesRequest.languages"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchModelLanguagesRequest.action"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchModelLanguagesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchModelLanguagesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchModelLanguagesRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // repeated string languages = 3;
  for (int i = 0, n = this->_internal_languages_size(); i < n; i++) {
    const auto& s = this->_internal_languages(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchModelLanguagesRequest.languages");
    target = stream->WriteString(3, s, target);
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchModelLanguagesRequest.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchModelLanguagesRequest)
  return target;
}

size_t PatchModelLanguagesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchModelLanguagesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string languages = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.languages_.size());
  for (int i = 0, n = _impl_.languages_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.languages_.Get(i));
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchModelLanguagesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PatchModelLanguagesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchModelLanguagesRequest::GetClassData() const { return &_class_data_; }


void PatchModelLanguagesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PatchModelLanguagesRequest*>(&to_msg);
  auto& from = static_cast<const PatchModelLanguagesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchModelLanguagesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.languages_.MergeFrom(from._impl_.languages_);
  if (!from._internal_model_id().empty()) {
    _this->_internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchModelLanguagesRequest::CopyFrom(const PatchModelLanguagesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchModelLanguagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchModelLanguagesRequest::IsInitialized() const {
  return true;
}

void PatchModelLanguagesRequest::InternalSwap(PatchModelLanguagesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.languages_.InternalSwap(&other->_impl_.languages_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_id_, lhs_arena,
      &other->_impl_.model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchModelLanguagesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[112]);
}

// ===================================================================

class MultiModelToolkitResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiModelToolkitResponse* msg);
};

const ::clarifai::api::status::Status&
MultiModelToolkitResponse::_Internal::status(const MultiModelToolkitResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiModelToolkitResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
MultiModelToolkitResponse::MultiModelToolkitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiModelToolkitResponse)
}
MultiModelToolkitResponse::MultiModelToolkitResponse(const MultiModelToolkitResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiModelToolkitResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.toolkits_){from._impl_.toolkits_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiModelToolkitResponse)
}

inline void MultiModelToolkitResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.toolkits_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiModelToolkitResponse::~MultiModelToolkitResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiModelToolkitResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiModelToolkitResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.toolkits_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiModelToolkitResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiModelToolkitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiModelToolkitResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.toolkits_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiModelToolkitResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string toolkits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_toolkits();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.MultiModelToolkitResponse.toolkits"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiModelToolkitResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiModelToolkitResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated string toolkits = 2;
  for (int i = 0, n = this->_internal_toolkits_size(); i < n; i++) {
    const auto& s = this->_internal_toolkits(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.MultiModelToolkitResponse.toolkits");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiModelToolkitResponse)
  return target;
}

size_t MultiModelToolkitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiModelToolkitResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string toolkits = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.toolkits_.size());
  for (int i = 0, n = _impl_.toolkits_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.toolkits_.Get(i));
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiModelToolkitResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiModelToolkitResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiModelToolkitResponse::GetClassData() const { return &_class_data_; }


void MultiModelToolkitResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiModelToolkitResponse*>(&to_msg);
  auto& from = static_cast<const MultiModelToolkitResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiModelToolkitResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.toolkits_.MergeFrom(from._impl_.toolkits_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiModelToolkitResponse::CopyFrom(const MultiModelToolkitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiModelToolkitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiModelToolkitResponse::IsInitialized() const {
  return true;
}

void MultiModelToolkitResponse::InternalSwap(MultiModelToolkitResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.toolkits_.InternalSwap(&other->_impl_.toolkits_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiModelToolkitResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[113]);
}

// ===================================================================

class MultiModelCheckConsentResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiModelCheckConsentResponse* msg);
};

const ::clarifai::api::status::Status&
MultiModelCheckConsentResponse::_Internal::status(const MultiModelCheckConsentResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiModelCheckConsentResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
MultiModelCheckConsentResponse::MultiModelCheckConsentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiModelCheckConsentResponse)
}
MultiModelCheckConsentResponse::MultiModelCheckConsentResponse(const MultiModelCheckConsentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiModelCheckConsentResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.check_consents_){from._impl_.check_consents_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiModelCheckConsentResponse)
}

inline void MultiModelCheckConsentResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.check_consents_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiModelCheckConsentResponse::~MultiModelCheckConsentResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiModelCheckConsentResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiModelCheckConsentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.check_consents_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiModelCheckConsentResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiModelCheckConsentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiModelCheckConsentResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.check_consents_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiModelCheckConsentResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string check_consents = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_check_consents();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.MultiModelCheckConsentResponse.check_consents"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiModelCheckConsentResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiModelCheckConsentResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated string check_consents = 2;
  for (int i = 0, n = this->_internal_check_consents_size(); i < n; i++) {
    const auto& s = this->_internal_check_consents(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.MultiModelCheckConsentResponse.check_consents");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiModelCheckConsentResponse)
  return target;
}

size_t MultiModelCheckConsentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiModelCheckConsentResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string check_consents = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.check_consents_.size());
  for (int i = 0, n = _impl_.check_consents_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.check_consents_.Get(i));
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiModelCheckConsentResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiModelCheckConsentResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiModelCheckConsentResponse::GetClassData() const { return &_class_data_; }


void MultiModelCheckConsentResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiModelCheckConsentResponse*>(&to_msg);
  auto& from = static_cast<const MultiModelCheckConsentResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiModelCheckConsentResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.check_consents_.MergeFrom(from._impl_.check_consents_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiModelCheckConsentResponse::CopyFrom(const MultiModelCheckConsentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiModelCheckConsentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiModelCheckConsentResponse::IsInitialized() const {
  return true;
}

void MultiModelCheckConsentResponse::InternalSwap(MultiModelCheckConsentResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.check_consents_.InternalSwap(&other->_impl_.check_consents_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiModelCheckConsentResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[114]);
}

// ===================================================================

class MultiModelUseCaseResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiModelUseCaseResponse* msg);
};

const ::clarifai::api::status::Status&
MultiModelUseCaseResponse::_Internal::status(const MultiModelUseCaseResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiModelUseCaseResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
MultiModelUseCaseResponse::MultiModelUseCaseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiModelUseCaseResponse)
}
MultiModelUseCaseResponse::MultiModelUseCaseResponse(const MultiModelUseCaseResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiModelUseCaseResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.usecases_){from._impl_.usecases_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiModelUseCaseResponse)
}

inline void MultiModelUseCaseResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.usecases_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiModelUseCaseResponse::~MultiModelUseCaseResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiModelUseCaseResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiModelUseCaseResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.usecases_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiModelUseCaseResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiModelUseCaseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiModelUseCaseResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.usecases_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiModelUseCaseResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string usecases = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_usecases();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.MultiModelUseCaseResponse.usecases"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiModelUseCaseResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiModelUseCaseResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated string usecases = 2;
  for (int i = 0, n = this->_internal_usecases_size(); i < n; i++) {
    const auto& s = this->_internal_usecases(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.MultiModelUseCaseResponse.usecases");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiModelUseCaseResponse)
  return target;
}

size_t MultiModelUseCaseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiModelUseCaseResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string usecases = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.usecases_.size());
  for (int i = 0, n = _impl_.usecases_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.usecases_.Get(i));
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiModelUseCaseResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiModelUseCaseResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiModelUseCaseResponse::GetClassData() const { return &_class_data_; }


void MultiModelUseCaseResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiModelUseCaseResponse*>(&to_msg);
  auto& from = static_cast<const MultiModelUseCaseResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiModelUseCaseResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.usecases_.MergeFrom(from._impl_.usecases_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiModelUseCaseResponse::CopyFrom(const MultiModelUseCaseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiModelUseCaseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiModelUseCaseResponse::IsInitialized() const {
  return true;
}

void MultiModelUseCaseResponse::InternalSwap(MultiModelUseCaseResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.usecases_.InternalSwap(&other->_impl_.usecases_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiModelUseCaseResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[115]);
}

// ===================================================================

class MultiModelLanguageResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiModelLanguageResponse* msg);
};

const ::clarifai::api::status::Status&
MultiModelLanguageResponse::_Internal::status(const MultiModelLanguageResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiModelLanguageResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
MultiModelLanguageResponse::MultiModelLanguageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiModelLanguageResponse)
}
MultiModelLanguageResponse::MultiModelLanguageResponse(const MultiModelLanguageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiModelLanguageResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.languages_){from._impl_.languages_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiModelLanguageResponse)
}

inline void MultiModelLanguageResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.languages_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiModelLanguageResponse::~MultiModelLanguageResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiModelLanguageResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiModelLanguageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.languages_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiModelLanguageResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiModelLanguageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiModelLanguageResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.languages_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiModelLanguageResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string languages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_languages();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.MultiModelLanguageResponse.languages"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiModelLanguageResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiModelLanguageResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated string languages = 2;
  for (int i = 0, n = this->_internal_languages_size(); i < n; i++) {
    const auto& s = this->_internal_languages(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.MultiModelLanguageResponse.languages");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiModelLanguageResponse)
  return target;
}

size_t MultiModelLanguageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiModelLanguageResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string languages = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.languages_.size());
  for (int i = 0, n = _impl_.languages_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.languages_.Get(i));
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiModelLanguageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiModelLanguageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiModelLanguageResponse::GetClassData() const { return &_class_data_; }


void MultiModelLanguageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiModelLanguageResponse*>(&to_msg);
  auto& from = static_cast<const MultiModelLanguageResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiModelLanguageResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.languages_.MergeFrom(from._impl_.languages_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiModelLanguageResponse::CopyFrom(const MultiModelLanguageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiModelLanguageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiModelLanguageResponse::IsInitialized() const {
  return true;
}

void MultiModelLanguageResponse::InternalSwap(MultiModelLanguageResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.languages_.InternalSwap(&other->_impl_.languages_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiModelLanguageResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[116]);
}

// ===================================================================

class PostModelsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostModelsRequest* msg);
  static const ::clarifai::api::Model& model(const PostModelsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostModelsRequest::_Internal::user_app_id(const PostModelsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
const ::clarifai::api::Model&
PostModelsRequest::_Internal::model(const PostModelsRequest* msg) {
  return *msg->_impl_.model_;
}
void PostModelsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostModelsRequest::clear_model() {
  if (GetArenaForAllocation() == nullptr && _impl_.model_ != nullptr) {
    delete _impl_.model_;
  }
  _impl_.model_ = nullptr;
}
void PostModelsRequest::clear_models() {
  _impl_.models_.Clear();
}
PostModelsRequest::PostModelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostModelsRequest)
}
PostModelsRequest::PostModelsRequest(const PostModelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostModelsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.models_){from._impl_.models_}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.model_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  if (from._internal_has_model()) {
    _this->_impl_.model_ = new ::clarifai::api::Model(*from._impl_.model_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostModelsRequest)
}

inline void PostModelsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.models_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.model_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PostModelsRequest::~PostModelsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostModelsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostModelsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.models_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
  if (this != internal_default_instance()) delete _impl_.model_;
}

void PostModelsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostModelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostModelsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.models_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.model_ != nullptr) {
    delete _impl_.model_;
  }
  _impl_.model_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostModelsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Model model = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Model models = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostModelsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostModelsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Model model = 2 [deprecated = true];
  if (this->_internal_has_model()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::model(this),
        _Internal::model(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Model models = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_models_size()); i < n; i++) {
    const auto& repfield = this->_internal_models(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostModelsRequest)
  return target;
}

size_t PostModelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostModelsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Model models = 3;
  total_size += 1UL * this->_internal_models_size();
  for (const auto& msg : this->_impl_.models_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // .clarifai.api.Model model = 2 [deprecated = true];
  if (this->_internal_has_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.model_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostModelsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostModelsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostModelsRequest::GetClassData() const { return &_class_data_; }


void PostModelsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostModelsRequest*>(&to_msg);
  auto& from = static_cast<const PostModelsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostModelsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.models_.MergeFrom(from._impl_.models_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_has_model()) {
    _this->_internal_mutable_model()->::clarifai::api::Model::MergeFrom(
        from._internal_model());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostModelsRequest::CopyFrom(const PostModelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostModelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostModelsRequest::IsInitialized() const {
  return true;
}

void PostModelsRequest::InternalSwap(PostModelsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.models_.InternalSwap(&other->_impl_.models_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostModelsRequest, _impl_.model_)
      + sizeof(PostModelsRequest::_impl_.model_)
      - PROTOBUF_FIELD_OFFSET(PostModelsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostModelsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[117]);
}

// ===================================================================

class PatchModelsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchModelsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchModelsRequest::_Internal::user_app_id(const PatchModelsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PatchModelsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PatchModelsRequest::clear_models() {
  _impl_.models_.Clear();
}
PatchModelsRequest::PatchModelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchModelsRequest)
}
PatchModelsRequest::PatchModelsRequest(const PatchModelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PatchModelsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.models_){from._impl_.models_}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchModelsRequest)
}

inline void PatchModelsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.models_){arena}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PatchModelsRequest::~PatchModelsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchModelsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatchModelsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.models_.~RepeatedPtrField();
  _impl_.action_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PatchModelsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatchModelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchModelsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.models_.Clear();
  _impl_.action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchModelsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Model models = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchModelsRequest.action"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchModelsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchModelsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Model models = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_models_size()); i < n; i++) {
    const auto& repfield = this->_internal_models(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchModelsRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchModelsRequest)
  return target;
}

size_t PatchModelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchModelsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Model models = 2;
  total_size += 1UL * this->_internal_models_size();
  for (const auto& msg : this->_impl_.models_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchModelsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PatchModelsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchModelsRequest::GetClassData() const { return &_class_data_; }


void PatchModelsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PatchModelsRequest*>(&to_msg);
  auto& from = static_cast<const PatchModelsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchModelsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.models_.MergeFrom(from._impl_.models_);
  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchModelsRequest::CopyFrom(const PatchModelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchModelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchModelsRequest::IsInitialized() const {
  return true;
}

void PatchModelsRequest::InternalSwap(PatchModelsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.models_.InternalSwap(&other->_impl_.models_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchModelsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[118]);
}

// ===================================================================

class IdUpdateSource::_Internal {
 public:
};

IdUpdateSource::IdUpdateSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.IdUpdateSource)
}
IdUpdateSource::IdUpdateSource(const IdUpdateSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IdUpdateSource* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.new_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.new_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_new_id().empty()) {
    _this->_impl_.new_id_.Set(from._internal_new_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.IdUpdateSource)
}

inline void IdUpdateSource::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.new_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.new_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IdUpdateSource::~IdUpdateSource() {
  // @@protoc_insertion_point(destructor:clarifai.api.IdUpdateSource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IdUpdateSource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.new_id_.Destroy();
}

void IdUpdateSource::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IdUpdateSource::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.IdUpdateSource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.new_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IdUpdateSource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.IdUpdateSource.id"));
        } else
          goto handle_unusual;
        continue;
      // string new_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_new_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.IdUpdateSource.new_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IdUpdateSource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.IdUpdateSource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.IdUpdateSource.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string new_id = 2;
  if (!this->_internal_new_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_id().data(), static_cast<int>(this->_internal_new_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.IdUpdateSource.new_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_new_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.IdUpdateSource)
  return target;
}

size_t IdUpdateSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.IdUpdateSource)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string new_id = 2;
  if (!this->_internal_new_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_new_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IdUpdateSource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IdUpdateSource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IdUpdateSource::GetClassData() const { return &_class_data_; }


void IdUpdateSource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IdUpdateSource*>(&to_msg);
  auto& from = static_cast<const IdUpdateSource&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.IdUpdateSource)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_new_id().empty()) {
    _this->_internal_set_new_id(from._internal_new_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IdUpdateSource::CopyFrom(const IdUpdateSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.IdUpdateSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdUpdateSource::IsInitialized() const {
  return true;
}

void IdUpdateSource::InternalSwap(IdUpdateSource* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.new_id_, lhs_arena,
      &other->_impl_.new_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata IdUpdateSource::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[119]);
}

// ===================================================================

class PatchModelIdsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchModelIdsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchModelIdsRequest::_Internal::user_app_id(const PatchModelIdsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PatchModelIdsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
PatchModelIdsRequest::PatchModelIdsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchModelIdsRequest)
}
PatchModelIdsRequest::PatchModelIdsRequest(const PatchModelIdsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PatchModelIdsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){from._impl_.ids_}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchModelIdsRequest)
}

inline void PatchModelIdsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){arena}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PatchModelIdsRequest::~PatchModelIdsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchModelIdsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatchModelIdsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_.~RepeatedPtrField();
  _impl_.action_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PatchModelIdsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatchModelIdsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchModelIdsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ids_.Clear();
  _impl_.action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchModelIdsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.IdUpdateSource ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchModelIdsRequest.action"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchModelIdsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchModelIdsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.IdUpdateSource ids = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ids_size()); i < n; i++) {
    const auto& repfield = this->_internal_ids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchModelIdsRequest.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchModelIdsRequest)
  return target;
}

size_t PatchModelIdsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchModelIdsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.IdUpdateSource ids = 3;
  total_size += 1UL * this->_internal_ids_size();
  for (const auto& msg : this->_impl_.ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchModelIdsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PatchModelIdsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchModelIdsRequest::GetClassData() const { return &_class_data_; }


void PatchModelIdsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PatchModelIdsRequest*>(&to_msg);
  auto& from = static_cast<const PatchModelIdsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchModelIdsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_.MergeFrom(from._impl_.ids_);
  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchModelIdsRequest::CopyFrom(const PatchModelIdsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchModelIdsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchModelIdsRequest::IsInitialized() const {
  return true;
}

void PatchModelIdsRequest::InternalSwap(PatchModelIdsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ids_.InternalSwap(&other->_impl_.ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchModelIdsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[120]);
}

// ===================================================================

class DeleteModelRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteModelRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteModelRequest::_Internal::user_app_id(const DeleteModelRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void DeleteModelRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
DeleteModelRequest::DeleteModelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteModelRequest)
}
DeleteModelRequest::DeleteModelRequest(const DeleteModelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteModelRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.model_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    _this->_impl_.model_id_.Set(from._internal_model_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteModelRequest)
}

inline void DeleteModelRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.model_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteModelRequest::~DeleteModelRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteModelRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteModelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void DeleteModelRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteModelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteModelRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.model_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteModelRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DeleteModelRequest.model_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteModelRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteModelRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteModelRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteModelRequest)
  return target;
}

size_t DeleteModelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteModelRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteModelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteModelRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteModelRequest::GetClassData() const { return &_class_data_; }


void DeleteModelRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteModelRequest*>(&to_msg);
  auto& from = static_cast<const DeleteModelRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteModelRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_model_id().empty()) {
    _this->_internal_set_model_id(from._internal_model_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteModelRequest::CopyFrom(const DeleteModelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteModelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteModelRequest::IsInitialized() const {
  return true;
}

void DeleteModelRequest::InternalSwap(DeleteModelRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_id_, lhs_arena,
      &other->_impl_.model_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteModelRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[121]);
}

// ===================================================================

class DeleteModelsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteModelsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteModelsRequest::_Internal::user_app_id(const DeleteModelsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void DeleteModelsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
DeleteModelsRequest::DeleteModelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteModelsRequest)
}
DeleteModelsRequest::DeleteModelsRequest(const DeleteModelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteModelsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){from._impl_.ids_}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.delete_all_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  _this->_impl_.delete_all_ = from._impl_.delete_all_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteModelsRequest)
}

inline void DeleteModelsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.delete_all_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeleteModelsRequest::~DeleteModelsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteModelsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteModelsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void DeleteModelsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteModelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteModelsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _impl_.delete_all_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteModelsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DeleteModelsRequest.ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool delete_all = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.delete_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteModelsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteModelsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteModelsRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  // bool delete_all = 3;
  if (this->_internal_delete_all() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_delete_all(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteModelsRequest)
  return target;
}

size_t DeleteModelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteModelsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.ids_.size());
  for (int i = 0, n = _impl_.ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // bool delete_all = 3;
  if (this->_internal_delete_all() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteModelsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteModelsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteModelsRequest::GetClassData() const { return &_class_data_; }


void DeleteModelsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteModelsRequest*>(&to_msg);
  auto& from = static_cast<const DeleteModelsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteModelsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_.MergeFrom(from._impl_.ids_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_delete_all() != 0) {
    _this->_internal_set_delete_all(from._internal_delete_all());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteModelsRequest::CopyFrom(const DeleteModelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteModelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteModelsRequest::IsInitialized() const {
  return true;
}

void DeleteModelsRequest::InternalSwap(DeleteModelsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ids_.InternalSwap(&other->_impl_.ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteModelsRequest, _impl_.delete_all_)
      + sizeof(DeleteModelsRequest::_impl_.delete_all_)
      - PROTOBUF_FIELD_OFFSET(DeleteModelsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteModelsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[122]);
}

// ===================================================================

class PostModelsSearchesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostModelsSearchesRequest* msg);
  static const ::clarifai::api::ModelQuery& model_query(const PostModelsSearchesRequest* msg);
  static const ::clarifai::api::Pagination& pagination(const PostModelsSearchesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostModelsSearchesRequest::_Internal::user_app_id(const PostModelsSearchesRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
const ::clarifai::api::ModelQuery&
PostModelsSearchesRequest::_Internal::model_query(const PostModelsSearchesRequest* msg) {
  return *msg->_impl_.model_query_;
}
const ::clarifai::api::Pagination&
PostModelsSearchesRequest::_Internal::pagination(const PostModelsSearchesRequest* msg) {
  return *msg->_impl_.pagination_;
}
void PostModelsSearchesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostModelsSearchesRequest::clear_model_query() {
  if (GetArenaForAllocation() == nullptr && _impl_.model_query_ != nullptr) {
    delete _impl_.model_query_;
  }
  _impl_.model_query_ = nullptr;
}
PostModelsSearchesRequest::PostModelsSearchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostModelsSearchesRequest)
}
PostModelsSearchesRequest::PostModelsSearchesRequest(const PostModelsSearchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostModelsSearchesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.model_query_){nullptr}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  if (from._internal_has_model_query()) {
    _this->_impl_.model_query_ = new ::clarifai::api::ModelQuery(*from._impl_.model_query_);
  }
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::clarifai::api::Pagination(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostModelsSearchesRequest)
}

inline void PostModelsSearchesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.model_query_){nullptr}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PostModelsSearchesRequest::~PostModelsSearchesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostModelsSearchesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostModelsSearchesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
  if (this != internal_default_instance()) delete _impl_.model_query_;
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void PostModelsSearchesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostModelsSearchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostModelsSearchesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.model_query_ != nullptr) {
    delete _impl_.model_query_;
  }
  _impl_.model_query_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostModelsSearchesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ModelQuery model_query = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_query(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Pagination pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostModelsSearchesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostModelsSearchesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.ModelQuery model_query = 2;
  if (this->_internal_has_model_query()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::model_query(this),
        _Internal::model_query(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostModelsSearchesRequest)
  return target;
}

size_t PostModelsSearchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostModelsSearchesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // .clarifai.api.ModelQuery model_query = 2;
  if (this->_internal_has_model_query()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.model_query_);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostModelsSearchesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostModelsSearchesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostModelsSearchesRequest::GetClassData() const { return &_class_data_; }


void PostModelsSearchesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostModelsSearchesRequest*>(&to_msg);
  auto& from = static_cast<const PostModelsSearchesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostModelsSearchesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_has_model_query()) {
    _this->_internal_mutable_model_query()->::clarifai::api::ModelQuery::MergeFrom(
        from._internal_model_query());
  }
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::clarifai::api::Pagination::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostModelsSearchesRequest::CopyFrom(const PostModelsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostModelsSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostModelsSearchesRequest::IsInitialized() const {
  return true;
}

void PostModelsSearchesRequest::InternalSwap(PostModelsSearchesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostModelsSearchesRequest, _impl_.pagination_)
      + sizeof(PostModelsSearchesRequest::_impl_.pagination_)
      - PROTOBUF_FIELD_OFFSET(PostModelsSearchesRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostModelsSearchesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[123]);
}

// ===================================================================

class SingleModelResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleModelResponse* msg);
  static const ::clarifai::api::Model& model(const SingleModelResponse* msg);
};

const ::clarifai::api::status::Status&
SingleModelResponse::_Internal::status(const SingleModelResponse* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::Model&
SingleModelResponse::_Internal::model(const SingleModelResponse* msg) {
  return *msg->_impl_.model_;
}
void SingleModelResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void SingleModelResponse::clear_model() {
  if (GetArenaForAllocation() == nullptr && _impl_.model_ != nullptr) {
    delete _impl_.model_;
  }
  _impl_.model_ = nullptr;
}
SingleModelResponse::SingleModelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleModelResponse)
}
SingleModelResponse::SingleModelResponse(const SingleModelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleModelResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.model_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_model()) {
    _this->_impl_.model_ = new ::clarifai::api::Model(*from._impl_.model_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleModelResponse)
}

inline void SingleModelResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.model_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SingleModelResponse::~SingleModelResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleModelResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleModelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.model_;
}

void SingleModelResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleModelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleModelResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.model_ != nullptr) {
    delete _impl_.model_;
  }
  _impl_.model_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleModelResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Model model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleModelResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleModelResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Model model = 2;
  if (this->_internal_has_model()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::model(this),
        _Internal::model(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleModelResponse)
  return target;
}

size_t SingleModelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleModelResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.Model model = 2;
  if (this->_internal_has_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.model_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleModelResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleModelResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleModelResponse::GetClassData() const { return &_class_data_; }


void SingleModelResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleModelResponse*>(&to_msg);
  auto& from = static_cast<const SingleModelResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleModelResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_model()) {
    _this->_internal_mutable_model()->::clarifai::api::Model::MergeFrom(
        from._internal_model());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleModelResponse::CopyFrom(const SingleModelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleModelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleModelResponse::IsInitialized() const {
  return true;
}

void SingleModelResponse::InternalSwap(SingleModelResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleModelResponse, _impl_.model_)
      + sizeof(SingleModelResponse::_impl_.model_)
      - PROTOBUF_FIELD_OFFSET(SingleModelResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleModelResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[124]);
}

// ===================================================================

class MultiModelResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiModelResponse* msg);
};

const ::clarifai::api::status::Status&
MultiModelResponse::_Internal::status(const MultiModelResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiModelResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiModelResponse::clear_models() {
  _impl_.models_.Clear();
}
MultiModelResponse::MultiModelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiModelResponse)
}
MultiModelResponse::MultiModelResponse(const MultiModelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiModelResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.models_){from._impl_.models_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiModelResponse)
}

inline void MultiModelResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.models_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiModelResponse::~MultiModelResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiModelResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiModelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.models_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiModelResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiModelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiModelResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.models_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiModelResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Model models = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiModelResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiModelResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Model models = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_models_size()); i < n; i++) {
    const auto& repfield = this->_internal_models(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiModelResponse)
  return target;
}

size_t MultiModelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiModelResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Model models = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_models_size();
  for (const auto& msg : this->_impl_.models_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiModelResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiModelResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiModelResponse::GetClassData() const { return &_class_data_; }


void MultiModelResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiModelResponse*>(&to_msg);
  auto& from = static_cast<const MultiModelResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiModelResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.models_.MergeFrom(from._impl_.models_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiModelResponse::CopyFrom(const MultiModelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiModelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiModelResponse::IsInitialized() const {
  return true;
}

void MultiModelResponse::InternalSwap(MultiModelResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.models_.InternalSwap(&other->_impl_.models_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiModelResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[125]);
}

// ===================================================================

class PatchModelVersionsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchModelVersionsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchModelVersionsRequest::_Internal::user_app_id(const PatchModelVersionsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PatchModelVersionsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PatchModelVersionsRequest::clear_model_versions() {
  _impl_.model_versions_.Clear();
}
PatchModelVersionsRequest::PatchModelVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchModelVersionsRequest)
}
PatchModelVersionsRequest::PatchModelVersionsRequest(const PatchModelVersionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PatchModelVersionsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.model_versions_){from._impl_.model_versions_}
    , decltype(_impl_.model_id_){}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    _this->_impl_.model_id_.Set(from._internal_model_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchModelVersionsRequest)
}

inline void PatchModelVersionsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.model_versions_){arena}
    , decltype(_impl_.model_id_){}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PatchModelVersionsRequest::~PatchModelVersionsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchModelVersionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatchModelVersionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_versions_.~RepeatedPtrField();
  _impl_.model_id_.Destroy();
  _impl_.action_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PatchModelVersionsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatchModelVersionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchModelVersionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.model_versions_.Clear();
  _impl_.model_id_.ClearToEmpty();
  _impl_.action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchModelVersionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchModelVersionsRequest.model_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModelVersion model_versions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model_versions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchModelVersionsRequest.action"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchModelVersionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchModelVersionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchModelVersionsRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // repeated .clarifai.api.ModelVersion model_versions = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_model_versions_size()); i < n; i++) {
    const auto& repfield = this->_internal_model_versions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchModelVersionsRequest.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchModelVersionsRequest)
  return target;
}

size_t PatchModelVersionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchModelVersionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ModelVersion model_versions = 3;
  total_size += 1UL * this->_internal_model_versions_size();
  for (const auto& msg : this->_impl_.model_versions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchModelVersionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PatchModelVersionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchModelVersionsRequest::GetClassData() const { return &_class_data_; }


void PatchModelVersionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PatchModelVersionsRequest*>(&to_msg);
  auto& from = static_cast<const PatchModelVersionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchModelVersionsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.model_versions_.MergeFrom(from._impl_.model_versions_);
  if (!from._internal_model_id().empty()) {
    _this->_internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchModelVersionsRequest::CopyFrom(const PatchModelVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchModelVersionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchModelVersionsRequest::IsInitialized() const {
  return true;
}

void PatchModelVersionsRequest::InternalSwap(PatchModelVersionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.model_versions_.InternalSwap(&other->_impl_.model_versions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_id_, lhs_arena,
      &other->_impl_.model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchModelVersionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[126]);
}

// ===================================================================

class GetModelVersionRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetModelVersionRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetModelVersionRequest::_Internal::user_app_id(const GetModelVersionRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void GetModelVersionRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
GetModelVersionRequest::GetModelVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetModelVersionRequest)
}
GetModelVersionRequest::GetModelVersionRequest(const GetModelVersionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetModelVersionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.model_id_){}
    , decltype(_impl_.version_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    _this->_impl_.model_id_.Set(from._internal_model_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version_id().empty()) {
    _this->_impl_.version_id_.Set(from._internal_version_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetModelVersionRequest)
}

inline void GetModelVersionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.model_id_){}
    , decltype(_impl_.version_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetModelVersionRequest::~GetModelVersionRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetModelVersionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetModelVersionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_id_.Destroy();
  _impl_.version_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void GetModelVersionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetModelVersionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetModelVersionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.model_id_.ClearToEmpty();
  _impl_.version_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetModelVersionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetModelVersionRequest.model_id"));
        } else
          goto handle_unusual;
        continue;
      // string version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_version_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetModelVersionRequest.version_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetModelVersionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetModelVersionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelVersionRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string version_id = 3;
  if (!this->_internal_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelVersionRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetModelVersionRequest)
  return target;
}

size_t GetModelVersionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetModelVersionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string version_id = 3;
  if (!this->_internal_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetModelVersionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetModelVersionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetModelVersionRequest::GetClassData() const { return &_class_data_; }


void GetModelVersionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetModelVersionRequest*>(&to_msg);
  auto& from = static_cast<const GetModelVersionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetModelVersionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_model_id().empty()) {
    _this->_internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_version_id().empty()) {
    _this->_internal_set_version_id(from._internal_version_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetModelVersionRequest::CopyFrom(const GetModelVersionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetModelVersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModelVersionRequest::IsInitialized() const {
  return true;
}

void GetModelVersionRequest::InternalSwap(GetModelVersionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_id_, lhs_arena,
      &other->_impl_.model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_id_, lhs_arena,
      &other->_impl_.version_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetModelVersionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[127]);
}

// ===================================================================

class ListModelVersionsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListModelVersionsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListModelVersionsRequest::_Internal::user_app_id(const ListModelVersionsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListModelVersionsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
ListModelVersionsRequest::ListModelVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListModelVersionsRequest)
}
ListModelVersionsRequest::ListModelVersionsRequest(const ListModelVersionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListModelVersionsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.concept_ids_){from._impl_.concept_ids_}
    , decltype(_impl_.model_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    _this->_impl_.model_id_.Set(from._internal_model_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.per_page_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListModelVersionsRequest)
}

inline void ListModelVersionsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.concept_ids_){arena}
    , decltype(_impl_.model_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListModelVersionsRequest::~ListModelVersionsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListModelVersionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListModelVersionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.concept_ids_.~RepeatedPtrField();
  _impl_.model_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void ListModelVersionsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListModelVersionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListModelVersionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.concept_ids_.Clear();
  _impl_.model_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.per_page_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListModelVersionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListModelVersionsRequest.model_id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string concept_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_concept_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListModelVersionsRequest.concept_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListModelVersionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListModelVersionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelVersionsRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // uint32 page = 3;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_page(), target);
  }

  // uint32 per_page = 4;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_per_page(), target);
  }

  // repeated string concept_ids = 5;
  for (int i = 0, n = this->_internal_concept_ids_size(); i < n; i++) {
    const auto& s = this->_internal_concept_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelVersionsRequest.concept_ids");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListModelVersionsRequest)
  return target;
}

size_t ListModelVersionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListModelVersionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string concept_ids = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.concept_ids_.size());
  for (int i = 0, n = _impl_.concept_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.concept_ids_.Get(i));
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // uint32 page = 3;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 4;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListModelVersionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListModelVersionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListModelVersionsRequest::GetClassData() const { return &_class_data_; }


void ListModelVersionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListModelVersionsRequest*>(&to_msg);
  auto& from = static_cast<const ListModelVersionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListModelVersionsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.concept_ids_.MergeFrom(from._impl_.concept_ids_);
  if (!from._internal_model_id().empty()) {
    _this->_internal_set_model_id(from._internal_model_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListModelVersionsRequest::CopyFrom(const ListModelVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListModelVersionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListModelVersionsRequest::IsInitialized() const {
  return true;
}

void ListModelVersionsRequest::InternalSwap(ListModelVersionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.concept_ids_.InternalSwap(&other->_impl_.concept_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_id_, lhs_arena,
      &other->_impl_.model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListModelVersionsRequest, _impl_.per_page_)
      + sizeof(ListModelVersionsRequest::_impl_.per_page_)
      - PROTOBUF_FIELD_OFFSET(ListModelVersionsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListModelVersionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[128]);
}

// ===================================================================

class DeleteModelVersionRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteModelVersionRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteModelVersionRequest::_Internal::user_app_id(const DeleteModelVersionRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void DeleteModelVersionRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
DeleteModelVersionRequest::DeleteModelVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteModelVersionRequest)
}
DeleteModelVersionRequest::DeleteModelVersionRequest(const DeleteModelVersionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteModelVersionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.model_id_){}
    , decltype(_impl_.version_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    _this->_impl_.model_id_.Set(from._internal_model_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version_id().empty()) {
    _this->_impl_.version_id_.Set(from._internal_version_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteModelVersionRequest)
}

inline void DeleteModelVersionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.model_id_){}
    , decltype(_impl_.version_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteModelVersionRequest::~DeleteModelVersionRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteModelVersionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteModelVersionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_id_.Destroy();
  _impl_.version_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void DeleteModelVersionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteModelVersionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteModelVersionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.model_id_.ClearToEmpty();
  _impl_.version_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteModelVersionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_model_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DeleteModelVersionRequest.model_id"));
        } else
          goto handle_unusual;
        continue;
      // string version_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_version_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DeleteModelVersionRequest.version_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteModelVersionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteModelVersionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string model_id = 3;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteModelVersionRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model_id(), target);
  }

  // string version_id = 4;
  if (!this->_internal_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteModelVersionRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_version_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteModelVersionRequest)
  return target;
}

size_t DeleteModelVersionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteModelVersionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 3;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string version_id = 4;
  if (!this->_internal_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteModelVersionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteModelVersionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteModelVersionRequest::GetClassData() const { return &_class_data_; }


void DeleteModelVersionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteModelVersionRequest*>(&to_msg);
  auto& from = static_cast<const DeleteModelVersionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteModelVersionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_model_id().empty()) {
    _this->_internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_version_id().empty()) {
    _this->_internal_set_version_id(from._internal_version_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteModelVersionRequest::CopyFrom(const DeleteModelVersionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteModelVersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteModelVersionRequest::IsInitialized() const {
  return true;
}

void DeleteModelVersionRequest::InternalSwap(DeleteModelVersionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_id_, lhs_arena,
      &other->_impl_.model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_id_, lhs_arena,
      &other->_impl_.version_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteModelVersionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[129]);
}

// ===================================================================

class SingleModelVersionResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleModelVersionResponse* msg);
  static const ::clarifai::api::ModelVersion& model_version(const SingleModelVersionResponse* msg);
};

const ::clarifai::api::status::Status&
SingleModelVersionResponse::_Internal::status(const SingleModelVersionResponse* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::ModelVersion&
SingleModelVersionResponse::_Internal::model_version(const SingleModelVersionResponse* msg) {
  return *msg->_impl_.model_version_;
}
void SingleModelVersionResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void SingleModelVersionResponse::clear_model_version() {
  if (GetArenaForAllocation() == nullptr && _impl_.model_version_ != nullptr) {
    delete _impl_.model_version_;
  }
  _impl_.model_version_ = nullptr;
}
SingleModelVersionResponse::SingleModelVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleModelVersionResponse)
}
SingleModelVersionResponse::SingleModelVersionResponse(const SingleModelVersionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleModelVersionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.model_version_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_model_version()) {
    _this->_impl_.model_version_ = new ::clarifai::api::ModelVersion(*from._impl_.model_version_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleModelVersionResponse)
}

inline void SingleModelVersionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.model_version_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SingleModelVersionResponse::~SingleModelVersionResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleModelVersionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleModelVersionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.model_version_;
}

void SingleModelVersionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleModelVersionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleModelVersionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.model_version_ != nullptr) {
    delete _impl_.model_version_;
  }
  _impl_.model_version_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleModelVersionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ModelVersion model_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleModelVersionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleModelVersionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.ModelVersion model_version = 2;
  if (this->_internal_has_model_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::model_version(this),
        _Internal::model_version(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleModelVersionResponse)
  return target;
}

size_t SingleModelVersionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleModelVersionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.ModelVersion model_version = 2;
  if (this->_internal_has_model_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.model_version_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleModelVersionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleModelVersionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleModelVersionResponse::GetClassData() const { return &_class_data_; }


void SingleModelVersionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleModelVersionResponse*>(&to_msg);
  auto& from = static_cast<const SingleModelVersionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleModelVersionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_model_version()) {
    _this->_internal_mutable_model_version()->::clarifai::api::ModelVersion::MergeFrom(
        from._internal_model_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleModelVersionResponse::CopyFrom(const SingleModelVersionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleModelVersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleModelVersionResponse::IsInitialized() const {
  return true;
}

void SingleModelVersionResponse::InternalSwap(SingleModelVersionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleModelVersionResponse, _impl_.model_version_)
      + sizeof(SingleModelVersionResponse::_impl_.model_version_)
      - PROTOBUF_FIELD_OFFSET(SingleModelVersionResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleModelVersionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[130]);
}

// ===================================================================

class MultiModelVersionResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiModelVersionResponse* msg);
};

const ::clarifai::api::status::Status&
MultiModelVersionResponse::_Internal::status(const MultiModelVersionResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiModelVersionResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiModelVersionResponse::clear_model_versions() {
  _impl_.model_versions_.Clear();
}
MultiModelVersionResponse::MultiModelVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiModelVersionResponse)
}
MultiModelVersionResponse::MultiModelVersionResponse(const MultiModelVersionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiModelVersionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.model_versions_){from._impl_.model_versions_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiModelVersionResponse)
}

inline void MultiModelVersionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.model_versions_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiModelVersionResponse::~MultiModelVersionResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiModelVersionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiModelVersionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_versions_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiModelVersionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiModelVersionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiModelVersionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.model_versions_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiModelVersionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModelVersion model_versions = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model_versions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiModelVersionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiModelVersionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.ModelVersion model_versions = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_model_versions_size()); i < n; i++) {
    const auto& repfield = this->_internal_model_versions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiModelVersionResponse)
  return target;
}

size_t MultiModelVersionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiModelVersionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ModelVersion model_versions = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_model_versions_size();
  for (const auto& msg : this->_impl_.model_versions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiModelVersionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiModelVersionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiModelVersionResponse::GetClassData() const { return &_class_data_; }


void MultiModelVersionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiModelVersionResponse*>(&to_msg);
  auto& from = static_cast<const MultiModelVersionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiModelVersionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.model_versions_.MergeFrom(from._impl_.model_versions_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiModelVersionResponse::CopyFrom(const MultiModelVersionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiModelVersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiModelVersionResponse::IsInitialized() const {
  return true;
}

void MultiModelVersionResponse::InternalSwap(MultiModelVersionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.model_versions_.InternalSwap(&other->_impl_.model_versions_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiModelVersionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[131]);
}

// ===================================================================

class PostModelVersionsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostModelVersionsRequest* msg);
  static const ::clarifai::api::Search& search(const PostModelVersionsRequest* msg);
  static const ::clarifai::api::Search& train_search(const PostModelVersionsRequest* msg);
  static const ::clarifai::api::Search& test_search(const PostModelVersionsRequest* msg);
  static const ::clarifai::api::DatasetVersion& dataset_version(const PostModelVersionsRequest* msg);
  static const ::clarifai::api::EvalInfo& eval_info(const PostModelVersionsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostModelVersionsRequest::_Internal::user_app_id(const PostModelVersionsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
const ::clarifai::api::Search&
PostModelVersionsRequest::_Internal::search(const PostModelVersionsRequest* msg) {
  return *msg->_impl_.search_;
}
const ::clarifai::api::Search&
PostModelVersionsRequest::_Internal::train_search(const PostModelVersionsRequest* msg) {
  return *msg->_impl_.train_search_;
}
const ::clarifai::api::Search&
PostModelVersionsRequest::_Internal::test_search(const PostModelVersionsRequest* msg) {
  return *msg->_impl_.test_search_;
}
const ::clarifai::api::DatasetVersion&
PostModelVersionsRequest::_Internal::dataset_version(const PostModelVersionsRequest* msg) {
  return *msg->_impl_.dataset_version_;
}
const ::clarifai::api::EvalInfo&
PostModelVersionsRequest::_Internal::eval_info(const PostModelVersionsRequest* msg) {
  return *msg->_impl_.eval_info_;
}
void PostModelVersionsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostModelVersionsRequest::clear_model_versions() {
  _impl_.model_versions_.Clear();
}
void PostModelVersionsRequest::clear_search() {
  if (GetArenaForAllocation() == nullptr && _impl_.search_ != nullptr) {
    delete _impl_.search_;
  }
  _impl_.search_ = nullptr;
}
void PostModelVersionsRequest::clear_train_search() {
  if (GetArenaForAllocation() == nullptr && _impl_.train_search_ != nullptr) {
    delete _impl_.train_search_;
  }
  _impl_.train_search_ = nullptr;
}
void PostModelVersionsRequest::clear_test_search() {
  if (GetArenaForAllocation() == nullptr && _impl_.test_search_ != nullptr) {
    delete _impl_.test_search_;
  }
  _impl_.test_search_ = nullptr;
}
void PostModelVersionsRequest::clear_dataset_version() {
  if (GetArenaForAllocation() == nullptr && _impl_.dataset_version_ != nullptr) {
    delete _impl_.dataset_version_;
  }
  _impl_.dataset_version_ = nullptr;
}
void PostModelVersionsRequest::clear_eval_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.eval_info_ != nullptr) {
    delete _impl_.eval_info_;
  }
  _impl_.eval_info_ = nullptr;
}
PostModelVersionsRequest::PostModelVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostModelVersionsRequest)
}
PostModelVersionsRequest::PostModelVersionsRequest(const PostModelVersionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostModelVersionsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.model_versions_){from._impl_.model_versions_}
    , decltype(_impl_.model_id_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.search_){nullptr}
    , decltype(_impl_.train_search_){nullptr}
    , decltype(_impl_.test_search_){nullptr}
    , decltype(_impl_.dataset_version_){nullptr}
    , decltype(_impl_.eval_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    _this->_impl_.model_id_.Set(from._internal_model_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  if (from._internal_has_search()) {
    _this->_impl_.search_ = new ::clarifai::api::Search(*from._impl_.search_);
  }
  if (from._internal_has_train_search()) {
    _this->_impl_.train_search_ = new ::clarifai::api::Search(*from._impl_.train_search_);
  }
  if (from._internal_has_test_search()) {
    _this->_impl_.test_search_ = new ::clarifai::api::Search(*from._impl_.test_search_);
  }
  if (from._internal_has_dataset_version()) {
    _this->_impl_.dataset_version_ = new ::clarifai::api::DatasetVersion(*from._impl_.dataset_version_);
  }
  if (from._internal_has_eval_info()) {
    _this->_impl_.eval_info_ = new ::clarifai::api::EvalInfo(*from._impl_.eval_info_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostModelVersionsRequest)
}

inline void PostModelVersionsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.model_versions_){arena}
    , decltype(_impl_.model_id_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.search_){nullptr}
    , decltype(_impl_.train_search_){nullptr}
    , decltype(_impl_.test_search_){nullptr}
    , decltype(_impl_.dataset_version_){nullptr}
    , decltype(_impl_.eval_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PostModelVersionsRequest::~PostModelVersionsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostModelVersionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostModelVersionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_versions_.~RepeatedPtrField();
  _impl_.model_id_.Destroy();
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
  if (this != internal_default_instance()) delete _impl_.search_;
  if (this != internal_default_instance()) delete _impl_.train_search_;
  if (this != internal_default_instance()) delete _impl_.test_search_;
  if (this != internal_default_instance()) delete _impl_.dataset_version_;
  if (this != internal_default_instance()) delete _impl_.eval_info_;
}

void PostModelVersionsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostModelVersionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostModelVersionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.model_versions_.Clear();
  _impl_.model_id_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.search_ != nullptr) {
    delete _impl_.search_;
  }
  _impl_.search_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.train_search_ != nullptr) {
    delete _impl_.train_search_;
  }
  _impl_.train_search_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.test_search_ != nullptr) {
    delete _impl_.test_search_;
  }
  _impl_.test_search_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dataset_version_ != nullptr) {
    delete _impl_.dataset_version_;
  }
  _impl_.dataset_version_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.eval_info_ != nullptr) {
    delete _impl_.eval_info_;
  }
  _impl_.eval_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostModelVersionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PostModelVersionsRequest.model_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModelVersion model_versions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model_versions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Search search = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_search(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Search train_search = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_train_search(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Search test_search = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_test_search(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PostModelVersionsRequest.description"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.DatasetVersion dataset_version = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_dataset_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.EvalInfo eval_info = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_eval_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostModelVersionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostModelVersionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostModelVersionsRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // repeated .clarifai.api.ModelVersion model_versions = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_model_versions_size()); i < n; i++) {
    const auto& repfield = this->_internal_model_versions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .clarifai.api.Search search = 4 [deprecated = true];
  if (this->_internal_has_search()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::search(this),
        _Internal::search(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Search train_search = 5 [deprecated = true];
  if (this->_internal_has_train_search()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::train_search(this),
        _Internal::train_search(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Search test_search = 6 [deprecated = true];
  if (this->_internal_has_test_search()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::test_search(this),
        _Internal::test_search(this).GetCachedSize(), target, stream);
  }

  // string description = 8;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostModelVersionsRequest.description");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_description(), target);
  }

  // .clarifai.api.DatasetVersion dataset_version = 9;
  if (this->_internal_has_dataset_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::dataset_version(this),
        _Internal::dataset_version(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.EvalInfo eval_info = 10;
  if (this->_internal_has_eval_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::eval_info(this),
        _Internal::eval_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostModelVersionsRequest)
  return target;
}

size_t PostModelVersionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostModelVersionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ModelVersion model_versions = 3;
  total_size += 1UL * this->_internal_model_versions_size();
  for (const auto& msg : this->_impl_.model_versions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string description = 8;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // .clarifai.api.Search search = 4 [deprecated = true];
  if (this->_internal_has_search()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.search_);
  }

  // .clarifai.api.Search train_search = 5 [deprecated = true];
  if (this->_internal_has_train_search()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.train_search_);
  }

  // .clarifai.api.Search test_search = 6 [deprecated = true];
  if (this->_internal_has_test_search()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.test_search_);
  }

  // .clarifai.api.DatasetVersion dataset_version = 9;
  if (this->_internal_has_dataset_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dataset_version_);
  }

  // .clarifai.api.EvalInfo eval_info = 10;
  if (this->_internal_has_eval_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.eval_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostModelVersionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostModelVersionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostModelVersionsRequest::GetClassData() const { return &_class_data_; }


void PostModelVersionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostModelVersionsRequest*>(&to_msg);
  auto& from = static_cast<const PostModelVersionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostModelVersionsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.model_versions_.MergeFrom(from._impl_.model_versions_);
  if (!from._internal_model_id().empty()) {
    _this->_internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_has_search()) {
    _this->_internal_mutable_search()->::clarifai::api::Search::MergeFrom(
        from._internal_search());
  }
  if (from._internal_has_train_search()) {
    _this->_internal_mutable_train_search()->::clarifai::api::Search::MergeFrom(
        from._internal_train_search());
  }
  if (from._internal_has_test_search()) {
    _this->_internal_mutable_test_search()->::clarifai::api::Search::MergeFrom(
        from._internal_test_search());
  }
  if (from._internal_has_dataset_version()) {
    _this->_internal_mutable_dataset_version()->::clarifai::api::DatasetVersion::MergeFrom(
        from._internal_dataset_version());
  }
  if (from._internal_has_eval_info()) {
    _this->_internal_mutable_eval_info()->::clarifai::api::EvalInfo::MergeFrom(
        from._internal_eval_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostModelVersionsRequest::CopyFrom(const PostModelVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostModelVersionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostModelVersionsRequest::IsInitialized() const {
  return true;
}

void PostModelVersionsRequest::InternalSwap(PostModelVersionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.model_versions_.InternalSwap(&other->_impl_.model_versions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_id_, lhs_arena,
      &other->_impl_.model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostModelVersionsRequest, _impl_.eval_info_)
      + sizeof(PostModelVersionsRequest::_impl_.eval_info_)
      - PROTOBUF_FIELD_OFFSET(PostModelVersionsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostModelVersionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[132]);
}

// ===================================================================

class PostWorkflowVersionsUnPublishRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostWorkflowVersionsUnPublishRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostWorkflowVersionsUnPublishRequest::_Internal::user_app_id(const PostWorkflowVersionsUnPublishRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PostWorkflowVersionsUnPublishRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
PostWorkflowVersionsUnPublishRequest::PostWorkflowVersionsUnPublishRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostWorkflowVersionsUnPublishRequest)
}
PostWorkflowVersionsUnPublishRequest::PostWorkflowVersionsUnPublishRequest(const PostWorkflowVersionsUnPublishRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostWorkflowVersionsUnPublishRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.publications_){from._impl_.publications_}
    , decltype(_impl_.workflow_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.workflow_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workflow_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workflow_id().empty()) {
    _this->_impl_.workflow_id_.Set(from._internal_workflow_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostWorkflowVersionsUnPublishRequest)
}

inline void PostWorkflowVersionsUnPublishRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.publications_){arena}
    , decltype(_impl_.workflow_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.workflow_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workflow_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PostWorkflowVersionsUnPublishRequest::~PostWorkflowVersionsUnPublishRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostWorkflowVersionsUnPublishRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostWorkflowVersionsUnPublishRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.publications_.~RepeatedPtrField();
  _impl_.workflow_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PostWorkflowVersionsUnPublishRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostWorkflowVersionsUnPublishRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostWorkflowVersionsUnPublishRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.publications_.Clear();
  _impl_.workflow_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostWorkflowVersionsUnPublishRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string workflow_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_workflow_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PostWorkflowVersionsUnPublishRequest.workflow_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.WorkflowVersionUnPublishRequest publications = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_publications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostWorkflowVersionsUnPublishRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostWorkflowVersionsUnPublishRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_id().data(), static_cast<int>(this->_internal_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostWorkflowVersionsUnPublishRequest.workflow_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_workflow_id(), target);
  }

  // repeated .clarifai.api.WorkflowVersionUnPublishRequest publications = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_publications_size()); i < n; i++) {
    const auto& repfield = this->_internal_publications(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostWorkflowVersionsUnPublishRequest)
  return target;
}

size_t PostWorkflowVersionsUnPublishRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostWorkflowVersionsUnPublishRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.WorkflowVersionUnPublishRequest publications = 3;
  total_size += 1UL * this->_internal_publications_size();
  for (const auto& msg : this->_impl_.publications_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostWorkflowVersionsUnPublishRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostWorkflowVersionsUnPublishRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostWorkflowVersionsUnPublishRequest::GetClassData() const { return &_class_data_; }


void PostWorkflowVersionsUnPublishRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostWorkflowVersionsUnPublishRequest*>(&to_msg);
  auto& from = static_cast<const PostWorkflowVersionsUnPublishRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostWorkflowVersionsUnPublishRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.publications_.MergeFrom(from._impl_.publications_);
  if (!from._internal_workflow_id().empty()) {
    _this->_internal_set_workflow_id(from._internal_workflow_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostWorkflowVersionsUnPublishRequest::CopyFrom(const PostWorkflowVersionsUnPublishRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostWorkflowVersionsUnPublishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostWorkflowVersionsUnPublishRequest::IsInitialized() const {
  return true;
}

void PostWorkflowVersionsUnPublishRequest::InternalSwap(PostWorkflowVersionsUnPublishRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.publications_.InternalSwap(&other->_impl_.publications_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.workflow_id_, lhs_arena,
      &other->_impl_.workflow_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostWorkflowVersionsUnPublishRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[133]);
}

// ===================================================================

class PostWorkflowVersionsPublishRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostWorkflowVersionsPublishRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostWorkflowVersionsPublishRequest::_Internal::user_app_id(const PostWorkflowVersionsPublishRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PostWorkflowVersionsPublishRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
PostWorkflowVersionsPublishRequest::PostWorkflowVersionsPublishRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostWorkflowVersionsPublishRequest)
}
PostWorkflowVersionsPublishRequest::PostWorkflowVersionsPublishRequest(const PostWorkflowVersionsPublishRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostWorkflowVersionsPublishRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.publications_){from._impl_.publications_}
    , decltype(_impl_.workflow_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.workflow_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workflow_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workflow_id().empty()) {
    _this->_impl_.workflow_id_.Set(from._internal_workflow_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostWorkflowVersionsPublishRequest)
}

inline void PostWorkflowVersionsPublishRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.publications_){arena}
    , decltype(_impl_.workflow_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.workflow_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workflow_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PostWorkflowVersionsPublishRequest::~PostWorkflowVersionsPublishRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostWorkflowVersionsPublishRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostWorkflowVersionsPublishRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.publications_.~RepeatedPtrField();
  _impl_.workflow_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PostWorkflowVersionsPublishRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostWorkflowVersionsPublishRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostWorkflowVersionsPublishRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.publications_.Clear();
  _impl_.workflow_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostWorkflowVersionsPublishRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string workflow_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_workflow_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PostWorkflowVersionsPublishRequest.workflow_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.WorkflowVersionPublishRequest publications = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_publications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostWorkflowVersionsPublishRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostWorkflowVersionsPublishRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_id().data(), static_cast<int>(this->_internal_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostWorkflowVersionsPublishRequest.workflow_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_workflow_id(), target);
  }

  // repeated .clarifai.api.WorkflowVersionPublishRequest publications = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_publications_size()); i < n; i++) {
    const auto& repfield = this->_internal_publications(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostWorkflowVersionsPublishRequest)
  return target;
}

size_t PostWorkflowVersionsPublishRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostWorkflowVersionsPublishRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.WorkflowVersionPublishRequest publications = 3;
  total_size += 1UL * this->_internal_publications_size();
  for (const auto& msg : this->_impl_.publications_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostWorkflowVersionsPublishRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostWorkflowVersionsPublishRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostWorkflowVersionsPublishRequest::GetClassData() const { return &_class_data_; }


void PostWorkflowVersionsPublishRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostWorkflowVersionsPublishRequest*>(&to_msg);
  auto& from = static_cast<const PostWorkflowVersionsPublishRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostWorkflowVersionsPublishRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.publications_.MergeFrom(from._impl_.publications_);
  if (!from._internal_workflow_id().empty()) {
    _this->_internal_set_workflow_id(from._internal_workflow_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostWorkflowVersionsPublishRequest::CopyFrom(const PostWorkflowVersionsPublishRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostWorkflowVersionsPublishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostWorkflowVersionsPublishRequest::IsInitialized() const {
  return true;
}

void PostWorkflowVersionsPublishRequest::InternalSwap(PostWorkflowVersionsPublishRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.publications_.InternalSwap(&other->_impl_.publications_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.workflow_id_, lhs_arena,
      &other->_impl_.workflow_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostWorkflowVersionsPublishRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[134]);
}

// ===================================================================

class WorkflowVersionPublishRequest::_Internal {
 public:
};

WorkflowVersionPublishRequest::WorkflowVersionPublishRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.WorkflowVersionPublishRequest)
}
WorkflowVersionPublishRequest::WorkflowVersionPublishRequest(const WorkflowVersionPublishRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorkflowVersionPublishRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version_id().empty()) {
    _this->_impl_.version_id_.Set(from._internal_version_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.WorkflowVersionPublishRequest)
}

inline void WorkflowVersionPublishRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WorkflowVersionPublishRequest::~WorkflowVersionPublishRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.WorkflowVersionPublishRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkflowVersionPublishRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_id_.Destroy();
}

void WorkflowVersionPublishRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkflowVersionPublishRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.WorkflowVersionPublishRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkflowVersionPublishRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.WorkflowVersionPublishRequest.version_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkflowVersionPublishRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.WorkflowVersionPublishRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version_id = 1;
  if (!this->_internal_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.WorkflowVersionPublishRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.WorkflowVersionPublishRequest)
  return target;
}

size_t WorkflowVersionPublishRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.WorkflowVersionPublishRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version_id = 1;
  if (!this->_internal_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkflowVersionPublishRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorkflowVersionPublishRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkflowVersionPublishRequest::GetClassData() const { return &_class_data_; }


void WorkflowVersionPublishRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorkflowVersionPublishRequest*>(&to_msg);
  auto& from = static_cast<const WorkflowVersionPublishRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.WorkflowVersionPublishRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version_id().empty()) {
    _this->_internal_set_version_id(from._internal_version_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkflowVersionPublishRequest::CopyFrom(const WorkflowVersionPublishRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.WorkflowVersionPublishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowVersionPublishRequest::IsInitialized() const {
  return true;
}

void WorkflowVersionPublishRequest::InternalSwap(WorkflowVersionPublishRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_id_, lhs_arena,
      &other->_impl_.version_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowVersionPublishRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[135]);
}

// ===================================================================

class WorkflowVersionUnPublishRequest::_Internal {
 public:
};

WorkflowVersionUnPublishRequest::WorkflowVersionUnPublishRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.WorkflowVersionUnPublishRequest)
}
WorkflowVersionUnPublishRequest::WorkflowVersionUnPublishRequest(const WorkflowVersionUnPublishRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorkflowVersionUnPublishRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version_id().empty()) {
    _this->_impl_.version_id_.Set(from._internal_version_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.WorkflowVersionUnPublishRequest)
}

inline void WorkflowVersionUnPublishRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WorkflowVersionUnPublishRequest::~WorkflowVersionUnPublishRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.WorkflowVersionUnPublishRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkflowVersionUnPublishRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_id_.Destroy();
}

void WorkflowVersionUnPublishRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkflowVersionUnPublishRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.WorkflowVersionUnPublishRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkflowVersionUnPublishRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.WorkflowVersionUnPublishRequest.version_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkflowVersionUnPublishRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.WorkflowVersionUnPublishRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version_id = 1;
  if (!this->_internal_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.WorkflowVersionUnPublishRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.WorkflowVersionUnPublishRequest)
  return target;
}

size_t WorkflowVersionUnPublishRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.WorkflowVersionUnPublishRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version_id = 1;
  if (!this->_internal_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkflowVersionUnPublishRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorkflowVersionUnPublishRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkflowVersionUnPublishRequest::GetClassData() const { return &_class_data_; }


void WorkflowVersionUnPublishRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorkflowVersionUnPublishRequest*>(&to_msg);
  auto& from = static_cast<const WorkflowVersionUnPublishRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.WorkflowVersionUnPublishRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version_id().empty()) {
    _this->_internal_set_version_id(from._internal_version_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkflowVersionUnPublishRequest::CopyFrom(const WorkflowVersionUnPublishRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.WorkflowVersionUnPublishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowVersionUnPublishRequest::IsInitialized() const {
  return true;
}

void WorkflowVersionUnPublishRequest::InternalSwap(WorkflowVersionUnPublishRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_id_, lhs_arena,
      &other->_impl_.version_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowVersionUnPublishRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[136]);
}

// ===================================================================

class ModelVersionPublishRequest::_Internal {
 public:
};

ModelVersionPublishRequest::ModelVersionPublishRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ModelVersionPublishRequest)
}
ModelVersionPublishRequest::ModelVersionPublishRequest(const ModelVersionPublishRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModelVersionPublishRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version_id().empty()) {
    _this->_impl_.version_id_.Set(from._internal_version_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ModelVersionPublishRequest)
}

inline void ModelVersionPublishRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModelVersionPublishRequest::~ModelVersionPublishRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ModelVersionPublishRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelVersionPublishRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_id_.Destroy();
}

void ModelVersionPublishRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModelVersionPublishRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ModelVersionPublishRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelVersionPublishRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModelVersionPublishRequest.version_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelVersionPublishRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ModelVersionPublishRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version_id = 1;
  if (!this->_internal_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelVersionPublishRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ModelVersionPublishRequest)
  return target;
}

size_t ModelVersionPublishRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ModelVersionPublishRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version_id = 1;
  if (!this->_internal_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelVersionPublishRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModelVersionPublishRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelVersionPublishRequest::GetClassData() const { return &_class_data_; }


void ModelVersionPublishRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModelVersionPublishRequest*>(&to_msg);
  auto& from = static_cast<const ModelVersionPublishRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ModelVersionPublishRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version_id().empty()) {
    _this->_internal_set_version_id(from._internal_version_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelVersionPublishRequest::CopyFrom(const ModelVersionPublishRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ModelVersionPublishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelVersionPublishRequest::IsInitialized() const {
  return true;
}

void ModelVersionPublishRequest::InternalSwap(ModelVersionPublishRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_id_, lhs_arena,
      &other->_impl_.version_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelVersionPublishRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[137]);
}

// ===================================================================

class PostModelVersionsPublishRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostModelVersionsPublishRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostModelVersionsPublishRequest::_Internal::user_app_id(const PostModelVersionsPublishRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PostModelVersionsPublishRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
PostModelVersionsPublishRequest::PostModelVersionsPublishRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostModelVersionsPublishRequest)
}
PostModelVersionsPublishRequest::PostModelVersionsPublishRequest(const PostModelVersionsPublishRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostModelVersionsPublishRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.publications_){from._impl_.publications_}
    , decltype(_impl_.model_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    _this->_impl_.model_id_.Set(from._internal_model_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostModelVersionsPublishRequest)
}

inline void PostModelVersionsPublishRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.publications_){arena}
    , decltype(_impl_.model_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PostModelVersionsPublishRequest::~PostModelVersionsPublishRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostModelVersionsPublishRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostModelVersionsPublishRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.publications_.~RepeatedPtrField();
  _impl_.model_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PostModelVersionsPublishRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostModelVersionsPublishRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostModelVersionsPublishRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.publications_.Clear();
  _impl_.model_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostModelVersionsPublishRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PostModelVersionsPublishRequest.model_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModelVersionPublishRequest publications = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_publications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostModelVersionsPublishRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostModelVersionsPublishRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostModelVersionsPublishRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // repeated .clarifai.api.ModelVersionPublishRequest publications = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_publications_size()); i < n; i++) {
    const auto& repfield = this->_internal_publications(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostModelVersionsPublishRequest)
  return target;
}

size_t PostModelVersionsPublishRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostModelVersionsPublishRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ModelVersionPublishRequest publications = 3;
  total_size += 1UL * this->_internal_publications_size();
  for (const auto& msg : this->_impl_.publications_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostModelVersionsPublishRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostModelVersionsPublishRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostModelVersionsPublishRequest::GetClassData() const { return &_class_data_; }


void PostModelVersionsPublishRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostModelVersionsPublishRequest*>(&to_msg);
  auto& from = static_cast<const PostModelVersionsPublishRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostModelVersionsPublishRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.publications_.MergeFrom(from._impl_.publications_);
  if (!from._internal_model_id().empty()) {
    _this->_internal_set_model_id(from._internal_model_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostModelVersionsPublishRequest::CopyFrom(const PostModelVersionsPublishRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostModelVersionsPublishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostModelVersionsPublishRequest::IsInitialized() const {
  return true;
}

void PostModelVersionsPublishRequest::InternalSwap(PostModelVersionsPublishRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.publications_.InternalSwap(&other->_impl_.publications_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_id_, lhs_arena,
      &other->_impl_.model_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostModelVersionsPublishRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[138]);
}

// ===================================================================

class ModelVersionUnpublishRequest::_Internal {
 public:
};

ModelVersionUnpublishRequest::ModelVersionUnpublishRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ModelVersionUnpublishRequest)
}
ModelVersionUnpublishRequest::ModelVersionUnpublishRequest(const ModelVersionUnpublishRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModelVersionUnpublishRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version_id().empty()) {
    _this->_impl_.version_id_.Set(from._internal_version_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ModelVersionUnpublishRequest)
}

inline void ModelVersionUnpublishRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModelVersionUnpublishRequest::~ModelVersionUnpublishRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ModelVersionUnpublishRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModelVersionUnpublishRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_id_.Destroy();
}

void ModelVersionUnpublishRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModelVersionUnpublishRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ModelVersionUnpublishRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelVersionUnpublishRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ModelVersionUnpublishRequest.version_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelVersionUnpublishRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ModelVersionUnpublishRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version_id = 1;
  if (!this->_internal_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelVersionUnpublishRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ModelVersionUnpublishRequest)
  return target;
}

size_t ModelVersionUnpublishRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ModelVersionUnpublishRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version_id = 1;
  if (!this->_internal_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelVersionUnpublishRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModelVersionUnpublishRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelVersionUnpublishRequest::GetClassData() const { return &_class_data_; }


void ModelVersionUnpublishRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModelVersionUnpublishRequest*>(&to_msg);
  auto& from = static_cast<const ModelVersionUnpublishRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ModelVersionUnpublishRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version_id().empty()) {
    _this->_internal_set_version_id(from._internal_version_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelVersionUnpublishRequest::CopyFrom(const ModelVersionUnpublishRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ModelVersionUnpublishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelVersionUnpublishRequest::IsInitialized() const {
  return true;
}

void ModelVersionUnpublishRequest::InternalSwap(ModelVersionUnpublishRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_id_, lhs_arena,
      &other->_impl_.version_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelVersionUnpublishRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[139]);
}

// ===================================================================

class PostModelVersionsUnPublishRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostModelVersionsUnPublishRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostModelVersionsUnPublishRequest::_Internal::user_app_id(const PostModelVersionsUnPublishRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PostModelVersionsUnPublishRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
PostModelVersionsUnPublishRequest::PostModelVersionsUnPublishRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostModelVersionsUnPublishRequest)
}
PostModelVersionsUnPublishRequest::PostModelVersionsUnPublishRequest(const PostModelVersionsUnPublishRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostModelVersionsUnPublishRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.publications_){from._impl_.publications_}
    , decltype(_impl_.model_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    _this->_impl_.model_id_.Set(from._internal_model_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostModelVersionsUnPublishRequest)
}

inline void PostModelVersionsUnPublishRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.publications_){arena}
    , decltype(_impl_.model_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PostModelVersionsUnPublishRequest::~PostModelVersionsUnPublishRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostModelVersionsUnPublishRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostModelVersionsUnPublishRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.publications_.~RepeatedPtrField();
  _impl_.model_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PostModelVersionsUnPublishRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostModelVersionsUnPublishRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostModelVersionsUnPublishRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.publications_.Clear();
  _impl_.model_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostModelVersionsUnPublishRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PostModelVersionsUnPublishRequest.model_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModelVersionUnpublishRequest publications = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_publications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostModelVersionsUnPublishRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostModelVersionsUnPublishRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostModelVersionsUnPublishRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // repeated .clarifai.api.ModelVersionUnpublishRequest publications = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_publications_size()); i < n; i++) {
    const auto& repfield = this->_internal_publications(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostModelVersionsUnPublishRequest)
  return target;
}

size_t PostModelVersionsUnPublishRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostModelVersionsUnPublishRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ModelVersionUnpublishRequest publications = 3;
  total_size += 1UL * this->_internal_publications_size();
  for (const auto& msg : this->_impl_.publications_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostModelVersionsUnPublishRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostModelVersionsUnPublishRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostModelVersionsUnPublishRequest::GetClassData() const { return &_class_data_; }


void PostModelVersionsUnPublishRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostModelVersionsUnPublishRequest*>(&to_msg);
  auto& from = static_cast<const PostModelVersionsUnPublishRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostModelVersionsUnPublishRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.publications_.MergeFrom(from._impl_.publications_);
  if (!from._internal_model_id().empty()) {
    _this->_internal_set_model_id(from._internal_model_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostModelVersionsUnPublishRequest::CopyFrom(const PostModelVersionsUnPublishRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostModelVersionsUnPublishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostModelVersionsUnPublishRequest::IsInitialized() const {
  return true;
}

void PostModelVersionsUnPublishRequest::InternalSwap(PostModelVersionsUnPublishRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.publications_.InternalSwap(&other->_impl_.publications_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_id_, lhs_arena,
      &other->_impl_.model_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostModelVersionsUnPublishRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[140]);
}

// ===================================================================

class PostModelVersionEvaluationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostModelVersionEvaluationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostModelVersionEvaluationsRequest::_Internal::user_app_id(const PostModelVersionEvaluationsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PostModelVersionEvaluationsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostModelVersionEvaluationsRequest::clear_eval_metrics() {
  _impl_.eval_metrics_.Clear();
}
PostModelVersionEvaluationsRequest::PostModelVersionEvaluationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostModelVersionEvaluationsRequest)
}
PostModelVersionEvaluationsRequest::PostModelVersionEvaluationsRequest(const PostModelVersionEvaluationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostModelVersionEvaluationsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.eval_metrics_){from._impl_.eval_metrics_}
    , decltype(_impl_.model_id_){}
    , decltype(_impl_.model_version_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    _this->_impl_.model_id_.Set(from._internal_model_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.model_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_version_id().empty()) {
    _this->_impl_.model_version_id_.Set(from._internal_model_version_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostModelVersionEvaluationsRequest)
}

inline void PostModelVersionEvaluationsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.eval_metrics_){arena}
    , decltype(_impl_.model_id_){}
    , decltype(_impl_.model_version_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PostModelVersionEvaluationsRequest::~PostModelVersionEvaluationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostModelVersionEvaluationsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostModelVersionEvaluationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.eval_metrics_.~RepeatedPtrField();
  _impl_.model_id_.Destroy();
  _impl_.model_version_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PostModelVersionEvaluationsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostModelVersionEvaluationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostModelVersionEvaluationsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.eval_metrics_.Clear();
  _impl_.model_id_.ClearToEmpty();
  _impl_.model_version_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostModelVersionEvaluationsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PostModelVersionEvaluationsRequest.model_id"));
        } else
          goto handle_unusual;
        continue;
      // string model_version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_model_version_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PostModelVersionEvaluationsRequest.model_version_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.EvalMetrics eval_metrics = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_eval_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostModelVersionEvaluationsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostModelVersionEvaluationsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostModelVersionEvaluationsRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string model_version_id = 3;
  if (!this->_internal_model_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_version_id().data(), static_cast<int>(this->_internal_model_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostModelVersionEvaluationsRequest.model_version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model_version_id(), target);
  }

  // repeated .clarifai.api.EvalMetrics eval_metrics = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_eval_metrics_size()); i < n; i++) {
    const auto& repfield = this->_internal_eval_metrics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostModelVersionEvaluationsRequest)
  return target;
}

size_t PostModelVersionEvaluationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostModelVersionEvaluationsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.EvalMetrics eval_metrics = 4;
  total_size += 1UL * this->_internal_eval_metrics_size();
  for (const auto& msg : this->_impl_.eval_metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string model_version_id = 3;
  if (!this->_internal_model_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostModelVersionEvaluationsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostModelVersionEvaluationsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostModelVersionEvaluationsRequest::GetClassData() const { return &_class_data_; }


void PostModelVersionEvaluationsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostModelVersionEvaluationsRequest*>(&to_msg);
  auto& from = static_cast<const PostModelVersionEvaluationsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostModelVersionEvaluationsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.eval_metrics_.MergeFrom(from._impl_.eval_metrics_);
  if (!from._internal_model_id().empty()) {
    _this->_internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_model_version_id().empty()) {
    _this->_internal_set_model_version_id(from._internal_model_version_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostModelVersionEvaluationsRequest::CopyFrom(const PostModelVersionEvaluationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostModelVersionEvaluationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostModelVersionEvaluationsRequest::IsInitialized() const {
  return true;
}

void PostModelVersionEvaluationsRequest::InternalSwap(PostModelVersionEvaluationsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.eval_metrics_.InternalSwap(&other->_impl_.eval_metrics_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_id_, lhs_arena,
      &other->_impl_.model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_version_id_, lhs_arena,
      &other->_impl_.model_version_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostModelVersionEvaluationsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[141]);
}

// ===================================================================

class ListModelVersionEvaluationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListModelVersionEvaluationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListModelVersionEvaluationsRequest::_Internal::user_app_id(const ListModelVersionEvaluationsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListModelVersionEvaluationsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
ListModelVersionEvaluationsRequest::ListModelVersionEvaluationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListModelVersionEvaluationsRequest)
}
ListModelVersionEvaluationsRequest::ListModelVersionEvaluationsRequest(const ListModelVersionEvaluationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListModelVersionEvaluationsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.model_id_){}
    , decltype(_impl_.model_version_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    _this->_impl_.model_id_.Set(from._internal_model_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.model_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_version_id().empty()) {
    _this->_impl_.model_version_id_.Set(from._internal_model_version_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.per_page_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListModelVersionEvaluationsRequest)
}

inline void ListModelVersionEvaluationsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.model_id_){}
    , decltype(_impl_.model_version_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListModelVersionEvaluationsRequest::~ListModelVersionEvaluationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListModelVersionEvaluationsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListModelVersionEvaluationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_id_.Destroy();
  _impl_.model_version_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void ListModelVersionEvaluationsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListModelVersionEvaluationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListModelVersionEvaluationsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.model_id_.ClearToEmpty();
  _impl_.model_version_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.per_page_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListModelVersionEvaluationsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListModelVersionEvaluationsRequest.model_id"));
        } else
          goto handle_unusual;
        continue;
      // string model_version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_model_version_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListModelVersionEvaluationsRequest.model_version_id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListModelVersionEvaluationsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListModelVersionEvaluationsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelVersionEvaluationsRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string model_version_id = 3;
  if (!this->_internal_model_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_version_id().data(), static_cast<int>(this->_internal_model_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelVersionEvaluationsRequest.model_version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model_version_id(), target);
  }

  // uint32 page = 4;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_page(), target);
  }

  // uint32 per_page = 5;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListModelVersionEvaluationsRequest)
  return target;
}

size_t ListModelVersionEvaluationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListModelVersionEvaluationsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string model_version_id = 3;
  if (!this->_internal_model_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // uint32 page = 4;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 5;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListModelVersionEvaluationsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListModelVersionEvaluationsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListModelVersionEvaluationsRequest::GetClassData() const { return &_class_data_; }


void ListModelVersionEvaluationsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListModelVersionEvaluationsRequest*>(&to_msg);
  auto& from = static_cast<const ListModelVersionEvaluationsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListModelVersionEvaluationsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_model_id().empty()) {
    _this->_internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_model_version_id().empty()) {
    _this->_internal_set_model_version_id(from._internal_model_version_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListModelVersionEvaluationsRequest::CopyFrom(const ListModelVersionEvaluationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListModelVersionEvaluationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListModelVersionEvaluationsRequest::IsInitialized() const {
  return true;
}

void ListModelVersionEvaluationsRequest::InternalSwap(ListModelVersionEvaluationsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_id_, lhs_arena,
      &other->_impl_.model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_version_id_, lhs_arena,
      &other->_impl_.model_version_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListModelVersionEvaluationsRequest, _impl_.per_page_)
      + sizeof(ListModelVersionEvaluationsRequest::_impl_.per_page_)
      - PROTOBUF_FIELD_OFFSET(ListModelVersionEvaluationsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListModelVersionEvaluationsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[142]);
}

// ===================================================================

class GetModelVersionEvaluationRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetModelVersionEvaluationRequest* msg);
  static const ::clarifai::api::FieldsValue& fields(const GetModelVersionEvaluationRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetModelVersionEvaluationRequest::_Internal::user_app_id(const GetModelVersionEvaluationRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
const ::clarifai::api::FieldsValue&
GetModelVersionEvaluationRequest::_Internal::fields(const GetModelVersionEvaluationRequest* msg) {
  return *msg->_impl_.fields_;
}
void GetModelVersionEvaluationRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void GetModelVersionEvaluationRequest::clear_fields() {
  if (GetArenaForAllocation() == nullptr && _impl_.fields_ != nullptr) {
    delete _impl_.fields_;
  }
  _impl_.fields_ = nullptr;
}
GetModelVersionEvaluationRequest::GetModelVersionEvaluationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetModelVersionEvaluationRequest)
}
GetModelVersionEvaluationRequest::GetModelVersionEvaluationRequest(const GetModelVersionEvaluationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetModelVersionEvaluationRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.model_id_){}
    , decltype(_impl_.model_version_id_){}
    , decltype(_impl_.evaluation_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.fields_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    _this->_impl_.model_id_.Set(from._internal_model_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.model_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_version_id().empty()) {
    _this->_impl_.model_version_id_.Set(from._internal_model_version_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.evaluation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.evaluation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_evaluation_id().empty()) {
    _this->_impl_.evaluation_id_.Set(from._internal_evaluation_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  if (from._internal_has_fields()) {
    _this->_impl_.fields_ = new ::clarifai::api::FieldsValue(*from._impl_.fields_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetModelVersionEvaluationRequest)
}

inline void GetModelVersionEvaluationRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.model_id_){}
    , decltype(_impl_.model_version_id_){}
    , decltype(_impl_.evaluation_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.fields_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.evaluation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.evaluation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetModelVersionEvaluationRequest::~GetModelVersionEvaluationRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetModelVersionEvaluationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetModelVersionEvaluationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_id_.Destroy();
  _impl_.model_version_id_.Destroy();
  _impl_.evaluation_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
  if (this != internal_default_instance()) delete _impl_.fields_;
}

void GetModelVersionEvaluationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetModelVersionEvaluationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetModelVersionEvaluationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.model_id_.ClearToEmpty();
  _impl_.model_version_id_.ClearToEmpty();
  _impl_.evaluation_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fields_ != nullptr) {
    delete _impl_.fields_;
  }
  _impl_.fields_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetModelVersionEvaluationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetModelVersionEvaluationRequest.model_id"));
        } else
          goto handle_unusual;
        continue;
      // string model_version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_model_version_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetModelVersionEvaluationRequest.model_version_id"));
        } else
          goto handle_unusual;
        continue;
      // string evaluation_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_evaluation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetModelVersionEvaluationRequest.evaluation_id"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.FieldsValue fields = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_fields(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetModelVersionEvaluationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetModelVersionEvaluationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelVersionEvaluationRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string model_version_id = 3;
  if (!this->_internal_model_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_version_id().data(), static_cast<int>(this->_internal_model_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelVersionEvaluationRequest.model_version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model_version_id(), target);
  }

  // string evaluation_id = 4;
  if (!this->_internal_evaluation_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_evaluation_id().data(), static_cast<int>(this->_internal_evaluation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelVersionEvaluationRequest.evaluation_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_evaluation_id(), target);
  }

  // .clarifai.api.FieldsValue fields = 5;
  if (this->_internal_has_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::fields(this),
        _Internal::fields(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetModelVersionEvaluationRequest)
  return target;
}

size_t GetModelVersionEvaluationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetModelVersionEvaluationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string model_version_id = 3;
  if (!this->_internal_model_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_version_id());
  }

  // string evaluation_id = 4;
  if (!this->_internal_evaluation_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_evaluation_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // .clarifai.api.FieldsValue fields = 5;
  if (this->_internal_has_fields()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fields_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetModelVersionEvaluationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetModelVersionEvaluationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetModelVersionEvaluationRequest::GetClassData() const { return &_class_data_; }


void GetModelVersionEvaluationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetModelVersionEvaluationRequest*>(&to_msg);
  auto& from = static_cast<const GetModelVersionEvaluationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetModelVersionEvaluationRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_model_id().empty()) {
    _this->_internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_model_version_id().empty()) {
    _this->_internal_set_model_version_id(from._internal_model_version_id());
  }
  if (!from._internal_evaluation_id().empty()) {
    _this->_internal_set_evaluation_id(from._internal_evaluation_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_has_fields()) {
    _this->_internal_mutable_fields()->::clarifai::api::FieldsValue::MergeFrom(
        from._internal_fields());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetModelVersionEvaluationRequest::CopyFrom(const GetModelVersionEvaluationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetModelVersionEvaluationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModelVersionEvaluationRequest::IsInitialized() const {
  return true;
}

void GetModelVersionEvaluationRequest::InternalSwap(GetModelVersionEvaluationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_id_, lhs_arena,
      &other->_impl_.model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_version_id_, lhs_arena,
      &other->_impl_.model_version_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.evaluation_id_, lhs_arena,
      &other->_impl_.evaluation_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetModelVersionEvaluationRequest, _impl_.fields_)
      + sizeof(GetModelVersionEvaluationRequest::_impl_.fields_)
      - PROTOBUF_FIELD_OFFSET(GetModelVersionEvaluationRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetModelVersionEvaluationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[143]);
}

// ===================================================================

class SingleEvalMetricsResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleEvalMetricsResponse* msg);
  static const ::clarifai::api::EvalMetrics& eval_metrics(const SingleEvalMetricsResponse* msg);
};

const ::clarifai::api::status::Status&
SingleEvalMetricsResponse::_Internal::status(const SingleEvalMetricsResponse* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::EvalMetrics&
SingleEvalMetricsResponse::_Internal::eval_metrics(const SingleEvalMetricsResponse* msg) {
  return *msg->_impl_.eval_metrics_;
}
void SingleEvalMetricsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void SingleEvalMetricsResponse::clear_eval_metrics() {
  if (GetArenaForAllocation() == nullptr && _impl_.eval_metrics_ != nullptr) {
    delete _impl_.eval_metrics_;
  }
  _impl_.eval_metrics_ = nullptr;
}
SingleEvalMetricsResponse::SingleEvalMetricsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleEvalMetricsResponse)
}
SingleEvalMetricsResponse::SingleEvalMetricsResponse(const SingleEvalMetricsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleEvalMetricsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.eval_metrics_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_eval_metrics()) {
    _this->_impl_.eval_metrics_ = new ::clarifai::api::EvalMetrics(*from._impl_.eval_metrics_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleEvalMetricsResponse)
}

inline void SingleEvalMetricsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.eval_metrics_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SingleEvalMetricsResponse::~SingleEvalMetricsResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleEvalMetricsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleEvalMetricsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.eval_metrics_;
}

void SingleEvalMetricsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleEvalMetricsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleEvalMetricsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.eval_metrics_ != nullptr) {
    delete _impl_.eval_metrics_;
  }
  _impl_.eval_metrics_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleEvalMetricsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.EvalMetrics eval_metrics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_eval_metrics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleEvalMetricsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleEvalMetricsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.EvalMetrics eval_metrics = 2;
  if (this->_internal_has_eval_metrics()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::eval_metrics(this),
        _Internal::eval_metrics(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleEvalMetricsResponse)
  return target;
}

size_t SingleEvalMetricsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleEvalMetricsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.EvalMetrics eval_metrics = 2;
  if (this->_internal_has_eval_metrics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.eval_metrics_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleEvalMetricsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleEvalMetricsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleEvalMetricsResponse::GetClassData() const { return &_class_data_; }


void SingleEvalMetricsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleEvalMetricsResponse*>(&to_msg);
  auto& from = static_cast<const SingleEvalMetricsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleEvalMetricsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_eval_metrics()) {
    _this->_internal_mutable_eval_metrics()->::clarifai::api::EvalMetrics::MergeFrom(
        from._internal_eval_metrics());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleEvalMetricsResponse::CopyFrom(const SingleEvalMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleEvalMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleEvalMetricsResponse::IsInitialized() const {
  return true;
}

void SingleEvalMetricsResponse::InternalSwap(SingleEvalMetricsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleEvalMetricsResponse, _impl_.eval_metrics_)
      + sizeof(SingleEvalMetricsResponse::_impl_.eval_metrics_)
      - PROTOBUF_FIELD_OFFSET(SingleEvalMetricsResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleEvalMetricsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[144]);
}

// ===================================================================

class MultiEvalMetricsResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiEvalMetricsResponse* msg);
};

const ::clarifai::api::status::Status&
MultiEvalMetricsResponse::_Internal::status(const MultiEvalMetricsResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiEvalMetricsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiEvalMetricsResponse::clear_eval_metrics() {
  _impl_.eval_metrics_.Clear();
}
MultiEvalMetricsResponse::MultiEvalMetricsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiEvalMetricsResponse)
}
MultiEvalMetricsResponse::MultiEvalMetricsResponse(const MultiEvalMetricsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiEvalMetricsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.eval_metrics_){from._impl_.eval_metrics_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiEvalMetricsResponse)
}

inline void MultiEvalMetricsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.eval_metrics_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiEvalMetricsResponse::~MultiEvalMetricsResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiEvalMetricsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiEvalMetricsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.eval_metrics_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiEvalMetricsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiEvalMetricsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiEvalMetricsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.eval_metrics_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiEvalMetricsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.EvalMetrics eval_metrics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_eval_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiEvalMetricsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiEvalMetricsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.EvalMetrics eval_metrics = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_eval_metrics_size()); i < n; i++) {
    const auto& repfield = this->_internal_eval_metrics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiEvalMetricsResponse)
  return target;
}

size_t MultiEvalMetricsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiEvalMetricsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.EvalMetrics eval_metrics = 2;
  total_size += 1UL * this->_internal_eval_metrics_size();
  for (const auto& msg : this->_impl_.eval_metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiEvalMetricsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiEvalMetricsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiEvalMetricsResponse::GetClassData() const { return &_class_data_; }


void MultiEvalMetricsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiEvalMetricsResponse*>(&to_msg);
  auto& from = static_cast<const MultiEvalMetricsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiEvalMetricsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.eval_metrics_.MergeFrom(from._impl_.eval_metrics_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiEvalMetricsResponse::CopyFrom(const MultiEvalMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiEvalMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiEvalMetricsResponse::IsInitialized() const {
  return true;
}

void MultiEvalMetricsResponse::InternalSwap(MultiEvalMetricsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.eval_metrics_.InternalSwap(&other->_impl_.eval_metrics_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiEvalMetricsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[145]);
}

// ===================================================================

class PostModelVersionMetricsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostModelVersionMetricsRequest* msg);
  static const ::clarifai::api::Search& test_search(const PostModelVersionMetricsRequest* msg);
  static const ::clarifai::api::EvalInfo& eval_info(const PostModelVersionMetricsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostModelVersionMetricsRequest::_Internal::user_app_id(const PostModelVersionMetricsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
const ::clarifai::api::Search&
PostModelVersionMetricsRequest::_Internal::test_search(const PostModelVersionMetricsRequest* msg) {
  return *msg->_impl_.test_search_;
}
const ::clarifai::api::EvalInfo&
PostModelVersionMetricsRequest::_Internal::eval_info(const PostModelVersionMetricsRequest* msg) {
  return *msg->_impl_.eval_info_;
}
void PostModelVersionMetricsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostModelVersionMetricsRequest::clear_test_search() {
  if (GetArenaForAllocation() == nullptr && _impl_.test_search_ != nullptr) {
    delete _impl_.test_search_;
  }
  _impl_.test_search_ = nullptr;
}
void PostModelVersionMetricsRequest::clear_eval_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.eval_info_ != nullptr) {
    delete _impl_.eval_info_;
  }
  _impl_.eval_info_ = nullptr;
}
PostModelVersionMetricsRequest::PostModelVersionMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostModelVersionMetricsRequest)
}
PostModelVersionMetricsRequest::PostModelVersionMetricsRequest(const PostModelVersionMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostModelVersionMetricsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.model_id_){}
    , decltype(_impl_.version_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.test_search_){nullptr}
    , decltype(_impl_.eval_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    _this->_impl_.model_id_.Set(from._internal_model_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version_id().empty()) {
    _this->_impl_.version_id_.Set(from._internal_version_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  if (from._internal_has_test_search()) {
    _this->_impl_.test_search_ = new ::clarifai::api::Search(*from._impl_.test_search_);
  }
  if (from._internal_has_eval_info()) {
    _this->_impl_.eval_info_ = new ::clarifai::api::EvalInfo(*from._impl_.eval_info_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostModelVersionMetricsRequest)
}

inline void PostModelVersionMetricsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.model_id_){}
    , decltype(_impl_.version_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.test_search_){nullptr}
    , decltype(_impl_.eval_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PostModelVersionMetricsRequest::~PostModelVersionMetricsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostModelVersionMetricsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostModelVersionMetricsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_id_.Destroy();
  _impl_.version_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
  if (this != internal_default_instance()) delete _impl_.test_search_;
  if (this != internal_default_instance()) delete _impl_.eval_info_;
}

void PostModelVersionMetricsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostModelVersionMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostModelVersionMetricsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.model_id_.ClearToEmpty();
  _impl_.version_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.test_search_ != nullptr) {
    delete _impl_.test_search_;
  }
  _impl_.test_search_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.eval_info_ != nullptr) {
    delete _impl_.eval_info_;
  }
  _impl_.eval_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostModelVersionMetricsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PostModelVersionMetricsRequest.model_id"));
        } else
          goto handle_unusual;
        continue;
      // string version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_version_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PostModelVersionMetricsRequest.version_id"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Search test_search = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_test_search(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.EvalInfo eval_info = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_eval_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostModelVersionMetricsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostModelVersionMetricsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostModelVersionMetricsRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string version_id = 3;
  if (!this->_internal_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostModelVersionMetricsRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version_id(), target);
  }

  // .clarifai.api.Search test_search = 5;
  if (this->_internal_has_test_search()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::test_search(this),
        _Internal::test_search(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.EvalInfo eval_info = 10;
  if (this->_internal_has_eval_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::eval_info(this),
        _Internal::eval_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostModelVersionMetricsRequest)
  return target;
}

size_t PostModelVersionMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostModelVersionMetricsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string version_id = 3;
  if (!this->_internal_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // .clarifai.api.Search test_search = 5;
  if (this->_internal_has_test_search()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.test_search_);
  }

  // .clarifai.api.EvalInfo eval_info = 10;
  if (this->_internal_has_eval_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.eval_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostModelVersionMetricsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostModelVersionMetricsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostModelVersionMetricsRequest::GetClassData() const { return &_class_data_; }


void PostModelVersionMetricsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostModelVersionMetricsRequest*>(&to_msg);
  auto& from = static_cast<const PostModelVersionMetricsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostModelVersionMetricsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_model_id().empty()) {
    _this->_internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_version_id().empty()) {
    _this->_internal_set_version_id(from._internal_version_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_has_test_search()) {
    _this->_internal_mutable_test_search()->::clarifai::api::Search::MergeFrom(
        from._internal_test_search());
  }
  if (from._internal_has_eval_info()) {
    _this->_internal_mutable_eval_info()->::clarifai::api::EvalInfo::MergeFrom(
        from._internal_eval_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostModelVersionMetricsRequest::CopyFrom(const PostModelVersionMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostModelVersionMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostModelVersionMetricsRequest::IsInitialized() const {
  return true;
}

void PostModelVersionMetricsRequest::InternalSwap(PostModelVersionMetricsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_id_, lhs_arena,
      &other->_impl_.model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_id_, lhs_arena,
      &other->_impl_.version_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostModelVersionMetricsRequest, _impl_.eval_info_)
      + sizeof(PostModelVersionMetricsRequest::_impl_.eval_info_)
      - PROTOBUF_FIELD_OFFSET(PostModelVersionMetricsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostModelVersionMetricsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[146]);
}

// ===================================================================

class GetModelVersionMetricsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetModelVersionMetricsRequest* msg);
  static const ::clarifai::api::FieldsValue& fields(const GetModelVersionMetricsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetModelVersionMetricsRequest::_Internal::user_app_id(const GetModelVersionMetricsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
const ::clarifai::api::FieldsValue&
GetModelVersionMetricsRequest::_Internal::fields(const GetModelVersionMetricsRequest* msg) {
  return *msg->_impl_.fields_;
}
void GetModelVersionMetricsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void GetModelVersionMetricsRequest::clear_fields() {
  if (GetArenaForAllocation() == nullptr && _impl_.fields_ != nullptr) {
    delete _impl_.fields_;
  }
  _impl_.fields_ = nullptr;
}
GetModelVersionMetricsRequest::GetModelVersionMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetModelVersionMetricsRequest)
}
GetModelVersionMetricsRequest::GetModelVersionMetricsRequest(const GetModelVersionMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetModelVersionMetricsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.model_id_){}
    , decltype(_impl_.version_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.fields_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    _this->_impl_.model_id_.Set(from._internal_model_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version_id().empty()) {
    _this->_impl_.version_id_.Set(from._internal_version_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  if (from._internal_has_fields()) {
    _this->_impl_.fields_ = new ::clarifai::api::FieldsValue(*from._impl_.fields_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetModelVersionMetricsRequest)
}

inline void GetModelVersionMetricsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.model_id_){}
    , decltype(_impl_.version_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.fields_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetModelVersionMetricsRequest::~GetModelVersionMetricsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetModelVersionMetricsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetModelVersionMetricsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_id_.Destroy();
  _impl_.version_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
  if (this != internal_default_instance()) delete _impl_.fields_;
}

void GetModelVersionMetricsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetModelVersionMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetModelVersionMetricsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.model_id_.ClearToEmpty();
  _impl_.version_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fields_ != nullptr) {
    delete _impl_.fields_;
  }
  _impl_.fields_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetModelVersionMetricsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetModelVersionMetricsRequest.model_id"));
        } else
          goto handle_unusual;
        continue;
      // string version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_version_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetModelVersionMetricsRequest.version_id"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.FieldsValue fields = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fields(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetModelVersionMetricsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetModelVersionMetricsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelVersionMetricsRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string version_id = 3;
  if (!this->_internal_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelVersionMetricsRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version_id(), target);
  }

  // .clarifai.api.FieldsValue fields = 4;
  if (this->_internal_has_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::fields(this),
        _Internal::fields(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetModelVersionMetricsRequest)
  return target;
}

size_t GetModelVersionMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetModelVersionMetricsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string version_id = 3;
  if (!this->_internal_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // .clarifai.api.FieldsValue fields = 4;
  if (this->_internal_has_fields()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fields_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetModelVersionMetricsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetModelVersionMetricsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetModelVersionMetricsRequest::GetClassData() const { return &_class_data_; }


void GetModelVersionMetricsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetModelVersionMetricsRequest*>(&to_msg);
  auto& from = static_cast<const GetModelVersionMetricsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetModelVersionMetricsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_model_id().empty()) {
    _this->_internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_version_id().empty()) {
    _this->_internal_set_version_id(from._internal_version_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_has_fields()) {
    _this->_internal_mutable_fields()->::clarifai::api::FieldsValue::MergeFrom(
        from._internal_fields());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetModelVersionMetricsRequest::CopyFrom(const GetModelVersionMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetModelVersionMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModelVersionMetricsRequest::IsInitialized() const {
  return true;
}

void GetModelVersionMetricsRequest::InternalSwap(GetModelVersionMetricsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_id_, lhs_arena,
      &other->_impl_.model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_id_, lhs_arena,
      &other->_impl_.version_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetModelVersionMetricsRequest, _impl_.fields_)
      + sizeof(GetModelVersionMetricsRequest::_impl_.fields_)
      - PROTOBUF_FIELD_OFFSET(GetModelVersionMetricsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetModelVersionMetricsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[147]);
}

// ===================================================================

class GetModelTypeRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetModelTypeRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetModelTypeRequest::_Internal::user_app_id(const GetModelTypeRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void GetModelTypeRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
GetModelTypeRequest::GetModelTypeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetModelTypeRequest)
}
GetModelTypeRequest::GetModelTypeRequest(const GetModelTypeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetModelTypeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.model_type_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_type_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_type_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_type_id().empty()) {
    _this->_impl_.model_type_id_.Set(from._internal_model_type_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetModelTypeRequest)
}

inline void GetModelTypeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.model_type_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_type_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_type_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetModelTypeRequest::~GetModelTypeRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetModelTypeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetModelTypeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_type_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void GetModelTypeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetModelTypeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetModelTypeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.model_type_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetModelTypeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_type_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_type_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetModelTypeRequest.model_type_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetModelTypeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetModelTypeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string model_type_id = 2;
  if (!this->_internal_model_type_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_type_id().data(), static_cast<int>(this->_internal_model_type_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelTypeRequest.model_type_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_type_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetModelTypeRequest)
  return target;
}

size_t GetModelTypeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetModelTypeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_type_id = 2;
  if (!this->_internal_model_type_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_type_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetModelTypeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetModelTypeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetModelTypeRequest::GetClassData() const { return &_class_data_; }


void GetModelTypeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetModelTypeRequest*>(&to_msg);
  auto& from = static_cast<const GetModelTypeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetModelTypeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_model_type_id().empty()) {
    _this->_internal_set_model_type_id(from._internal_model_type_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetModelTypeRequest::CopyFrom(const GetModelTypeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetModelTypeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModelTypeRequest::IsInitialized() const {
  return true;
}

void GetModelTypeRequest::InternalSwap(GetModelTypeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_type_id_, lhs_arena,
      &other->_impl_.model_type_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetModelTypeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[148]);
}

// ===================================================================

class ListModelTypesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListModelTypesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListModelTypesRequest::_Internal::user_app_id(const ListModelTypesRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListModelTypesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
ListModelTypesRequest::ListModelTypesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListModelTypesRequest)
}
ListModelTypesRequest::ListModelTypesRequest(const ListModelTypesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListModelTypesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.per_page_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListModelTypesRequest)
}

inline void ListModelTypesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListModelTypesRequest::~ListModelTypesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListModelTypesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListModelTypesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void ListModelTypesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListModelTypesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListModelTypesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.per_page_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListModelTypesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListModelTypesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListModelTypesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListModelTypesRequest)
  return target;
}

size_t ListModelTypesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListModelTypesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListModelTypesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListModelTypesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListModelTypesRequest::GetClassData() const { return &_class_data_; }


void ListModelTypesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListModelTypesRequest*>(&to_msg);
  auto& from = static_cast<const ListModelTypesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListModelTypesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListModelTypesRequest::CopyFrom(const ListModelTypesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListModelTypesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListModelTypesRequest::IsInitialized() const {
  return true;
}

void ListModelTypesRequest::InternalSwap(ListModelTypesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListModelTypesRequest, _impl_.per_page_)
      + sizeof(ListModelTypesRequest::_impl_.per_page_)
      - PROTOBUF_FIELD_OFFSET(ListModelTypesRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListModelTypesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[149]);
}

// ===================================================================

class ListOpenSourceLicensesRequest::_Internal {
 public:
};

ListOpenSourceLicensesRequest::ListOpenSourceLicensesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListOpenSourceLicensesRequest)
}
ListOpenSourceLicensesRequest::ListOpenSourceLicensesRequest(const ListOpenSourceLicensesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ListOpenSourceLicensesRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListOpenSourceLicensesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListOpenSourceLicensesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListOpenSourceLicensesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ListOpenSourceLicensesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[150]);
}

// ===================================================================

class ListOpenSourceLicensesResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const ListOpenSourceLicensesResponse* msg);
};

const ::clarifai::api::status::Status&
ListOpenSourceLicensesResponse::_Internal::status(const ListOpenSourceLicensesResponse* msg) {
  return *msg->_impl_.status_;
}
void ListOpenSourceLicensesResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
ListOpenSourceLicensesResponse::ListOpenSourceLicensesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListOpenSourceLicensesResponse)
}
ListOpenSourceLicensesResponse::ListOpenSourceLicensesResponse(const ListOpenSourceLicensesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListOpenSourceLicensesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.licenses_){from._impl_.licenses_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListOpenSourceLicensesResponse)
}

inline void ListOpenSourceLicensesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.licenses_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListOpenSourceLicensesResponse::~ListOpenSourceLicensesResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListOpenSourceLicensesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListOpenSourceLicensesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.licenses_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void ListOpenSourceLicensesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListOpenSourceLicensesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListOpenSourceLicensesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.licenses_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListOpenSourceLicensesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string licenses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_licenses();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListOpenSourceLicensesResponse.licenses"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListOpenSourceLicensesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListOpenSourceLicensesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated string licenses = 2;
  for (int i = 0, n = this->_internal_licenses_size(); i < n; i++) {
    const auto& s = this->_internal_licenses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListOpenSourceLicensesResponse.licenses");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListOpenSourceLicensesResponse)
  return target;
}

size_t ListOpenSourceLicensesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListOpenSourceLicensesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string licenses = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.licenses_.size());
  for (int i = 0, n = _impl_.licenses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.licenses_.Get(i));
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListOpenSourceLicensesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListOpenSourceLicensesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListOpenSourceLicensesResponse::GetClassData() const { return &_class_data_; }


void ListOpenSourceLicensesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListOpenSourceLicensesResponse*>(&to_msg);
  auto& from = static_cast<const ListOpenSourceLicensesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListOpenSourceLicensesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.licenses_.MergeFrom(from._impl_.licenses_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListOpenSourceLicensesResponse::CopyFrom(const ListOpenSourceLicensesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListOpenSourceLicensesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListOpenSourceLicensesResponse::IsInitialized() const {
  return true;
}

void ListOpenSourceLicensesResponse::InternalSwap(ListOpenSourceLicensesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.licenses_.InternalSwap(&other->_impl_.licenses_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListOpenSourceLicensesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[151]);
}

// ===================================================================

class SingleModelTypeResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleModelTypeResponse* msg);
  static const ::clarifai::api::ModelType& model_type(const SingleModelTypeResponse* msg);
};

const ::clarifai::api::status::Status&
SingleModelTypeResponse::_Internal::status(const SingleModelTypeResponse* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::ModelType&
SingleModelTypeResponse::_Internal::model_type(const SingleModelTypeResponse* msg) {
  return *msg->_impl_.model_type_;
}
void SingleModelTypeResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void SingleModelTypeResponse::clear_model_type() {
  if (GetArenaForAllocation() == nullptr && _impl_.model_type_ != nullptr) {
    delete _impl_.model_type_;
  }
  _impl_.model_type_ = nullptr;
}
SingleModelTypeResponse::SingleModelTypeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleModelTypeResponse)
}
SingleModelTypeResponse::SingleModelTypeResponse(const SingleModelTypeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleModelTypeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.model_type_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_model_type()) {
    _this->_impl_.model_type_ = new ::clarifai::api::ModelType(*from._impl_.model_type_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleModelTypeResponse)
}

inline void SingleModelTypeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.model_type_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SingleModelTypeResponse::~SingleModelTypeResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleModelTypeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleModelTypeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.model_type_;
}

void SingleModelTypeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleModelTypeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleModelTypeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.model_type_ != nullptr) {
    delete _impl_.model_type_;
  }
  _impl_.model_type_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleModelTypeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ModelType model_type = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleModelTypeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleModelTypeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.ModelType model_type = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_has_model_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::model_type(this),
        _Internal::model_type(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleModelTypeResponse)
  return target;
}

size_t SingleModelTypeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleModelTypeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.ModelType model_type = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_has_model_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.model_type_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleModelTypeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleModelTypeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleModelTypeResponse::GetClassData() const { return &_class_data_; }


void SingleModelTypeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleModelTypeResponse*>(&to_msg);
  auto& from = static_cast<const SingleModelTypeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleModelTypeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_model_type()) {
    _this->_internal_mutable_model_type()->::clarifai::api::ModelType::MergeFrom(
        from._internal_model_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleModelTypeResponse::CopyFrom(const SingleModelTypeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleModelTypeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleModelTypeResponse::IsInitialized() const {
  return true;
}

void SingleModelTypeResponse::InternalSwap(SingleModelTypeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleModelTypeResponse, _impl_.model_type_)
      + sizeof(SingleModelTypeResponse::_impl_.model_type_)
      - PROTOBUF_FIELD_OFFSET(SingleModelTypeResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleModelTypeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[152]);
}

// ===================================================================

class MultiModelTypeResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiModelTypeResponse* msg);
  static const ::clarifai::api::ModelTypeField& model_importers(const MultiModelTypeResponse* msg);
};

const ::clarifai::api::status::Status&
MultiModelTypeResponse::_Internal::status(const MultiModelTypeResponse* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::ModelTypeField&
MultiModelTypeResponse::_Internal::model_importers(const MultiModelTypeResponse* msg) {
  return *msg->_impl_.model_importers_;
}
void MultiModelTypeResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiModelTypeResponse::clear_model_types() {
  _impl_.model_types_.Clear();
}
void MultiModelTypeResponse::clear_model_importers() {
  if (GetArenaForAllocation() == nullptr && _impl_.model_importers_ != nullptr) {
    delete _impl_.model_importers_;
  }
  _impl_.model_importers_ = nullptr;
}
MultiModelTypeResponse::MultiModelTypeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiModelTypeResponse)
}
MultiModelTypeResponse::MultiModelTypeResponse(const MultiModelTypeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiModelTypeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.model_types_){from._impl_.model_types_}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.model_importers_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_model_importers()) {
    _this->_impl_.model_importers_ = new ::clarifai::api::ModelTypeField(*from._impl_.model_importers_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiModelTypeResponse)
}

inline void MultiModelTypeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.model_types_){arena}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.model_importers_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiModelTypeResponse::~MultiModelTypeResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiModelTypeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiModelTypeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_types_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.model_importers_;
}

void MultiModelTypeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiModelTypeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiModelTypeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.model_types_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.model_importers_ != nullptr) {
    delete _impl_.model_importers_;
  }
  _impl_.model_importers_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiModelTypeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModelType model_types = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ModelTypeField model_importers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_importers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiModelTypeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiModelTypeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.ModelType model_types = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_model_types_size()); i < n; i++) {
    const auto& repfield = this->_internal_model_types(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .clarifai.api.ModelTypeField model_importers = 3;
  if (this->_internal_has_model_importers()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::model_importers(this),
        _Internal::model_importers(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiModelTypeResponse)
  return target;
}

size_t MultiModelTypeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiModelTypeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ModelType model_types = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_model_types_size();
  for (const auto& msg : this->_impl_.model_types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.ModelTypeField model_importers = 3;
  if (this->_internal_has_model_importers()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.model_importers_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiModelTypeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiModelTypeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiModelTypeResponse::GetClassData() const { return &_class_data_; }


void MultiModelTypeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiModelTypeResponse*>(&to_msg);
  auto& from = static_cast<const MultiModelTypeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiModelTypeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.model_types_.MergeFrom(from._impl_.model_types_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_model_importers()) {
    _this->_internal_mutable_model_importers()->::clarifai::api::ModelTypeField::MergeFrom(
        from._internal_model_importers());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiModelTypeResponse::CopyFrom(const MultiModelTypeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiModelTypeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiModelTypeResponse::IsInitialized() const {
  return true;
}

void MultiModelTypeResponse::InternalSwap(MultiModelTypeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.model_types_.InternalSwap(&other->_impl_.model_types_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MultiModelTypeResponse, _impl_.model_importers_)
      + sizeof(MultiModelTypeResponse::_impl_.model_importers_)
      - PROTOBUF_FIELD_OFFSET(MultiModelTypeResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiModelTypeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[153]);
}

// ===================================================================

class GetModelVersionInputExampleRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetModelVersionInputExampleRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetModelVersionInputExampleRequest::_Internal::user_app_id(const GetModelVersionInputExampleRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void GetModelVersionInputExampleRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
GetModelVersionInputExampleRequest::GetModelVersionInputExampleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetModelVersionInputExampleRequest)
}
GetModelVersionInputExampleRequest::GetModelVersionInputExampleRequest(const GetModelVersionInputExampleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetModelVersionInputExampleRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.model_id_){}
    , decltype(_impl_.model_version_id_){}
    , decltype(_impl_.example_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    _this->_impl_.model_id_.Set(from._internal_model_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.model_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_version_id().empty()) {
    _this->_impl_.model_version_id_.Set(from._internal_model_version_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.example_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.example_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_example_id().empty()) {
    _this->_impl_.example_id_.Set(from._internal_example_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetModelVersionInputExampleRequest)
}

inline void GetModelVersionInputExampleRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.model_id_){}
    , decltype(_impl_.model_version_id_){}
    , decltype(_impl_.example_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.example_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.example_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetModelVersionInputExampleRequest::~GetModelVersionInputExampleRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetModelVersionInputExampleRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetModelVersionInputExampleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_id_.Destroy();
  _impl_.model_version_id_.Destroy();
  _impl_.example_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void GetModelVersionInputExampleRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetModelVersionInputExampleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetModelVersionInputExampleRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.model_id_.ClearToEmpty();
  _impl_.model_version_id_.ClearToEmpty();
  _impl_.example_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetModelVersionInputExampleRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetModelVersionInputExampleRequest.model_id"));
        } else
          goto handle_unusual;
        continue;
      // string model_version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_model_version_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetModelVersionInputExampleRequest.model_version_id"));
        } else
          goto handle_unusual;
        continue;
      // string example_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_example_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetModelVersionInputExampleRequest.example_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetModelVersionInputExampleRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetModelVersionInputExampleRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelVersionInputExampleRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string model_version_id = 3;
  if (!this->_internal_model_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_version_id().data(), static_cast<int>(this->_internal_model_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelVersionInputExampleRequest.model_version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model_version_id(), target);
  }

  // string example_id = 4;
  if (!this->_internal_example_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_example_id().data(), static_cast<int>(this->_internal_example_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelVersionInputExampleRequest.example_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_example_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetModelVersionInputExampleRequest)
  return target;
}

size_t GetModelVersionInputExampleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetModelVersionInputExampleRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string model_version_id = 3;
  if (!this->_internal_model_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_version_id());
  }

  // string example_id = 4;
  if (!this->_internal_example_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_example_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetModelVersionInputExampleRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetModelVersionInputExampleRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetModelVersionInputExampleRequest::GetClassData() const { return &_class_data_; }


void GetModelVersionInputExampleRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetModelVersionInputExampleRequest*>(&to_msg);
  auto& from = static_cast<const GetModelVersionInputExampleRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetModelVersionInputExampleRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_model_id().empty()) {
    _this->_internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_model_version_id().empty()) {
    _this->_internal_set_model_version_id(from._internal_model_version_id());
  }
  if (!from._internal_example_id().empty()) {
    _this->_internal_set_example_id(from._internal_example_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetModelVersionInputExampleRequest::CopyFrom(const GetModelVersionInputExampleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetModelVersionInputExampleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModelVersionInputExampleRequest::IsInitialized() const {
  return true;
}

void GetModelVersionInputExampleRequest::InternalSwap(GetModelVersionInputExampleRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_id_, lhs_arena,
      &other->_impl_.model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_version_id_, lhs_arena,
      &other->_impl_.model_version_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.example_id_, lhs_arena,
      &other->_impl_.example_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetModelVersionInputExampleRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[154]);
}

// ===================================================================

class ListModelVersionInputExamplesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListModelVersionInputExamplesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListModelVersionInputExamplesRequest::_Internal::user_app_id(const ListModelVersionInputExamplesRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListModelVersionInputExamplesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
ListModelVersionInputExamplesRequest::ListModelVersionInputExamplesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListModelVersionInputExamplesRequest)
}
ListModelVersionInputExamplesRequest::ListModelVersionInputExamplesRequest(const ListModelVersionInputExamplesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListModelVersionInputExamplesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.model_id_){}
    , decltype(_impl_.model_version_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    _this->_impl_.model_id_.Set(from._internal_model_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.model_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_version_id().empty()) {
    _this->_impl_.model_version_id_.Set(from._internal_model_version_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.per_page_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListModelVersionInputExamplesRequest)
}

inline void ListModelVersionInputExamplesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.model_id_){}
    , decltype(_impl_.model_version_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListModelVersionInputExamplesRequest::~ListModelVersionInputExamplesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListModelVersionInputExamplesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListModelVersionInputExamplesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_id_.Destroy();
  _impl_.model_version_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void ListModelVersionInputExamplesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListModelVersionInputExamplesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListModelVersionInputExamplesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.model_id_.ClearToEmpty();
  _impl_.model_version_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.per_page_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListModelVersionInputExamplesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListModelVersionInputExamplesRequest.model_id"));
        } else
          goto handle_unusual;
        continue;
      // string model_version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_model_version_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListModelVersionInputExamplesRequest.model_version_id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListModelVersionInputExamplesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListModelVersionInputExamplesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelVersionInputExamplesRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string model_version_id = 3;
  if (!this->_internal_model_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_version_id().data(), static_cast<int>(this->_internal_model_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelVersionInputExamplesRequest.model_version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model_version_id(), target);
  }

  // uint32 page = 4;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_page(), target);
  }

  // uint32 per_page = 5;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListModelVersionInputExamplesRequest)
  return target;
}

size_t ListModelVersionInputExamplesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListModelVersionInputExamplesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string model_version_id = 3;
  if (!this->_internal_model_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // uint32 page = 4;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 5;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListModelVersionInputExamplesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListModelVersionInputExamplesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListModelVersionInputExamplesRequest::GetClassData() const { return &_class_data_; }


void ListModelVersionInputExamplesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListModelVersionInputExamplesRequest*>(&to_msg);
  auto& from = static_cast<const ListModelVersionInputExamplesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListModelVersionInputExamplesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_model_id().empty()) {
    _this->_internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_model_version_id().empty()) {
    _this->_internal_set_model_version_id(from._internal_model_version_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListModelVersionInputExamplesRequest::CopyFrom(const ListModelVersionInputExamplesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListModelVersionInputExamplesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListModelVersionInputExamplesRequest::IsInitialized() const {
  return true;
}

void ListModelVersionInputExamplesRequest::InternalSwap(ListModelVersionInputExamplesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_id_, lhs_arena,
      &other->_impl_.model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_version_id_, lhs_arena,
      &other->_impl_.model_version_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListModelVersionInputExamplesRequest, _impl_.per_page_)
      + sizeof(ListModelVersionInputExamplesRequest::_impl_.per_page_)
      - PROTOBUF_FIELD_OFFSET(ListModelVersionInputExamplesRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListModelVersionInputExamplesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[155]);
}

// ===================================================================

class SingleModelVersionInputExampleResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleModelVersionInputExampleResponse* msg);
  static const ::clarifai::api::ModelVersionInputExample& model_version_input_example(const SingleModelVersionInputExampleResponse* msg);
};

const ::clarifai::api::status::Status&
SingleModelVersionInputExampleResponse::_Internal::status(const SingleModelVersionInputExampleResponse* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::ModelVersionInputExample&
SingleModelVersionInputExampleResponse::_Internal::model_version_input_example(const SingleModelVersionInputExampleResponse* msg) {
  return *msg->_impl_.model_version_input_example_;
}
void SingleModelVersionInputExampleResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void SingleModelVersionInputExampleResponse::clear_model_version_input_example() {
  if (GetArenaForAllocation() == nullptr && _impl_.model_version_input_example_ != nullptr) {
    delete _impl_.model_version_input_example_;
  }
  _impl_.model_version_input_example_ = nullptr;
}
SingleModelVersionInputExampleResponse::SingleModelVersionInputExampleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleModelVersionInputExampleResponse)
}
SingleModelVersionInputExampleResponse::SingleModelVersionInputExampleResponse(const SingleModelVersionInputExampleResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleModelVersionInputExampleResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.model_version_input_example_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_model_version_input_example()) {
    _this->_impl_.model_version_input_example_ = new ::clarifai::api::ModelVersionInputExample(*from._impl_.model_version_input_example_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleModelVersionInputExampleResponse)
}

inline void SingleModelVersionInputExampleResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.model_version_input_example_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SingleModelVersionInputExampleResponse::~SingleModelVersionInputExampleResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleModelVersionInputExampleResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleModelVersionInputExampleResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.model_version_input_example_;
}

void SingleModelVersionInputExampleResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleModelVersionInputExampleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleModelVersionInputExampleResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.model_version_input_example_ != nullptr) {
    delete _impl_.model_version_input_example_;
  }
  _impl_.model_version_input_example_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleModelVersionInputExampleResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ModelVersionInputExample model_version_input_example = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_version_input_example(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleModelVersionInputExampleResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleModelVersionInputExampleResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.ModelVersionInputExample model_version_input_example = 2;
  if (this->_internal_has_model_version_input_example()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::model_version_input_example(this),
        _Internal::model_version_input_example(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleModelVersionInputExampleResponse)
  return target;
}

size_t SingleModelVersionInputExampleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleModelVersionInputExampleResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.ModelVersionInputExample model_version_input_example = 2;
  if (this->_internal_has_model_version_input_example()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.model_version_input_example_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleModelVersionInputExampleResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleModelVersionInputExampleResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleModelVersionInputExampleResponse::GetClassData() const { return &_class_data_; }


void SingleModelVersionInputExampleResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleModelVersionInputExampleResponse*>(&to_msg);
  auto& from = static_cast<const SingleModelVersionInputExampleResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleModelVersionInputExampleResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_model_version_input_example()) {
    _this->_internal_mutable_model_version_input_example()->::clarifai::api::ModelVersionInputExample::MergeFrom(
        from._internal_model_version_input_example());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleModelVersionInputExampleResponse::CopyFrom(const SingleModelVersionInputExampleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleModelVersionInputExampleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleModelVersionInputExampleResponse::IsInitialized() const {
  return true;
}

void SingleModelVersionInputExampleResponse::InternalSwap(SingleModelVersionInputExampleResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleModelVersionInputExampleResponse, _impl_.model_version_input_example_)
      + sizeof(SingleModelVersionInputExampleResponse::_impl_.model_version_input_example_)
      - PROTOBUF_FIELD_OFFSET(SingleModelVersionInputExampleResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleModelVersionInputExampleResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[156]);
}

// ===================================================================

class MultiModelVersionInputExampleResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiModelVersionInputExampleResponse* msg);
};

const ::clarifai::api::status::Status&
MultiModelVersionInputExampleResponse::_Internal::status(const MultiModelVersionInputExampleResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiModelVersionInputExampleResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiModelVersionInputExampleResponse::clear_model_version_input_examples() {
  _impl_.model_version_input_examples_.Clear();
}
MultiModelVersionInputExampleResponse::MultiModelVersionInputExampleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiModelVersionInputExampleResponse)
}
MultiModelVersionInputExampleResponse::MultiModelVersionInputExampleResponse(const MultiModelVersionInputExampleResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiModelVersionInputExampleResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.model_version_input_examples_){from._impl_.model_version_input_examples_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiModelVersionInputExampleResponse)
}

inline void MultiModelVersionInputExampleResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.model_version_input_examples_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiModelVersionInputExampleResponse::~MultiModelVersionInputExampleResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiModelVersionInputExampleResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiModelVersionInputExampleResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_version_input_examples_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiModelVersionInputExampleResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiModelVersionInputExampleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiModelVersionInputExampleResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.model_version_input_examples_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiModelVersionInputExampleResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModelVersionInputExample model_version_input_examples = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model_version_input_examples(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiModelVersionInputExampleResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiModelVersionInputExampleResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.ModelVersionInputExample model_version_input_examples = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_model_version_input_examples_size()); i < n; i++) {
    const auto& repfield = this->_internal_model_version_input_examples(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiModelVersionInputExampleResponse)
  return target;
}

size_t MultiModelVersionInputExampleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiModelVersionInputExampleResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ModelVersionInputExample model_version_input_examples = 2;
  total_size += 1UL * this->_internal_model_version_input_examples_size();
  for (const auto& msg : this->_impl_.model_version_input_examples_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiModelVersionInputExampleResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiModelVersionInputExampleResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiModelVersionInputExampleResponse::GetClassData() const { return &_class_data_; }


void MultiModelVersionInputExampleResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiModelVersionInputExampleResponse*>(&to_msg);
  auto& from = static_cast<const MultiModelVersionInputExampleResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiModelVersionInputExampleResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.model_version_input_examples_.MergeFrom(from._impl_.model_version_input_examples_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiModelVersionInputExampleResponse::CopyFrom(const MultiModelVersionInputExampleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiModelVersionInputExampleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiModelVersionInputExampleResponse::IsInitialized() const {
  return true;
}

void MultiModelVersionInputExampleResponse::InternalSwap(MultiModelVersionInputExampleResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.model_version_input_examples_.InternalSwap(&other->_impl_.model_version_input_examples_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiModelVersionInputExampleResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[157]);
}

// ===================================================================

class ListModelReferencesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListModelReferencesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListModelReferencesRequest::_Internal::user_app_id(const ListModelReferencesRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListModelReferencesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
ListModelReferencesRequest::ListModelReferencesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListModelReferencesRequest)
}
ListModelReferencesRequest::ListModelReferencesRequest(const ListModelReferencesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListModelReferencesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.model_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    _this->_impl_.model_id_.Set(from._internal_model_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.per_page_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListModelReferencesRequest)
}

inline void ListModelReferencesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.model_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListModelReferencesRequest::~ListModelReferencesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListModelReferencesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListModelReferencesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void ListModelReferencesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListModelReferencesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListModelReferencesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.model_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.per_page_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListModelReferencesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListModelReferencesRequest.model_id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListModelReferencesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListModelReferencesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelReferencesRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // uint32 page = 3;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_page(), target);
  }

  // uint32 per_page = 4;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListModelReferencesRequest)
  return target;
}

size_t ListModelReferencesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListModelReferencesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // uint32 page = 3;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 4;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListModelReferencesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListModelReferencesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListModelReferencesRequest::GetClassData() const { return &_class_data_; }


void ListModelReferencesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListModelReferencesRequest*>(&to_msg);
  auto& from = static_cast<const ListModelReferencesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListModelReferencesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_model_id().empty()) {
    _this->_internal_set_model_id(from._internal_model_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListModelReferencesRequest::CopyFrom(const ListModelReferencesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListModelReferencesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListModelReferencesRequest::IsInitialized() const {
  return true;
}

void ListModelReferencesRequest::InternalSwap(ListModelReferencesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_id_, lhs_arena,
      &other->_impl_.model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListModelReferencesRequest, _impl_.per_page_)
      + sizeof(ListModelReferencesRequest::_impl_.per_page_)
      - PROTOBUF_FIELD_OFFSET(ListModelReferencesRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListModelReferencesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[158]);
}

// ===================================================================

class MultiModelReferenceResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiModelReferenceResponse* msg);
};

const ::clarifai::api::status::Status&
MultiModelReferenceResponse::_Internal::status(const MultiModelReferenceResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiModelReferenceResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiModelReferenceResponse::clear_model_references() {
  _impl_.model_references_.Clear();
}
MultiModelReferenceResponse::MultiModelReferenceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiModelReferenceResponse)
}
MultiModelReferenceResponse::MultiModelReferenceResponse(const MultiModelReferenceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiModelReferenceResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.model_references_){from._impl_.model_references_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiModelReferenceResponse)
}

inline void MultiModelReferenceResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.model_references_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiModelReferenceResponse::~MultiModelReferenceResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiModelReferenceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiModelReferenceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_references_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiModelReferenceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiModelReferenceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiModelReferenceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.model_references_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiModelReferenceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModelReference model_references = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model_references(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiModelReferenceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiModelReferenceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.ModelReference model_references = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_model_references_size()); i < n; i++) {
    const auto& repfield = this->_internal_model_references(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiModelReferenceResponse)
  return target;
}

size_t MultiModelReferenceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiModelReferenceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ModelReference model_references = 2;
  total_size += 1UL * this->_internal_model_references_size();
  for (const auto& msg : this->_impl_.model_references_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiModelReferenceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiModelReferenceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiModelReferenceResponse::GetClassData() const { return &_class_data_; }


void MultiModelReferenceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiModelReferenceResponse*>(&to_msg);
  auto& from = static_cast<const MultiModelReferenceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiModelReferenceResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.model_references_.MergeFrom(from._impl_.model_references_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiModelReferenceResponse::CopyFrom(const MultiModelReferenceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiModelReferenceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiModelReferenceResponse::IsInitialized() const {
  return true;
}

void MultiModelReferenceResponse::InternalSwap(MultiModelReferenceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.model_references_.InternalSwap(&other->_impl_.model_references_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiModelReferenceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[159]);
}

// ===================================================================

class MultiOutputResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiOutputResponse* msg);
};

const ::clarifai::api::status::Status&
MultiOutputResponse::_Internal::status(const MultiOutputResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiOutputResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiOutputResponse::clear_outputs() {
  _impl_.outputs_.Clear();
}
MultiOutputResponse::MultiOutputResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiOutputResponse)
}
MultiOutputResponse::MultiOutputResponse(const MultiOutputResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiOutputResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.outputs_){from._impl_.outputs_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiOutputResponse)
}

inline void MultiOutputResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.outputs_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiOutputResponse::~MultiOutputResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiOutputResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiOutputResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.outputs_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiOutputResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiOutputResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiOutputResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.outputs_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiOutputResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Output outputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiOutputResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiOutputResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Output outputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_outputs_size()); i < n; i++) {
    const auto& repfield = this->_internal_outputs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiOutputResponse)
  return target;
}

size_t MultiOutputResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiOutputResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Output outputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_outputs_size();
  for (const auto& msg : this->_impl_.outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiOutputResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiOutputResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiOutputResponse::GetClassData() const { return &_class_data_; }


void MultiOutputResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiOutputResponse*>(&to_msg);
  auto& from = static_cast<const MultiOutputResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiOutputResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.outputs_.MergeFrom(from._impl_.outputs_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiOutputResponse::CopyFrom(const MultiOutputResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiOutputResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiOutputResponse::IsInitialized() const {
  return true;
}

void MultiOutputResponse::InternalSwap(MultiOutputResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.outputs_.InternalSwap(&other->_impl_.outputs_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiOutputResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[160]);
}

// ===================================================================

class ListScopesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListScopesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListScopesRequest::_Internal::user_app_id(const ListScopesRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListScopesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
ListScopesRequest::ListScopesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListScopesRequest)
}
ListScopesRequest::ListScopesRequest(const ListScopesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListScopesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_type_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key_type().empty()) {
    _this->_impl_.key_type_.Set(from._internal_key_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListScopesRequest)
}

inline void ListScopesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_type_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListScopesRequest::~ListScopesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListScopesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListScopesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void ListScopesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListScopesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListScopesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListScopesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListScopesRequest.key_type"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.UserAppIDSet user_app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListScopesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListScopesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key_type = 1;
  if (!this->_internal_key_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key_type().data(), static_cast<int>(this->_internal_key_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListScopesRequest.key_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key_type(), target);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 2;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListScopesRequest)
  return target;
}

size_t ListScopesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListScopesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key_type = 1;
  if (!this->_internal_key_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_type());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 2;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListScopesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListScopesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListScopesRequest::GetClassData() const { return &_class_data_; }


void ListScopesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListScopesRequest*>(&to_msg);
  auto& from = static_cast<const ListScopesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListScopesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key_type().empty()) {
    _this->_internal_set_key_type(from._internal_key_type());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListScopesRequest::CopyFrom(const ListScopesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListScopesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListScopesRequest::IsInitialized() const {
  return true;
}

void ListScopesRequest::InternalSwap(ListScopesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_type_, lhs_arena,
      &other->_impl_.key_type_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListScopesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[161]);
}

// ===================================================================

class MyScopesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const MyScopesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
MyScopesRequest::_Internal::user_app_id(const MyScopesRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void MyScopesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
MyScopesRequest::MyScopesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MyScopesRequest)
}
MyScopesRequest::MyScopesRequest(const MyScopesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MyScopesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MyScopesRequest)
}

inline void MyScopesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MyScopesRequest::~MyScopesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.MyScopesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MyScopesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void MyScopesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MyScopesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MyScopesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MyScopesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MyScopesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MyScopesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MyScopesRequest)
  return target;
}

size_t MyScopesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MyScopesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MyScopesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MyScopesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MyScopesRequest::GetClassData() const { return &_class_data_; }


void MyScopesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MyScopesRequest*>(&to_msg);
  auto& from = static_cast<const MyScopesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MyScopesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MyScopesRequest::CopyFrom(const MyScopesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MyScopesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyScopesRequest::IsInitialized() const {
  return true;
}

void MyScopesRequest::InternalSwap(MyScopesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MyScopesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[162]);
}

// ===================================================================

class MyScopesUserRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const MyScopesUserRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
MyScopesUserRequest::_Internal::user_app_id(const MyScopesUserRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void MyScopesUserRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
MyScopesUserRequest::MyScopesUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MyScopesUserRequest)
}
MyScopesUserRequest::MyScopesUserRequest(const MyScopesUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MyScopesUserRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MyScopesUserRequest)
}

inline void MyScopesUserRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MyScopesUserRequest::~MyScopesUserRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.MyScopesUserRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MyScopesUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void MyScopesUserRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MyScopesUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MyScopesUserRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MyScopesUserRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MyScopesUserRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MyScopesUserRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MyScopesUserRequest)
  return target;
}

size_t MyScopesUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MyScopesUserRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MyScopesUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MyScopesUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MyScopesUserRequest::GetClassData() const { return &_class_data_; }


void MyScopesUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MyScopesUserRequest*>(&to_msg);
  auto& from = static_cast<const MyScopesUserRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MyScopesUserRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MyScopesUserRequest::CopyFrom(const MyScopesUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MyScopesUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyScopesUserRequest::IsInitialized() const {
  return true;
}

void MyScopesUserRequest::InternalSwap(MyScopesUserRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MyScopesUserRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[163]);
}

// ===================================================================

class MyScopesRootRequest::_Internal {
 public:
};

MyScopesRootRequest::MyScopesRootRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MyScopesRootRequest)
}
MyScopesRootRequest::MyScopesRootRequest(const MyScopesRootRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MyScopesRootRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MyScopesRootRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MyScopesRootRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MyScopesRootRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MyScopesRootRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[164]);
}

// ===================================================================

class MultiScopeDepsResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiScopeDepsResponse* msg);
};

const ::clarifai::api::status::Status&
MultiScopeDepsResponse::_Internal::status(const MultiScopeDepsResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiScopeDepsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiScopeDepsResponse::clear_scope_deps() {
  _impl_.scope_deps_.Clear();
}
void MultiScopeDepsResponse::clear_endpoint_deps() {
  _impl_.endpoint_deps_.Clear();
}
MultiScopeDepsResponse::MultiScopeDepsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiScopeDepsResponse)
}
MultiScopeDepsResponse::MultiScopeDepsResponse(const MultiScopeDepsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiScopeDepsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.scope_deps_){from._impl_.scope_deps_}
    , decltype(_impl_.endpoint_deps_){from._impl_.endpoint_deps_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiScopeDepsResponse)
}

inline void MultiScopeDepsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.scope_deps_){arena}
    , decltype(_impl_.endpoint_deps_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiScopeDepsResponse::~MultiScopeDepsResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiScopeDepsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiScopeDepsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.scope_deps_.~RepeatedPtrField();
  _impl_.endpoint_deps_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiScopeDepsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiScopeDepsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiScopeDepsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.scope_deps_.Clear();
  _impl_.endpoint_deps_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiScopeDepsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ScopeDeps scope_deps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_scope_deps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.EndpointDeps endpoint_deps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_endpoint_deps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiScopeDepsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiScopeDepsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.ScopeDeps scope_deps = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_scope_deps_size()); i < n; i++) {
    const auto& repfield = this->_internal_scope_deps(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.EndpointDeps endpoint_deps = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_endpoint_deps_size()); i < n; i++) {
    const auto& repfield = this->_internal_endpoint_deps(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiScopeDepsResponse)
  return target;
}

size_t MultiScopeDepsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiScopeDepsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ScopeDeps scope_deps = 2;
  total_size += 1UL * this->_internal_scope_deps_size();
  for (const auto& msg : this->_impl_.scope_deps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.EndpointDeps endpoint_deps = 3;
  total_size += 1UL * this->_internal_endpoint_deps_size();
  for (const auto& msg : this->_impl_.endpoint_deps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiScopeDepsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiScopeDepsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiScopeDepsResponse::GetClassData() const { return &_class_data_; }


void MultiScopeDepsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiScopeDepsResponse*>(&to_msg);
  auto& from = static_cast<const MultiScopeDepsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiScopeDepsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.scope_deps_.MergeFrom(from._impl_.scope_deps_);
  _this->_impl_.endpoint_deps_.MergeFrom(from._impl_.endpoint_deps_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiScopeDepsResponse::CopyFrom(const MultiScopeDepsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiScopeDepsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiScopeDepsResponse::IsInitialized() const {
  return true;
}

void MultiScopeDepsResponse::InternalSwap(MultiScopeDepsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.scope_deps_.InternalSwap(&other->_impl_.scope_deps_);
  _impl_.endpoint_deps_.InternalSwap(&other->_impl_.endpoint_deps_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiScopeDepsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[165]);
}

// ===================================================================

class MultiScopeResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiScopeResponse* msg);
  static const ::clarifai::api::App& app(const MultiScopeResponse* msg);
};

const ::clarifai::api::status::Status&
MultiScopeResponse::_Internal::status(const MultiScopeResponse* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::App&
MultiScopeResponse::_Internal::app(const MultiScopeResponse* msg) {
  return *msg->_impl_.app_;
}
void MultiScopeResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiScopeResponse::clear_app() {
  if (GetArenaForAllocation() == nullptr && _impl_.app_ != nullptr) {
    delete _impl_.app_;
  }
  _impl_.app_ = nullptr;
}
MultiScopeResponse::MultiScopeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiScopeResponse)
}
MultiScopeResponse::MultiScopeResponse(const MultiScopeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiScopeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.scopes_){from._impl_.scopes_}
    , decltype(_impl_.endpoints_){from._impl_.endpoints_}
    , decltype(_impl_.user_feature_flags_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.app_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_feature_flags_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_feature_flags_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_feature_flags().empty()) {
    _this->_impl_.user_feature_flags_.Set(from._internal_user_feature_flags(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_app()) {
    _this->_impl_.app_ = new ::clarifai::api::App(*from._impl_.app_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiScopeResponse)
}

inline void MultiScopeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.scopes_){arena}
    , decltype(_impl_.endpoints_){arena}
    , decltype(_impl_.user_feature_flags_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.app_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_feature_flags_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_feature_flags_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MultiScopeResponse::~MultiScopeResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiScopeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiScopeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.scopes_.~RepeatedPtrField();
  _impl_.endpoints_.~RepeatedPtrField();
  _impl_.user_feature_flags_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.app_;
}

void MultiScopeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiScopeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiScopeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.scopes_.Clear();
  _impl_.endpoints_.Clear();
  _impl_.user_feature_flags_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.app_ != nullptr) {
    delete _impl_.app_;
  }
  _impl_.app_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiScopeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string scopes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_scopes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.MultiScopeResponse.scopes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.App app = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_app(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string endpoints = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_endpoints();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.MultiScopeResponse.endpoints"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string user_feature_flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_user_feature_flags();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.MultiScopeResponse.user_feature_flags"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiScopeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiScopeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated string scopes = 2;
  for (int i = 0, n = this->_internal_scopes_size(); i < n; i++) {
    const auto& s = this->_internal_scopes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.MultiScopeResponse.scopes");
    target = stream->WriteString(2, s, target);
  }

  // .clarifai.api.App app = 3;
  if (this->_internal_has_app()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::app(this),
        _Internal::app(this).GetCachedSize(), target, stream);
  }

  // repeated string endpoints = 4;
  for (int i = 0, n = this->_internal_endpoints_size(); i < n; i++) {
    const auto& s = this->_internal_endpoints(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.MultiScopeResponse.endpoints");
    target = stream->WriteString(4, s, target);
  }

  // string user_feature_flags = 5;
  if (!this->_internal_user_feature_flags().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_feature_flags().data(), static_cast<int>(this->_internal_user_feature_flags().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.MultiScopeResponse.user_feature_flags");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_user_feature_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiScopeResponse)
  return target;
}

size_t MultiScopeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiScopeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string scopes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.scopes_.size());
  for (int i = 0, n = _impl_.scopes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.scopes_.Get(i));
  }

  // repeated string endpoints = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.endpoints_.size());
  for (int i = 0, n = _impl_.endpoints_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.endpoints_.Get(i));
  }

  // string user_feature_flags = 5;
  if (!this->_internal_user_feature_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_feature_flags());
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.App app = 3;
  if (this->_internal_has_app()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.app_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiScopeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiScopeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiScopeResponse::GetClassData() const { return &_class_data_; }


void MultiScopeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiScopeResponse*>(&to_msg);
  auto& from = static_cast<const MultiScopeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiScopeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.scopes_.MergeFrom(from._impl_.scopes_);
  _this->_impl_.endpoints_.MergeFrom(from._impl_.endpoints_);
  if (!from._internal_user_feature_flags().empty()) {
    _this->_internal_set_user_feature_flags(from._internal_user_feature_flags());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_app()) {
    _this->_internal_mutable_app()->::clarifai::api::App::MergeFrom(
        from._internal_app());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiScopeResponse::CopyFrom(const MultiScopeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiScopeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiScopeResponse::IsInitialized() const {
  return true;
}

void MultiScopeResponse::InternalSwap(MultiScopeResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.scopes_.InternalSwap(&other->_impl_.scopes_);
  _impl_.endpoints_.InternalSwap(&other->_impl_.endpoints_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_feature_flags_, lhs_arena,
      &other->_impl_.user_feature_flags_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MultiScopeResponse, _impl_.app_)
      + sizeof(MultiScopeResponse::_impl_.app_)
      - PROTOBUF_FIELD_OFFSET(MultiScopeResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiScopeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[166]);
}

// ===================================================================

class MultiScopeUserResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiScopeUserResponse* msg);
};

const ::clarifai::api::status::Status&
MultiScopeUserResponse::_Internal::status(const MultiScopeUserResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiScopeUserResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
MultiScopeUserResponse::MultiScopeUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiScopeUserResponse)
}
MultiScopeUserResponse::MultiScopeUserResponse(const MultiScopeUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiScopeUserResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.scopes_){from._impl_.scopes_}
    , decltype(_impl_.endpoints_){from._impl_.endpoints_}
    , decltype(_impl_.user_feature_flags_){}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_feature_flags_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_feature_flags_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_feature_flags().empty()) {
    _this->_impl_.user_feature_flags_.Set(from._internal_user_feature_flags(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiScopeUserResponse)
}

inline void MultiScopeUserResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.scopes_){arena}
    , decltype(_impl_.endpoints_){arena}
    , decltype(_impl_.user_feature_flags_){}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_feature_flags_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_feature_flags_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MultiScopeUserResponse::~MultiScopeUserResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiScopeUserResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiScopeUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.scopes_.~RepeatedPtrField();
  _impl_.endpoints_.~RepeatedPtrField();
  _impl_.user_feature_flags_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiScopeUserResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiScopeUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiScopeUserResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.scopes_.Clear();
  _impl_.endpoints_.Clear();
  _impl_.user_feature_flags_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiScopeUserResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string scopes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_scopes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.MultiScopeUserResponse.scopes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string endpoints = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_endpoints();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.MultiScopeUserResponse.endpoints"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string user_feature_flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_user_feature_flags();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.MultiScopeUserResponse.user_feature_flags"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiScopeUserResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiScopeUserResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated string scopes = 2;
  for (int i = 0, n = this->_internal_scopes_size(); i < n; i++) {
    const auto& s = this->_internal_scopes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.MultiScopeUserResponse.scopes");
    target = stream->WriteString(2, s, target);
  }

  // repeated string endpoints = 4;
  for (int i = 0, n = this->_internal_endpoints_size(); i < n; i++) {
    const auto& s = this->_internal_endpoints(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.MultiScopeUserResponse.endpoints");
    target = stream->WriteString(4, s, target);
  }

  // string user_feature_flags = 5;
  if (!this->_internal_user_feature_flags().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_feature_flags().data(), static_cast<int>(this->_internal_user_feature_flags().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.MultiScopeUserResponse.user_feature_flags");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_user_feature_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiScopeUserResponse)
  return target;
}

size_t MultiScopeUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiScopeUserResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string scopes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.scopes_.size());
  for (int i = 0, n = _impl_.scopes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.scopes_.Get(i));
  }

  // repeated string endpoints = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.endpoints_.size());
  for (int i = 0, n = _impl_.endpoints_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.endpoints_.Get(i));
  }

  // string user_feature_flags = 5;
  if (!this->_internal_user_feature_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_feature_flags());
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiScopeUserResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiScopeUserResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiScopeUserResponse::GetClassData() const { return &_class_data_; }


void MultiScopeUserResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiScopeUserResponse*>(&to_msg);
  auto& from = static_cast<const MultiScopeUserResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiScopeUserResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.scopes_.MergeFrom(from._impl_.scopes_);
  _this->_impl_.endpoints_.MergeFrom(from._impl_.endpoints_);
  if (!from._internal_user_feature_flags().empty()) {
    _this->_internal_set_user_feature_flags(from._internal_user_feature_flags());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiScopeUserResponse::CopyFrom(const MultiScopeUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiScopeUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiScopeUserResponse::IsInitialized() const {
  return true;
}

void MultiScopeUserResponse::InternalSwap(MultiScopeUserResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.scopes_.InternalSwap(&other->_impl_.scopes_);
  _impl_.endpoints_.InternalSwap(&other->_impl_.endpoints_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_feature_flags_, lhs_arena,
      &other->_impl_.user_feature_flags_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiScopeUserResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[167]);
}

// ===================================================================

class MultiScopeRootResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiScopeRootResponse* msg);
};

const ::clarifai::api::status::Status&
MultiScopeRootResponse::_Internal::status(const MultiScopeRootResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiScopeRootResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
MultiScopeRootResponse::MultiScopeRootResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiScopeRootResponse)
}
MultiScopeRootResponse::MultiScopeRootResponse(const MultiScopeRootResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiScopeRootResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.scopes_){from._impl_.scopes_}
    , decltype(_impl_.endpoints_){from._impl_.endpoints_}
    , decltype(_impl_.user_feature_flags_){}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_feature_flags_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_feature_flags_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_feature_flags().empty()) {
    _this->_impl_.user_feature_flags_.Set(from._internal_user_feature_flags(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiScopeRootResponse)
}

inline void MultiScopeRootResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.scopes_){arena}
    , decltype(_impl_.endpoints_){arena}
    , decltype(_impl_.user_feature_flags_){}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_feature_flags_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_feature_flags_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MultiScopeRootResponse::~MultiScopeRootResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiScopeRootResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiScopeRootResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.scopes_.~RepeatedPtrField();
  _impl_.endpoints_.~RepeatedPtrField();
  _impl_.user_feature_flags_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiScopeRootResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiScopeRootResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiScopeRootResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.scopes_.Clear();
  _impl_.endpoints_.Clear();
  _impl_.user_feature_flags_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiScopeRootResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string scopes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_scopes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.MultiScopeRootResponse.scopes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string endpoints = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_endpoints();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.MultiScopeRootResponse.endpoints"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string user_feature_flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_user_feature_flags();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.MultiScopeRootResponse.user_feature_flags"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiScopeRootResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiScopeRootResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated string scopes = 2;
  for (int i = 0, n = this->_internal_scopes_size(); i < n; i++) {
    const auto& s = this->_internal_scopes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.MultiScopeRootResponse.scopes");
    target = stream->WriteString(2, s, target);
  }

  // repeated string endpoints = 4;
  for (int i = 0, n = this->_internal_endpoints_size(); i < n; i++) {
    const auto& s = this->_internal_endpoints(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.MultiScopeRootResponse.endpoints");
    target = stream->WriteString(4, s, target);
  }

  // string user_feature_flags = 5;
  if (!this->_internal_user_feature_flags().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_feature_flags().data(), static_cast<int>(this->_internal_user_feature_flags().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.MultiScopeRootResponse.user_feature_flags");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_user_feature_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiScopeRootResponse)
  return target;
}

size_t MultiScopeRootResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiScopeRootResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string scopes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.scopes_.size());
  for (int i = 0, n = _impl_.scopes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.scopes_.Get(i));
  }

  // repeated string endpoints = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.endpoints_.size());
  for (int i = 0, n = _impl_.endpoints_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.endpoints_.Get(i));
  }

  // string user_feature_flags = 5;
  if (!this->_internal_user_feature_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_feature_flags());
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiScopeRootResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiScopeRootResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiScopeRootResponse::GetClassData() const { return &_class_data_; }


void MultiScopeRootResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiScopeRootResponse*>(&to_msg);
  auto& from = static_cast<const MultiScopeRootResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiScopeRootResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.scopes_.MergeFrom(from._impl_.scopes_);
  _this->_impl_.endpoints_.MergeFrom(from._impl_.endpoints_);
  if (!from._internal_user_feature_flags().empty()) {
    _this->_internal_set_user_feature_flags(from._internal_user_feature_flags());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiScopeRootResponse::CopyFrom(const MultiScopeRootResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiScopeRootResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiScopeRootResponse::IsInitialized() const {
  return true;
}

void MultiScopeRootResponse::InternalSwap(MultiScopeRootResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.scopes_.InternalSwap(&other->_impl_.scopes_);
  _impl_.endpoints_.InternalSwap(&other->_impl_.endpoints_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_feature_flags_, lhs_arena,
      &other->_impl_.user_feature_flags_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiScopeRootResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[168]);
}

// ===================================================================

class GetSearchRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetSearchRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetSearchRequest::_Internal::user_app_id(const GetSearchRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void GetSearchRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
GetSearchRequest::GetSearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetSearchRequest)
}
GetSearchRequest::GetSearchRequest(const GetSearchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSearchRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetSearchRequest)
}

inline void GetSearchRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetSearchRequest::~GetSearchRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetSearchRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSearchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void GetSearchRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSearchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetSearchRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSearchRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetSearchRequest.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSearchRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetSearchRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetSearchRequest.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetSearchRequest)
  return target;
}

size_t GetSearchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetSearchRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSearchRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSearchRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSearchRequest::GetClassData() const { return &_class_data_; }


void GetSearchRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSearchRequest*>(&to_msg);
  auto& from = static_cast<const GetSearchRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetSearchRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSearchRequest::CopyFrom(const GetSearchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetSearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSearchRequest::IsInitialized() const {
  return true;
}

void GetSearchRequest::InternalSwap(GetSearchRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSearchRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[169]);
}

// ===================================================================

class ListSearchesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListSearchesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListSearchesRequest::_Internal::user_app_id(const ListSearchesRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListSearchesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
ListSearchesRequest::ListSearchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListSearchesRequest)
}
ListSearchesRequest::ListSearchesRequest(const ListSearchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListSearchesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.per_page_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListSearchesRequest)
}

inline void ListSearchesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListSearchesRequest::~ListSearchesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListSearchesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListSearchesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void ListSearchesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListSearchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListSearchesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.per_page_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListSearchesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListSearchesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListSearchesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListSearchesRequest)
  return target;
}

size_t ListSearchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListSearchesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListSearchesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListSearchesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListSearchesRequest::GetClassData() const { return &_class_data_; }


void ListSearchesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListSearchesRequest*>(&to_msg);
  auto& from = static_cast<const ListSearchesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListSearchesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListSearchesRequest::CopyFrom(const ListSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSearchesRequest::IsInitialized() const {
  return true;
}

void ListSearchesRequest::InternalSwap(ListSearchesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListSearchesRequest, _impl_.per_page_)
      + sizeof(ListSearchesRequest::_impl_.per_page_)
      - PROTOBUF_FIELD_OFFSET(ListSearchesRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSearchesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[170]);
}

// ===================================================================

class PostSearchesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostSearchesRequest* msg);
  static const ::clarifai::api::Query& query(const PostSearchesRequest* msg);
  static const ::clarifai::api::Pagination& pagination(const PostSearchesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostSearchesRequest::_Internal::user_app_id(const PostSearchesRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
const ::clarifai::api::Query&
PostSearchesRequest::_Internal::query(const PostSearchesRequest* msg) {
  return *msg->_impl_.query_;
}
const ::clarifai::api::Pagination&
PostSearchesRequest::_Internal::pagination(const PostSearchesRequest* msg) {
  return *msg->_impl_.pagination_;
}
void PostSearchesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostSearchesRequest::clear_query() {
  if (GetArenaForAllocation() == nullptr && _impl_.query_ != nullptr) {
    delete _impl_.query_;
  }
  _impl_.query_ = nullptr;
}
void PostSearchesRequest::clear_searches() {
  _impl_.searches_.Clear();
}
PostSearchesRequest::PostSearchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostSearchesRequest)
}
PostSearchesRequest::PostSearchesRequest(const PostSearchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostSearchesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.searches_){from._impl_.searches_}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.query_){nullptr}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  if (from._internal_has_query()) {
    _this->_impl_.query_ = new ::clarifai::api::Query(*from._impl_.query_);
  }
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::clarifai::api::Pagination(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostSearchesRequest)
}

inline void PostSearchesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.searches_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.query_){nullptr}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PostSearchesRequest::~PostSearchesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostSearchesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostSearchesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.searches_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
  if (this != internal_default_instance()) delete _impl_.query_;
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void PostSearchesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostSearchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostSearchesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.searches_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.query_ != nullptr) {
    delete _impl_.query_;
  }
  _impl_.query_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostSearchesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Query query = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Search searches = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_searches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Pagination pagination = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostSearchesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostSearchesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Query query = 2 [deprecated = true];
  if (this->_internal_has_query()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::query(this),
        _Internal::query(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Search searches = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_searches_size()); i < n; i++) {
    const auto& repfield = this->_internal_searches(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .clarifai.api.Pagination pagination = 4;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostSearchesRequest)
  return target;
}

size_t PostSearchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostSearchesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Search searches = 3;
  total_size += 1UL * this->_internal_searches_size();
  for (const auto& msg : this->_impl_.searches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // .clarifai.api.Query query = 2 [deprecated = true];
  if (this->_internal_has_query()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.query_);
  }

  // .clarifai.api.Pagination pagination = 4;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostSearchesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostSearchesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostSearchesRequest::GetClassData() const { return &_class_data_; }


void PostSearchesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostSearchesRequest*>(&to_msg);
  auto& from = static_cast<const PostSearchesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostSearchesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.searches_.MergeFrom(from._impl_.searches_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_has_query()) {
    _this->_internal_mutable_query()->::clarifai::api::Query::MergeFrom(
        from._internal_query());
  }
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::clarifai::api::Pagination::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostSearchesRequest::CopyFrom(const PostSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostSearchesRequest::IsInitialized() const {
  return true;
}

void PostSearchesRequest::InternalSwap(PostSearchesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.searches_.InternalSwap(&other->_impl_.searches_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostSearchesRequest, _impl_.pagination_)
      + sizeof(PostSearchesRequest::_impl_.pagination_)
      - PROTOBUF_FIELD_OFFSET(PostSearchesRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostSearchesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[171]);
}

// ===================================================================

class PatchInputsSearchesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchInputsSearchesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchInputsSearchesRequest::_Internal::user_app_id(const PatchInputsSearchesRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PatchInputsSearchesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PatchInputsSearchesRequest::clear_searches() {
  _impl_.searches_.Clear();
}
PatchInputsSearchesRequest::PatchInputsSearchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchInputsSearchesRequest)
}
PatchInputsSearchesRequest::PatchInputsSearchesRequest(const PatchInputsSearchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PatchInputsSearchesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.searches_){from._impl_.searches_}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchInputsSearchesRequest)
}

inline void PatchInputsSearchesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.searches_){arena}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PatchInputsSearchesRequest::~PatchInputsSearchesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchInputsSearchesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatchInputsSearchesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.searches_.~RepeatedPtrField();
  _impl_.action_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PatchInputsSearchesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatchInputsSearchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchInputsSearchesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.searches_.Clear();
  _impl_.action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchInputsSearchesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Search searches = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_searches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchInputsSearchesRequest.action"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchInputsSearchesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchInputsSearchesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Search searches = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_searches_size()); i < n; i++) {
    const auto& repfield = this->_internal_searches(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchInputsSearchesRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchInputsSearchesRequest)
  return target;
}

size_t PatchInputsSearchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchInputsSearchesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Search searches = 2;
  total_size += 1UL * this->_internal_searches_size();
  for (const auto& msg : this->_impl_.searches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchInputsSearchesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PatchInputsSearchesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchInputsSearchesRequest::GetClassData() const { return &_class_data_; }


void PatchInputsSearchesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PatchInputsSearchesRequest*>(&to_msg);
  auto& from = static_cast<const PatchInputsSearchesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchInputsSearchesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.searches_.MergeFrom(from._impl_.searches_);
  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchInputsSearchesRequest::CopyFrom(const PatchInputsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchInputsSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchInputsSearchesRequest::IsInitialized() const {
  return true;
}

void PatchInputsSearchesRequest::InternalSwap(PatchInputsSearchesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.searches_.InternalSwap(&other->_impl_.searches_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchInputsSearchesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[172]);
}

// ===================================================================

class PatchAnnotationsSearchesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchAnnotationsSearchesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchAnnotationsSearchesRequest::_Internal::user_app_id(const PatchAnnotationsSearchesRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PatchAnnotationsSearchesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PatchAnnotationsSearchesRequest::clear_searches() {
  _impl_.searches_.Clear();
}
PatchAnnotationsSearchesRequest::PatchAnnotationsSearchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchAnnotationsSearchesRequest)
}
PatchAnnotationsSearchesRequest::PatchAnnotationsSearchesRequest(const PatchAnnotationsSearchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PatchAnnotationsSearchesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.searches_){from._impl_.searches_}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchAnnotationsSearchesRequest)
}

inline void PatchAnnotationsSearchesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.searches_){arena}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PatchAnnotationsSearchesRequest::~PatchAnnotationsSearchesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchAnnotationsSearchesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatchAnnotationsSearchesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.searches_.~RepeatedPtrField();
  _impl_.action_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PatchAnnotationsSearchesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatchAnnotationsSearchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchAnnotationsSearchesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.searches_.Clear();
  _impl_.action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchAnnotationsSearchesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Search searches = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_searches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchAnnotationsSearchesRequest.action"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchAnnotationsSearchesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchAnnotationsSearchesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Search searches = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_searches_size()); i < n; i++) {
    const auto& repfield = this->_internal_searches(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchAnnotationsSearchesRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchAnnotationsSearchesRequest)
  return target;
}

size_t PatchAnnotationsSearchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchAnnotationsSearchesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Search searches = 2;
  total_size += 1UL * this->_internal_searches_size();
  for (const auto& msg : this->_impl_.searches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchAnnotationsSearchesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PatchAnnotationsSearchesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchAnnotationsSearchesRequest::GetClassData() const { return &_class_data_; }


void PatchAnnotationsSearchesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PatchAnnotationsSearchesRequest*>(&to_msg);
  auto& from = static_cast<const PatchAnnotationsSearchesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchAnnotationsSearchesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.searches_.MergeFrom(from._impl_.searches_);
  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchAnnotationsSearchesRequest::CopyFrom(const PatchAnnotationsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchAnnotationsSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchAnnotationsSearchesRequest::IsInitialized() const {
  return true;
}

void PatchAnnotationsSearchesRequest::InternalSwap(PatchAnnotationsSearchesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.searches_.InternalSwap(&other->_impl_.searches_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchAnnotationsSearchesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[173]);
}

// ===================================================================

class PatchSearchesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchSearchesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchSearchesRequest::_Internal::user_app_id(const PatchSearchesRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PatchSearchesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PatchSearchesRequest::clear_searches() {
  _impl_.searches_.Clear();
}
PatchSearchesRequest::PatchSearchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchSearchesRequest)
}
PatchSearchesRequest::PatchSearchesRequest(const PatchSearchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PatchSearchesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.searches_){from._impl_.searches_}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchSearchesRequest)
}

inline void PatchSearchesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.searches_){arena}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PatchSearchesRequest::~PatchSearchesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchSearchesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatchSearchesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.searches_.~RepeatedPtrField();
  _impl_.action_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PatchSearchesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatchSearchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchSearchesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.searches_.Clear();
  _impl_.action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchSearchesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Search searches = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_searches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchSearchesRequest.action"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchSearchesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchSearchesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Search searches = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_searches_size()); i < n; i++) {
    const auto& repfield = this->_internal_searches(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchSearchesRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchSearchesRequest)
  return target;
}

size_t PatchSearchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchSearchesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Search searches = 2;
  total_size += 1UL * this->_internal_searches_size();
  for (const auto& msg : this->_impl_.searches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchSearchesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PatchSearchesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchSearchesRequest::GetClassData() const { return &_class_data_; }


void PatchSearchesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PatchSearchesRequest*>(&to_msg);
  auto& from = static_cast<const PatchSearchesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchSearchesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.searches_.MergeFrom(from._impl_.searches_);
  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchSearchesRequest::CopyFrom(const PatchSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchSearchesRequest::IsInitialized() const {
  return true;
}

void PatchSearchesRequest::InternalSwap(PatchSearchesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.searches_.InternalSwap(&other->_impl_.searches_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchSearchesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[174]);
}

// ===================================================================

class PostSearchesByIDRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostSearchesByIDRequest* msg);
  static const ::clarifai::api::Pagination& pagination(const PostSearchesByIDRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostSearchesByIDRequest::_Internal::user_app_id(const PostSearchesByIDRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
const ::clarifai::api::Pagination&
PostSearchesByIDRequest::_Internal::pagination(const PostSearchesByIDRequest* msg) {
  return *msg->_impl_.pagination_;
}
void PostSearchesByIDRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
PostSearchesByIDRequest::PostSearchesByIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostSearchesByIDRequest)
}
PostSearchesByIDRequest::PostSearchesByIDRequest(const PostSearchesByIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostSearchesByIDRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::clarifai::api::Pagination(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostSearchesByIDRequest)
}

inline void PostSearchesByIDRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PostSearchesByIDRequest::~PostSearchesByIDRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostSearchesByIDRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostSearchesByIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void PostSearchesByIDRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostSearchesByIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostSearchesByIDRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostSearchesByIDRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PostSearchesByIDRequest.id"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Pagination pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostSearchesByIDRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostSearchesByIDRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostSearchesByIDRequest.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostSearchesByIDRequest)
  return target;
}

size_t PostSearchesByIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostSearchesByIDRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostSearchesByIDRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostSearchesByIDRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostSearchesByIDRequest::GetClassData() const { return &_class_data_; }


void PostSearchesByIDRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostSearchesByIDRequest*>(&to_msg);
  auto& from = static_cast<const PostSearchesByIDRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostSearchesByIDRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::clarifai::api::Pagination::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostSearchesByIDRequest::CopyFrom(const PostSearchesByIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostSearchesByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostSearchesByIDRequest::IsInitialized() const {
  return true;
}

void PostSearchesByIDRequest::InternalSwap(PostSearchesByIDRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostSearchesByIDRequest, _impl_.pagination_)
      + sizeof(PostSearchesByIDRequest::_impl_.pagination_)
      - PROTOBUF_FIELD_OFFSET(PostSearchesByIDRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostSearchesByIDRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[175]);
}

// ===================================================================

class DeleteSearchRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteSearchRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteSearchRequest::_Internal::user_app_id(const DeleteSearchRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void DeleteSearchRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
DeleteSearchRequest::DeleteSearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteSearchRequest)
}
DeleteSearchRequest::DeleteSearchRequest(const DeleteSearchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteSearchRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteSearchRequest)
}

inline void DeleteSearchRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteSearchRequest::~DeleteSearchRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteSearchRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteSearchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void DeleteSearchRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteSearchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteSearchRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteSearchRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DeleteSearchRequest.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteSearchRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteSearchRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteSearchRequest.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteSearchRequest)
  return target;
}

size_t DeleteSearchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteSearchRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteSearchRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteSearchRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteSearchRequest::GetClassData() const { return &_class_data_; }


void DeleteSearchRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteSearchRequest*>(&to_msg);
  auto& from = static_cast<const DeleteSearchRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteSearchRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteSearchRequest::CopyFrom(const DeleteSearchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteSearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSearchRequest::IsInitialized() const {
  return true;
}

void DeleteSearchRequest::InternalSwap(DeleteSearchRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteSearchRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[176]);
}

// ===================================================================

class PostAnnotationsSearchesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostAnnotationsSearchesRequest* msg);
  static const ::clarifai::api::Pagination& pagination(const PostAnnotationsSearchesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostAnnotationsSearchesRequest::_Internal::user_app_id(const PostAnnotationsSearchesRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
const ::clarifai::api::Pagination&
PostAnnotationsSearchesRequest::_Internal::pagination(const PostAnnotationsSearchesRequest* msg) {
  return *msg->_impl_.pagination_;
}
void PostAnnotationsSearchesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostAnnotationsSearchesRequest::clear_searches() {
  _impl_.searches_.Clear();
}
PostAnnotationsSearchesRequest::PostAnnotationsSearchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostAnnotationsSearchesRequest)
}
PostAnnotationsSearchesRequest::PostAnnotationsSearchesRequest(const PostAnnotationsSearchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostAnnotationsSearchesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.searches_){from._impl_.searches_}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::clarifai::api::Pagination(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostAnnotationsSearchesRequest)
}

inline void PostAnnotationsSearchesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.searches_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PostAnnotationsSearchesRequest::~PostAnnotationsSearchesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostAnnotationsSearchesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostAnnotationsSearchesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.searches_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void PostAnnotationsSearchesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostAnnotationsSearchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostAnnotationsSearchesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.searches_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostAnnotationsSearchesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Search searches = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_searches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Pagination pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostAnnotationsSearchesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostAnnotationsSearchesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Search searches = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_searches_size()); i < n; i++) {
    const auto& repfield = this->_internal_searches(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostAnnotationsSearchesRequest)
  return target;
}

size_t PostAnnotationsSearchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostAnnotationsSearchesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Search searches = 2;
  total_size += 1UL * this->_internal_searches_size();
  for (const auto& msg : this->_impl_.searches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostAnnotationsSearchesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostAnnotationsSearchesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostAnnotationsSearchesRequest::GetClassData() const { return &_class_data_; }


void PostAnnotationsSearchesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostAnnotationsSearchesRequest*>(&to_msg);
  auto& from = static_cast<const PostAnnotationsSearchesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostAnnotationsSearchesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.searches_.MergeFrom(from._impl_.searches_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::clarifai::api::Pagination::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostAnnotationsSearchesRequest::CopyFrom(const PostAnnotationsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostAnnotationsSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostAnnotationsSearchesRequest::IsInitialized() const {
  return true;
}

void PostAnnotationsSearchesRequest::InternalSwap(PostAnnotationsSearchesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.searches_.InternalSwap(&other->_impl_.searches_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostAnnotationsSearchesRequest, _impl_.pagination_)
      + sizeof(PostAnnotationsSearchesRequest::_impl_.pagination_)
      - PROTOBUF_FIELD_OFFSET(PostAnnotationsSearchesRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostAnnotationsSearchesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[177]);
}

// ===================================================================

class DeleteAnnotationSearchMetricsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteAnnotationSearchMetricsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteAnnotationSearchMetricsRequest::_Internal::user_app_id(const DeleteAnnotationSearchMetricsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void DeleteAnnotationSearchMetricsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
DeleteAnnotationSearchMetricsRequest::DeleteAnnotationSearchMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteAnnotationSearchMetricsRequest)
}
DeleteAnnotationSearchMetricsRequest::DeleteAnnotationSearchMetricsRequest(const DeleteAnnotationSearchMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteAnnotationSearchMetricsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteAnnotationSearchMetricsRequest)
}

inline void DeleteAnnotationSearchMetricsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteAnnotationSearchMetricsRequest::~DeleteAnnotationSearchMetricsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteAnnotationSearchMetricsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteAnnotationSearchMetricsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void DeleteAnnotationSearchMetricsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteAnnotationSearchMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteAnnotationSearchMetricsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteAnnotationSearchMetricsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DeleteAnnotationSearchMetricsRequest.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteAnnotationSearchMetricsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteAnnotationSearchMetricsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteAnnotationSearchMetricsRequest.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteAnnotationSearchMetricsRequest)
  return target;
}

size_t DeleteAnnotationSearchMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteAnnotationSearchMetricsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteAnnotationSearchMetricsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteAnnotationSearchMetricsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteAnnotationSearchMetricsRequest::GetClassData() const { return &_class_data_; }


void DeleteAnnotationSearchMetricsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteAnnotationSearchMetricsRequest*>(&to_msg);
  auto& from = static_cast<const DeleteAnnotationSearchMetricsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteAnnotationSearchMetricsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteAnnotationSearchMetricsRequest::CopyFrom(const DeleteAnnotationSearchMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteAnnotationSearchMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAnnotationSearchMetricsRequest::IsInitialized() const {
  return true;
}

void DeleteAnnotationSearchMetricsRequest::InternalSwap(DeleteAnnotationSearchMetricsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteAnnotationSearchMetricsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[178]);
}

// ===================================================================

class PostInputsSearchesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostInputsSearchesRequest* msg);
  static const ::clarifai::api::Pagination& pagination(const PostInputsSearchesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostInputsSearchesRequest::_Internal::user_app_id(const PostInputsSearchesRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
const ::clarifai::api::Pagination&
PostInputsSearchesRequest::_Internal::pagination(const PostInputsSearchesRequest* msg) {
  return *msg->_impl_.pagination_;
}
void PostInputsSearchesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostInputsSearchesRequest::clear_searches() {
  _impl_.searches_.Clear();
}
PostInputsSearchesRequest::PostInputsSearchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostInputsSearchesRequest)
}
PostInputsSearchesRequest::PostInputsSearchesRequest(const PostInputsSearchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostInputsSearchesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.searches_){from._impl_.searches_}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::clarifai::api::Pagination(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostInputsSearchesRequest)
}

inline void PostInputsSearchesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.searches_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PostInputsSearchesRequest::~PostInputsSearchesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostInputsSearchesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostInputsSearchesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.searches_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void PostInputsSearchesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostInputsSearchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostInputsSearchesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.searches_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostInputsSearchesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Search searches = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_searches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Pagination pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostInputsSearchesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostInputsSearchesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Search searches = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_searches_size()); i < n; i++) {
    const auto& repfield = this->_internal_searches(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostInputsSearchesRequest)
  return target;
}

size_t PostInputsSearchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostInputsSearchesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Search searches = 2;
  total_size += 1UL * this->_internal_searches_size();
  for (const auto& msg : this->_impl_.searches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostInputsSearchesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostInputsSearchesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostInputsSearchesRequest::GetClassData() const { return &_class_data_; }


void PostInputsSearchesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostInputsSearchesRequest*>(&to_msg);
  auto& from = static_cast<const PostInputsSearchesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostInputsSearchesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.searches_.MergeFrom(from._impl_.searches_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::clarifai::api::Pagination::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostInputsSearchesRequest::CopyFrom(const PostInputsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostInputsSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostInputsSearchesRequest::IsInitialized() const {
  return true;
}

void PostInputsSearchesRequest::InternalSwap(PostInputsSearchesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.searches_.InternalSwap(&other->_impl_.searches_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostInputsSearchesRequest, _impl_.pagination_)
      + sizeof(PostInputsSearchesRequest::_impl_.pagination_)
      - PROTOBUF_FIELD_OFFSET(PostInputsSearchesRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostInputsSearchesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[179]);
}

// ===================================================================

class SingleSearchResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleSearchResponse* msg);
  static const ::clarifai::api::Search& search(const SingleSearchResponse* msg);
};

const ::clarifai::api::status::Status&
SingleSearchResponse::_Internal::status(const SingleSearchResponse* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::Search&
SingleSearchResponse::_Internal::search(const SingleSearchResponse* msg) {
  return *msg->_impl_.search_;
}
void SingleSearchResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void SingleSearchResponse::clear_search() {
  if (GetArenaForAllocation() == nullptr && _impl_.search_ != nullptr) {
    delete _impl_.search_;
  }
  _impl_.search_ = nullptr;
}
SingleSearchResponse::SingleSearchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleSearchResponse)
}
SingleSearchResponse::SingleSearchResponse(const SingleSearchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleSearchResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.search_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_search()) {
    _this->_impl_.search_ = new ::clarifai::api::Search(*from._impl_.search_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleSearchResponse)
}

inline void SingleSearchResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.search_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SingleSearchResponse::~SingleSearchResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleSearchResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleSearchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.search_;
}

void SingleSearchResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleSearchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleSearchResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.search_ != nullptr) {
    delete _impl_.search_;
  }
  _impl_.search_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleSearchResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Search search = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_search(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleSearchResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleSearchResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Search search = 5;
  if (this->_internal_has_search()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::search(this),
        _Internal::search(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleSearchResponse)
  return target;
}

size_t SingleSearchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleSearchResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.Search search = 5;
  if (this->_internal_has_search()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.search_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleSearchResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleSearchResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleSearchResponse::GetClassData() const { return &_class_data_; }


void SingleSearchResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleSearchResponse*>(&to_msg);
  auto& from = static_cast<const SingleSearchResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleSearchResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_search()) {
    _this->_internal_mutable_search()->::clarifai::api::Search::MergeFrom(
        from._internal_search());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleSearchResponse::CopyFrom(const SingleSearchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleSearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleSearchResponse::IsInitialized() const {
  return true;
}

void SingleSearchResponse::InternalSwap(SingleSearchResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleSearchResponse, _impl_.search_)
      + sizeof(SingleSearchResponse::_impl_.search_)
      - PROTOBUF_FIELD_OFFSET(SingleSearchResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleSearchResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[180]);
}

// ===================================================================

class MultiSearchResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiSearchResponse* msg);
  static const ::clarifai::api::Query& query(const MultiSearchResponse* msg);
};

const ::clarifai::api::status::Status&
MultiSearchResponse::_Internal::status(const MultiSearchResponse* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::Query&
MultiSearchResponse::_Internal::query(const MultiSearchResponse* msg) {
  return *msg->_impl_.query_;
}
void MultiSearchResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiSearchResponse::clear_hits() {
  _impl_.hits_.Clear();
}
void MultiSearchResponse::clear_query() {
  if (GetArenaForAllocation() == nullptr && _impl_.query_ != nullptr) {
    delete _impl_.query_;
  }
  _impl_.query_ = nullptr;
}
void MultiSearchResponse::clear_searches() {
  _impl_.searches_.Clear();
}
MultiSearchResponse::MultiSearchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiSearchResponse)
}
MultiSearchResponse::MultiSearchResponse(const MultiSearchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiSearchResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hits_){from._impl_.hits_}
    , decltype(_impl_.searches_){from._impl_.searches_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.query_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_query()) {
    _this->_impl_.query_ = new ::clarifai::api::Query(*from._impl_.query_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiSearchResponse)
}

inline void MultiSearchResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hits_){arena}
    , decltype(_impl_.searches_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.query_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MultiSearchResponse::~MultiSearchResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiSearchResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiSearchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hits_.~RepeatedPtrField();
  _impl_.searches_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.query_;
}

void MultiSearchResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiSearchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiSearchResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hits_.Clear();
  _impl_.searches_.Clear();
  _impl_.id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.query_ != nullptr) {
    delete _impl_.query_;
  }
  _impl_.query_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiSearchResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.MultiSearchResponse.id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Hit hits = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Query query = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Search searches = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_searches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiSearchResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiSearchResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.MultiSearchResponse.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // repeated .clarifai.api.Hit hits = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hits_size()); i < n; i++) {
    const auto& repfield = this->_internal_hits(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .clarifai.api.Query query = 4;
  if (this->_internal_has_query()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::query(this),
        _Internal::query(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Search searches = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_searches_size()); i < n; i++) {
    const auto& repfield = this->_internal_searches(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiSearchResponse)
  return target;
}

size_t MultiSearchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiSearchResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Hit hits = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_hits_size();
  for (const auto& msg : this->_impl_.hits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Search searches = 5;
  total_size += 1UL * this->_internal_searches_size();
  for (const auto& msg : this->_impl_.searches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.Query query = 4;
  if (this->_internal_has_query()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.query_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiSearchResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiSearchResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiSearchResponse::GetClassData() const { return &_class_data_; }


void MultiSearchResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiSearchResponse*>(&to_msg);
  auto& from = static_cast<const MultiSearchResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiSearchResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.hits_.MergeFrom(from._impl_.hits_);
  _this->_impl_.searches_.MergeFrom(from._impl_.searches_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_query()) {
    _this->_internal_mutable_query()->::clarifai::api::Query::MergeFrom(
        from._internal_query());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiSearchResponse::CopyFrom(const MultiSearchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiSearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiSearchResponse::IsInitialized() const {
  return true;
}

void MultiSearchResponse::InternalSwap(MultiSearchResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.hits_.InternalSwap(&other->_impl_.hits_);
  _impl_.searches_.InternalSwap(&other->_impl_.searches_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MultiSearchResponse, _impl_.query_)
      + sizeof(MultiSearchResponse::_impl_.query_)
      - PROTOBUF_FIELD_OFFSET(MultiSearchResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiSearchResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[181]);
}

// ===================================================================

class PostAnnotationSearchMetricsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostAnnotationSearchMetricsRequest* msg);
  static const ::clarifai::api::Search& ground_truth(const PostAnnotationSearchMetricsRequest* msg);
  static const ::clarifai::api::Search& search_to_eval(const PostAnnotationSearchMetricsRequest* msg);
  static const ::clarifai::api::Data& data(const PostAnnotationSearchMetricsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostAnnotationSearchMetricsRequest::_Internal::user_app_id(const PostAnnotationSearchMetricsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
const ::clarifai::api::Search&
PostAnnotationSearchMetricsRequest::_Internal::ground_truth(const PostAnnotationSearchMetricsRequest* msg) {
  return *msg->_impl_.ground_truth_;
}
const ::clarifai::api::Search&
PostAnnotationSearchMetricsRequest::_Internal::search_to_eval(const PostAnnotationSearchMetricsRequest* msg) {
  return *msg->_impl_.search_to_eval_;
}
const ::clarifai::api::Data&
PostAnnotationSearchMetricsRequest::_Internal::data(const PostAnnotationSearchMetricsRequest* msg) {
  return *msg->_impl_.data_;
}
void PostAnnotationSearchMetricsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostAnnotationSearchMetricsRequest::clear_ground_truth() {
  if (GetArenaForAllocation() == nullptr && _impl_.ground_truth_ != nullptr) {
    delete _impl_.ground_truth_;
  }
  _impl_.ground_truth_ = nullptr;
}
void PostAnnotationSearchMetricsRequest::clear_search_to_eval() {
  if (GetArenaForAllocation() == nullptr && _impl_.search_to_eval_ != nullptr) {
    delete _impl_.search_to_eval_;
  }
  _impl_.search_to_eval_ = nullptr;
}
void PostAnnotationSearchMetricsRequest::clear_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
}
PostAnnotationSearchMetricsRequest::PostAnnotationSearchMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostAnnotationSearchMetricsRequest)
}
PostAnnotationSearchMetricsRequest::PostAnnotationSearchMetricsRequest(const PostAnnotationSearchMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostAnnotationSearchMetricsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.ground_truth_){nullptr}
    , decltype(_impl_.search_to_eval_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.evaluation_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  if (from._internal_has_ground_truth()) {
    _this->_impl_.ground_truth_ = new ::clarifai::api::Search(*from._impl_.ground_truth_);
  }
  if (from._internal_has_search_to_eval()) {
    _this->_impl_.search_to_eval_ = new ::clarifai::api::Search(*from._impl_.search_to_eval_);
  }
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::clarifai::api::Data(*from._impl_.data_);
  }
  _this->_impl_.evaluation_type_ = from._impl_.evaluation_type_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostAnnotationSearchMetricsRequest)
}

inline void PostAnnotationSearchMetricsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.ground_truth_){nullptr}
    , decltype(_impl_.search_to_eval_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.evaluation_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PostAnnotationSearchMetricsRequest::~PostAnnotationSearchMetricsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostAnnotationSearchMetricsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostAnnotationSearchMetricsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
  if (this != internal_default_instance()) delete _impl_.ground_truth_;
  if (this != internal_default_instance()) delete _impl_.search_to_eval_;
  if (this != internal_default_instance()) delete _impl_.data_;
}

void PostAnnotationSearchMetricsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostAnnotationSearchMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostAnnotationSearchMetricsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ground_truth_ != nullptr) {
    delete _impl_.ground_truth_;
  }
  _impl_.ground_truth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.search_to_eval_ != nullptr) {
    delete _impl_.search_to_eval_;
  }
  _impl_.search_to_eval_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  _impl_.evaluation_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostAnnotationSearchMetricsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PostAnnotationSearchMetricsRequest.id"));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Search ground_truth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ground_truth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Search search_to_eval = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_search_to_eval(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Data data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.EvaluationType evaluation_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_evaluation_type(static_cast<::clarifai::api::EvaluationType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostAnnotationSearchMetricsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostAnnotationSearchMetricsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostAnnotationSearchMetricsRequest.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // .clarifai.api.Search ground_truth = 3;
  if (this->_internal_has_ground_truth()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::ground_truth(this),
        _Internal::ground_truth(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Search search_to_eval = 4;
  if (this->_internal_has_search_to_eval()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::search_to_eval(this),
        _Internal::search_to_eval(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Data data = 5;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.EvaluationType evaluation_type = 6;
  if (this->_internal_evaluation_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_evaluation_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostAnnotationSearchMetricsRequest)
  return target;
}

size_t PostAnnotationSearchMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostAnnotationSearchMetricsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // .clarifai.api.Search ground_truth = 3;
  if (this->_internal_has_ground_truth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ground_truth_);
  }

  // .clarifai.api.Search search_to_eval = 4;
  if (this->_internal_has_search_to_eval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.search_to_eval_);
  }

  // .clarifai.api.Data data = 5;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  // .clarifai.api.EvaluationType evaluation_type = 6;
  if (this->_internal_evaluation_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_evaluation_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostAnnotationSearchMetricsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostAnnotationSearchMetricsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostAnnotationSearchMetricsRequest::GetClassData() const { return &_class_data_; }


void PostAnnotationSearchMetricsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostAnnotationSearchMetricsRequest*>(&to_msg);
  auto& from = static_cast<const PostAnnotationSearchMetricsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostAnnotationSearchMetricsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_has_ground_truth()) {
    _this->_internal_mutable_ground_truth()->::clarifai::api::Search::MergeFrom(
        from._internal_ground_truth());
  }
  if (from._internal_has_search_to_eval()) {
    _this->_internal_mutable_search_to_eval()->::clarifai::api::Search::MergeFrom(
        from._internal_search_to_eval());
  }
  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::clarifai::api::Data::MergeFrom(
        from._internal_data());
  }
  if (from._internal_evaluation_type() != 0) {
    _this->_internal_set_evaluation_type(from._internal_evaluation_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostAnnotationSearchMetricsRequest::CopyFrom(const PostAnnotationSearchMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostAnnotationSearchMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostAnnotationSearchMetricsRequest::IsInitialized() const {
  return true;
}

void PostAnnotationSearchMetricsRequest::InternalSwap(PostAnnotationSearchMetricsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostAnnotationSearchMetricsRequest, _impl_.evaluation_type_)
      + sizeof(PostAnnotationSearchMetricsRequest::_impl_.evaluation_type_)
      - PROTOBUF_FIELD_OFFSET(PostAnnotationSearchMetricsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostAnnotationSearchMetricsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[182]);
}

// ===================================================================

class GetAnnotationSearchMetricsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetAnnotationSearchMetricsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetAnnotationSearchMetricsRequest::_Internal::user_app_id(const GetAnnotationSearchMetricsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void GetAnnotationSearchMetricsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
GetAnnotationSearchMetricsRequest::GetAnnotationSearchMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetAnnotationSearchMetricsRequest)
}
GetAnnotationSearchMetricsRequest::GetAnnotationSearchMetricsRequest(const GetAnnotationSearchMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetAnnotationSearchMetricsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetAnnotationSearchMetricsRequest)
}

inline void GetAnnotationSearchMetricsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetAnnotationSearchMetricsRequest::~GetAnnotationSearchMetricsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetAnnotationSearchMetricsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAnnotationSearchMetricsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void GetAnnotationSearchMetricsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetAnnotationSearchMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetAnnotationSearchMetricsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAnnotationSearchMetricsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetAnnotationSearchMetricsRequest.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAnnotationSearchMetricsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetAnnotationSearchMetricsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetAnnotationSearchMetricsRequest.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetAnnotationSearchMetricsRequest)
  return target;
}

size_t GetAnnotationSearchMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetAnnotationSearchMetricsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAnnotationSearchMetricsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetAnnotationSearchMetricsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAnnotationSearchMetricsRequest::GetClassData() const { return &_class_data_; }


void GetAnnotationSearchMetricsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetAnnotationSearchMetricsRequest*>(&to_msg);
  auto& from = static_cast<const GetAnnotationSearchMetricsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetAnnotationSearchMetricsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAnnotationSearchMetricsRequest::CopyFrom(const GetAnnotationSearchMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetAnnotationSearchMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAnnotationSearchMetricsRequest::IsInitialized() const {
  return true;
}

void GetAnnotationSearchMetricsRequest::InternalSwap(GetAnnotationSearchMetricsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAnnotationSearchMetricsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[183]);
}

// ===================================================================

class ListAnnotationSearchMetricsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListAnnotationSearchMetricsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListAnnotationSearchMetricsRequest::_Internal::user_app_id(const ListAnnotationSearchMetricsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListAnnotationSearchMetricsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
ListAnnotationSearchMetricsRequest::ListAnnotationSearchMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListAnnotationSearchMetricsRequest)
}
ListAnnotationSearchMetricsRequest::ListAnnotationSearchMetricsRequest(const ListAnnotationSearchMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListAnnotationSearchMetricsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListAnnotationSearchMetricsRequest)
}

inline void ListAnnotationSearchMetricsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListAnnotationSearchMetricsRequest::~ListAnnotationSearchMetricsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListAnnotationSearchMetricsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListAnnotationSearchMetricsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void ListAnnotationSearchMetricsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListAnnotationSearchMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListAnnotationSearchMetricsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListAnnotationSearchMetricsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListAnnotationSearchMetricsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListAnnotationSearchMetricsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListAnnotationSearchMetricsRequest)
  return target;
}

size_t ListAnnotationSearchMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListAnnotationSearchMetricsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListAnnotationSearchMetricsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListAnnotationSearchMetricsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListAnnotationSearchMetricsRequest::GetClassData() const { return &_class_data_; }


void ListAnnotationSearchMetricsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListAnnotationSearchMetricsRequest*>(&to_msg);
  auto& from = static_cast<const ListAnnotationSearchMetricsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListAnnotationSearchMetricsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListAnnotationSearchMetricsRequest::CopyFrom(const ListAnnotationSearchMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListAnnotationSearchMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAnnotationSearchMetricsRequest::IsInitialized() const {
  return true;
}

void ListAnnotationSearchMetricsRequest::InternalSwap(ListAnnotationSearchMetricsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAnnotationSearchMetricsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[184]);
}

// ===================================================================

class MultiAnnotationSearchMetricsResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiAnnotationSearchMetricsResponse* msg);
};

const ::clarifai::api::status::Status&
MultiAnnotationSearchMetricsResponse::_Internal::status(const MultiAnnotationSearchMetricsResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiAnnotationSearchMetricsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiAnnotationSearchMetricsResponse::clear_annotation_search_metrics() {
  _impl_.annotation_search_metrics_.Clear();
}
MultiAnnotationSearchMetricsResponse::MultiAnnotationSearchMetricsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiAnnotationSearchMetricsResponse)
}
MultiAnnotationSearchMetricsResponse::MultiAnnotationSearchMetricsResponse(const MultiAnnotationSearchMetricsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiAnnotationSearchMetricsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.annotation_search_metrics_){from._impl_.annotation_search_metrics_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiAnnotationSearchMetricsResponse)
}

inline void MultiAnnotationSearchMetricsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.annotation_search_metrics_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiAnnotationSearchMetricsResponse::~MultiAnnotationSearchMetricsResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiAnnotationSearchMetricsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiAnnotationSearchMetricsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.annotation_search_metrics_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiAnnotationSearchMetricsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiAnnotationSearchMetricsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiAnnotationSearchMetricsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.annotation_search_metrics_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiAnnotationSearchMetricsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.AnnotationSearchMetrics annotation_search_metrics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotation_search_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiAnnotationSearchMetricsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiAnnotationSearchMetricsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.AnnotationSearchMetrics annotation_search_metrics = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_annotation_search_metrics_size()); i < n; i++) {
    const auto& repfield = this->_internal_annotation_search_metrics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiAnnotationSearchMetricsResponse)
  return target;
}

size_t MultiAnnotationSearchMetricsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiAnnotationSearchMetricsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.AnnotationSearchMetrics annotation_search_metrics = 2;
  total_size += 1UL * this->_internal_annotation_search_metrics_size();
  for (const auto& msg : this->_impl_.annotation_search_metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiAnnotationSearchMetricsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiAnnotationSearchMetricsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiAnnotationSearchMetricsResponse::GetClassData() const { return &_class_data_; }


void MultiAnnotationSearchMetricsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiAnnotationSearchMetricsResponse*>(&to_msg);
  auto& from = static_cast<const MultiAnnotationSearchMetricsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiAnnotationSearchMetricsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.annotation_search_metrics_.MergeFrom(from._impl_.annotation_search_metrics_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiAnnotationSearchMetricsResponse::CopyFrom(const MultiAnnotationSearchMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiAnnotationSearchMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiAnnotationSearchMetricsResponse::IsInitialized() const {
  return true;
}

void MultiAnnotationSearchMetricsResponse::InternalSwap(MultiAnnotationSearchMetricsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.annotation_search_metrics_.InternalSwap(&other->_impl_.annotation_search_metrics_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiAnnotationSearchMetricsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[185]);
}

// ===================================================================

class ListAnnotationFiltersRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListAnnotationFiltersRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListAnnotationFiltersRequest::_Internal::user_app_id(const ListAnnotationFiltersRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListAnnotationFiltersRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
ListAnnotationFiltersRequest::ListAnnotationFiltersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListAnnotationFiltersRequest)
}
ListAnnotationFiltersRequest::ListAnnotationFiltersRequest(const ListAnnotationFiltersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListAnnotationFiltersRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.per_page_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListAnnotationFiltersRequest)
}

inline void ListAnnotationFiltersRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListAnnotationFiltersRequest::~ListAnnotationFiltersRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListAnnotationFiltersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListAnnotationFiltersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void ListAnnotationFiltersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListAnnotationFiltersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListAnnotationFiltersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.per_page_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListAnnotationFiltersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListAnnotationFiltersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListAnnotationFiltersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListAnnotationFiltersRequest)
  return target;
}

size_t ListAnnotationFiltersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListAnnotationFiltersRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListAnnotationFiltersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListAnnotationFiltersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListAnnotationFiltersRequest::GetClassData() const { return &_class_data_; }


void ListAnnotationFiltersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListAnnotationFiltersRequest*>(&to_msg);
  auto& from = static_cast<const ListAnnotationFiltersRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListAnnotationFiltersRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListAnnotationFiltersRequest::CopyFrom(const ListAnnotationFiltersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListAnnotationFiltersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAnnotationFiltersRequest::IsInitialized() const {
  return true;
}

void ListAnnotationFiltersRequest::InternalSwap(ListAnnotationFiltersRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListAnnotationFiltersRequest, _impl_.per_page_)
      + sizeof(ListAnnotationFiltersRequest::_impl_.per_page_)
      - PROTOBUF_FIELD_OFFSET(ListAnnotationFiltersRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAnnotationFiltersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[186]);
}

// ===================================================================

class GetAnnotationFilterRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetAnnotationFilterRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetAnnotationFilterRequest::_Internal::user_app_id(const GetAnnotationFilterRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void GetAnnotationFilterRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
GetAnnotationFilterRequest::GetAnnotationFilterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetAnnotationFilterRequest)
}
GetAnnotationFilterRequest::GetAnnotationFilterRequest(const GetAnnotationFilterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetAnnotationFilterRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.annotation_filter_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.annotation_filter_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.annotation_filter_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_annotation_filter_id().empty()) {
    _this->_impl_.annotation_filter_id_.Set(from._internal_annotation_filter_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetAnnotationFilterRequest)
}

inline void GetAnnotationFilterRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.annotation_filter_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.annotation_filter_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.annotation_filter_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetAnnotationFilterRequest::~GetAnnotationFilterRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetAnnotationFilterRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAnnotationFilterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.annotation_filter_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void GetAnnotationFilterRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetAnnotationFilterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetAnnotationFilterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.annotation_filter_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAnnotationFilterRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string annotation_filter_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_annotation_filter_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetAnnotationFilterRequest.annotation_filter_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAnnotationFilterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetAnnotationFilterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string annotation_filter_id = 2;
  if (!this->_internal_annotation_filter_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_annotation_filter_id().data(), static_cast<int>(this->_internal_annotation_filter_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetAnnotationFilterRequest.annotation_filter_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_annotation_filter_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetAnnotationFilterRequest)
  return target;
}

size_t GetAnnotationFilterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetAnnotationFilterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string annotation_filter_id = 2;
  if (!this->_internal_annotation_filter_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_annotation_filter_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAnnotationFilterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetAnnotationFilterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAnnotationFilterRequest::GetClassData() const { return &_class_data_; }


void GetAnnotationFilterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetAnnotationFilterRequest*>(&to_msg);
  auto& from = static_cast<const GetAnnotationFilterRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetAnnotationFilterRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_annotation_filter_id().empty()) {
    _this->_internal_set_annotation_filter_id(from._internal_annotation_filter_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAnnotationFilterRequest::CopyFrom(const GetAnnotationFilterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetAnnotationFilterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAnnotationFilterRequest::IsInitialized() const {
  return true;
}

void GetAnnotationFilterRequest::InternalSwap(GetAnnotationFilterRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.annotation_filter_id_, lhs_arena,
      &other->_impl_.annotation_filter_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAnnotationFilterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[187]);
}

// ===================================================================

class PostAnnotationFiltersRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostAnnotationFiltersRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostAnnotationFiltersRequest::_Internal::user_app_id(const PostAnnotationFiltersRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PostAnnotationFiltersRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostAnnotationFiltersRequest::clear_annotation_filters() {
  _impl_.annotation_filters_.Clear();
}
PostAnnotationFiltersRequest::PostAnnotationFiltersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostAnnotationFiltersRequest)
}
PostAnnotationFiltersRequest::PostAnnotationFiltersRequest(const PostAnnotationFiltersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostAnnotationFiltersRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.annotation_filters_){from._impl_.annotation_filters_}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostAnnotationFiltersRequest)
}

inline void PostAnnotationFiltersRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.annotation_filters_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PostAnnotationFiltersRequest::~PostAnnotationFiltersRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostAnnotationFiltersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostAnnotationFiltersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.annotation_filters_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PostAnnotationFiltersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostAnnotationFiltersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostAnnotationFiltersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.annotation_filters_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostAnnotationFiltersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.AnnotationFilter annotation_filters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotation_filters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostAnnotationFiltersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostAnnotationFiltersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.AnnotationFilter annotation_filters = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_annotation_filters_size()); i < n; i++) {
    const auto& repfield = this->_internal_annotation_filters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostAnnotationFiltersRequest)
  return target;
}

size_t PostAnnotationFiltersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostAnnotationFiltersRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.AnnotationFilter annotation_filters = 2;
  total_size += 1UL * this->_internal_annotation_filters_size();
  for (const auto& msg : this->_impl_.annotation_filters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostAnnotationFiltersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostAnnotationFiltersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostAnnotationFiltersRequest::GetClassData() const { return &_class_data_; }


void PostAnnotationFiltersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostAnnotationFiltersRequest*>(&to_msg);
  auto& from = static_cast<const PostAnnotationFiltersRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostAnnotationFiltersRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.annotation_filters_.MergeFrom(from._impl_.annotation_filters_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostAnnotationFiltersRequest::CopyFrom(const PostAnnotationFiltersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostAnnotationFiltersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostAnnotationFiltersRequest::IsInitialized() const {
  return true;
}

void PostAnnotationFiltersRequest::InternalSwap(PostAnnotationFiltersRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.annotation_filters_.InternalSwap(&other->_impl_.annotation_filters_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostAnnotationFiltersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[188]);
}

// ===================================================================

class PatchAnnotationFiltersRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchAnnotationFiltersRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchAnnotationFiltersRequest::_Internal::user_app_id(const PatchAnnotationFiltersRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PatchAnnotationFiltersRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PatchAnnotationFiltersRequest::clear_annotation_filters() {
  _impl_.annotation_filters_.Clear();
}
PatchAnnotationFiltersRequest::PatchAnnotationFiltersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchAnnotationFiltersRequest)
}
PatchAnnotationFiltersRequest::PatchAnnotationFiltersRequest(const PatchAnnotationFiltersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PatchAnnotationFiltersRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.annotation_filters_){from._impl_.annotation_filters_}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchAnnotationFiltersRequest)
}

inline void PatchAnnotationFiltersRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.annotation_filters_){arena}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PatchAnnotationFiltersRequest::~PatchAnnotationFiltersRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchAnnotationFiltersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatchAnnotationFiltersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.annotation_filters_.~RepeatedPtrField();
  _impl_.action_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PatchAnnotationFiltersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatchAnnotationFiltersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchAnnotationFiltersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.annotation_filters_.Clear();
  _impl_.action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchAnnotationFiltersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.AnnotationFilter annotation_filters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotation_filters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchAnnotationFiltersRequest.action"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchAnnotationFiltersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchAnnotationFiltersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.AnnotationFilter annotation_filters = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_annotation_filters_size()); i < n; i++) {
    const auto& repfield = this->_internal_annotation_filters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchAnnotationFiltersRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchAnnotationFiltersRequest)
  return target;
}

size_t PatchAnnotationFiltersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchAnnotationFiltersRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.AnnotationFilter annotation_filters = 2;
  total_size += 1UL * this->_internal_annotation_filters_size();
  for (const auto& msg : this->_impl_.annotation_filters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchAnnotationFiltersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PatchAnnotationFiltersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchAnnotationFiltersRequest::GetClassData() const { return &_class_data_; }


void PatchAnnotationFiltersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PatchAnnotationFiltersRequest*>(&to_msg);
  auto& from = static_cast<const PatchAnnotationFiltersRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchAnnotationFiltersRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.annotation_filters_.MergeFrom(from._impl_.annotation_filters_);
  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchAnnotationFiltersRequest::CopyFrom(const PatchAnnotationFiltersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchAnnotationFiltersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchAnnotationFiltersRequest::IsInitialized() const {
  return true;
}

void PatchAnnotationFiltersRequest::InternalSwap(PatchAnnotationFiltersRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.annotation_filters_.InternalSwap(&other->_impl_.annotation_filters_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchAnnotationFiltersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[189]);
}

// ===================================================================

class DeleteAnnotationFiltersRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteAnnotationFiltersRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteAnnotationFiltersRequest::_Internal::user_app_id(const DeleteAnnotationFiltersRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void DeleteAnnotationFiltersRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
DeleteAnnotationFiltersRequest::DeleteAnnotationFiltersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteAnnotationFiltersRequest)
}
DeleteAnnotationFiltersRequest::DeleteAnnotationFiltersRequest(const DeleteAnnotationFiltersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteAnnotationFiltersRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.annotation_filter_ids_){from._impl_.annotation_filter_ids_}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteAnnotationFiltersRequest)
}

inline void DeleteAnnotationFiltersRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.annotation_filter_ids_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeleteAnnotationFiltersRequest::~DeleteAnnotationFiltersRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteAnnotationFiltersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteAnnotationFiltersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.annotation_filter_ids_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void DeleteAnnotationFiltersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteAnnotationFiltersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteAnnotationFiltersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.annotation_filter_ids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteAnnotationFiltersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string annotation_filter_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_annotation_filter_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DeleteAnnotationFiltersRequest.annotation_filter_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteAnnotationFiltersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteAnnotationFiltersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated string annotation_filter_ids = 2;
  for (int i = 0, n = this->_internal_annotation_filter_ids_size(); i < n; i++) {
    const auto& s = this->_internal_annotation_filter_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteAnnotationFiltersRequest.annotation_filter_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteAnnotationFiltersRequest)
  return target;
}

size_t DeleteAnnotationFiltersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteAnnotationFiltersRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string annotation_filter_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.annotation_filter_ids_.size());
  for (int i = 0, n = _impl_.annotation_filter_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.annotation_filter_ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteAnnotationFiltersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteAnnotationFiltersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteAnnotationFiltersRequest::GetClassData() const { return &_class_data_; }


void DeleteAnnotationFiltersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteAnnotationFiltersRequest*>(&to_msg);
  auto& from = static_cast<const DeleteAnnotationFiltersRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteAnnotationFiltersRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.annotation_filter_ids_.MergeFrom(from._impl_.annotation_filter_ids_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteAnnotationFiltersRequest::CopyFrom(const DeleteAnnotationFiltersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteAnnotationFiltersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAnnotationFiltersRequest::IsInitialized() const {
  return true;
}

void DeleteAnnotationFiltersRequest::InternalSwap(DeleteAnnotationFiltersRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.annotation_filter_ids_.InternalSwap(&other->_impl_.annotation_filter_ids_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteAnnotationFiltersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[190]);
}

// ===================================================================

class MultiAnnotationFilterResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiAnnotationFilterResponse* msg);
};

const ::clarifai::api::status::Status&
MultiAnnotationFilterResponse::_Internal::status(const MultiAnnotationFilterResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiAnnotationFilterResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiAnnotationFilterResponse::clear_annotation_filters() {
  _impl_.annotation_filters_.Clear();
}
MultiAnnotationFilterResponse::MultiAnnotationFilterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiAnnotationFilterResponse)
}
MultiAnnotationFilterResponse::MultiAnnotationFilterResponse(const MultiAnnotationFilterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiAnnotationFilterResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.annotation_filters_){from._impl_.annotation_filters_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiAnnotationFilterResponse)
}

inline void MultiAnnotationFilterResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.annotation_filters_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiAnnotationFilterResponse::~MultiAnnotationFilterResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiAnnotationFilterResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiAnnotationFilterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.annotation_filters_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiAnnotationFilterResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiAnnotationFilterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiAnnotationFilterResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.annotation_filters_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiAnnotationFilterResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.AnnotationFilter annotation_filters = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotation_filters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiAnnotationFilterResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiAnnotationFilterResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.AnnotationFilter annotation_filters = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_annotation_filters_size()); i < n; i++) {
    const auto& repfield = this->_internal_annotation_filters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiAnnotationFilterResponse)
  return target;
}

size_t MultiAnnotationFilterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiAnnotationFilterResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.AnnotationFilter annotation_filters = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_annotation_filters_size();
  for (const auto& msg : this->_impl_.annotation_filters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiAnnotationFilterResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiAnnotationFilterResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiAnnotationFilterResponse::GetClassData() const { return &_class_data_; }


void MultiAnnotationFilterResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiAnnotationFilterResponse*>(&to_msg);
  auto& from = static_cast<const MultiAnnotationFilterResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiAnnotationFilterResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.annotation_filters_.MergeFrom(from._impl_.annotation_filters_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiAnnotationFilterResponse::CopyFrom(const MultiAnnotationFilterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiAnnotationFilterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiAnnotationFilterResponse::IsInitialized() const {
  return true;
}

void MultiAnnotationFilterResponse::InternalSwap(MultiAnnotationFilterResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.annotation_filters_.InternalSwap(&other->_impl_.annotation_filters_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiAnnotationFilterResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[191]);
}

// ===================================================================

class SingleAnnotationFilterResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleAnnotationFilterResponse* msg);
  static const ::clarifai::api::AnnotationFilter& annotation_filter(const SingleAnnotationFilterResponse* msg);
};

const ::clarifai::api::status::Status&
SingleAnnotationFilterResponse::_Internal::status(const SingleAnnotationFilterResponse* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::AnnotationFilter&
SingleAnnotationFilterResponse::_Internal::annotation_filter(const SingleAnnotationFilterResponse* msg) {
  return *msg->_impl_.annotation_filter_;
}
void SingleAnnotationFilterResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void SingleAnnotationFilterResponse::clear_annotation_filter() {
  if (GetArenaForAllocation() == nullptr && _impl_.annotation_filter_ != nullptr) {
    delete _impl_.annotation_filter_;
  }
  _impl_.annotation_filter_ = nullptr;
}
SingleAnnotationFilterResponse::SingleAnnotationFilterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleAnnotationFilterResponse)
}
SingleAnnotationFilterResponse::SingleAnnotationFilterResponse(const SingleAnnotationFilterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleAnnotationFilterResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.annotation_filter_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_annotation_filter()) {
    _this->_impl_.annotation_filter_ = new ::clarifai::api::AnnotationFilter(*from._impl_.annotation_filter_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleAnnotationFilterResponse)
}

inline void SingleAnnotationFilterResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.annotation_filter_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SingleAnnotationFilterResponse::~SingleAnnotationFilterResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleAnnotationFilterResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleAnnotationFilterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.annotation_filter_;
}

void SingleAnnotationFilterResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleAnnotationFilterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleAnnotationFilterResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.annotation_filter_ != nullptr) {
    delete _impl_.annotation_filter_;
  }
  _impl_.annotation_filter_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleAnnotationFilterResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.AnnotationFilter annotation_filter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleAnnotationFilterResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleAnnotationFilterResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.AnnotationFilter annotation_filter = 2;
  if (this->_internal_has_annotation_filter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::annotation_filter(this),
        _Internal::annotation_filter(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleAnnotationFilterResponse)
  return target;
}

size_t SingleAnnotationFilterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleAnnotationFilterResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.AnnotationFilter annotation_filter = 2;
  if (this->_internal_has_annotation_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.annotation_filter_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleAnnotationFilterResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleAnnotationFilterResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleAnnotationFilterResponse::GetClassData() const { return &_class_data_; }


void SingleAnnotationFilterResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleAnnotationFilterResponse*>(&to_msg);
  auto& from = static_cast<const SingleAnnotationFilterResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleAnnotationFilterResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_annotation_filter()) {
    _this->_internal_mutable_annotation_filter()->::clarifai::api::AnnotationFilter::MergeFrom(
        from._internal_annotation_filter());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleAnnotationFilterResponse::CopyFrom(const SingleAnnotationFilterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleAnnotationFilterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleAnnotationFilterResponse::IsInitialized() const {
  return true;
}

void SingleAnnotationFilterResponse::InternalSwap(SingleAnnotationFilterResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleAnnotationFilterResponse, _impl_.annotation_filter_)
      + sizeof(SingleAnnotationFilterResponse::_impl_.annotation_filter_)
      - PROTOBUF_FIELD_OFFSET(SingleAnnotationFilterResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleAnnotationFilterResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[192]);
}

// ===================================================================

class PostValidatePasswordRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostValidatePasswordRequest* msg);
  static const ::clarifai::api::Password& password(const PostValidatePasswordRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostValidatePasswordRequest::_Internal::user_app_id(const PostValidatePasswordRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
const ::clarifai::api::Password&
PostValidatePasswordRequest::_Internal::password(const PostValidatePasswordRequest* msg) {
  return *msg->_impl_.password_;
}
void PostValidatePasswordRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostValidatePasswordRequest::clear_password() {
  if (GetArenaForAllocation() == nullptr && _impl_.password_ != nullptr) {
    delete _impl_.password_;
  }
  _impl_.password_ = nullptr;
}
PostValidatePasswordRequest::PostValidatePasswordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostValidatePasswordRequest)
}
PostValidatePasswordRequest::PostValidatePasswordRequest(const PostValidatePasswordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostValidatePasswordRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.password_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  if (from._internal_has_password()) {
    _this->_impl_.password_ = new ::clarifai::api::Password(*from._impl_.password_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostValidatePasswordRequest)
}

inline void PostValidatePasswordRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.password_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PostValidatePasswordRequest::~PostValidatePasswordRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostValidatePasswordRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostValidatePasswordRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
  if (this != internal_default_instance()) delete _impl_.password_;
}

void PostValidatePasswordRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostValidatePasswordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostValidatePasswordRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.password_ != nullptr) {
    delete _impl_.password_;
  }
  _impl_.password_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostValidatePasswordRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Password password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_password(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostValidatePasswordRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostValidatePasswordRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Password password = 2;
  if (this->_internal_has_password()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::password(this),
        _Internal::password(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostValidatePasswordRequest)
  return target;
}

size_t PostValidatePasswordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostValidatePasswordRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // .clarifai.api.Password password = 2;
  if (this->_internal_has_password()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.password_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostValidatePasswordRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostValidatePasswordRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostValidatePasswordRequest::GetClassData() const { return &_class_data_; }


void PostValidatePasswordRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostValidatePasswordRequest*>(&to_msg);
  auto& from = static_cast<const PostValidatePasswordRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostValidatePasswordRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_has_password()) {
    _this->_internal_mutable_password()->::clarifai::api::Password::MergeFrom(
        from._internal_password());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostValidatePasswordRequest::CopyFrom(const PostValidatePasswordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostValidatePasswordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostValidatePasswordRequest::IsInitialized() const {
  return true;
}

void PostValidatePasswordRequest::InternalSwap(PostValidatePasswordRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostValidatePasswordRequest, _impl_.password_)
      + sizeof(PostValidatePasswordRequest::_impl_.password_)
      - PROTOBUF_FIELD_OFFSET(PostValidatePasswordRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostValidatePasswordRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[193]);
}

// ===================================================================

class SinglePasswordValidationResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SinglePasswordValidationResponse* msg);
  static const ::clarifai::api::PasswordViolations& password_violations(const SinglePasswordValidationResponse* msg);
};

const ::clarifai::api::status::Status&
SinglePasswordValidationResponse::_Internal::status(const SinglePasswordValidationResponse* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::PasswordViolations&
SinglePasswordValidationResponse::_Internal::password_violations(const SinglePasswordValidationResponse* msg) {
  return *msg->_impl_.password_violations_;
}
void SinglePasswordValidationResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void SinglePasswordValidationResponse::clear_password_violations() {
  if (GetArenaForAllocation() == nullptr && _impl_.password_violations_ != nullptr) {
    delete _impl_.password_violations_;
  }
  _impl_.password_violations_ = nullptr;
}
SinglePasswordValidationResponse::SinglePasswordValidationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SinglePasswordValidationResponse)
}
SinglePasswordValidationResponse::SinglePasswordValidationResponse(const SinglePasswordValidationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SinglePasswordValidationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.password_violations_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_password_violations()) {
    _this->_impl_.password_violations_ = new ::clarifai::api::PasswordViolations(*from._impl_.password_violations_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SinglePasswordValidationResponse)
}

inline void SinglePasswordValidationResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.password_violations_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SinglePasswordValidationResponse::~SinglePasswordValidationResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SinglePasswordValidationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SinglePasswordValidationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.password_violations_;
}

void SinglePasswordValidationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SinglePasswordValidationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SinglePasswordValidationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.password_violations_ != nullptr) {
    delete _impl_.password_violations_;
  }
  _impl_.password_violations_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SinglePasswordValidationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.PasswordViolations password_violations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_password_violations(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SinglePasswordValidationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SinglePasswordValidationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.PasswordViolations password_violations = 2;
  if (this->_internal_has_password_violations()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::password_violations(this),
        _Internal::password_violations(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SinglePasswordValidationResponse)
  return target;
}

size_t SinglePasswordValidationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SinglePasswordValidationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.PasswordViolations password_violations = 2;
  if (this->_internal_has_password_violations()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.password_violations_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SinglePasswordValidationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SinglePasswordValidationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SinglePasswordValidationResponse::GetClassData() const { return &_class_data_; }


void SinglePasswordValidationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SinglePasswordValidationResponse*>(&to_msg);
  auto& from = static_cast<const SinglePasswordValidationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SinglePasswordValidationResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_password_violations()) {
    _this->_internal_mutable_password_violations()->::clarifai::api::PasswordViolations::MergeFrom(
        from._internal_password_violations());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SinglePasswordValidationResponse::CopyFrom(const SinglePasswordValidationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SinglePasswordValidationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SinglePasswordValidationResponse::IsInitialized() const {
  return true;
}

void SinglePasswordValidationResponse::InternalSwap(SinglePasswordValidationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SinglePasswordValidationResponse, _impl_.password_violations_)
      + sizeof(SinglePasswordValidationResponse::_impl_.password_violations_)
      - PROTOBUF_FIELD_OFFSET(SinglePasswordValidationResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SinglePasswordValidationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[194]);
}

// ===================================================================

class GetWorkflowRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetWorkflowRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetWorkflowRequest::_Internal::user_app_id(const GetWorkflowRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void GetWorkflowRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
GetWorkflowRequest::GetWorkflowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetWorkflowRequest)
}
GetWorkflowRequest::GetWorkflowRequest(const GetWorkflowRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetWorkflowRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.additional_fields_){from._impl_.additional_fields_}
    , decltype(_impl_.workflow_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.favor_clarifai_workflows_){}
    , decltype(_impl_.exclude_clarifai_workflows_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.workflow_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workflow_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workflow_id().empty()) {
    _this->_impl_.workflow_id_.Set(from._internal_workflow_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.favor_clarifai_workflows_, &from._impl_.favor_clarifai_workflows_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.exclude_clarifai_workflows_) -
    reinterpret_cast<char*>(&_impl_.favor_clarifai_workflows_)) + sizeof(_impl_.exclude_clarifai_workflows_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetWorkflowRequest)
}

inline void GetWorkflowRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.additional_fields_){arena}
    , decltype(_impl_.workflow_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.favor_clarifai_workflows_){false}
    , decltype(_impl_.exclude_clarifai_workflows_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.workflow_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workflow_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetWorkflowRequest::~GetWorkflowRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetWorkflowRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetWorkflowRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.additional_fields_.~RepeatedPtrField();
  _impl_.workflow_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void GetWorkflowRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetWorkflowRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetWorkflowRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.additional_fields_.Clear();
  _impl_.workflow_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.favor_clarifai_workflows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.exclude_clarifai_workflows_) -
      reinterpret_cast<char*>(&_impl_.favor_clarifai_workflows_)) + sizeof(_impl_.exclude_clarifai_workflows_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWorkflowRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string workflow_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_workflow_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetWorkflowRequest.workflow_id"));
        } else
          goto handle_unusual;
        continue;
      // bool favor_clarifai_workflows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.favor_clarifai_workflows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string additional_fields = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_additional_fields();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetWorkflowRequest.additional_fields"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool exclude_clarifai_workflows = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.exclude_clarifai_workflows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetWorkflowRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetWorkflowRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_id().data(), static_cast<int>(this->_internal_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetWorkflowRequest.workflow_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_workflow_id(), target);
  }

  // bool favor_clarifai_workflows = 3;
  if (this->_internal_favor_clarifai_workflows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_favor_clarifai_workflows(), target);
  }

  // repeated string additional_fields = 4;
  for (int i = 0, n = this->_internal_additional_fields_size(); i < n; i++) {
    const auto& s = this->_internal_additional_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetWorkflowRequest.additional_fields");
    target = stream->WriteString(4, s, target);
  }

  // bool exclude_clarifai_workflows = 5;
  if (this->_internal_exclude_clarifai_workflows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_exclude_clarifai_workflows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetWorkflowRequest)
  return target;
}

size_t GetWorkflowRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetWorkflowRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string additional_fields = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.additional_fields_.size());
  for (int i = 0, n = _impl_.additional_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.additional_fields_.Get(i));
  }

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // bool favor_clarifai_workflows = 3;
  if (this->_internal_favor_clarifai_workflows() != 0) {
    total_size += 1 + 1;
  }

  // bool exclude_clarifai_workflows = 5;
  if (this->_internal_exclude_clarifai_workflows() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetWorkflowRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetWorkflowRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetWorkflowRequest::GetClassData() const { return &_class_data_; }


void GetWorkflowRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetWorkflowRequest*>(&to_msg);
  auto& from = static_cast<const GetWorkflowRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetWorkflowRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.additional_fields_.MergeFrom(from._impl_.additional_fields_);
  if (!from._internal_workflow_id().empty()) {
    _this->_internal_set_workflow_id(from._internal_workflow_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_favor_clarifai_workflows() != 0) {
    _this->_internal_set_favor_clarifai_workflows(from._internal_favor_clarifai_workflows());
  }
  if (from._internal_exclude_clarifai_workflows() != 0) {
    _this->_internal_set_exclude_clarifai_workflows(from._internal_exclude_clarifai_workflows());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetWorkflowRequest::CopyFrom(const GetWorkflowRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetWorkflowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWorkflowRequest::IsInitialized() const {
  return true;
}

void GetWorkflowRequest::InternalSwap(GetWorkflowRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.additional_fields_.InternalSwap(&other->_impl_.additional_fields_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.workflow_id_, lhs_arena,
      &other->_impl_.workflow_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetWorkflowRequest, _impl_.exclude_clarifai_workflows_)
      + sizeof(GetWorkflowRequest::_impl_.exclude_clarifai_workflows_)
      - PROTOBUF_FIELD_OFFSET(GetWorkflowRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWorkflowRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[195]);
}

// ===================================================================

class ListWorkflowsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListWorkflowsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListWorkflowsRequest::_Internal::user_app_id(const ListWorkflowsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListWorkflowsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
ListWorkflowsRequest::ListWorkflowsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListWorkflowsRequest)
}
ListWorkflowsRequest::ListWorkflowsRequest(const ListWorkflowsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListWorkflowsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.additional_fields_){from._impl_.additional_fields_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.query_){}
    , decltype(_impl_.search_term_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , decltype(_impl_.sort_ascending_){}
    , decltype(_impl_.featured_only_){}
    , decltype(_impl_.starred_only_){}
    , decltype(_impl_.sort_by_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.query_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_query().empty()) {
    _this->_impl_.query_.Set(from._internal_query(), 
      _this->GetArenaForAllocation());
  }
  _impl_.search_term_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.search_term_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_search_term().empty()) {
    _this->_impl_.search_term_.Set(from._internal_search_term(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.starred_only_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.starred_only_));
  clear_has_sort_by();
  switch (from.sort_by_case()) {
    case kSortById: {
      _this->_internal_set_sort_by_id(from._internal_sort_by_id());
      break;
    }
    case kSortByModifiedAt: {
      _this->_internal_set_sort_by_modified_at(from._internal_sort_by_modified_at());
      break;
    }
    case SORT_BY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListWorkflowsRequest)
}

inline void ListWorkflowsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.additional_fields_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.query_){}
    , decltype(_impl_.search_term_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , decltype(_impl_.sort_ascending_){false}
    , decltype(_impl_.featured_only_){false}
    , decltype(_impl_.starred_only_){false}
    , decltype(_impl_.sort_by_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.query_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.search_term_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.search_term_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_sort_by();
}

ListWorkflowsRequest::~ListWorkflowsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListWorkflowsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListWorkflowsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.additional_fields_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.query_.Destroy();
  _impl_.search_term_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
  if (has_sort_by()) {
    clear_sort_by();
  }
}

void ListWorkflowsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListWorkflowsRequest::clear_sort_by() {
// @@protoc_insertion_point(one_of_clear_start:clarifai.api.ListWorkflowsRequest)
  switch (sort_by_case()) {
    case kSortById: {
      // No need to clear
      break;
    }
    case kSortByModifiedAt: {
      // No need to clear
      break;
    }
    case SORT_BY_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SORT_BY_NOT_SET;
}


void ListWorkflowsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListWorkflowsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.additional_fields_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.query_.ClearToEmpty();
  _impl_.search_term_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.starred_only_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.starred_only_));
  clear_sort_by();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListWorkflowsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListWorkflowsRequest.id"));
        } else
          goto handle_unusual;
        continue;
      // bool sort_ascending = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.sort_ascending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool sort_by_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _internal_set_sort_by_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool sort_by_modified_at = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _internal_set_sort_by_modified_at(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string query = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_query();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListWorkflowsRequest.query"));
        } else
          goto handle_unusual;
        continue;
      // bool featured_only = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.featured_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string additional_fields = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_additional_fields();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListWorkflowsRequest.additional_fields"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool starred_only = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.starred_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string search_term = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_search_term();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListWorkflowsRequest.search_term"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListWorkflowsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListWorkflowsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  // string id = 4 [deprecated = true];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListWorkflowsRequest.id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_id(), target);
  }

  // bool sort_ascending = 5;
  if (this->_internal_sort_ascending() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_sort_ascending(), target);
  }

  // bool sort_by_id = 6;
  if (_internal_has_sort_by_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_sort_by_id(), target);
  }

  // bool sort_by_modified_at = 7;
  if (_internal_has_sort_by_modified_at()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_sort_by_modified_at(), target);
  }

  // string query = 8;
  if (!this->_internal_query().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListWorkflowsRequest.query");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_query(), target);
  }

  // bool featured_only = 9;
  if (this->_internal_featured_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_featured_only(), target);
  }

  // repeated string additional_fields = 10;
  for (int i = 0, n = this->_internal_additional_fields_size(); i < n; i++) {
    const auto& s = this->_internal_additional_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListWorkflowsRequest.additional_fields");
    target = stream->WriteString(10, s, target);
  }

  // bool starred_only = 11;
  if (this->_internal_starred_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_starred_only(), target);
  }

  // string search_term = 12;
  if (!this->_internal_search_term().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_search_term().data(), static_cast<int>(this->_internal_search_term().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListWorkflowsRequest.search_term");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_search_term(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListWorkflowsRequest)
  return target;
}

size_t ListWorkflowsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListWorkflowsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string additional_fields = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.additional_fields_.size());
  for (int i = 0, n = _impl_.additional_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.additional_fields_.Get(i));
  }

  // string id = 4 [deprecated = true];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string query = 8;
  if (!this->_internal_query().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  // string search_term = 12;
  if (!this->_internal_search_term().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_search_term());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  // bool sort_ascending = 5;
  if (this->_internal_sort_ascending() != 0) {
    total_size += 1 + 1;
  }

  // bool featured_only = 9;
  if (this->_internal_featured_only() != 0) {
    total_size += 1 + 1;
  }

  // bool starred_only = 11;
  if (this->_internal_starred_only() != 0) {
    total_size += 1 + 1;
  }

  switch (sort_by_case()) {
    // bool sort_by_id = 6;
    case kSortById: {
      total_size += 1 + 1;
      break;
    }
    // bool sort_by_modified_at = 7;
    case kSortByModifiedAt: {
      total_size += 1 + 1;
      break;
    }
    case SORT_BY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListWorkflowsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListWorkflowsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListWorkflowsRequest::GetClassData() const { return &_class_data_; }


void ListWorkflowsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListWorkflowsRequest*>(&to_msg);
  auto& from = static_cast<const ListWorkflowsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListWorkflowsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.additional_fields_.MergeFrom(from._impl_.additional_fields_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_query().empty()) {
    _this->_internal_set_query(from._internal_query());
  }
  if (!from._internal_search_term().empty()) {
    _this->_internal_set_search_term(from._internal_search_term());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  if (from._internal_sort_ascending() != 0) {
    _this->_internal_set_sort_ascending(from._internal_sort_ascending());
  }
  if (from._internal_featured_only() != 0) {
    _this->_internal_set_featured_only(from._internal_featured_only());
  }
  if (from._internal_starred_only() != 0) {
    _this->_internal_set_starred_only(from._internal_starred_only());
  }
  switch (from.sort_by_case()) {
    case kSortById: {
      _this->_internal_set_sort_by_id(from._internal_sort_by_id());
      break;
    }
    case kSortByModifiedAt: {
      _this->_internal_set_sort_by_modified_at(from._internal_sort_by_modified_at());
      break;
    }
    case SORT_BY_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListWorkflowsRequest::CopyFrom(const ListWorkflowsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListWorkflowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListWorkflowsRequest::IsInitialized() const {
  return true;
}

void ListWorkflowsRequest::InternalSwap(ListWorkflowsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.additional_fields_.InternalSwap(&other->_impl_.additional_fields_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.query_, lhs_arena,
      &other->_impl_.query_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.search_term_, lhs_arena,
      &other->_impl_.search_term_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListWorkflowsRequest, _impl_.starred_only_)
      + sizeof(ListWorkflowsRequest::_impl_.starred_only_)
      - PROTOBUF_FIELD_OFFSET(ListWorkflowsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
  swap(_impl_.sort_by_, other->_impl_.sort_by_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListWorkflowsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[196]);
}

// ===================================================================

class PostWorkflowsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostWorkflowsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostWorkflowsRequest::_Internal::user_app_id(const PostWorkflowsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PostWorkflowsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostWorkflowsRequest::clear_workflows() {
  _impl_.workflows_.Clear();
}
PostWorkflowsRequest::PostWorkflowsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostWorkflowsRequest)
}
PostWorkflowsRequest::PostWorkflowsRequest(const PostWorkflowsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostWorkflowsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.workflows_){from._impl_.workflows_}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostWorkflowsRequest)
}

inline void PostWorkflowsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.workflows_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PostWorkflowsRequest::~PostWorkflowsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostWorkflowsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostWorkflowsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.workflows_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PostWorkflowsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostWorkflowsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostWorkflowsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.workflows_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostWorkflowsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Workflow workflows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_workflows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostWorkflowsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostWorkflowsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Workflow workflows = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_workflows_size()); i < n; i++) {
    const auto& repfield = this->_internal_workflows(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostWorkflowsRequest)
  return target;
}

size_t PostWorkflowsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostWorkflowsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Workflow workflows = 2;
  total_size += 1UL * this->_internal_workflows_size();
  for (const auto& msg : this->_impl_.workflows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostWorkflowsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostWorkflowsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostWorkflowsRequest::GetClassData() const { return &_class_data_; }


void PostWorkflowsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostWorkflowsRequest*>(&to_msg);
  auto& from = static_cast<const PostWorkflowsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostWorkflowsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.workflows_.MergeFrom(from._impl_.workflows_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostWorkflowsRequest::CopyFrom(const PostWorkflowsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostWorkflowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostWorkflowsRequest::IsInitialized() const {
  return true;
}

void PostWorkflowsRequest::InternalSwap(PostWorkflowsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.workflows_.InternalSwap(&other->_impl_.workflows_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostWorkflowsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[197]);
}

// ===================================================================

class PatchWorkflowsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchWorkflowsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchWorkflowsRequest::_Internal::user_app_id(const PatchWorkflowsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PatchWorkflowsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PatchWorkflowsRequest::clear_workflows() {
  _impl_.workflows_.Clear();
}
PatchWorkflowsRequest::PatchWorkflowsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchWorkflowsRequest)
}
PatchWorkflowsRequest::PatchWorkflowsRequest(const PatchWorkflowsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PatchWorkflowsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.workflows_){from._impl_.workflows_}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchWorkflowsRequest)
}

inline void PatchWorkflowsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.workflows_){arena}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PatchWorkflowsRequest::~PatchWorkflowsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchWorkflowsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatchWorkflowsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.workflows_.~RepeatedPtrField();
  _impl_.action_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PatchWorkflowsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatchWorkflowsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchWorkflowsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.workflows_.Clear();
  _impl_.action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchWorkflowsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Workflow workflows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_workflows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchWorkflowsRequest.action"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchWorkflowsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchWorkflowsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Workflow workflows = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_workflows_size()); i < n; i++) {
    const auto& repfield = this->_internal_workflows(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchWorkflowsRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchWorkflowsRequest)
  return target;
}

size_t PatchWorkflowsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchWorkflowsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Workflow workflows = 2;
  total_size += 1UL * this->_internal_workflows_size();
  for (const auto& msg : this->_impl_.workflows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchWorkflowsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PatchWorkflowsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchWorkflowsRequest::GetClassData() const { return &_class_data_; }


void PatchWorkflowsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PatchWorkflowsRequest*>(&to_msg);
  auto& from = static_cast<const PatchWorkflowsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchWorkflowsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.workflows_.MergeFrom(from._impl_.workflows_);
  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchWorkflowsRequest::CopyFrom(const PatchWorkflowsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchWorkflowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchWorkflowsRequest::IsInitialized() const {
  return true;
}

void PatchWorkflowsRequest::InternalSwap(PatchWorkflowsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.workflows_.InternalSwap(&other->_impl_.workflows_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchWorkflowsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[198]);
}

// ===================================================================

class PatchWorkflowIdsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchWorkflowIdsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchWorkflowIdsRequest::_Internal::user_app_id(const PatchWorkflowIdsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PatchWorkflowIdsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
PatchWorkflowIdsRequest::PatchWorkflowIdsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchWorkflowIdsRequest)
}
PatchWorkflowIdsRequest::PatchWorkflowIdsRequest(const PatchWorkflowIdsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PatchWorkflowIdsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){from._impl_.ids_}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchWorkflowIdsRequest)
}

inline void PatchWorkflowIdsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){arena}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PatchWorkflowIdsRequest::~PatchWorkflowIdsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchWorkflowIdsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatchWorkflowIdsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_.~RepeatedPtrField();
  _impl_.action_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PatchWorkflowIdsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatchWorkflowIdsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchWorkflowIdsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ids_.Clear();
  _impl_.action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchWorkflowIdsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.IdUpdateSource ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchWorkflowIdsRequest.action"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchWorkflowIdsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchWorkflowIdsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.IdUpdateSource ids = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ids_size()); i < n; i++) {
    const auto& repfield = this->_internal_ids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchWorkflowIdsRequest.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchWorkflowIdsRequest)
  return target;
}

size_t PatchWorkflowIdsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchWorkflowIdsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.IdUpdateSource ids = 3;
  total_size += 1UL * this->_internal_ids_size();
  for (const auto& msg : this->_impl_.ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchWorkflowIdsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PatchWorkflowIdsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchWorkflowIdsRequest::GetClassData() const { return &_class_data_; }


void PatchWorkflowIdsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PatchWorkflowIdsRequest*>(&to_msg);
  auto& from = static_cast<const PatchWorkflowIdsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchWorkflowIdsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_.MergeFrom(from._impl_.ids_);
  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchWorkflowIdsRequest::CopyFrom(const PatchWorkflowIdsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchWorkflowIdsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchWorkflowIdsRequest::IsInitialized() const {
  return true;
}

void PatchWorkflowIdsRequest::InternalSwap(PatchWorkflowIdsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ids_.InternalSwap(&other->_impl_.ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchWorkflowIdsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[199]);
}

// ===================================================================

class DeleteWorkflowRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteWorkflowRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteWorkflowRequest::_Internal::user_app_id(const DeleteWorkflowRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void DeleteWorkflowRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
DeleteWorkflowRequest::DeleteWorkflowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteWorkflowRequest)
}
DeleteWorkflowRequest::DeleteWorkflowRequest(const DeleteWorkflowRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteWorkflowRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.workflow_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.workflow_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workflow_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workflow_id().empty()) {
    _this->_impl_.workflow_id_.Set(from._internal_workflow_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteWorkflowRequest)
}

inline void DeleteWorkflowRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.workflow_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.workflow_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workflow_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteWorkflowRequest::~DeleteWorkflowRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteWorkflowRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteWorkflowRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.workflow_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void DeleteWorkflowRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteWorkflowRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteWorkflowRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.workflow_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteWorkflowRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string workflow_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_workflow_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DeleteWorkflowRequest.workflow_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteWorkflowRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteWorkflowRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_id().data(), static_cast<int>(this->_internal_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteWorkflowRequest.workflow_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_workflow_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteWorkflowRequest)
  return target;
}

size_t DeleteWorkflowRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteWorkflowRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteWorkflowRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteWorkflowRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteWorkflowRequest::GetClassData() const { return &_class_data_; }


void DeleteWorkflowRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteWorkflowRequest*>(&to_msg);
  auto& from = static_cast<const DeleteWorkflowRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteWorkflowRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_workflow_id().empty()) {
    _this->_internal_set_workflow_id(from._internal_workflow_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteWorkflowRequest::CopyFrom(const DeleteWorkflowRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteWorkflowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteWorkflowRequest::IsInitialized() const {
  return true;
}

void DeleteWorkflowRequest::InternalSwap(DeleteWorkflowRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.workflow_id_, lhs_arena,
      &other->_impl_.workflow_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteWorkflowRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[200]);
}

// ===================================================================

class DeleteWorkflowsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteWorkflowsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteWorkflowsRequest::_Internal::user_app_id(const DeleteWorkflowsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void DeleteWorkflowsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
DeleteWorkflowsRequest::DeleteWorkflowsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteWorkflowsRequest)
}
DeleteWorkflowsRequest::DeleteWorkflowsRequest(const DeleteWorkflowsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteWorkflowsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){from._impl_.ids_}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.delete_all_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  _this->_impl_.delete_all_ = from._impl_.delete_all_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteWorkflowsRequest)
}

inline void DeleteWorkflowsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.delete_all_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeleteWorkflowsRequest::~DeleteWorkflowsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteWorkflowsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteWorkflowsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void DeleteWorkflowsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteWorkflowsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteWorkflowsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _impl_.delete_all_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteWorkflowsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DeleteWorkflowsRequest.ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool delete_all = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.delete_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteWorkflowsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteWorkflowsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteWorkflowsRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  // bool delete_all = 3;
  if (this->_internal_delete_all() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_delete_all(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteWorkflowsRequest)
  return target;
}

size_t DeleteWorkflowsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteWorkflowsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.ids_.size());
  for (int i = 0, n = _impl_.ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // bool delete_all = 3;
  if (this->_internal_delete_all() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteWorkflowsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteWorkflowsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteWorkflowsRequest::GetClassData() const { return &_class_data_; }


void DeleteWorkflowsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteWorkflowsRequest*>(&to_msg);
  auto& from = static_cast<const DeleteWorkflowsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteWorkflowsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_.MergeFrom(from._impl_.ids_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_delete_all() != 0) {
    _this->_internal_set_delete_all(from._internal_delete_all());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteWorkflowsRequest::CopyFrom(const DeleteWorkflowsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteWorkflowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteWorkflowsRequest::IsInitialized() const {
  return true;
}

void DeleteWorkflowsRequest::InternalSwap(DeleteWorkflowsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ids_.InternalSwap(&other->_impl_.ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteWorkflowsRequest, _impl_.delete_all_)
      + sizeof(DeleteWorkflowsRequest::_impl_.delete_all_)
      - PROTOBUF_FIELD_OFFSET(DeleteWorkflowsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteWorkflowsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[201]);
}

// ===================================================================

class SingleWorkflowResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleWorkflowResponse* msg);
  static const ::clarifai::api::Workflow& workflow(const SingleWorkflowResponse* msg);
};

const ::clarifai::api::status::Status&
SingleWorkflowResponse::_Internal::status(const SingleWorkflowResponse* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::Workflow&
SingleWorkflowResponse::_Internal::workflow(const SingleWorkflowResponse* msg) {
  return *msg->_impl_.workflow_;
}
void SingleWorkflowResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void SingleWorkflowResponse::clear_workflow() {
  if (GetArenaForAllocation() == nullptr && _impl_.workflow_ != nullptr) {
    delete _impl_.workflow_;
  }
  _impl_.workflow_ = nullptr;
}
SingleWorkflowResponse::SingleWorkflowResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleWorkflowResponse)
}
SingleWorkflowResponse::SingleWorkflowResponse(const SingleWorkflowResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleWorkflowResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.workflow_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_workflow()) {
    _this->_impl_.workflow_ = new ::clarifai::api::Workflow(*from._impl_.workflow_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleWorkflowResponse)
}

inline void SingleWorkflowResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.workflow_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SingleWorkflowResponse::~SingleWorkflowResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleWorkflowResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleWorkflowResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.workflow_;
}

void SingleWorkflowResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleWorkflowResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleWorkflowResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.workflow_ != nullptr) {
    delete _impl_.workflow_;
  }
  _impl_.workflow_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleWorkflowResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Workflow workflow = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_workflow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleWorkflowResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleWorkflowResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Workflow workflow = 2;
  if (this->_internal_has_workflow()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::workflow(this),
        _Internal::workflow(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleWorkflowResponse)
  return target;
}

size_t SingleWorkflowResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleWorkflowResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.Workflow workflow = 2;
  if (this->_internal_has_workflow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.workflow_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleWorkflowResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleWorkflowResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleWorkflowResponse::GetClassData() const { return &_class_data_; }


void SingleWorkflowResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleWorkflowResponse*>(&to_msg);
  auto& from = static_cast<const SingleWorkflowResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleWorkflowResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_workflow()) {
    _this->_internal_mutable_workflow()->::clarifai::api::Workflow::MergeFrom(
        from._internal_workflow());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleWorkflowResponse::CopyFrom(const SingleWorkflowResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleWorkflowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleWorkflowResponse::IsInitialized() const {
  return true;
}

void SingleWorkflowResponse::InternalSwap(SingleWorkflowResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleWorkflowResponse, _impl_.workflow_)
      + sizeof(SingleWorkflowResponse::_impl_.workflow_)
      - PROTOBUF_FIELD_OFFSET(SingleWorkflowResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleWorkflowResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[202]);
}

// ===================================================================

class MultiWorkflowResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiWorkflowResponse* msg);
};

const ::clarifai::api::status::Status&
MultiWorkflowResponse::_Internal::status(const MultiWorkflowResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiWorkflowResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiWorkflowResponse::clear_workflows() {
  _impl_.workflows_.Clear();
}
MultiWorkflowResponse::MultiWorkflowResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiWorkflowResponse)
}
MultiWorkflowResponse::MultiWorkflowResponse(const MultiWorkflowResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiWorkflowResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.workflows_){from._impl_.workflows_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiWorkflowResponse)
}

inline void MultiWorkflowResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.workflows_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiWorkflowResponse::~MultiWorkflowResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiWorkflowResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiWorkflowResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.workflows_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiWorkflowResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiWorkflowResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiWorkflowResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.workflows_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiWorkflowResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Workflow workflows = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_workflows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiWorkflowResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiWorkflowResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Workflow workflows = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_workflows_size()); i < n; i++) {
    const auto& repfield = this->_internal_workflows(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiWorkflowResponse)
  return target;
}

size_t MultiWorkflowResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiWorkflowResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Workflow workflows = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_workflows_size();
  for (const auto& msg : this->_impl_.workflows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiWorkflowResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiWorkflowResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiWorkflowResponse::GetClassData() const { return &_class_data_; }


void MultiWorkflowResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiWorkflowResponse*>(&to_msg);
  auto& from = static_cast<const MultiWorkflowResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiWorkflowResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.workflows_.MergeFrom(from._impl_.workflows_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiWorkflowResponse::CopyFrom(const MultiWorkflowResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiWorkflowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiWorkflowResponse::IsInitialized() const {
  return true;
}

void MultiWorkflowResponse::InternalSwap(MultiWorkflowResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.workflows_.InternalSwap(&other->_impl_.workflows_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiWorkflowResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[203]);
}

// ===================================================================

class PostWorkflowResultsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostWorkflowResultsRequest* msg);
  static const ::clarifai::api::OutputConfig& output_config(const PostWorkflowResultsRequest* msg);
  static const ::clarifai::api::WorkflowState& workflow_state(const PostWorkflowResultsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostWorkflowResultsRequest::_Internal::user_app_id(const PostWorkflowResultsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
const ::clarifai::api::OutputConfig&
PostWorkflowResultsRequest::_Internal::output_config(const PostWorkflowResultsRequest* msg) {
  return *msg->_impl_.output_config_;
}
const ::clarifai::api::WorkflowState&
PostWorkflowResultsRequest::_Internal::workflow_state(const PostWorkflowResultsRequest* msg) {
  return *msg->_impl_.workflow_state_;
}
void PostWorkflowResultsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostWorkflowResultsRequest::clear_inputs() {
  _impl_.inputs_.Clear();
}
void PostWorkflowResultsRequest::clear_output_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.output_config_ != nullptr) {
    delete _impl_.output_config_;
  }
  _impl_.output_config_ = nullptr;
}
void PostWorkflowResultsRequest::clear_workflow_state() {
  if (GetArenaForAllocation() == nullptr && _impl_.workflow_state_ != nullptr) {
    delete _impl_.workflow_state_;
  }
  _impl_.workflow_state_ = nullptr;
}
PostWorkflowResultsRequest::PostWorkflowResultsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostWorkflowResultsRequest)
}
PostWorkflowResultsRequest::PostWorkflowResultsRequest(const PostWorkflowResultsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostWorkflowResultsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.inputs_){from._impl_.inputs_}
    , decltype(_impl_.workflow_id_){}
    , decltype(_impl_.version_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.output_config_){nullptr}
    , decltype(_impl_.workflow_state_){nullptr}
    , decltype(_impl_.favor_clarifai_workflows_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.workflow_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workflow_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workflow_id().empty()) {
    _this->_impl_.workflow_id_.Set(from._internal_workflow_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version_id().empty()) {
    _this->_impl_.version_id_.Set(from._internal_version_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  if (from._internal_has_output_config()) {
    _this->_impl_.output_config_ = new ::clarifai::api::OutputConfig(*from._impl_.output_config_);
  }
  if (from._internal_has_workflow_state()) {
    _this->_impl_.workflow_state_ = new ::clarifai::api::WorkflowState(*from._impl_.workflow_state_);
  }
  _this->_impl_.favor_clarifai_workflows_ = from._impl_.favor_clarifai_workflows_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostWorkflowResultsRequest)
}

inline void PostWorkflowResultsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.inputs_){arena}
    , decltype(_impl_.workflow_id_){}
    , decltype(_impl_.version_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.output_config_){nullptr}
    , decltype(_impl_.workflow_state_){nullptr}
    , decltype(_impl_.favor_clarifai_workflows_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.workflow_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workflow_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PostWorkflowResultsRequest::~PostWorkflowResultsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostWorkflowResultsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostWorkflowResultsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.inputs_.~RepeatedPtrField();
  _impl_.workflow_id_.Destroy();
  _impl_.version_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
  if (this != internal_default_instance()) delete _impl_.output_config_;
  if (this != internal_default_instance()) delete _impl_.workflow_state_;
}

void PostWorkflowResultsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostWorkflowResultsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostWorkflowResultsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.inputs_.Clear();
  _impl_.workflow_id_.ClearToEmpty();
  _impl_.version_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.output_config_ != nullptr) {
    delete _impl_.output_config_;
  }
  _impl_.output_config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.workflow_state_ != nullptr) {
    delete _impl_.workflow_state_;
  }
  _impl_.workflow_state_ = nullptr;
  _impl_.favor_clarifai_workflows_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostWorkflowResultsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string workflow_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_workflow_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PostWorkflowResultsRequest.workflow_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Input inputs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.OutputConfig output_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool favor_clarifai_workflows = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.favor_clarifai_workflows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.WorkflowState workflow_state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_workflow_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_version_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PostWorkflowResultsRequest.version_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostWorkflowResultsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostWorkflowResultsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_id().data(), static_cast<int>(this->_internal_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostWorkflowResultsRequest.workflow_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_workflow_id(), target);
  }

  // repeated .clarifai.api.Input inputs = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_inputs_size()); i < n; i++) {
    const auto& repfield = this->_internal_inputs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .clarifai.api.OutputConfig output_config = 4;
  if (this->_internal_has_output_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::output_config(this),
        _Internal::output_config(this).GetCachedSize(), target, stream);
  }

  // bool favor_clarifai_workflows = 5;
  if (this->_internal_favor_clarifai_workflows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_favor_clarifai_workflows(), target);
  }

  // .clarifai.api.WorkflowState workflow_state = 6;
  if (this->_internal_has_workflow_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::workflow_state(this),
        _Internal::workflow_state(this).GetCachedSize(), target, stream);
  }

  // string version_id = 7;
  if (!this->_internal_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostWorkflowResultsRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_version_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostWorkflowResultsRequest)
  return target;
}

size_t PostWorkflowResultsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostWorkflowResultsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Input inputs = 3;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->_impl_.inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_id());
  }

  // string version_id = 7;
  if (!this->_internal_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // .clarifai.api.OutputConfig output_config = 4;
  if (this->_internal_has_output_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.output_config_);
  }

  // .clarifai.api.WorkflowState workflow_state = 6;
  if (this->_internal_has_workflow_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.workflow_state_);
  }

  // bool favor_clarifai_workflows = 5;
  if (this->_internal_favor_clarifai_workflows() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostWorkflowResultsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostWorkflowResultsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostWorkflowResultsRequest::GetClassData() const { return &_class_data_; }


void PostWorkflowResultsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostWorkflowResultsRequest*>(&to_msg);
  auto& from = static_cast<const PostWorkflowResultsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostWorkflowResultsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.inputs_.MergeFrom(from._impl_.inputs_);
  if (!from._internal_workflow_id().empty()) {
    _this->_internal_set_workflow_id(from._internal_workflow_id());
  }
  if (!from._internal_version_id().empty()) {
    _this->_internal_set_version_id(from._internal_version_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_has_output_config()) {
    _this->_internal_mutable_output_config()->::clarifai::api::OutputConfig::MergeFrom(
        from._internal_output_config());
  }
  if (from._internal_has_workflow_state()) {
    _this->_internal_mutable_workflow_state()->::clarifai::api::WorkflowState::MergeFrom(
        from._internal_workflow_state());
  }
  if (from._internal_favor_clarifai_workflows() != 0) {
    _this->_internal_set_favor_clarifai_workflows(from._internal_favor_clarifai_workflows());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostWorkflowResultsRequest::CopyFrom(const PostWorkflowResultsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostWorkflowResultsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostWorkflowResultsRequest::IsInitialized() const {
  return true;
}

void PostWorkflowResultsRequest::InternalSwap(PostWorkflowResultsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.inputs_.InternalSwap(&other->_impl_.inputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.workflow_id_, lhs_arena,
      &other->_impl_.workflow_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_id_, lhs_arena,
      &other->_impl_.version_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostWorkflowResultsRequest, _impl_.favor_clarifai_workflows_)
      + sizeof(PostWorkflowResultsRequest::_impl_.favor_clarifai_workflows_)
      - PROTOBUF_FIELD_OFFSET(PostWorkflowResultsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostWorkflowResultsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[204]);
}

// ===================================================================

class PostWorkflowResultsResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const PostWorkflowResultsResponse* msg);
  static const ::clarifai::api::Workflow& workflow(const PostWorkflowResultsResponse* msg);
  static const ::clarifai::api::WorkflowState& workflow_state(const PostWorkflowResultsResponse* msg);
};

const ::clarifai::api::status::Status&
PostWorkflowResultsResponse::_Internal::status(const PostWorkflowResultsResponse* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::Workflow&
PostWorkflowResultsResponse::_Internal::workflow(const PostWorkflowResultsResponse* msg) {
  return *msg->_impl_.workflow_;
}
const ::clarifai::api::WorkflowState&
PostWorkflowResultsResponse::_Internal::workflow_state(const PostWorkflowResultsResponse* msg) {
  return *msg->_impl_.workflow_state_;
}
void PostWorkflowResultsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void PostWorkflowResultsResponse::clear_workflow() {
  if (GetArenaForAllocation() == nullptr && _impl_.workflow_ != nullptr) {
    delete _impl_.workflow_;
  }
  _impl_.workflow_ = nullptr;
}
void PostWorkflowResultsResponse::clear_results() {
  _impl_.results_.Clear();
}
void PostWorkflowResultsResponse::clear_workflow_state() {
  if (GetArenaForAllocation() == nullptr && _impl_.workflow_state_ != nullptr) {
    delete _impl_.workflow_state_;
  }
  _impl_.workflow_state_ = nullptr;
}
PostWorkflowResultsResponse::PostWorkflowResultsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostWorkflowResultsResponse)
}
PostWorkflowResultsResponse::PostWorkflowResultsResponse(const PostWorkflowResultsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostWorkflowResultsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.results_){from._impl_.results_}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.workflow_){nullptr}
    , decltype(_impl_.workflow_state_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_workflow()) {
    _this->_impl_.workflow_ = new ::clarifai::api::Workflow(*from._impl_.workflow_);
  }
  if (from._internal_has_workflow_state()) {
    _this->_impl_.workflow_state_ = new ::clarifai::api::WorkflowState(*from._impl_.workflow_state_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostWorkflowResultsResponse)
}

inline void PostWorkflowResultsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.results_){arena}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.workflow_){nullptr}
    , decltype(_impl_.workflow_state_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PostWorkflowResultsResponse::~PostWorkflowResultsResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostWorkflowResultsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostWorkflowResultsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.results_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.workflow_;
  if (this != internal_default_instance()) delete _impl_.workflow_state_;
}

void PostWorkflowResultsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostWorkflowResultsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostWorkflowResultsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.results_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.workflow_ != nullptr) {
    delete _impl_.workflow_;
  }
  _impl_.workflow_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.workflow_state_ != nullptr) {
    delete _impl_.workflow_state_;
  }
  _impl_.workflow_state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostWorkflowResultsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Workflow workflow = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_workflow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.WorkflowResult results = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.WorkflowState workflow_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_workflow_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostWorkflowResultsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostWorkflowResultsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Workflow workflow = 2;
  if (this->_internal_has_workflow()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::workflow(this),
        _Internal::workflow(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.WorkflowResult results = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_results_size()); i < n; i++) {
    const auto& repfield = this->_internal_results(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .clarifai.api.WorkflowState workflow_state = 4;
  if (this->_internal_has_workflow_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::workflow_state(this),
        _Internal::workflow_state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostWorkflowResultsResponse)
  return target;
}

size_t PostWorkflowResultsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostWorkflowResultsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.WorkflowResult results = 3;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->_impl_.results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.Workflow workflow = 2;
  if (this->_internal_has_workflow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.workflow_);
  }

  // .clarifai.api.WorkflowState workflow_state = 4;
  if (this->_internal_has_workflow_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.workflow_state_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostWorkflowResultsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostWorkflowResultsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostWorkflowResultsResponse::GetClassData() const { return &_class_data_; }


void PostWorkflowResultsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostWorkflowResultsResponse*>(&to_msg);
  auto& from = static_cast<const PostWorkflowResultsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostWorkflowResultsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.results_.MergeFrom(from._impl_.results_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_workflow()) {
    _this->_internal_mutable_workflow()->::clarifai::api::Workflow::MergeFrom(
        from._internal_workflow());
  }
  if (from._internal_has_workflow_state()) {
    _this->_internal_mutable_workflow_state()->::clarifai::api::WorkflowState::MergeFrom(
        from._internal_workflow_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostWorkflowResultsResponse::CopyFrom(const PostWorkflowResultsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostWorkflowResultsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostWorkflowResultsResponse::IsInitialized() const {
  return true;
}

void PostWorkflowResultsResponse::InternalSwap(PostWorkflowResultsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.results_.InternalSwap(&other->_impl_.results_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostWorkflowResultsResponse, _impl_.workflow_state_)
      + sizeof(PostWorkflowResultsResponse::_impl_.workflow_state_)
      - PROTOBUF_FIELD_OFFSET(PostWorkflowResultsResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostWorkflowResultsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[205]);
}

// ===================================================================

class PostWorkflowResultsSimilarityRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostWorkflowResultsSimilarityRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostWorkflowResultsSimilarityRequest::_Internal::user_app_id(const PostWorkflowResultsSimilarityRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PostWorkflowResultsSimilarityRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostWorkflowResultsSimilarityRequest::clear_probe_inputs() {
  _impl_.probe_inputs_.Clear();
}
void PostWorkflowResultsSimilarityRequest::clear_pool_inputs() {
  _impl_.pool_inputs_.Clear();
}
PostWorkflowResultsSimilarityRequest::PostWorkflowResultsSimilarityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostWorkflowResultsSimilarityRequest)
}
PostWorkflowResultsSimilarityRequest::PostWorkflowResultsSimilarityRequest(const PostWorkflowResultsSimilarityRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostWorkflowResultsSimilarityRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.probe_inputs_){from._impl_.probe_inputs_}
    , decltype(_impl_.pool_inputs_){from._impl_.pool_inputs_}
    , decltype(_impl_.workflow_id_){}
    , decltype(_impl_.model_version_id_){}
    , decltype(_impl_.version_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.favor_clarifai_workflows_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.workflow_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workflow_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workflow_id().empty()) {
    _this->_impl_.workflow_id_.Set(from._internal_workflow_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.model_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_version_id().empty()) {
    _this->_impl_.model_version_id_.Set(from._internal_model_version_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version_id().empty()) {
    _this->_impl_.version_id_.Set(from._internal_version_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  _this->_impl_.favor_clarifai_workflows_ = from._impl_.favor_clarifai_workflows_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostWorkflowResultsSimilarityRequest)
}

inline void PostWorkflowResultsSimilarityRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.probe_inputs_){arena}
    , decltype(_impl_.pool_inputs_){arena}
    , decltype(_impl_.workflow_id_){}
    , decltype(_impl_.model_version_id_){}
    , decltype(_impl_.version_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.favor_clarifai_workflows_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.workflow_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workflow_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PostWorkflowResultsSimilarityRequest::~PostWorkflowResultsSimilarityRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostWorkflowResultsSimilarityRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostWorkflowResultsSimilarityRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.probe_inputs_.~RepeatedPtrField();
  _impl_.pool_inputs_.~RepeatedPtrField();
  _impl_.workflow_id_.Destroy();
  _impl_.model_version_id_.Destroy();
  _impl_.version_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PostWorkflowResultsSimilarityRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostWorkflowResultsSimilarityRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostWorkflowResultsSimilarityRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.probe_inputs_.Clear();
  _impl_.pool_inputs_.Clear();
  _impl_.workflow_id_.ClearToEmpty();
  _impl_.model_version_id_.ClearToEmpty();
  _impl_.version_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _impl_.favor_clarifai_workflows_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostWorkflowResultsSimilarityRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string workflow_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_workflow_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PostWorkflowResultsSimilarityRequest.workflow_id"));
        } else
          goto handle_unusual;
        continue;
      // string model_version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_model_version_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PostWorkflowResultsSimilarityRequest.model_version_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Input probe_inputs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_probe_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Input pool_inputs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pool_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool favor_clarifai_workflows = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.favor_clarifai_workflows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_version_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PostWorkflowResultsSimilarityRequest.version_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostWorkflowResultsSimilarityRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostWorkflowResultsSimilarityRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_id().data(), static_cast<int>(this->_internal_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostWorkflowResultsSimilarityRequest.workflow_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_workflow_id(), target);
  }

  // string model_version_id = 3;
  if (!this->_internal_model_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_version_id().data(), static_cast<int>(this->_internal_model_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostWorkflowResultsSimilarityRequest.model_version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model_version_id(), target);
  }

  // repeated .clarifai.api.Input probe_inputs = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_probe_inputs_size()); i < n; i++) {
    const auto& repfield = this->_internal_probe_inputs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Input pool_inputs = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pool_inputs_size()); i < n; i++) {
    const auto& repfield = this->_internal_pool_inputs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool favor_clarifai_workflows = 6;
  if (this->_internal_favor_clarifai_workflows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_favor_clarifai_workflows(), target);
  }

  // string version_id = 7;
  if (!this->_internal_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostWorkflowResultsSimilarityRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_version_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostWorkflowResultsSimilarityRequest)
  return target;
}

size_t PostWorkflowResultsSimilarityRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostWorkflowResultsSimilarityRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Input probe_inputs = 4;
  total_size += 1UL * this->_internal_probe_inputs_size();
  for (const auto& msg : this->_impl_.probe_inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Input pool_inputs = 5;
  total_size += 1UL * this->_internal_pool_inputs_size();
  for (const auto& msg : this->_impl_.pool_inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_id());
  }

  // string model_version_id = 3;
  if (!this->_internal_model_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_version_id());
  }

  // string version_id = 7;
  if (!this->_internal_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // bool favor_clarifai_workflows = 6;
  if (this->_internal_favor_clarifai_workflows() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostWorkflowResultsSimilarityRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostWorkflowResultsSimilarityRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostWorkflowResultsSimilarityRequest::GetClassData() const { return &_class_data_; }


void PostWorkflowResultsSimilarityRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostWorkflowResultsSimilarityRequest*>(&to_msg);
  auto& from = static_cast<const PostWorkflowResultsSimilarityRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostWorkflowResultsSimilarityRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.probe_inputs_.MergeFrom(from._impl_.probe_inputs_);
  _this->_impl_.pool_inputs_.MergeFrom(from._impl_.pool_inputs_);
  if (!from._internal_workflow_id().empty()) {
    _this->_internal_set_workflow_id(from._internal_workflow_id());
  }
  if (!from._internal_model_version_id().empty()) {
    _this->_internal_set_model_version_id(from._internal_model_version_id());
  }
  if (!from._internal_version_id().empty()) {
    _this->_internal_set_version_id(from._internal_version_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_favor_clarifai_workflows() != 0) {
    _this->_internal_set_favor_clarifai_workflows(from._internal_favor_clarifai_workflows());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostWorkflowResultsSimilarityRequest::CopyFrom(const PostWorkflowResultsSimilarityRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostWorkflowResultsSimilarityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostWorkflowResultsSimilarityRequest::IsInitialized() const {
  return true;
}

void PostWorkflowResultsSimilarityRequest::InternalSwap(PostWorkflowResultsSimilarityRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.probe_inputs_.InternalSwap(&other->_impl_.probe_inputs_);
  _impl_.pool_inputs_.InternalSwap(&other->_impl_.pool_inputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.workflow_id_, lhs_arena,
      &other->_impl_.workflow_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_version_id_, lhs_arena,
      &other->_impl_.model_version_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_id_, lhs_arena,
      &other->_impl_.version_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostWorkflowResultsSimilarityRequest, _impl_.favor_clarifai_workflows_)
      + sizeof(PostWorkflowResultsSimilarityRequest::_impl_.favor_clarifai_workflows_)
      - PROTOBUF_FIELD_OFFSET(PostWorkflowResultsSimilarityRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostWorkflowResultsSimilarityRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[206]);
}

// ===================================================================

class PostWorkflowResultsSimilarityResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const PostWorkflowResultsSimilarityResponse* msg);
};

const ::clarifai::api::status::Status&
PostWorkflowResultsSimilarityResponse::_Internal::status(const PostWorkflowResultsSimilarityResponse* msg) {
  return *msg->_impl_.status_;
}
void PostWorkflowResultsSimilarityResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void PostWorkflowResultsSimilarityResponse::clear_results() {
  _impl_.results_.Clear();
}
PostWorkflowResultsSimilarityResponse::PostWorkflowResultsSimilarityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostWorkflowResultsSimilarityResponse)
}
PostWorkflowResultsSimilarityResponse::PostWorkflowResultsSimilarityResponse(const PostWorkflowResultsSimilarityResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostWorkflowResultsSimilarityResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.results_){from._impl_.results_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostWorkflowResultsSimilarityResponse)
}

inline void PostWorkflowResultsSimilarityResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.results_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PostWorkflowResultsSimilarityResponse::~PostWorkflowResultsSimilarityResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostWorkflowResultsSimilarityResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostWorkflowResultsSimilarityResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.results_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void PostWorkflowResultsSimilarityResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostWorkflowResultsSimilarityResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostWorkflowResultsSimilarityResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.results_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostWorkflowResultsSimilarityResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.WorkflowResultsSimilarity results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostWorkflowResultsSimilarityResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostWorkflowResultsSimilarityResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.WorkflowResultsSimilarity results = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_results_size()); i < n; i++) {
    const auto& repfield = this->_internal_results(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostWorkflowResultsSimilarityResponse)
  return target;
}

size_t PostWorkflowResultsSimilarityResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostWorkflowResultsSimilarityResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.WorkflowResultsSimilarity results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->_impl_.results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostWorkflowResultsSimilarityResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostWorkflowResultsSimilarityResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostWorkflowResultsSimilarityResponse::GetClassData() const { return &_class_data_; }


void PostWorkflowResultsSimilarityResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostWorkflowResultsSimilarityResponse*>(&to_msg);
  auto& from = static_cast<const PostWorkflowResultsSimilarityResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostWorkflowResultsSimilarityResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.results_.MergeFrom(from._impl_.results_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostWorkflowResultsSimilarityResponse::CopyFrom(const PostWorkflowResultsSimilarityResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostWorkflowResultsSimilarityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostWorkflowResultsSimilarityResponse::IsInitialized() const {
  return true;
}

void PostWorkflowResultsSimilarityResponse::InternalSwap(PostWorkflowResultsSimilarityResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.results_.InternalSwap(&other->_impl_.results_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostWorkflowResultsSimilarityResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[207]);
}

// ===================================================================

class ListWorkflowVersionsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListWorkflowVersionsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListWorkflowVersionsRequest::_Internal::user_app_id(const ListWorkflowVersionsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListWorkflowVersionsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
ListWorkflowVersionsRequest::ListWorkflowVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListWorkflowVersionsRequest)
}
ListWorkflowVersionsRequest::ListWorkflowVersionsRequest(const ListWorkflowVersionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListWorkflowVersionsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.workflow_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.workflow_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workflow_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workflow_id().empty()) {
    _this->_impl_.workflow_id_.Set(from._internal_workflow_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.per_page_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListWorkflowVersionsRequest)
}

inline void ListWorkflowVersionsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.workflow_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.workflow_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workflow_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListWorkflowVersionsRequest::~ListWorkflowVersionsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListWorkflowVersionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListWorkflowVersionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.workflow_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void ListWorkflowVersionsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListWorkflowVersionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListWorkflowVersionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.workflow_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.per_page_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListWorkflowVersionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string workflow_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_workflow_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListWorkflowVersionsRequest.workflow_id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListWorkflowVersionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListWorkflowVersionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_id().data(), static_cast<int>(this->_internal_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListWorkflowVersionsRequest.workflow_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_workflow_id(), target);
  }

  // uint32 page = 3;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_page(), target);
  }

  // uint32 per_page = 4;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListWorkflowVersionsRequest)
  return target;
}

size_t ListWorkflowVersionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListWorkflowVersionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // uint32 page = 3;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 4;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListWorkflowVersionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListWorkflowVersionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListWorkflowVersionsRequest::GetClassData() const { return &_class_data_; }


void ListWorkflowVersionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListWorkflowVersionsRequest*>(&to_msg);
  auto& from = static_cast<const ListWorkflowVersionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListWorkflowVersionsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_workflow_id().empty()) {
    _this->_internal_set_workflow_id(from._internal_workflow_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListWorkflowVersionsRequest::CopyFrom(const ListWorkflowVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListWorkflowVersionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListWorkflowVersionsRequest::IsInitialized() const {
  return true;
}

void ListWorkflowVersionsRequest::InternalSwap(ListWorkflowVersionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.workflow_id_, lhs_arena,
      &other->_impl_.workflow_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListWorkflowVersionsRequest, _impl_.per_page_)
      + sizeof(ListWorkflowVersionsRequest::_impl_.per_page_)
      - PROTOBUF_FIELD_OFFSET(ListWorkflowVersionsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListWorkflowVersionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[208]);
}

// ===================================================================

class GetWorkflowVersionRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetWorkflowVersionRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetWorkflowVersionRequest::_Internal::user_app_id(const GetWorkflowVersionRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void GetWorkflowVersionRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
GetWorkflowVersionRequest::GetWorkflowVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetWorkflowVersionRequest)
}
GetWorkflowVersionRequest::GetWorkflowVersionRequest(const GetWorkflowVersionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetWorkflowVersionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.workflow_id_){}
    , decltype(_impl_.workflow_version_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.workflow_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workflow_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workflow_id().empty()) {
    _this->_impl_.workflow_id_.Set(from._internal_workflow_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.workflow_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workflow_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workflow_version_id().empty()) {
    _this->_impl_.workflow_version_id_.Set(from._internal_workflow_version_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetWorkflowVersionRequest)
}

inline void GetWorkflowVersionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.workflow_id_){}
    , decltype(_impl_.workflow_version_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.workflow_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workflow_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.workflow_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workflow_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetWorkflowVersionRequest::~GetWorkflowVersionRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetWorkflowVersionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetWorkflowVersionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.workflow_id_.Destroy();
  _impl_.workflow_version_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void GetWorkflowVersionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetWorkflowVersionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetWorkflowVersionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.workflow_id_.ClearToEmpty();
  _impl_.workflow_version_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWorkflowVersionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string workflow_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_workflow_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetWorkflowVersionRequest.workflow_id"));
        } else
          goto handle_unusual;
        continue;
      // string workflow_version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_workflow_version_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetWorkflowVersionRequest.workflow_version_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetWorkflowVersionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetWorkflowVersionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_id().data(), static_cast<int>(this->_internal_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetWorkflowVersionRequest.workflow_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_workflow_id(), target);
  }

  // string workflow_version_id = 3;
  if (!this->_internal_workflow_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_version_id().data(), static_cast<int>(this->_internal_workflow_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetWorkflowVersionRequest.workflow_version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_workflow_version_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetWorkflowVersionRequest)
  return target;
}

size_t GetWorkflowVersionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetWorkflowVersionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_id());
  }

  // string workflow_version_id = 3;
  if (!this->_internal_workflow_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetWorkflowVersionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetWorkflowVersionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetWorkflowVersionRequest::GetClassData() const { return &_class_data_; }


void GetWorkflowVersionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetWorkflowVersionRequest*>(&to_msg);
  auto& from = static_cast<const GetWorkflowVersionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetWorkflowVersionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_workflow_id().empty()) {
    _this->_internal_set_workflow_id(from._internal_workflow_id());
  }
  if (!from._internal_workflow_version_id().empty()) {
    _this->_internal_set_workflow_version_id(from._internal_workflow_version_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetWorkflowVersionRequest::CopyFrom(const GetWorkflowVersionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetWorkflowVersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWorkflowVersionRequest::IsInitialized() const {
  return true;
}

void GetWorkflowVersionRequest::InternalSwap(GetWorkflowVersionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.workflow_id_, lhs_arena,
      &other->_impl_.workflow_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.workflow_version_id_, lhs_arena,
      &other->_impl_.workflow_version_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWorkflowVersionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[209]);
}

// ===================================================================

class DeleteWorkflowVersionsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteWorkflowVersionsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteWorkflowVersionsRequest::_Internal::user_app_id(const DeleteWorkflowVersionsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void DeleteWorkflowVersionsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
DeleteWorkflowVersionsRequest::DeleteWorkflowVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteWorkflowVersionsRequest)
}
DeleteWorkflowVersionsRequest::DeleteWorkflowVersionsRequest(const DeleteWorkflowVersionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteWorkflowVersionsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.workflow_version_ids_){from._impl_.workflow_version_ids_}
    , decltype(_impl_.workflow_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.workflow_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workflow_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workflow_id().empty()) {
    _this->_impl_.workflow_id_.Set(from._internal_workflow_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteWorkflowVersionsRequest)
}

inline void DeleteWorkflowVersionsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.workflow_version_ids_){arena}
    , decltype(_impl_.workflow_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.workflow_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workflow_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteWorkflowVersionsRequest::~DeleteWorkflowVersionsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteWorkflowVersionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteWorkflowVersionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.workflow_version_ids_.~RepeatedPtrField();
  _impl_.workflow_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void DeleteWorkflowVersionsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteWorkflowVersionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteWorkflowVersionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.workflow_version_ids_.Clear();
  _impl_.workflow_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteWorkflowVersionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string workflow_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_workflow_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DeleteWorkflowVersionsRequest.workflow_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string workflow_version_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_workflow_version_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DeleteWorkflowVersionsRequest.workflow_version_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteWorkflowVersionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteWorkflowVersionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_id().data(), static_cast<int>(this->_internal_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteWorkflowVersionsRequest.workflow_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_workflow_id(), target);
  }

  // repeated string workflow_version_ids = 3;
  for (int i = 0, n = this->_internal_workflow_version_ids_size(); i < n; i++) {
    const auto& s = this->_internal_workflow_version_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteWorkflowVersionsRequest.workflow_version_ids");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteWorkflowVersionsRequest)
  return target;
}

size_t DeleteWorkflowVersionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteWorkflowVersionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string workflow_version_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.workflow_version_ids_.size());
  for (int i = 0, n = _impl_.workflow_version_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.workflow_version_ids_.Get(i));
  }

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteWorkflowVersionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteWorkflowVersionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteWorkflowVersionsRequest::GetClassData() const { return &_class_data_; }


void DeleteWorkflowVersionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteWorkflowVersionsRequest*>(&to_msg);
  auto& from = static_cast<const DeleteWorkflowVersionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteWorkflowVersionsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.workflow_version_ids_.MergeFrom(from._impl_.workflow_version_ids_);
  if (!from._internal_workflow_id().empty()) {
    _this->_internal_set_workflow_id(from._internal_workflow_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteWorkflowVersionsRequest::CopyFrom(const DeleteWorkflowVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteWorkflowVersionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteWorkflowVersionsRequest::IsInitialized() const {
  return true;
}

void DeleteWorkflowVersionsRequest::InternalSwap(DeleteWorkflowVersionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.workflow_version_ids_.InternalSwap(&other->_impl_.workflow_version_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.workflow_id_, lhs_arena,
      &other->_impl_.workflow_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteWorkflowVersionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[210]);
}

// ===================================================================

class PatchWorkflowVersionsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchWorkflowVersionsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchWorkflowVersionsRequest::_Internal::user_app_id(const PatchWorkflowVersionsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PatchWorkflowVersionsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PatchWorkflowVersionsRequest::clear_workflow_versions() {
  _impl_.workflow_versions_.Clear();
}
PatchWorkflowVersionsRequest::PatchWorkflowVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchWorkflowVersionsRequest)
}
PatchWorkflowVersionsRequest::PatchWorkflowVersionsRequest(const PatchWorkflowVersionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PatchWorkflowVersionsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.workflow_versions_){from._impl_.workflow_versions_}
    , decltype(_impl_.workflow_id_){}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.workflow_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workflow_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workflow_id().empty()) {
    _this->_impl_.workflow_id_.Set(from._internal_workflow_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchWorkflowVersionsRequest)
}

inline void PatchWorkflowVersionsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.workflow_versions_){arena}
    , decltype(_impl_.workflow_id_){}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.workflow_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workflow_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PatchWorkflowVersionsRequest::~PatchWorkflowVersionsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchWorkflowVersionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatchWorkflowVersionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.workflow_versions_.~RepeatedPtrField();
  _impl_.workflow_id_.Destroy();
  _impl_.action_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PatchWorkflowVersionsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatchWorkflowVersionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchWorkflowVersionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.workflow_versions_.Clear();
  _impl_.workflow_id_.ClearToEmpty();
  _impl_.action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchWorkflowVersionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string workflow_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_workflow_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchWorkflowVersionsRequest.workflow_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.WorkflowVersion workflow_versions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_workflow_versions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchWorkflowVersionsRequest.action"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchWorkflowVersionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchWorkflowVersionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_id().data(), static_cast<int>(this->_internal_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchWorkflowVersionsRequest.workflow_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_workflow_id(), target);
  }

  // repeated .clarifai.api.WorkflowVersion workflow_versions = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_workflow_versions_size()); i < n; i++) {
    const auto& repfield = this->_internal_workflow_versions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchWorkflowVersionsRequest.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchWorkflowVersionsRequest)
  return target;
}

size_t PatchWorkflowVersionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchWorkflowVersionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.WorkflowVersion workflow_versions = 3;
  total_size += 1UL * this->_internal_workflow_versions_size();
  for (const auto& msg : this->_impl_.workflow_versions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_id());
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchWorkflowVersionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PatchWorkflowVersionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchWorkflowVersionsRequest::GetClassData() const { return &_class_data_; }


void PatchWorkflowVersionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PatchWorkflowVersionsRequest*>(&to_msg);
  auto& from = static_cast<const PatchWorkflowVersionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchWorkflowVersionsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.workflow_versions_.MergeFrom(from._impl_.workflow_versions_);
  if (!from._internal_workflow_id().empty()) {
    _this->_internal_set_workflow_id(from._internal_workflow_id());
  }
  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchWorkflowVersionsRequest::CopyFrom(const PatchWorkflowVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchWorkflowVersionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchWorkflowVersionsRequest::IsInitialized() const {
  return true;
}

void PatchWorkflowVersionsRequest::InternalSwap(PatchWorkflowVersionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.workflow_versions_.InternalSwap(&other->_impl_.workflow_versions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.workflow_id_, lhs_arena,
      &other->_impl_.workflow_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchWorkflowVersionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[211]);
}

// ===================================================================

class MultiWorkflowVersionResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiWorkflowVersionResponse* msg);
};

const ::clarifai::api::status::Status&
MultiWorkflowVersionResponse::_Internal::status(const MultiWorkflowVersionResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiWorkflowVersionResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiWorkflowVersionResponse::clear_workflow_versions() {
  _impl_.workflow_versions_.Clear();
}
MultiWorkflowVersionResponse::MultiWorkflowVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiWorkflowVersionResponse)
}
MultiWorkflowVersionResponse::MultiWorkflowVersionResponse(const MultiWorkflowVersionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiWorkflowVersionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.workflow_versions_){from._impl_.workflow_versions_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiWorkflowVersionResponse)
}

inline void MultiWorkflowVersionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.workflow_versions_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiWorkflowVersionResponse::~MultiWorkflowVersionResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiWorkflowVersionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiWorkflowVersionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.workflow_versions_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiWorkflowVersionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiWorkflowVersionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiWorkflowVersionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.workflow_versions_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiWorkflowVersionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.WorkflowVersion workflow_versions = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_workflow_versions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiWorkflowVersionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiWorkflowVersionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.WorkflowVersion workflow_versions = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_workflow_versions_size()); i < n; i++) {
    const auto& repfield = this->_internal_workflow_versions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiWorkflowVersionResponse)
  return target;
}

size_t MultiWorkflowVersionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiWorkflowVersionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.WorkflowVersion workflow_versions = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_workflow_versions_size();
  for (const auto& msg : this->_impl_.workflow_versions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiWorkflowVersionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiWorkflowVersionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiWorkflowVersionResponse::GetClassData() const { return &_class_data_; }


void MultiWorkflowVersionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiWorkflowVersionResponse*>(&to_msg);
  auto& from = static_cast<const MultiWorkflowVersionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiWorkflowVersionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.workflow_versions_.MergeFrom(from._impl_.workflow_versions_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiWorkflowVersionResponse::CopyFrom(const MultiWorkflowVersionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiWorkflowVersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiWorkflowVersionResponse::IsInitialized() const {
  return true;
}

void MultiWorkflowVersionResponse::InternalSwap(MultiWorkflowVersionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.workflow_versions_.InternalSwap(&other->_impl_.workflow_versions_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiWorkflowVersionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[212]);
}

// ===================================================================

class SingleWorkflowVersionResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleWorkflowVersionResponse* msg);
  static const ::clarifai::api::WorkflowVersion& workflow_version(const SingleWorkflowVersionResponse* msg);
};

const ::clarifai::api::status::Status&
SingleWorkflowVersionResponse::_Internal::status(const SingleWorkflowVersionResponse* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::WorkflowVersion&
SingleWorkflowVersionResponse::_Internal::workflow_version(const SingleWorkflowVersionResponse* msg) {
  return *msg->_impl_.workflow_version_;
}
void SingleWorkflowVersionResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void SingleWorkflowVersionResponse::clear_workflow_version() {
  if (GetArenaForAllocation() == nullptr && _impl_.workflow_version_ != nullptr) {
    delete _impl_.workflow_version_;
  }
  _impl_.workflow_version_ = nullptr;
}
SingleWorkflowVersionResponse::SingleWorkflowVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleWorkflowVersionResponse)
}
SingleWorkflowVersionResponse::SingleWorkflowVersionResponse(const SingleWorkflowVersionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleWorkflowVersionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.workflow_version_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_workflow_version()) {
    _this->_impl_.workflow_version_ = new ::clarifai::api::WorkflowVersion(*from._impl_.workflow_version_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleWorkflowVersionResponse)
}

inline void SingleWorkflowVersionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.workflow_version_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SingleWorkflowVersionResponse::~SingleWorkflowVersionResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleWorkflowVersionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleWorkflowVersionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.workflow_version_;
}

void SingleWorkflowVersionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleWorkflowVersionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleWorkflowVersionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.workflow_version_ != nullptr) {
    delete _impl_.workflow_version_;
  }
  _impl_.workflow_version_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleWorkflowVersionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.WorkflowVersion workflow_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_workflow_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleWorkflowVersionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleWorkflowVersionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.WorkflowVersion workflow_version = 2;
  if (this->_internal_has_workflow_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::workflow_version(this),
        _Internal::workflow_version(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleWorkflowVersionResponse)
  return target;
}

size_t SingleWorkflowVersionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleWorkflowVersionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.WorkflowVersion workflow_version = 2;
  if (this->_internal_has_workflow_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.workflow_version_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleWorkflowVersionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleWorkflowVersionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleWorkflowVersionResponse::GetClassData() const { return &_class_data_; }


void SingleWorkflowVersionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleWorkflowVersionResponse*>(&to_msg);
  auto& from = static_cast<const SingleWorkflowVersionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleWorkflowVersionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_workflow_version()) {
    _this->_internal_mutable_workflow_version()->::clarifai::api::WorkflowVersion::MergeFrom(
        from._internal_workflow_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleWorkflowVersionResponse::CopyFrom(const SingleWorkflowVersionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleWorkflowVersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleWorkflowVersionResponse::IsInitialized() const {
  return true;
}

void SingleWorkflowVersionResponse::InternalSwap(SingleWorkflowVersionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleWorkflowVersionResponse, _impl_.workflow_version_)
      + sizeof(SingleWorkflowVersionResponse::_impl_.workflow_version_)
      - PROTOBUF_FIELD_OFFSET(SingleWorkflowVersionResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleWorkflowVersionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[213]);
}

// ===================================================================

class PostAppDuplicationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostAppDuplicationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostAppDuplicationsRequest::_Internal::user_app_id(const PostAppDuplicationsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PostAppDuplicationsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostAppDuplicationsRequest::clear_app_duplications() {
  _impl_.app_duplications_.Clear();
}
PostAppDuplicationsRequest::PostAppDuplicationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostAppDuplicationsRequest)
}
PostAppDuplicationsRequest::PostAppDuplicationsRequest(const PostAppDuplicationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostAppDuplicationsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.app_duplications_){from._impl_.app_duplications_}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostAppDuplicationsRequest)
}

inline void PostAppDuplicationsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.app_duplications_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PostAppDuplicationsRequest::~PostAppDuplicationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostAppDuplicationsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostAppDuplicationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.app_duplications_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PostAppDuplicationsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostAppDuplicationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostAppDuplicationsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.app_duplications_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostAppDuplicationsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.AppDuplication app_duplications = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_app_duplications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostAppDuplicationsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostAppDuplicationsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.AppDuplication app_duplications = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_app_duplications_size()); i < n; i++) {
    const auto& repfield = this->_internal_app_duplications(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostAppDuplicationsRequest)
  return target;
}

size_t PostAppDuplicationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostAppDuplicationsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.AppDuplication app_duplications = 2;
  total_size += 1UL * this->_internal_app_duplications_size();
  for (const auto& msg : this->_impl_.app_duplications_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostAppDuplicationsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostAppDuplicationsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostAppDuplicationsRequest::GetClassData() const { return &_class_data_; }


void PostAppDuplicationsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostAppDuplicationsRequest*>(&to_msg);
  auto& from = static_cast<const PostAppDuplicationsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostAppDuplicationsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.app_duplications_.MergeFrom(from._impl_.app_duplications_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostAppDuplicationsRequest::CopyFrom(const PostAppDuplicationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostAppDuplicationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostAppDuplicationsRequest::IsInitialized() const {
  return true;
}

void PostAppDuplicationsRequest::InternalSwap(PostAppDuplicationsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.app_duplications_.InternalSwap(&other->_impl_.app_duplications_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostAppDuplicationsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[214]);
}

// ===================================================================

class GetAppDuplicationRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetAppDuplicationRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetAppDuplicationRequest::_Internal::user_app_id(const GetAppDuplicationRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void GetAppDuplicationRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
GetAppDuplicationRequest::GetAppDuplicationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetAppDuplicationRequest)
}
GetAppDuplicationRequest::GetAppDuplicationRequest(const GetAppDuplicationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetAppDuplicationRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.app_duplication_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.app_duplication_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_duplication_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_duplication_id().empty()) {
    _this->_impl_.app_duplication_id_.Set(from._internal_app_duplication_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetAppDuplicationRequest)
}

inline void GetAppDuplicationRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.app_duplication_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.app_duplication_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_duplication_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetAppDuplicationRequest::~GetAppDuplicationRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetAppDuplicationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAppDuplicationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.app_duplication_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void GetAppDuplicationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetAppDuplicationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetAppDuplicationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.app_duplication_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAppDuplicationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string app_duplication_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_app_duplication_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetAppDuplicationRequest.app_duplication_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAppDuplicationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetAppDuplicationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string app_duplication_id = 2;
  if (!this->_internal_app_duplication_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_duplication_id().data(), static_cast<int>(this->_internal_app_duplication_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetAppDuplicationRequest.app_duplication_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_duplication_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetAppDuplicationRequest)
  return target;
}

size_t GetAppDuplicationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetAppDuplicationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_duplication_id = 2;
  if (!this->_internal_app_duplication_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_duplication_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAppDuplicationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetAppDuplicationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAppDuplicationRequest::GetClassData() const { return &_class_data_; }


void GetAppDuplicationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetAppDuplicationRequest*>(&to_msg);
  auto& from = static_cast<const GetAppDuplicationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetAppDuplicationRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_app_duplication_id().empty()) {
    _this->_internal_set_app_duplication_id(from._internal_app_duplication_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAppDuplicationRequest::CopyFrom(const GetAppDuplicationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetAppDuplicationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppDuplicationRequest::IsInitialized() const {
  return true;
}

void GetAppDuplicationRequest::InternalSwap(GetAppDuplicationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_duplication_id_, lhs_arena,
      &other->_impl_.app_duplication_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAppDuplicationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[215]);
}

// ===================================================================

class ListAppDuplicationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListAppDuplicationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListAppDuplicationsRequest::_Internal::user_app_id(const ListAppDuplicationsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListAppDuplicationsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
ListAppDuplicationsRequest::ListAppDuplicationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListAppDuplicationsRequest)
}
ListAppDuplicationsRequest::ListAppDuplicationsRequest(const ListAppDuplicationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListAppDuplicationsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.per_page_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListAppDuplicationsRequest)
}

inline void ListAppDuplicationsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListAppDuplicationsRequest::~ListAppDuplicationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListAppDuplicationsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListAppDuplicationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void ListAppDuplicationsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListAppDuplicationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListAppDuplicationsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.per_page_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListAppDuplicationsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListAppDuplicationsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListAppDuplicationsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListAppDuplicationsRequest)
  return target;
}

size_t ListAppDuplicationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListAppDuplicationsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListAppDuplicationsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListAppDuplicationsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListAppDuplicationsRequest::GetClassData() const { return &_class_data_; }


void ListAppDuplicationsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListAppDuplicationsRequest*>(&to_msg);
  auto& from = static_cast<const ListAppDuplicationsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListAppDuplicationsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListAppDuplicationsRequest::CopyFrom(const ListAppDuplicationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListAppDuplicationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAppDuplicationsRequest::IsInitialized() const {
  return true;
}

void ListAppDuplicationsRequest::InternalSwap(ListAppDuplicationsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListAppDuplicationsRequest, _impl_.per_page_)
      + sizeof(ListAppDuplicationsRequest::_impl_.per_page_)
      - PROTOBUF_FIELD_OFFSET(ListAppDuplicationsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAppDuplicationsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[216]);
}

// ===================================================================

class MultiAppDuplicationsResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiAppDuplicationsResponse* msg);
};

const ::clarifai::api::status::Status&
MultiAppDuplicationsResponse::_Internal::status(const MultiAppDuplicationsResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiAppDuplicationsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiAppDuplicationsResponse::clear_app_duplications() {
  _impl_.app_duplications_.Clear();
}
MultiAppDuplicationsResponse::MultiAppDuplicationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiAppDuplicationsResponse)
}
MultiAppDuplicationsResponse::MultiAppDuplicationsResponse(const MultiAppDuplicationsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiAppDuplicationsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.app_duplications_){from._impl_.app_duplications_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiAppDuplicationsResponse)
}

inline void MultiAppDuplicationsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.app_duplications_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiAppDuplicationsResponse::~MultiAppDuplicationsResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiAppDuplicationsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiAppDuplicationsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.app_duplications_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiAppDuplicationsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiAppDuplicationsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiAppDuplicationsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.app_duplications_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiAppDuplicationsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.AppDuplication app_duplications = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_app_duplications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiAppDuplicationsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiAppDuplicationsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.AppDuplication app_duplications = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_app_duplications_size()); i < n; i++) {
    const auto& repfield = this->_internal_app_duplications(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiAppDuplicationsResponse)
  return target;
}

size_t MultiAppDuplicationsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiAppDuplicationsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.AppDuplication app_duplications = 2;
  total_size += 1UL * this->_internal_app_duplications_size();
  for (const auto& msg : this->_impl_.app_duplications_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiAppDuplicationsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiAppDuplicationsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiAppDuplicationsResponse::GetClassData() const { return &_class_data_; }


void MultiAppDuplicationsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiAppDuplicationsResponse*>(&to_msg);
  auto& from = static_cast<const MultiAppDuplicationsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiAppDuplicationsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.app_duplications_.MergeFrom(from._impl_.app_duplications_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiAppDuplicationsResponse::CopyFrom(const MultiAppDuplicationsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiAppDuplicationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiAppDuplicationsResponse::IsInitialized() const {
  return true;
}

void MultiAppDuplicationsResponse::InternalSwap(MultiAppDuplicationsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.app_duplications_.InternalSwap(&other->_impl_.app_duplications_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiAppDuplicationsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[217]);
}

// ===================================================================

class SingleAppDuplicationResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleAppDuplicationResponse* msg);
  static const ::clarifai::api::AppDuplication& app_duplication(const SingleAppDuplicationResponse* msg);
};

const ::clarifai::api::status::Status&
SingleAppDuplicationResponse::_Internal::status(const SingleAppDuplicationResponse* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::AppDuplication&
SingleAppDuplicationResponse::_Internal::app_duplication(const SingleAppDuplicationResponse* msg) {
  return *msg->_impl_.app_duplication_;
}
void SingleAppDuplicationResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void SingleAppDuplicationResponse::clear_app_duplication() {
  if (GetArenaForAllocation() == nullptr && _impl_.app_duplication_ != nullptr) {
    delete _impl_.app_duplication_;
  }
  _impl_.app_duplication_ = nullptr;
}
SingleAppDuplicationResponse::SingleAppDuplicationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleAppDuplicationResponse)
}
SingleAppDuplicationResponse::SingleAppDuplicationResponse(const SingleAppDuplicationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleAppDuplicationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.app_duplication_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_app_duplication()) {
    _this->_impl_.app_duplication_ = new ::clarifai::api::AppDuplication(*from._impl_.app_duplication_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleAppDuplicationResponse)
}

inline void SingleAppDuplicationResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.app_duplication_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SingleAppDuplicationResponse::~SingleAppDuplicationResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleAppDuplicationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleAppDuplicationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.app_duplication_;
}

void SingleAppDuplicationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleAppDuplicationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleAppDuplicationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.app_duplication_ != nullptr) {
    delete _impl_.app_duplication_;
  }
  _impl_.app_duplication_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleAppDuplicationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.AppDuplication app_duplication = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_duplication(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleAppDuplicationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleAppDuplicationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.AppDuplication app_duplication = 2;
  if (this->_internal_has_app_duplication()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::app_duplication(this),
        _Internal::app_duplication(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleAppDuplicationResponse)
  return target;
}

size_t SingleAppDuplicationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleAppDuplicationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.AppDuplication app_duplication = 2;
  if (this->_internal_has_app_duplication()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.app_duplication_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleAppDuplicationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleAppDuplicationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleAppDuplicationResponse::GetClassData() const { return &_class_data_; }


void SingleAppDuplicationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleAppDuplicationResponse*>(&to_msg);
  auto& from = static_cast<const SingleAppDuplicationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleAppDuplicationResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_app_duplication()) {
    _this->_internal_mutable_app_duplication()->::clarifai::api::AppDuplication::MergeFrom(
        from._internal_app_duplication());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleAppDuplicationResponse::CopyFrom(const SingleAppDuplicationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleAppDuplicationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleAppDuplicationResponse::IsInitialized() const {
  return true;
}

void SingleAppDuplicationResponse::InternalSwap(SingleAppDuplicationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleAppDuplicationResponse, _impl_.app_duplication_)
      + sizeof(SingleAppDuplicationResponse::_impl_.app_duplication_)
      - PROTOBUF_FIELD_OFFSET(SingleAppDuplicationResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleAppDuplicationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[218]);
}

// ===================================================================

class PostTasksRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostTasksRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostTasksRequest::_Internal::user_app_id(const PostTasksRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PostTasksRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostTasksRequest::clear_tasks() {
  _impl_.tasks_.Clear();
}
PostTasksRequest::PostTasksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostTasksRequest)
}
PostTasksRequest::PostTasksRequest(const PostTasksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostTasksRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tasks_){from._impl_.tasks_}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostTasksRequest)
}

inline void PostTasksRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tasks_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PostTasksRequest::~PostTasksRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostTasksRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostTasksRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tasks_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PostTasksRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostTasksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostTasksRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tasks_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostTasksRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Task tasks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostTasksRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostTasksRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Task tasks = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tasks_size()); i < n; i++) {
    const auto& repfield = this->_internal_tasks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostTasksRequest)
  return target;
}

size_t PostTasksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostTasksRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Task tasks = 2;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->_impl_.tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostTasksRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostTasksRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostTasksRequest::GetClassData() const { return &_class_data_; }


void PostTasksRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostTasksRequest*>(&to_msg);
  auto& from = static_cast<const PostTasksRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostTasksRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tasks_.MergeFrom(from._impl_.tasks_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostTasksRequest::CopyFrom(const PostTasksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostTasksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostTasksRequest::IsInitialized() const {
  return true;
}

void PostTasksRequest::InternalSwap(PostTasksRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tasks_.InternalSwap(&other->_impl_.tasks_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostTasksRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[219]);
}

// ===================================================================

class GetTaskRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetTaskRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetTaskRequest::_Internal::user_app_id(const GetTaskRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void GetTaskRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
GetTaskRequest::GetTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetTaskRequest)
}
GetTaskRequest::GetTaskRequest(const GetTaskRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTaskRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.additional_fields_){from._impl_.additional_fields_}
    , decltype(_impl_.task_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task_id().empty()) {
    _this->_impl_.task_id_.Set(from._internal_task_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetTaskRequest)
}

inline void GetTaskRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.additional_fields_){arena}
    , decltype(_impl_.task_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetTaskRequest::~GetTaskRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetTaskRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTaskRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.additional_fields_.~RepeatedPtrField();
  _impl_.task_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void GetTaskRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetTaskRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.additional_fields_.Clear();
  _impl_.task_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTaskRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string task_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_task_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetTaskRequest.task_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string additional_fields = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_additional_fields();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetTaskRequest.additional_fields"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTaskRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetTaskRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string task_id = 2;
  if (!this->_internal_task_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetTaskRequest.task_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_task_id(), target);
  }

  // repeated string additional_fields = 3;
  for (int i = 0, n = this->_internal_additional_fields_size(); i < n; i++) {
    const auto& s = this->_internal_additional_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetTaskRequest.additional_fields");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetTaskRequest)
  return target;
}

size_t GetTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetTaskRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string additional_fields = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.additional_fields_.size());
  for (int i = 0, n = _impl_.additional_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.additional_fields_.Get(i));
  }

  // string task_id = 2;
  if (!this->_internal_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTaskRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTaskRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTaskRequest::GetClassData() const { return &_class_data_; }


void GetTaskRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTaskRequest*>(&to_msg);
  auto& from = static_cast<const GetTaskRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetTaskRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.additional_fields_.MergeFrom(from._impl_.additional_fields_);
  if (!from._internal_task_id().empty()) {
    _this->_internal_set_task_id(from._internal_task_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTaskRequest::CopyFrom(const GetTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTaskRequest::IsInitialized() const {
  return true;
}

void GetTaskRequest::InternalSwap(GetTaskRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.additional_fields_.InternalSwap(&other->_impl_.additional_fields_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.task_id_, lhs_arena,
      &other->_impl_.task_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTaskRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[220]);
}

// ===================================================================

class ListTasksRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListTasksRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListTasksRequest::_Internal::user_app_id(const ListTasksRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListTasksRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
ListTasksRequest::ListTasksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListTasksRequest)
}
ListTasksRequest::ListTasksRequest(const ListTasksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListTasksRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.worker_user_ids_){from._impl_.worker_user_ids_}
    , decltype(_impl_.review_user_ids_){from._impl_.review_user_ids_}
    , decltype(_impl_.additional_fields_){from._impl_.additional_fields_}
    , decltype(_impl_.label_order_ids_){from._impl_.label_order_ids_}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , decltype(_impl_.including_label_order_tasks_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.including_label_order_tasks_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.including_label_order_tasks_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListTasksRequest)
}

inline void ListTasksRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.worker_user_ids_){arena}
    , decltype(_impl_.review_user_ids_){arena}
    , decltype(_impl_.additional_fields_){arena}
    , decltype(_impl_.label_order_ids_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , decltype(_impl_.including_label_order_tasks_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListTasksRequest::~ListTasksRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListTasksRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListTasksRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.worker_user_ids_.~RepeatedPtrField();
  _impl_.review_user_ids_.~RepeatedPtrField();
  _impl_.additional_fields_.~RepeatedPtrField();
  _impl_.label_order_ids_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void ListTasksRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListTasksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListTasksRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.worker_user_ids_.Clear();
  _impl_.review_user_ids_.Clear();
  _impl_.additional_fields_.Clear();
  _impl_.label_order_ids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.including_label_order_tasks_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.including_label_order_tasks_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListTasksRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string worker_user_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_worker_user_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListTasksRequest.worker_user_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string review_user_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_review_user_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListTasksRequest.review_user_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool including_label_order_tasks = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.including_label_order_tasks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string additional_fields = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_additional_fields();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListTasksRequest.additional_fields"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string label_order_ids = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_label_order_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListTasksRequest.label_order_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListTasksRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListTasksRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  // repeated string worker_user_ids = 4;
  for (int i = 0, n = this->_internal_worker_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_worker_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListTasksRequest.worker_user_ids");
    target = stream->WriteString(4, s, target);
  }

  // repeated string review_user_ids = 5;
  for (int i = 0, n = this->_internal_review_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_review_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListTasksRequest.review_user_ids");
    target = stream->WriteString(5, s, target);
  }

  // bool including_label_order_tasks = 6;
  if (this->_internal_including_label_order_tasks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_including_label_order_tasks(), target);
  }

  // repeated string additional_fields = 7;
  for (int i = 0, n = this->_internal_additional_fields_size(); i < n; i++) {
    const auto& s = this->_internal_additional_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListTasksRequest.additional_fields");
    target = stream->WriteString(7, s, target);
  }

  // repeated string label_order_ids = 8;
  for (int i = 0, n = this->_internal_label_order_ids_size(); i < n; i++) {
    const auto& s = this->_internal_label_order_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListTasksRequest.label_order_ids");
    target = stream->WriteString(8, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListTasksRequest)
  return target;
}

size_t ListTasksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListTasksRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string worker_user_ids = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.worker_user_ids_.size());
  for (int i = 0, n = _impl_.worker_user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.worker_user_ids_.Get(i));
  }

  // repeated string review_user_ids = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.review_user_ids_.size());
  for (int i = 0, n = _impl_.review_user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.review_user_ids_.Get(i));
  }

  // repeated string additional_fields = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.additional_fields_.size());
  for (int i = 0, n = _impl_.additional_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.additional_fields_.Get(i));
  }

  // repeated string label_order_ids = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.label_order_ids_.size());
  for (int i = 0, n = _impl_.label_order_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.label_order_ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  // bool including_label_order_tasks = 6;
  if (this->_internal_including_label_order_tasks() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListTasksRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListTasksRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListTasksRequest::GetClassData() const { return &_class_data_; }


void ListTasksRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListTasksRequest*>(&to_msg);
  auto& from = static_cast<const ListTasksRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListTasksRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.worker_user_ids_.MergeFrom(from._impl_.worker_user_ids_);
  _this->_impl_.review_user_ids_.MergeFrom(from._impl_.review_user_ids_);
  _this->_impl_.additional_fields_.MergeFrom(from._impl_.additional_fields_);
  _this->_impl_.label_order_ids_.MergeFrom(from._impl_.label_order_ids_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  if (from._internal_including_label_order_tasks() != 0) {
    _this->_internal_set_including_label_order_tasks(from._internal_including_label_order_tasks());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListTasksRequest::CopyFrom(const ListTasksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListTasksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTasksRequest::IsInitialized() const {
  return true;
}

void ListTasksRequest::InternalSwap(ListTasksRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.worker_user_ids_.InternalSwap(&other->_impl_.worker_user_ids_);
  _impl_.review_user_ids_.InternalSwap(&other->_impl_.review_user_ids_);
  _impl_.additional_fields_.InternalSwap(&other->_impl_.additional_fields_);
  _impl_.label_order_ids_.InternalSwap(&other->_impl_.label_order_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListTasksRequest, _impl_.including_label_order_tasks_)
      + sizeof(ListTasksRequest::_impl_.including_label_order_tasks_)
      - PROTOBUF_FIELD_OFFSET(ListTasksRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListTasksRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[221]);
}

// ===================================================================

class PatchTasksRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchTasksRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchTasksRequest::_Internal::user_app_id(const PatchTasksRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PatchTasksRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PatchTasksRequest::clear_tasks() {
  _impl_.tasks_.Clear();
}
PatchTasksRequest::PatchTasksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchTasksRequest)
}
PatchTasksRequest::PatchTasksRequest(const PatchTasksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PatchTasksRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tasks_){from._impl_.tasks_}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchTasksRequest)
}

inline void PatchTasksRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tasks_){arena}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PatchTasksRequest::~PatchTasksRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchTasksRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatchTasksRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tasks_.~RepeatedPtrField();
  _impl_.action_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PatchTasksRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatchTasksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchTasksRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tasks_.Clear();
  _impl_.action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchTasksRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Task tasks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchTasksRequest.action"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchTasksRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchTasksRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Task tasks = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tasks_size()); i < n; i++) {
    const auto& repfield = this->_internal_tasks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchTasksRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchTasksRequest)
  return target;
}

size_t PatchTasksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchTasksRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Task tasks = 2;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->_impl_.tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchTasksRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PatchTasksRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchTasksRequest::GetClassData() const { return &_class_data_; }


void PatchTasksRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PatchTasksRequest*>(&to_msg);
  auto& from = static_cast<const PatchTasksRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchTasksRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tasks_.MergeFrom(from._impl_.tasks_);
  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchTasksRequest::CopyFrom(const PatchTasksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchTasksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchTasksRequest::IsInitialized() const {
  return true;
}

void PatchTasksRequest::InternalSwap(PatchTasksRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tasks_.InternalSwap(&other->_impl_.tasks_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchTasksRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[222]);
}

// ===================================================================

class DeleteTasksRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteTasksRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteTasksRequest::_Internal::user_app_id(const DeleteTasksRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void DeleteTasksRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
DeleteTasksRequest::DeleteTasksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteTasksRequest)
}
DeleteTasksRequest::DeleteTasksRequest(const DeleteTasksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteTasksRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){from._impl_.ids_}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteTasksRequest)
}

inline void DeleteTasksRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeleteTasksRequest::~DeleteTasksRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteTasksRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteTasksRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void DeleteTasksRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteTasksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteTasksRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteTasksRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DeleteTasksRequest.ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteTasksRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteTasksRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteTasksRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteTasksRequest)
  return target;
}

size_t DeleteTasksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteTasksRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.ids_.size());
  for (int i = 0, n = _impl_.ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteTasksRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteTasksRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteTasksRequest::GetClassData() const { return &_class_data_; }


void DeleteTasksRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteTasksRequest*>(&to_msg);
  auto& from = static_cast<const DeleteTasksRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteTasksRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_.MergeFrom(from._impl_.ids_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteTasksRequest::CopyFrom(const DeleteTasksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteTasksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTasksRequest::IsInitialized() const {
  return true;
}

void DeleteTasksRequest::InternalSwap(DeleteTasksRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ids_.InternalSwap(&other->_impl_.ids_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteTasksRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[223]);
}

// ===================================================================

class MultiTaskResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiTaskResponse* msg);
};

const ::clarifai::api::status::Status&
MultiTaskResponse::_Internal::status(const MultiTaskResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiTaskResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiTaskResponse::clear_tasks() {
  _impl_.tasks_.Clear();
}
MultiTaskResponse::MultiTaskResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiTaskResponse)
}
MultiTaskResponse::MultiTaskResponse(const MultiTaskResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiTaskResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tasks_){from._impl_.tasks_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiTaskResponse)
}

inline void MultiTaskResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tasks_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiTaskResponse::~MultiTaskResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiTaskResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiTaskResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tasks_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiTaskResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiTaskResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiTaskResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tasks_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiTaskResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Task tasks = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiTaskResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiTaskResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Task tasks = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tasks_size()); i < n; i++) {
    const auto& repfield = this->_internal_tasks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiTaskResponse)
  return target;
}

size_t MultiTaskResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiTaskResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Task tasks = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->_impl_.tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiTaskResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiTaskResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiTaskResponse::GetClassData() const { return &_class_data_; }


void MultiTaskResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiTaskResponse*>(&to_msg);
  auto& from = static_cast<const MultiTaskResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiTaskResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tasks_.MergeFrom(from._impl_.tasks_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiTaskResponse::CopyFrom(const MultiTaskResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiTaskResponse::IsInitialized() const {
  return true;
}

void MultiTaskResponse::InternalSwap(MultiTaskResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tasks_.InternalSwap(&other->_impl_.tasks_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiTaskResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[224]);
}

// ===================================================================

class SingleTaskResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleTaskResponse* msg);
  static const ::clarifai::api::Task& task(const SingleTaskResponse* msg);
};

const ::clarifai::api::status::Status&
SingleTaskResponse::_Internal::status(const SingleTaskResponse* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::Task&
SingleTaskResponse::_Internal::task(const SingleTaskResponse* msg) {
  return *msg->_impl_.task_;
}
void SingleTaskResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void SingleTaskResponse::clear_task() {
  if (GetArenaForAllocation() == nullptr && _impl_.task_ != nullptr) {
    delete _impl_.task_;
  }
  _impl_.task_ = nullptr;
}
SingleTaskResponse::SingleTaskResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleTaskResponse)
}
SingleTaskResponse::SingleTaskResponse(const SingleTaskResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleTaskResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.task_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_task()) {
    _this->_impl_.task_ = new ::clarifai::api::Task(*from._impl_.task_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleTaskResponse)
}

inline void SingleTaskResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.task_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SingleTaskResponse::~SingleTaskResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleTaskResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleTaskResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.task_;
}

void SingleTaskResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleTaskResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleTaskResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.task_ != nullptr) {
    delete _impl_.task_;
  }
  _impl_.task_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleTaskResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Task task = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleTaskResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleTaskResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Task task = 2;
  if (this->_internal_has_task()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::task(this),
        _Internal::task(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleTaskResponse)
  return target;
}

size_t SingleTaskResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleTaskResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.Task task = 2;
  if (this->_internal_has_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.task_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleTaskResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleTaskResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleTaskResponse::GetClassData() const { return &_class_data_; }


void SingleTaskResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleTaskResponse*>(&to_msg);
  auto& from = static_cast<const SingleTaskResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleTaskResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_task()) {
    _this->_internal_mutable_task()->::clarifai::api::Task::MergeFrom(
        from._internal_task());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleTaskResponse::CopyFrom(const SingleTaskResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleTaskResponse::IsInitialized() const {
  return true;
}

void SingleTaskResponse::InternalSwap(SingleTaskResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleTaskResponse, _impl_.task_)
      + sizeof(SingleTaskResponse::_impl_.task_)
      - PROTOBUF_FIELD_OFFSET(SingleTaskResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleTaskResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[225]);
}

// ===================================================================

class GetTaskCountRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetTaskCountRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetTaskCountRequest::_Internal::user_app_id(const GetTaskCountRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void GetTaskCountRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
GetTaskCountRequest::GetTaskCountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetTaskCountRequest)
}
GetTaskCountRequest::GetTaskCountRequest(const GetTaskCountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTaskCountRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_ids_){from._impl_.user_ids_}
    , decltype(_impl_.task_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task_id().empty()) {
    _this->_impl_.task_id_.Set(from._internal_task_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetTaskCountRequest)
}

inline void GetTaskCountRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_ids_){arena}
    , decltype(_impl_.task_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetTaskCountRequest::~GetTaskCountRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetTaskCountRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTaskCountRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_ids_.~RepeatedPtrField();
  _impl_.task_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void GetTaskCountRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTaskCountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetTaskCountRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_ids_.Clear();
  _impl_.task_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTaskCountRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string task_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_task_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetTaskCountRequest.task_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string user_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetTaskCountRequest.user_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTaskCountRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetTaskCountRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string task_id = 2;
  if (!this->_internal_task_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetTaskCountRequest.task_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_task_id(), target);
  }

  // repeated string user_ids = 3;
  for (int i = 0, n = this->_internal_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetTaskCountRequest.user_ids");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetTaskCountRequest)
  return target;
}

size_t GetTaskCountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetTaskCountRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string user_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.user_ids_.size());
  for (int i = 0, n = _impl_.user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.user_ids_.Get(i));
  }

  // string task_id = 2;
  if (!this->_internal_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTaskCountRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTaskCountRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTaskCountRequest::GetClassData() const { return &_class_data_; }


void GetTaskCountRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTaskCountRequest*>(&to_msg);
  auto& from = static_cast<const GetTaskCountRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetTaskCountRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.user_ids_.MergeFrom(from._impl_.user_ids_);
  if (!from._internal_task_id().empty()) {
    _this->_internal_set_task_id(from._internal_task_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTaskCountRequest::CopyFrom(const GetTaskCountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetTaskCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTaskCountRequest::IsInitialized() const {
  return true;
}

void GetTaskCountRequest::InternalSwap(GetTaskCountRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.user_ids_.InternalSwap(&other->_impl_.user_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.task_id_, lhs_arena,
      &other->_impl_.task_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTaskCountRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[226]);
}

// ===================================================================

class SingleTaskCountResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleTaskCountResponse* msg);
};

const ::clarifai::api::status::Status&
SingleTaskCountResponse::_Internal::status(const SingleTaskCountResponse* msg) {
  return *msg->_impl_.status_;
}
void SingleTaskCountResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void SingleTaskCountResponse::clear_counts() {
  _impl_.counts_.Clear();
}
SingleTaskCountResponse::SingleTaskCountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleTaskCountResponse)
}
SingleTaskCountResponse::SingleTaskCountResponse(const SingleTaskCountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleTaskCountResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.counts_){from._impl_.counts_}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.task_id_){}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task_id().empty()) {
    _this->_impl_.task_id_.Set(from._internal_task_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleTaskCountResponse)
}

inline void SingleTaskCountResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.counts_){arena}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.task_id_){}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SingleTaskCountResponse::~SingleTaskCountResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleTaskCountResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleTaskCountResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.counts_.~RepeatedPtrField();
  _impl_.app_id_.Destroy();
  _impl_.task_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void SingleTaskCountResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleTaskCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleTaskCountResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.counts_.Clear();
  _impl_.app_id_.ClearToEmpty();
  _impl_.task_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleTaskCountResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.SingleTaskCountResponse.app_id"));
        } else
          goto handle_unusual;
        continue;
      // string task_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_task_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.SingleTaskCountResponse.task_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.TaskStatusCountPerUser counts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_counts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleTaskCountResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleTaskCountResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // string app_id = 2;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.SingleTaskCountResponse.app_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_id(), target);
  }

  // string task_id = 3;
  if (!this->_internal_task_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.SingleTaskCountResponse.task_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_task_id(), target);
  }

  // repeated .clarifai.api.TaskStatusCountPerUser counts = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_counts_size()); i < n; i++) {
    const auto& repfield = this->_internal_counts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleTaskCountResponse)
  return target;
}

size_t SingleTaskCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleTaskCountResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.TaskStatusCountPerUser counts = 4;
  total_size += 1UL * this->_internal_counts_size();
  for (const auto& msg : this->_impl_.counts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string app_id = 2;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string task_id = 3;
  if (!this->_internal_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleTaskCountResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleTaskCountResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleTaskCountResponse::GetClassData() const { return &_class_data_; }


void SingleTaskCountResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleTaskCountResponse*>(&to_msg);
  auto& from = static_cast<const SingleTaskCountResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleTaskCountResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.counts_.MergeFrom(from._impl_.counts_);
  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_task_id().empty()) {
    _this->_internal_set_task_id(from._internal_task_id());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleTaskCountResponse::CopyFrom(const SingleTaskCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleTaskCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleTaskCountResponse::IsInitialized() const {
  return true;
}

void SingleTaskCountResponse::InternalSwap(SingleTaskCountResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.counts_.InternalSwap(&other->_impl_.counts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.task_id_, lhs_arena,
      &other->_impl_.task_id_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleTaskCountResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[227]);
}

// ===================================================================

class PostLabelOrdersRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostLabelOrdersRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostLabelOrdersRequest::_Internal::user_app_id(const PostLabelOrdersRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PostLabelOrdersRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostLabelOrdersRequest::clear_label_orders() {
  _impl_.label_orders_.Clear();
}
PostLabelOrdersRequest::PostLabelOrdersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostLabelOrdersRequest)
}
PostLabelOrdersRequest::PostLabelOrdersRequest(const PostLabelOrdersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostLabelOrdersRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.label_orders_){from._impl_.label_orders_}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostLabelOrdersRequest)
}

inline void PostLabelOrdersRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.label_orders_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PostLabelOrdersRequest::~PostLabelOrdersRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostLabelOrdersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostLabelOrdersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.label_orders_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PostLabelOrdersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostLabelOrdersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostLabelOrdersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.label_orders_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostLabelOrdersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.LabelOrder label_orders = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_label_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostLabelOrdersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostLabelOrdersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.LabelOrder label_orders = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_label_orders_size()); i < n; i++) {
    const auto& repfield = this->_internal_label_orders(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostLabelOrdersRequest)
  return target;
}

size_t PostLabelOrdersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostLabelOrdersRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.LabelOrder label_orders = 2;
  total_size += 1UL * this->_internal_label_orders_size();
  for (const auto& msg : this->_impl_.label_orders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostLabelOrdersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostLabelOrdersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostLabelOrdersRequest::GetClassData() const { return &_class_data_; }


void PostLabelOrdersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostLabelOrdersRequest*>(&to_msg);
  auto& from = static_cast<const PostLabelOrdersRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostLabelOrdersRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.label_orders_.MergeFrom(from._impl_.label_orders_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostLabelOrdersRequest::CopyFrom(const PostLabelOrdersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostLabelOrdersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostLabelOrdersRequest::IsInitialized() const {
  return true;
}

void PostLabelOrdersRequest::InternalSwap(PostLabelOrdersRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.label_orders_.InternalSwap(&other->_impl_.label_orders_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostLabelOrdersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[228]);
}

// ===================================================================

class GetLabelOrderRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetLabelOrderRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetLabelOrderRequest::_Internal::user_app_id(const GetLabelOrderRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void GetLabelOrderRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
GetLabelOrderRequest::GetLabelOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetLabelOrderRequest)
}
GetLabelOrderRequest::GetLabelOrderRequest(const GetLabelOrderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetLabelOrderRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.label_order_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.label_order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_label_order_id().empty()) {
    _this->_impl_.label_order_id_.Set(from._internal_label_order_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetLabelOrderRequest)
}

inline void GetLabelOrderRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.label_order_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.label_order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetLabelOrderRequest::~GetLabelOrderRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetLabelOrderRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetLabelOrderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.label_order_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void GetLabelOrderRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetLabelOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetLabelOrderRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.label_order_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLabelOrderRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string label_order_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_label_order_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetLabelOrderRequest.label_order_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetLabelOrderRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetLabelOrderRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string label_order_id = 2;
  if (!this->_internal_label_order_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label_order_id().data(), static_cast<int>(this->_internal_label_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetLabelOrderRequest.label_order_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_label_order_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetLabelOrderRequest)
  return target;
}

size_t GetLabelOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetLabelOrderRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string label_order_id = 2;
  if (!this->_internal_label_order_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label_order_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLabelOrderRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetLabelOrderRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLabelOrderRequest::GetClassData() const { return &_class_data_; }


void GetLabelOrderRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetLabelOrderRequest*>(&to_msg);
  auto& from = static_cast<const GetLabelOrderRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetLabelOrderRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_label_order_id().empty()) {
    _this->_internal_set_label_order_id(from._internal_label_order_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLabelOrderRequest::CopyFrom(const GetLabelOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetLabelOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLabelOrderRequest::IsInitialized() const {
  return true;
}

void GetLabelOrderRequest::InternalSwap(GetLabelOrderRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.label_order_id_, lhs_arena,
      &other->_impl_.label_order_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLabelOrderRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[229]);
}

// ===================================================================

class ListLabelOrdersRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListLabelOrdersRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListLabelOrdersRequest::_Internal::user_app_id(const ListLabelOrdersRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListLabelOrdersRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
ListLabelOrdersRequest::ListLabelOrdersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListLabelOrdersRequest)
}
ListLabelOrdersRequest::ListLabelOrdersRequest(const ListLabelOrdersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListLabelOrdersRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.per_page_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListLabelOrdersRequest)
}

inline void ListLabelOrdersRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListLabelOrdersRequest::~ListLabelOrdersRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListLabelOrdersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListLabelOrdersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void ListLabelOrdersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListLabelOrdersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListLabelOrdersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.per_page_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListLabelOrdersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListLabelOrdersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListLabelOrdersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListLabelOrdersRequest)
  return target;
}

size_t ListLabelOrdersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListLabelOrdersRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListLabelOrdersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListLabelOrdersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListLabelOrdersRequest::GetClassData() const { return &_class_data_; }


void ListLabelOrdersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListLabelOrdersRequest*>(&to_msg);
  auto& from = static_cast<const ListLabelOrdersRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListLabelOrdersRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListLabelOrdersRequest::CopyFrom(const ListLabelOrdersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListLabelOrdersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListLabelOrdersRequest::IsInitialized() const {
  return true;
}

void ListLabelOrdersRequest::InternalSwap(ListLabelOrdersRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListLabelOrdersRequest, _impl_.per_page_)
      + sizeof(ListLabelOrdersRequest::_impl_.per_page_)
      - PROTOBUF_FIELD_OFFSET(ListLabelOrdersRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListLabelOrdersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[230]);
}

// ===================================================================

class PatchLabelOrdersRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchLabelOrdersRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchLabelOrdersRequest::_Internal::user_app_id(const PatchLabelOrdersRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PatchLabelOrdersRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PatchLabelOrdersRequest::clear_label_orders() {
  _impl_.label_orders_.Clear();
}
PatchLabelOrdersRequest::PatchLabelOrdersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchLabelOrdersRequest)
}
PatchLabelOrdersRequest::PatchLabelOrdersRequest(const PatchLabelOrdersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PatchLabelOrdersRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.label_orders_){from._impl_.label_orders_}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchLabelOrdersRequest)
}

inline void PatchLabelOrdersRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.label_orders_){arena}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PatchLabelOrdersRequest::~PatchLabelOrdersRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchLabelOrdersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatchLabelOrdersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.label_orders_.~RepeatedPtrField();
  _impl_.action_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PatchLabelOrdersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatchLabelOrdersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchLabelOrdersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.label_orders_.Clear();
  _impl_.action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchLabelOrdersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.LabelOrder label_orders = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_label_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchLabelOrdersRequest.action"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchLabelOrdersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchLabelOrdersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.LabelOrder label_orders = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_label_orders_size()); i < n; i++) {
    const auto& repfield = this->_internal_label_orders(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchLabelOrdersRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchLabelOrdersRequest)
  return target;
}

size_t PatchLabelOrdersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchLabelOrdersRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.LabelOrder label_orders = 2;
  total_size += 1UL * this->_internal_label_orders_size();
  for (const auto& msg : this->_impl_.label_orders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchLabelOrdersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PatchLabelOrdersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchLabelOrdersRequest::GetClassData() const { return &_class_data_; }


void PatchLabelOrdersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PatchLabelOrdersRequest*>(&to_msg);
  auto& from = static_cast<const PatchLabelOrdersRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchLabelOrdersRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.label_orders_.MergeFrom(from._impl_.label_orders_);
  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchLabelOrdersRequest::CopyFrom(const PatchLabelOrdersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchLabelOrdersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchLabelOrdersRequest::IsInitialized() const {
  return true;
}

void PatchLabelOrdersRequest::InternalSwap(PatchLabelOrdersRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.label_orders_.InternalSwap(&other->_impl_.label_orders_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchLabelOrdersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[231]);
}

// ===================================================================

class DeleteLabelOrdersRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteLabelOrdersRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteLabelOrdersRequest::_Internal::user_app_id(const DeleteLabelOrdersRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void DeleteLabelOrdersRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
DeleteLabelOrdersRequest::DeleteLabelOrdersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteLabelOrdersRequest)
}
DeleteLabelOrdersRequest::DeleteLabelOrdersRequest(const DeleteLabelOrdersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteLabelOrdersRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){from._impl_.ids_}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteLabelOrdersRequest)
}

inline void DeleteLabelOrdersRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeleteLabelOrdersRequest::~DeleteLabelOrdersRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteLabelOrdersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteLabelOrdersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void DeleteLabelOrdersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteLabelOrdersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteLabelOrdersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteLabelOrdersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DeleteLabelOrdersRequest.ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteLabelOrdersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteLabelOrdersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteLabelOrdersRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteLabelOrdersRequest)
  return target;
}

size_t DeleteLabelOrdersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteLabelOrdersRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.ids_.size());
  for (int i = 0, n = _impl_.ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteLabelOrdersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteLabelOrdersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteLabelOrdersRequest::GetClassData() const { return &_class_data_; }


void DeleteLabelOrdersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteLabelOrdersRequest*>(&to_msg);
  auto& from = static_cast<const DeleteLabelOrdersRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteLabelOrdersRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_.MergeFrom(from._impl_.ids_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteLabelOrdersRequest::CopyFrom(const DeleteLabelOrdersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteLabelOrdersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteLabelOrdersRequest::IsInitialized() const {
  return true;
}

void DeleteLabelOrdersRequest::InternalSwap(DeleteLabelOrdersRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ids_.InternalSwap(&other->_impl_.ids_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteLabelOrdersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[232]);
}

// ===================================================================

class MultiLabelOrderResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiLabelOrderResponse* msg);
};

const ::clarifai::api::status::Status&
MultiLabelOrderResponse::_Internal::status(const MultiLabelOrderResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiLabelOrderResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiLabelOrderResponse::clear_label_orders() {
  _impl_.label_orders_.Clear();
}
MultiLabelOrderResponse::MultiLabelOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiLabelOrderResponse)
}
MultiLabelOrderResponse::MultiLabelOrderResponse(const MultiLabelOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiLabelOrderResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.label_orders_){from._impl_.label_orders_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiLabelOrderResponse)
}

inline void MultiLabelOrderResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.label_orders_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiLabelOrderResponse::~MultiLabelOrderResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiLabelOrderResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiLabelOrderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.label_orders_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiLabelOrderResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiLabelOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiLabelOrderResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.label_orders_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiLabelOrderResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.LabelOrder label_orders = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_label_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiLabelOrderResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiLabelOrderResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.LabelOrder label_orders = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_label_orders_size()); i < n; i++) {
    const auto& repfield = this->_internal_label_orders(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiLabelOrderResponse)
  return target;
}

size_t MultiLabelOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiLabelOrderResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.LabelOrder label_orders = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_label_orders_size();
  for (const auto& msg : this->_impl_.label_orders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiLabelOrderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiLabelOrderResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiLabelOrderResponse::GetClassData() const { return &_class_data_; }


void MultiLabelOrderResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiLabelOrderResponse*>(&to_msg);
  auto& from = static_cast<const MultiLabelOrderResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiLabelOrderResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.label_orders_.MergeFrom(from._impl_.label_orders_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiLabelOrderResponse::CopyFrom(const MultiLabelOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiLabelOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiLabelOrderResponse::IsInitialized() const {
  return true;
}

void MultiLabelOrderResponse::InternalSwap(MultiLabelOrderResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.label_orders_.InternalSwap(&other->_impl_.label_orders_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiLabelOrderResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[233]);
}

// ===================================================================

class SingleLabelOrderResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleLabelOrderResponse* msg);
  static const ::clarifai::api::LabelOrder& label_order(const SingleLabelOrderResponse* msg);
};

const ::clarifai::api::status::Status&
SingleLabelOrderResponse::_Internal::status(const SingleLabelOrderResponse* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::LabelOrder&
SingleLabelOrderResponse::_Internal::label_order(const SingleLabelOrderResponse* msg) {
  return *msg->_impl_.label_order_;
}
void SingleLabelOrderResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void SingleLabelOrderResponse::clear_label_order() {
  if (GetArenaForAllocation() == nullptr && _impl_.label_order_ != nullptr) {
    delete _impl_.label_order_;
  }
  _impl_.label_order_ = nullptr;
}
SingleLabelOrderResponse::SingleLabelOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleLabelOrderResponse)
}
SingleLabelOrderResponse::SingleLabelOrderResponse(const SingleLabelOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleLabelOrderResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.label_order_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_label_order()) {
    _this->_impl_.label_order_ = new ::clarifai::api::LabelOrder(*from._impl_.label_order_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleLabelOrderResponse)
}

inline void SingleLabelOrderResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.label_order_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SingleLabelOrderResponse::~SingleLabelOrderResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleLabelOrderResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleLabelOrderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.label_order_;
}

void SingleLabelOrderResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleLabelOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleLabelOrderResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.label_order_ != nullptr) {
    delete _impl_.label_order_;
  }
  _impl_.label_order_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleLabelOrderResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.LabelOrder label_order = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_order(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleLabelOrderResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleLabelOrderResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.LabelOrder label_order = 2;
  if (this->_internal_has_label_order()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::label_order(this),
        _Internal::label_order(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleLabelOrderResponse)
  return target;
}

size_t SingleLabelOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleLabelOrderResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.LabelOrder label_order = 2;
  if (this->_internal_has_label_order()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.label_order_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleLabelOrderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleLabelOrderResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleLabelOrderResponse::GetClassData() const { return &_class_data_; }


void SingleLabelOrderResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleLabelOrderResponse*>(&to_msg);
  auto& from = static_cast<const SingleLabelOrderResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleLabelOrderResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_label_order()) {
    _this->_internal_mutable_label_order()->::clarifai::api::LabelOrder::MergeFrom(
        from._internal_label_order());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleLabelOrderResponse::CopyFrom(const SingleLabelOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleLabelOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleLabelOrderResponse::IsInitialized() const {
  return true;
}

void SingleLabelOrderResponse::InternalSwap(SingleLabelOrderResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleLabelOrderResponse, _impl_.label_order_)
      + sizeof(SingleLabelOrderResponse::_impl_.label_order_)
      - PROTOBUF_FIELD_OFFSET(SingleLabelOrderResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleLabelOrderResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[234]);
}

// ===================================================================

class PostCollectorsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostCollectorsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostCollectorsRequest::_Internal::user_app_id(const PostCollectorsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PostCollectorsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostCollectorsRequest::clear_collectors() {
  _impl_.collectors_.Clear();
}
PostCollectorsRequest::PostCollectorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostCollectorsRequest)
}
PostCollectorsRequest::PostCollectorsRequest(const PostCollectorsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostCollectorsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.collectors_){from._impl_.collectors_}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostCollectorsRequest)
}

inline void PostCollectorsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.collectors_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PostCollectorsRequest::~PostCollectorsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostCollectorsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostCollectorsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.collectors_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PostCollectorsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostCollectorsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostCollectorsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.collectors_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostCollectorsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Collector collectors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collectors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostCollectorsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostCollectorsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Collector collectors = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_collectors_size()); i < n; i++) {
    const auto& repfield = this->_internal_collectors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostCollectorsRequest)
  return target;
}

size_t PostCollectorsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostCollectorsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Collector collectors = 2;
  total_size += 1UL * this->_internal_collectors_size();
  for (const auto& msg : this->_impl_.collectors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostCollectorsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostCollectorsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostCollectorsRequest::GetClassData() const { return &_class_data_; }


void PostCollectorsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostCollectorsRequest*>(&to_msg);
  auto& from = static_cast<const PostCollectorsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostCollectorsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.collectors_.MergeFrom(from._impl_.collectors_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostCollectorsRequest::CopyFrom(const PostCollectorsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostCollectorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostCollectorsRequest::IsInitialized() const {
  return true;
}

void PostCollectorsRequest::InternalSwap(PostCollectorsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.collectors_.InternalSwap(&other->_impl_.collectors_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostCollectorsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[235]);
}

// ===================================================================

class PatchCollectorsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchCollectorsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchCollectorsRequest::_Internal::user_app_id(const PatchCollectorsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PatchCollectorsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PatchCollectorsRequest::clear_collectors() {
  _impl_.collectors_.Clear();
}
PatchCollectorsRequest::PatchCollectorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchCollectorsRequest)
}
PatchCollectorsRequest::PatchCollectorsRequest(const PatchCollectorsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PatchCollectorsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.collectors_){from._impl_.collectors_}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchCollectorsRequest)
}

inline void PatchCollectorsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.collectors_){arena}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PatchCollectorsRequest::~PatchCollectorsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchCollectorsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatchCollectorsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.collectors_.~RepeatedPtrField();
  _impl_.action_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PatchCollectorsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatchCollectorsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchCollectorsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.collectors_.Clear();
  _impl_.action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchCollectorsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Collector collectors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collectors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchCollectorsRequest.action"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchCollectorsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchCollectorsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Collector collectors = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_collectors_size()); i < n; i++) {
    const auto& repfield = this->_internal_collectors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchCollectorsRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchCollectorsRequest)
  return target;
}

size_t PatchCollectorsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchCollectorsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Collector collectors = 2;
  total_size += 1UL * this->_internal_collectors_size();
  for (const auto& msg : this->_impl_.collectors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchCollectorsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PatchCollectorsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchCollectorsRequest::GetClassData() const { return &_class_data_; }


void PatchCollectorsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PatchCollectorsRequest*>(&to_msg);
  auto& from = static_cast<const PatchCollectorsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchCollectorsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.collectors_.MergeFrom(from._impl_.collectors_);
  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchCollectorsRequest::CopyFrom(const PatchCollectorsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchCollectorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchCollectorsRequest::IsInitialized() const {
  return true;
}

void PatchCollectorsRequest::InternalSwap(PatchCollectorsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.collectors_.InternalSwap(&other->_impl_.collectors_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchCollectorsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[236]);
}

// ===================================================================

class DeleteCollectorsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteCollectorsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteCollectorsRequest::_Internal::user_app_id(const DeleteCollectorsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void DeleteCollectorsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
DeleteCollectorsRequest::DeleteCollectorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteCollectorsRequest)
}
DeleteCollectorsRequest::DeleteCollectorsRequest(const DeleteCollectorsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteCollectorsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){from._impl_.ids_}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.delete_all_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  _this->_impl_.delete_all_ = from._impl_.delete_all_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteCollectorsRequest)
}

inline void DeleteCollectorsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.delete_all_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeleteCollectorsRequest::~DeleteCollectorsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteCollectorsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteCollectorsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void DeleteCollectorsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteCollectorsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteCollectorsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _impl_.delete_all_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteCollectorsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DeleteCollectorsRequest.ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool delete_all = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.delete_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteCollectorsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteCollectorsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteCollectorsRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  // bool delete_all = 3;
  if (this->_internal_delete_all() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_delete_all(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteCollectorsRequest)
  return target;
}

size_t DeleteCollectorsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteCollectorsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.ids_.size());
  for (int i = 0, n = _impl_.ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // bool delete_all = 3;
  if (this->_internal_delete_all() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteCollectorsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteCollectorsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteCollectorsRequest::GetClassData() const { return &_class_data_; }


void DeleteCollectorsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteCollectorsRequest*>(&to_msg);
  auto& from = static_cast<const DeleteCollectorsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteCollectorsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_.MergeFrom(from._impl_.ids_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_delete_all() != 0) {
    _this->_internal_set_delete_all(from._internal_delete_all());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteCollectorsRequest::CopyFrom(const DeleteCollectorsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteCollectorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCollectorsRequest::IsInitialized() const {
  return true;
}

void DeleteCollectorsRequest::InternalSwap(DeleteCollectorsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ids_.InternalSwap(&other->_impl_.ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteCollectorsRequest, _impl_.delete_all_)
      + sizeof(DeleteCollectorsRequest::_impl_.delete_all_)
      - PROTOBUF_FIELD_OFFSET(DeleteCollectorsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteCollectorsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[237]);
}

// ===================================================================

class GetCollectorRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetCollectorRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetCollectorRequest::_Internal::user_app_id(const GetCollectorRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void GetCollectorRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
GetCollectorRequest::GetCollectorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetCollectorRequest)
}
GetCollectorRequest::GetCollectorRequest(const GetCollectorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetCollectorRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.collector_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.collector_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collector_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collector_id().empty()) {
    _this->_impl_.collector_id_.Set(from._internal_collector_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetCollectorRequest)
}

inline void GetCollectorRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.collector_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.collector_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collector_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetCollectorRequest::~GetCollectorRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetCollectorRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetCollectorRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.collector_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void GetCollectorRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetCollectorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetCollectorRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.collector_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCollectorRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string collector_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_collector_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetCollectorRequest.collector_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetCollectorRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetCollectorRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string collector_id = 2;
  if (!this->_internal_collector_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collector_id().data(), static_cast<int>(this->_internal_collector_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetCollectorRequest.collector_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_collector_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetCollectorRequest)
  return target;
}

size_t GetCollectorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetCollectorRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string collector_id = 2;
  if (!this->_internal_collector_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collector_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCollectorRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetCollectorRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCollectorRequest::GetClassData() const { return &_class_data_; }


void GetCollectorRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetCollectorRequest*>(&to_msg);
  auto& from = static_cast<const GetCollectorRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetCollectorRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_collector_id().empty()) {
    _this->_internal_set_collector_id(from._internal_collector_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCollectorRequest::CopyFrom(const GetCollectorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetCollectorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCollectorRequest::IsInitialized() const {
  return true;
}

void GetCollectorRequest::InternalSwap(GetCollectorRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collector_id_, lhs_arena,
      &other->_impl_.collector_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCollectorRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[238]);
}

// ===================================================================

class ListCollectorsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListCollectorsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListCollectorsRequest::_Internal::user_app_id(const ListCollectorsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListCollectorsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
ListCollectorsRequest::ListCollectorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListCollectorsRequest)
}
ListCollectorsRequest::ListCollectorsRequest(const ListCollectorsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListCollectorsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.per_page_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListCollectorsRequest)
}

inline void ListCollectorsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListCollectorsRequest::~ListCollectorsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListCollectorsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListCollectorsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void ListCollectorsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListCollectorsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListCollectorsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.per_page_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListCollectorsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListCollectorsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListCollectorsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListCollectorsRequest)
  return target;
}

size_t ListCollectorsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListCollectorsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListCollectorsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListCollectorsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListCollectorsRequest::GetClassData() const { return &_class_data_; }


void ListCollectorsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListCollectorsRequest*>(&to_msg);
  auto& from = static_cast<const ListCollectorsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListCollectorsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListCollectorsRequest::CopyFrom(const ListCollectorsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListCollectorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCollectorsRequest::IsInitialized() const {
  return true;
}

void ListCollectorsRequest::InternalSwap(ListCollectorsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListCollectorsRequest, _impl_.per_page_)
      + sizeof(ListCollectorsRequest::_impl_.per_page_)
      - PROTOBUF_FIELD_OFFSET(ListCollectorsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCollectorsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[239]);
}

// ===================================================================

class MultiCollectorResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiCollectorResponse* msg);
};

const ::clarifai::api::status::Status&
MultiCollectorResponse::_Internal::status(const MultiCollectorResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiCollectorResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiCollectorResponse::clear_collectors() {
  _impl_.collectors_.Clear();
}
MultiCollectorResponse::MultiCollectorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiCollectorResponse)
}
MultiCollectorResponse::MultiCollectorResponse(const MultiCollectorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiCollectorResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.collectors_){from._impl_.collectors_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiCollectorResponse)
}

inline void MultiCollectorResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.collectors_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiCollectorResponse::~MultiCollectorResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiCollectorResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiCollectorResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.collectors_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiCollectorResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiCollectorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiCollectorResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.collectors_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiCollectorResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Collector collectors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collectors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiCollectorResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiCollectorResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Collector collectors = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_collectors_size()); i < n; i++) {
    const auto& repfield = this->_internal_collectors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiCollectorResponse)
  return target;
}

size_t MultiCollectorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiCollectorResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Collector collectors = 2;
  total_size += 1UL * this->_internal_collectors_size();
  for (const auto& msg : this->_impl_.collectors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiCollectorResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiCollectorResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiCollectorResponse::GetClassData() const { return &_class_data_; }


void MultiCollectorResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiCollectorResponse*>(&to_msg);
  auto& from = static_cast<const MultiCollectorResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiCollectorResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.collectors_.MergeFrom(from._impl_.collectors_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiCollectorResponse::CopyFrom(const MultiCollectorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiCollectorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiCollectorResponse::IsInitialized() const {
  return true;
}

void MultiCollectorResponse::InternalSwap(MultiCollectorResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.collectors_.InternalSwap(&other->_impl_.collectors_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiCollectorResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[240]);
}

// ===================================================================

class SingleCollectorResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleCollectorResponse* msg);
  static const ::clarifai::api::Collector& collector(const SingleCollectorResponse* msg);
};

const ::clarifai::api::status::Status&
SingleCollectorResponse::_Internal::status(const SingleCollectorResponse* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::Collector&
SingleCollectorResponse::_Internal::collector(const SingleCollectorResponse* msg) {
  return *msg->_impl_.collector_;
}
void SingleCollectorResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void SingleCollectorResponse::clear_collector() {
  if (GetArenaForAllocation() == nullptr && _impl_.collector_ != nullptr) {
    delete _impl_.collector_;
  }
  _impl_.collector_ = nullptr;
}
SingleCollectorResponse::SingleCollectorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleCollectorResponse)
}
SingleCollectorResponse::SingleCollectorResponse(const SingleCollectorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleCollectorResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.collector_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_collector()) {
    _this->_impl_.collector_ = new ::clarifai::api::Collector(*from._impl_.collector_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleCollectorResponse)
}

inline void SingleCollectorResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.collector_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SingleCollectorResponse::~SingleCollectorResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleCollectorResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleCollectorResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.collector_;
}

void SingleCollectorResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleCollectorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleCollectorResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.collector_ != nullptr) {
    delete _impl_.collector_;
  }
  _impl_.collector_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleCollectorResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Collector collector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_collector(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleCollectorResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleCollectorResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Collector collector = 2;
  if (this->_internal_has_collector()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::collector(this),
        _Internal::collector(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleCollectorResponse)
  return target;
}

size_t SingleCollectorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleCollectorResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.Collector collector = 2;
  if (this->_internal_has_collector()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.collector_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleCollectorResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleCollectorResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleCollectorResponse::GetClassData() const { return &_class_data_; }


void SingleCollectorResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleCollectorResponse*>(&to_msg);
  auto& from = static_cast<const SingleCollectorResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleCollectorResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_collector()) {
    _this->_internal_mutable_collector()->::clarifai::api::Collector::MergeFrom(
        from._internal_collector());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleCollectorResponse::CopyFrom(const SingleCollectorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleCollectorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleCollectorResponse::IsInitialized() const {
  return true;
}

void SingleCollectorResponse::InternalSwap(SingleCollectorResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleCollectorResponse, _impl_.collector_)
      + sizeof(SingleCollectorResponse::_impl_.collector_)
      - PROTOBUF_FIELD_OFFSET(SingleCollectorResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleCollectorResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[241]);
}

// ===================================================================

class PostStatValuesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostStatValuesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostStatValuesRequest::_Internal::user_app_id(const PostStatValuesRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PostStatValuesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostStatValuesRequest::clear_stat_values() {
  _impl_.stat_values_.Clear();
}
PostStatValuesRequest::PostStatValuesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostStatValuesRequest)
}
PostStatValuesRequest::PostStatValuesRequest(const PostStatValuesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostStatValuesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stat_values_){from._impl_.stat_values_}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostStatValuesRequest)
}

inline void PostStatValuesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stat_values_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PostStatValuesRequest::~PostStatValuesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostStatValuesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostStatValuesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stat_values_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PostStatValuesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostStatValuesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostStatValuesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stat_values_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostStatValuesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.StatValue stat_values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stat_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostStatValuesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostStatValuesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.StatValue stat_values = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stat_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_stat_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostStatValuesRequest)
  return target;
}

size_t PostStatValuesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostStatValuesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.StatValue stat_values = 2;
  total_size += 1UL * this->_internal_stat_values_size();
  for (const auto& msg : this->_impl_.stat_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostStatValuesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostStatValuesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostStatValuesRequest::GetClassData() const { return &_class_data_; }


void PostStatValuesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostStatValuesRequest*>(&to_msg);
  auto& from = static_cast<const PostStatValuesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostStatValuesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stat_values_.MergeFrom(from._impl_.stat_values_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostStatValuesRequest::CopyFrom(const PostStatValuesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostStatValuesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostStatValuesRequest::IsInitialized() const {
  return true;
}

void PostStatValuesRequest::InternalSwap(PostStatValuesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stat_values_.InternalSwap(&other->_impl_.stat_values_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostStatValuesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[242]);
}

// ===================================================================

class MultiStatValueResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiStatValueResponse* msg);
};

const ::clarifai::api::status::Status&
MultiStatValueResponse::_Internal::status(const MultiStatValueResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiStatValueResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiStatValueResponse::clear_stat_values() {
  _impl_.stat_values_.Clear();
}
MultiStatValueResponse::MultiStatValueResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiStatValueResponse)
}
MultiStatValueResponse::MultiStatValueResponse(const MultiStatValueResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiStatValueResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stat_values_){from._impl_.stat_values_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiStatValueResponse)
}

inline void MultiStatValueResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stat_values_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiStatValueResponse::~MultiStatValueResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiStatValueResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiStatValueResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stat_values_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiStatValueResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiStatValueResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiStatValueResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stat_values_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiStatValueResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.StatValue stat_values = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stat_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiStatValueResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiStatValueResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.StatValue stat_values = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stat_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_stat_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiStatValueResponse)
  return target;
}

size_t MultiStatValueResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiStatValueResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.StatValue stat_values = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_stat_values_size();
  for (const auto& msg : this->_impl_.stat_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiStatValueResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiStatValueResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiStatValueResponse::GetClassData() const { return &_class_data_; }


void MultiStatValueResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiStatValueResponse*>(&to_msg);
  auto& from = static_cast<const MultiStatValueResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiStatValueResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stat_values_.MergeFrom(from._impl_.stat_values_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiStatValueResponse::CopyFrom(const MultiStatValueResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiStatValueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiStatValueResponse::IsInitialized() const {
  return true;
}

void MultiStatValueResponse::InternalSwap(MultiStatValueResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stat_values_.InternalSwap(&other->_impl_.stat_values_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiStatValueResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[243]);
}

// ===================================================================

class PostStatValuesAggregateRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostStatValuesAggregateRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostStatValuesAggregateRequest::_Internal::user_app_id(const PostStatValuesAggregateRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PostStatValuesAggregateRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostStatValuesAggregateRequest::clear_stat_value_aggregate_queries() {
  _impl_.stat_value_aggregate_queries_.Clear();
}
PostStatValuesAggregateRequest::PostStatValuesAggregateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostStatValuesAggregateRequest)
}
PostStatValuesAggregateRequest::PostStatValuesAggregateRequest(const PostStatValuesAggregateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostStatValuesAggregateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stat_value_aggregate_queries_){from._impl_.stat_value_aggregate_queries_}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostStatValuesAggregateRequest)
}

inline void PostStatValuesAggregateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stat_value_aggregate_queries_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PostStatValuesAggregateRequest::~PostStatValuesAggregateRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostStatValuesAggregateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostStatValuesAggregateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stat_value_aggregate_queries_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PostStatValuesAggregateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostStatValuesAggregateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostStatValuesAggregateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stat_value_aggregate_queries_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostStatValuesAggregateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.StatValueAggregateQuery stat_value_aggregate_queries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stat_value_aggregate_queries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostStatValuesAggregateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostStatValuesAggregateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.StatValueAggregateQuery stat_value_aggregate_queries = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stat_value_aggregate_queries_size()); i < n; i++) {
    const auto& repfield = this->_internal_stat_value_aggregate_queries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostStatValuesAggregateRequest)
  return target;
}

size_t PostStatValuesAggregateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostStatValuesAggregateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.StatValueAggregateQuery stat_value_aggregate_queries = 2;
  total_size += 1UL * this->_internal_stat_value_aggregate_queries_size();
  for (const auto& msg : this->_impl_.stat_value_aggregate_queries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostStatValuesAggregateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostStatValuesAggregateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostStatValuesAggregateRequest::GetClassData() const { return &_class_data_; }


void PostStatValuesAggregateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostStatValuesAggregateRequest*>(&to_msg);
  auto& from = static_cast<const PostStatValuesAggregateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostStatValuesAggregateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stat_value_aggregate_queries_.MergeFrom(from._impl_.stat_value_aggregate_queries_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostStatValuesAggregateRequest::CopyFrom(const PostStatValuesAggregateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostStatValuesAggregateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostStatValuesAggregateRequest::IsInitialized() const {
  return true;
}

void PostStatValuesAggregateRequest::InternalSwap(PostStatValuesAggregateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stat_value_aggregate_queries_.InternalSwap(&other->_impl_.stat_value_aggregate_queries_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostStatValuesAggregateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[244]);
}

// ===================================================================

class MultiStatValueAggregateResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiStatValueAggregateResponse* msg);
};

const ::clarifai::api::status::Status&
MultiStatValueAggregateResponse::_Internal::status(const MultiStatValueAggregateResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiStatValueAggregateResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiStatValueAggregateResponse::clear_stat_value_aggregate_results() {
  _impl_.stat_value_aggregate_results_.Clear();
}
MultiStatValueAggregateResponse::MultiStatValueAggregateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiStatValueAggregateResponse)
}
MultiStatValueAggregateResponse::MultiStatValueAggregateResponse(const MultiStatValueAggregateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiStatValueAggregateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stat_value_aggregate_results_){from._impl_.stat_value_aggregate_results_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiStatValueAggregateResponse)
}

inline void MultiStatValueAggregateResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stat_value_aggregate_results_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiStatValueAggregateResponse::~MultiStatValueAggregateResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiStatValueAggregateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiStatValueAggregateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stat_value_aggregate_results_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiStatValueAggregateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiStatValueAggregateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiStatValueAggregateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stat_value_aggregate_results_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiStatValueAggregateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.StatValueAggregateResult stat_value_aggregate_results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stat_value_aggregate_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiStatValueAggregateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiStatValueAggregateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.StatValueAggregateResult stat_value_aggregate_results = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stat_value_aggregate_results_size()); i < n; i++) {
    const auto& repfield = this->_internal_stat_value_aggregate_results(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiStatValueAggregateResponse)
  return target;
}

size_t MultiStatValueAggregateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiStatValueAggregateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.StatValueAggregateResult stat_value_aggregate_results = 2;
  total_size += 1UL * this->_internal_stat_value_aggregate_results_size();
  for (const auto& msg : this->_impl_.stat_value_aggregate_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiStatValueAggregateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiStatValueAggregateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiStatValueAggregateResponse::GetClassData() const { return &_class_data_; }


void MultiStatValueAggregateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiStatValueAggregateResponse*>(&to_msg);
  auto& from = static_cast<const MultiStatValueAggregateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiStatValueAggregateResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stat_value_aggregate_results_.MergeFrom(from._impl_.stat_value_aggregate_results_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiStatValueAggregateResponse::CopyFrom(const MultiStatValueAggregateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiStatValueAggregateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiStatValueAggregateResponse::IsInitialized() const {
  return true;
}

void MultiStatValueAggregateResponse::InternalSwap(MultiStatValueAggregateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stat_value_aggregate_results_.InternalSwap(&other->_impl_.stat_value_aggregate_results_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiStatValueAggregateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[245]);
}

// ===================================================================

class PostTrendingMetricsViewRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostTrendingMetricsViewRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostTrendingMetricsViewRequest::_Internal::user_app_id(const PostTrendingMetricsViewRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PostTrendingMetricsViewRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
PostTrendingMetricsViewRequest::PostTrendingMetricsViewRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostTrendingMetricsViewRequest)
}
PostTrendingMetricsViewRequest::PostTrendingMetricsViewRequest(const PostTrendingMetricsViewRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostTrendingMetricsViewRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.view_type_){}
    , decltype(_impl_.object_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.view_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.view_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_view_type().empty()) {
    _this->_impl_.view_type_.Set(from._internal_view_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.object_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.object_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_object_id().empty()) {
    _this->_impl_.object_id_.Set(from._internal_object_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostTrendingMetricsViewRequest)
}

inline void PostTrendingMetricsViewRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.view_type_){}
    , decltype(_impl_.object_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.view_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.view_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.object_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.object_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PostTrendingMetricsViewRequest::~PostTrendingMetricsViewRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostTrendingMetricsViewRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostTrendingMetricsViewRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.view_type_.Destroy();
  _impl_.object_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PostTrendingMetricsViewRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostTrendingMetricsViewRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostTrendingMetricsViewRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.view_type_.ClearToEmpty();
  _impl_.object_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostTrendingMetricsViewRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string view_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_view_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PostTrendingMetricsViewRequest.view_type"));
        } else
          goto handle_unusual;
        continue;
      // string object_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_object_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PostTrendingMetricsViewRequest.object_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostTrendingMetricsViewRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostTrendingMetricsViewRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string view_type = 2;
  if (!this->_internal_view_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_view_type().data(), static_cast<int>(this->_internal_view_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostTrendingMetricsViewRequest.view_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_view_type(), target);
  }

  // string object_id = 3;
  if (!this->_internal_object_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_object_id().data(), static_cast<int>(this->_internal_object_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostTrendingMetricsViewRequest.object_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostTrendingMetricsViewRequest)
  return target;
}

size_t PostTrendingMetricsViewRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostTrendingMetricsViewRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string view_type = 2;
  if (!this->_internal_view_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_view_type());
  }

  // string object_id = 3;
  if (!this->_internal_object_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_object_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostTrendingMetricsViewRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostTrendingMetricsViewRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostTrendingMetricsViewRequest::GetClassData() const { return &_class_data_; }


void PostTrendingMetricsViewRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostTrendingMetricsViewRequest*>(&to_msg);
  auto& from = static_cast<const PostTrendingMetricsViewRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostTrendingMetricsViewRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_view_type().empty()) {
    _this->_internal_set_view_type(from._internal_view_type());
  }
  if (!from._internal_object_id().empty()) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostTrendingMetricsViewRequest::CopyFrom(const PostTrendingMetricsViewRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostTrendingMetricsViewRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostTrendingMetricsViewRequest::IsInitialized() const {
  return true;
}

void PostTrendingMetricsViewRequest::InternalSwap(PostTrendingMetricsViewRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.view_type_, lhs_arena,
      &other->_impl_.view_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.object_id_, lhs_arena,
      &other->_impl_.object_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostTrendingMetricsViewRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[246]);
}

// ===================================================================

class ListTrendingMetricsViewsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListTrendingMetricsViewsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListTrendingMetricsViewsRequest::_Internal::user_app_id(const ListTrendingMetricsViewsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListTrendingMetricsViewsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
ListTrendingMetricsViewsRequest::ListTrendingMetricsViewsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListTrendingMetricsViewsRequest)
}
ListTrendingMetricsViewsRequest::ListTrendingMetricsViewsRequest(const ListTrendingMetricsViewsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListTrendingMetricsViewsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.view_type_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.view_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.view_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_view_type().empty()) {
    _this->_impl_.view_type_.Set(from._internal_view_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.per_page_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListTrendingMetricsViewsRequest)
}

inline void ListTrendingMetricsViewsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.view_type_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.view_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.view_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListTrendingMetricsViewsRequest::~ListTrendingMetricsViewsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListTrendingMetricsViewsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListTrendingMetricsViewsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.view_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void ListTrendingMetricsViewsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListTrendingMetricsViewsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListTrendingMetricsViewsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.view_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.per_page_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListTrendingMetricsViewsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string view_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_view_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListTrendingMetricsViewsRequest.view_type"));
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListTrendingMetricsViewsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListTrendingMetricsViewsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string view_type = 2;
  if (!this->_internal_view_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_view_type().data(), static_cast<int>(this->_internal_view_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListTrendingMetricsViewsRequest.view_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_view_type(), target);
  }

  // uint32 page = 3;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_page(), target);
  }

  // uint32 per_page = 4;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListTrendingMetricsViewsRequest)
  return target;
}

size_t ListTrendingMetricsViewsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListTrendingMetricsViewsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string view_type = 2;
  if (!this->_internal_view_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_view_type());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // uint32 page = 3;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 4;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListTrendingMetricsViewsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListTrendingMetricsViewsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListTrendingMetricsViewsRequest::GetClassData() const { return &_class_data_; }


void ListTrendingMetricsViewsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListTrendingMetricsViewsRequest*>(&to_msg);
  auto& from = static_cast<const ListTrendingMetricsViewsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListTrendingMetricsViewsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_view_type().empty()) {
    _this->_internal_set_view_type(from._internal_view_type());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListTrendingMetricsViewsRequest::CopyFrom(const ListTrendingMetricsViewsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListTrendingMetricsViewsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTrendingMetricsViewsRequest::IsInitialized() const {
  return true;
}

void ListTrendingMetricsViewsRequest::InternalSwap(ListTrendingMetricsViewsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.view_type_, lhs_arena,
      &other->_impl_.view_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListTrendingMetricsViewsRequest, _impl_.per_page_)
      + sizeof(ListTrendingMetricsViewsRequest::_impl_.per_page_)
      - PROTOBUF_FIELD_OFFSET(ListTrendingMetricsViewsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListTrendingMetricsViewsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[247]);
}

// ===================================================================

class MultiTrendingMetricsViewResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiTrendingMetricsViewResponse* msg);
};

const ::clarifai::api::status::Status&
MultiTrendingMetricsViewResponse::_Internal::status(const MultiTrendingMetricsViewResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiTrendingMetricsViewResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiTrendingMetricsViewResponse::clear_metrics() {
  _impl_.metrics_.Clear();
}
MultiTrendingMetricsViewResponse::MultiTrendingMetricsViewResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiTrendingMetricsViewResponse)
}
MultiTrendingMetricsViewResponse::MultiTrendingMetricsViewResponse(const MultiTrendingMetricsViewResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiTrendingMetricsViewResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.metrics_){from._impl_.metrics_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiTrendingMetricsViewResponse)
}

inline void MultiTrendingMetricsViewResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.metrics_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiTrendingMetricsViewResponse::~MultiTrendingMetricsViewResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiTrendingMetricsViewResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiTrendingMetricsViewResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metrics_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiTrendingMetricsViewResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiTrendingMetricsViewResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiTrendingMetricsViewResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metrics_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiTrendingMetricsViewResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.TrendingMetric metrics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiTrendingMetricsViewResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiTrendingMetricsViewResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.TrendingMetric metrics = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metrics_size()); i < n; i++) {
    const auto& repfield = this->_internal_metrics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiTrendingMetricsViewResponse)
  return target;
}

size_t MultiTrendingMetricsViewResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiTrendingMetricsViewResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.TrendingMetric metrics = 2;
  total_size += 1UL * this->_internal_metrics_size();
  for (const auto& msg : this->_impl_.metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiTrendingMetricsViewResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiTrendingMetricsViewResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiTrendingMetricsViewResponse::GetClassData() const { return &_class_data_; }


void MultiTrendingMetricsViewResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiTrendingMetricsViewResponse*>(&to_msg);
  auto& from = static_cast<const MultiTrendingMetricsViewResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiTrendingMetricsViewResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.metrics_.MergeFrom(from._impl_.metrics_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiTrendingMetricsViewResponse::CopyFrom(const MultiTrendingMetricsViewResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiTrendingMetricsViewResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiTrendingMetricsViewResponse::IsInitialized() const {
  return true;
}

void MultiTrendingMetricsViewResponse::InternalSwap(MultiTrendingMetricsViewResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.metrics_.InternalSwap(&other->_impl_.metrics_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiTrendingMetricsViewResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[248]);
}

// ===================================================================

class GetModuleRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetModuleRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetModuleRequest::_Internal::user_app_id(const GetModuleRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void GetModuleRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
GetModuleRequest::GetModuleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetModuleRequest)
}
GetModuleRequest::GetModuleRequest(const GetModuleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetModuleRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.module_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.module_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.module_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_module_id().empty()) {
    _this->_impl_.module_id_.Set(from._internal_module_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetModuleRequest)
}

inline void GetModuleRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.module_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.module_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.module_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetModuleRequest::~GetModuleRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetModuleRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetModuleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.module_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void GetModuleRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetModuleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetModuleRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.module_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetModuleRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string module_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_module_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetModuleRequest.module_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetModuleRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetModuleRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string module_id = 2;
  if (!this->_internal_module_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_module_id().data(), static_cast<int>(this->_internal_module_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModuleRequest.module_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_module_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetModuleRequest)
  return target;
}

size_t GetModuleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetModuleRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string module_id = 2;
  if (!this->_internal_module_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_module_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetModuleRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetModuleRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetModuleRequest::GetClassData() const { return &_class_data_; }


void GetModuleRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetModuleRequest*>(&to_msg);
  auto& from = static_cast<const GetModuleRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetModuleRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_module_id().empty()) {
    _this->_internal_set_module_id(from._internal_module_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetModuleRequest::CopyFrom(const GetModuleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetModuleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModuleRequest::IsInitialized() const {
  return true;
}

void GetModuleRequest::InternalSwap(GetModuleRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.module_id_, lhs_arena,
      &other->_impl_.module_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetModuleRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[249]);
}

// ===================================================================

class ListModulesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListModulesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListModulesRequest::_Internal::user_app_id(const ListModulesRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListModulesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
ListModulesRequest::ListModulesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListModulesRequest)
}
ListModulesRequest::ListModulesRequest(const ListModulesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListModulesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.per_page_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListModulesRequest)
}

inline void ListModulesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListModulesRequest::~ListModulesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListModulesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListModulesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void ListModulesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListModulesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListModulesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.per_page_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListModulesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListModulesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListModulesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListModulesRequest)
  return target;
}

size_t ListModulesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListModulesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListModulesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListModulesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListModulesRequest::GetClassData() const { return &_class_data_; }


void ListModulesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListModulesRequest*>(&to_msg);
  auto& from = static_cast<const ListModulesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListModulesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListModulesRequest::CopyFrom(const ListModulesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListModulesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListModulesRequest::IsInitialized() const {
  return true;
}

void ListModulesRequest::InternalSwap(ListModulesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListModulesRequest, _impl_.per_page_)
      + sizeof(ListModulesRequest::_impl_.per_page_)
      - PROTOBUF_FIELD_OFFSET(ListModulesRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListModulesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[250]);
}

// ===================================================================

class PostModulesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostModulesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostModulesRequest::_Internal::user_app_id(const PostModulesRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PostModulesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostModulesRequest::clear_modules() {
  _impl_.modules_.Clear();
}
PostModulesRequest::PostModulesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostModulesRequest)
}
PostModulesRequest::PostModulesRequest(const PostModulesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostModulesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.modules_){from._impl_.modules_}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostModulesRequest)
}

inline void PostModulesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.modules_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PostModulesRequest::~PostModulesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostModulesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostModulesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.modules_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PostModulesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostModulesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostModulesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.modules_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostModulesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Module modules = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_modules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostModulesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostModulesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Module modules = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_modules_size()); i < n; i++) {
    const auto& repfield = this->_internal_modules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostModulesRequest)
  return target;
}

size_t PostModulesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostModulesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Module modules = 3;
  total_size += 1UL * this->_internal_modules_size();
  for (const auto& msg : this->_impl_.modules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostModulesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostModulesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostModulesRequest::GetClassData() const { return &_class_data_; }


void PostModulesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostModulesRequest*>(&to_msg);
  auto& from = static_cast<const PostModulesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostModulesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.modules_.MergeFrom(from._impl_.modules_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostModulesRequest::CopyFrom(const PostModulesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostModulesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostModulesRequest::IsInitialized() const {
  return true;
}

void PostModulesRequest::InternalSwap(PostModulesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.modules_.InternalSwap(&other->_impl_.modules_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostModulesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[251]);
}

// ===================================================================

class PatchModulesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchModulesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchModulesRequest::_Internal::user_app_id(const PatchModulesRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PatchModulesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PatchModulesRequest::clear_modules() {
  _impl_.modules_.Clear();
}
PatchModulesRequest::PatchModulesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchModulesRequest)
}
PatchModulesRequest::PatchModulesRequest(const PatchModulesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PatchModulesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.modules_){from._impl_.modules_}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchModulesRequest)
}

inline void PatchModulesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.modules_){arena}
    , decltype(_impl_.action_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PatchModulesRequest::~PatchModulesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchModulesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatchModulesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.modules_.~RepeatedPtrField();
  _impl_.action_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PatchModulesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatchModulesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchModulesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.modules_.Clear();
  _impl_.action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchModulesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Module modules = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_modules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PatchModulesRequest.action"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchModulesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchModulesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Module modules = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_modules_size()); i < n; i++) {
    const auto& repfield = this->_internal_modules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchModulesRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchModulesRequest)
  return target;
}

size_t PatchModulesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchModulesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Module modules = 2;
  total_size += 1UL * this->_internal_modules_size();
  for (const auto& msg : this->_impl_.modules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchModulesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PatchModulesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchModulesRequest::GetClassData() const { return &_class_data_; }


void PatchModulesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PatchModulesRequest*>(&to_msg);
  auto& from = static_cast<const PatchModulesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchModulesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.modules_.MergeFrom(from._impl_.modules_);
  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchModulesRequest::CopyFrom(const PatchModulesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchModulesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchModulesRequest::IsInitialized() const {
  return true;
}

void PatchModulesRequest::InternalSwap(PatchModulesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.modules_.InternalSwap(&other->_impl_.modules_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchModulesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[252]);
}

// ===================================================================

class DeleteModulesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteModulesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteModulesRequest::_Internal::user_app_id(const DeleteModulesRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void DeleteModulesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
DeleteModulesRequest::DeleteModulesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteModulesRequest)
}
DeleteModulesRequest::DeleteModulesRequest(const DeleteModulesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteModulesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){from._impl_.ids_}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteModulesRequest)
}

inline void DeleteModulesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeleteModulesRequest::~DeleteModulesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteModulesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteModulesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void DeleteModulesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteModulesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteModulesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteModulesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DeleteModulesRequest.ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteModulesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteModulesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteModulesRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteModulesRequest)
  return target;
}

size_t DeleteModulesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteModulesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.ids_.size());
  for (int i = 0, n = _impl_.ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteModulesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteModulesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteModulesRequest::GetClassData() const { return &_class_data_; }


void DeleteModulesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteModulesRequest*>(&to_msg);
  auto& from = static_cast<const DeleteModulesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteModulesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_.MergeFrom(from._impl_.ids_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteModulesRequest::CopyFrom(const DeleteModulesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteModulesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteModulesRequest::IsInitialized() const {
  return true;
}

void DeleteModulesRequest::InternalSwap(DeleteModulesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ids_.InternalSwap(&other->_impl_.ids_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteModulesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[253]);
}

// ===================================================================

class SingleModuleResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleModuleResponse* msg);
  static const ::clarifai::api::Module& module(const SingleModuleResponse* msg);
};

const ::clarifai::api::status::Status&
SingleModuleResponse::_Internal::status(const SingleModuleResponse* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::Module&
SingleModuleResponse::_Internal::module(const SingleModuleResponse* msg) {
  return *msg->_impl_.module_;
}
void SingleModuleResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void SingleModuleResponse::clear_module() {
  if (GetArenaForAllocation() == nullptr && _impl_.module_ != nullptr) {
    delete _impl_.module_;
  }
  _impl_.module_ = nullptr;
}
SingleModuleResponse::SingleModuleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleModuleResponse)
}
SingleModuleResponse::SingleModuleResponse(const SingleModuleResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleModuleResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.module_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_module()) {
    _this->_impl_.module_ = new ::clarifai::api::Module(*from._impl_.module_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleModuleResponse)
}

inline void SingleModuleResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.module_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SingleModuleResponse::~SingleModuleResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleModuleResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleModuleResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.module_;
}

void SingleModuleResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleModuleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleModuleResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.module_ != nullptr) {
    delete _impl_.module_;
  }
  _impl_.module_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleModuleResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Module module = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_module(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleModuleResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleModuleResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Module module = 2;
  if (this->_internal_has_module()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::module(this),
        _Internal::module(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleModuleResponse)
  return target;
}

size_t SingleModuleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleModuleResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.Module module = 2;
  if (this->_internal_has_module()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.module_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleModuleResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleModuleResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleModuleResponse::GetClassData() const { return &_class_data_; }


void SingleModuleResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleModuleResponse*>(&to_msg);
  auto& from = static_cast<const SingleModuleResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleModuleResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_module()) {
    _this->_internal_mutable_module()->::clarifai::api::Module::MergeFrom(
        from._internal_module());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleModuleResponse::CopyFrom(const SingleModuleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleModuleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleModuleResponse::IsInitialized() const {
  return true;
}

void SingleModuleResponse::InternalSwap(SingleModuleResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleModuleResponse, _impl_.module_)
      + sizeof(SingleModuleResponse::_impl_.module_)
      - PROTOBUF_FIELD_OFFSET(SingleModuleResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleModuleResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[254]);
}

// ===================================================================

class MultiModuleResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiModuleResponse* msg);
};

const ::clarifai::api::status::Status&
MultiModuleResponse::_Internal::status(const MultiModuleResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiModuleResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiModuleResponse::clear_modules() {
  _impl_.modules_.Clear();
}
MultiModuleResponse::MultiModuleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiModuleResponse)
}
MultiModuleResponse::MultiModuleResponse(const MultiModuleResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiModuleResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.modules_){from._impl_.modules_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiModuleResponse)
}

inline void MultiModuleResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.modules_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiModuleResponse::~MultiModuleResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiModuleResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiModuleResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.modules_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiModuleResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiModuleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiModuleResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.modules_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiModuleResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Module modules = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_modules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiModuleResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiModuleResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Module modules = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_modules_size()); i < n; i++) {
    const auto& repfield = this->_internal_modules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiModuleResponse)
  return target;
}

size_t MultiModuleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiModuleResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Module modules = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_modules_size();
  for (const auto& msg : this->_impl_.modules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiModuleResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiModuleResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiModuleResponse::GetClassData() const { return &_class_data_; }


void MultiModuleResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiModuleResponse*>(&to_msg);
  auto& from = static_cast<const MultiModuleResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiModuleResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.modules_.MergeFrom(from._impl_.modules_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiModuleResponse::CopyFrom(const MultiModuleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiModuleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiModuleResponse::IsInitialized() const {
  return true;
}

void MultiModuleResponse::InternalSwap(MultiModuleResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.modules_.InternalSwap(&other->_impl_.modules_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiModuleResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[255]);
}

// ===================================================================

class GetModuleVersionRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetModuleVersionRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetModuleVersionRequest::_Internal::user_app_id(const GetModuleVersionRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void GetModuleVersionRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
GetModuleVersionRequest::GetModuleVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetModuleVersionRequest)
}
GetModuleVersionRequest::GetModuleVersionRequest(const GetModuleVersionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetModuleVersionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.module_id_){}
    , decltype(_impl_.module_version_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.module_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.module_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_module_id().empty()) {
    _this->_impl_.module_id_.Set(from._internal_module_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.module_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.module_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_module_version_id().empty()) {
    _this->_impl_.module_version_id_.Set(from._internal_module_version_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetModuleVersionRequest)
}

inline void GetModuleVersionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.module_id_){}
    , decltype(_impl_.module_version_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.module_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.module_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.module_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.module_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetModuleVersionRequest::~GetModuleVersionRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetModuleVersionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetModuleVersionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.module_id_.Destroy();
  _impl_.module_version_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void GetModuleVersionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetModuleVersionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetModuleVersionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.module_id_.ClearToEmpty();
  _impl_.module_version_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetModuleVersionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string module_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_module_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetModuleVersionRequest.module_id"));
        } else
          goto handle_unusual;
        continue;
      // string module_version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_module_version_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetModuleVersionRequest.module_version_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetModuleVersionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetModuleVersionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string module_id = 2;
  if (!this->_internal_module_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_module_id().data(), static_cast<int>(this->_internal_module_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModuleVersionRequest.module_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_module_id(), target);
  }

  // string module_version_id = 3;
  if (!this->_internal_module_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_module_version_id().data(), static_cast<int>(this->_internal_module_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModuleVersionRequest.module_version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_module_version_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetModuleVersionRequest)
  return target;
}

size_t GetModuleVersionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetModuleVersionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string module_id = 2;
  if (!this->_internal_module_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_module_id());
  }

  // string module_version_id = 3;
  if (!this->_internal_module_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_module_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetModuleVersionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetModuleVersionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetModuleVersionRequest::GetClassData() const { return &_class_data_; }


void GetModuleVersionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetModuleVersionRequest*>(&to_msg);
  auto& from = static_cast<const GetModuleVersionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetModuleVersionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_module_id().empty()) {
    _this->_internal_set_module_id(from._internal_module_id());
  }
  if (!from._internal_module_version_id().empty()) {
    _this->_internal_set_module_version_id(from._internal_module_version_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetModuleVersionRequest::CopyFrom(const GetModuleVersionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetModuleVersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModuleVersionRequest::IsInitialized() const {
  return true;
}

void GetModuleVersionRequest::InternalSwap(GetModuleVersionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.module_id_, lhs_arena,
      &other->_impl_.module_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.module_version_id_, lhs_arena,
      &other->_impl_.module_version_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetModuleVersionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[256]);
}

// ===================================================================

class ListModuleVersionsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListModuleVersionsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListModuleVersionsRequest::_Internal::user_app_id(const ListModuleVersionsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListModuleVersionsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
ListModuleVersionsRequest::ListModuleVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListModuleVersionsRequest)
}
ListModuleVersionsRequest::ListModuleVersionsRequest(const ListModuleVersionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListModuleVersionsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.module_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.module_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.module_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_module_id().empty()) {
    _this->_impl_.module_id_.Set(from._internal_module_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.per_page_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListModuleVersionsRequest)
}

inline void ListModuleVersionsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.module_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.module_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.module_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListModuleVersionsRequest::~ListModuleVersionsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListModuleVersionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListModuleVersionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.module_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void ListModuleVersionsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListModuleVersionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListModuleVersionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.module_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.per_page_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListModuleVersionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string module_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_module_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.ListModuleVersionsRequest.module_id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListModuleVersionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListModuleVersionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string module_id = 2;
  if (!this->_internal_module_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_module_id().data(), static_cast<int>(this->_internal_module_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModuleVersionsRequest.module_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_module_id(), target);
  }

  // uint32 page = 3;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_page(), target);
  }

  // uint32 per_page = 4;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListModuleVersionsRequest)
  return target;
}

size_t ListModuleVersionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListModuleVersionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string module_id = 2;
  if (!this->_internal_module_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_module_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // uint32 page = 3;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 4;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListModuleVersionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListModuleVersionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListModuleVersionsRequest::GetClassData() const { return &_class_data_; }


void ListModuleVersionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListModuleVersionsRequest*>(&to_msg);
  auto& from = static_cast<const ListModuleVersionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListModuleVersionsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_module_id().empty()) {
    _this->_internal_set_module_id(from._internal_module_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListModuleVersionsRequest::CopyFrom(const ListModuleVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListModuleVersionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListModuleVersionsRequest::IsInitialized() const {
  return true;
}

void ListModuleVersionsRequest::InternalSwap(ListModuleVersionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.module_id_, lhs_arena,
      &other->_impl_.module_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListModuleVersionsRequest, _impl_.per_page_)
      + sizeof(ListModuleVersionsRequest::_impl_.per_page_)
      - PROTOBUF_FIELD_OFFSET(ListModuleVersionsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListModuleVersionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[257]);
}

// ===================================================================

class PostModuleVersionsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostModuleVersionsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostModuleVersionsRequest::_Internal::user_app_id(const PostModuleVersionsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PostModuleVersionsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostModuleVersionsRequest::clear_module_versions() {
  _impl_.module_versions_.Clear();
}
PostModuleVersionsRequest::PostModuleVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostModuleVersionsRequest)
}
PostModuleVersionsRequest::PostModuleVersionsRequest(const PostModuleVersionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostModuleVersionsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.module_versions_){from._impl_.module_versions_}
    , decltype(_impl_.module_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.module_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.module_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_module_id().empty()) {
    _this->_impl_.module_id_.Set(from._internal_module_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostModuleVersionsRequest)
}

inline void PostModuleVersionsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.module_versions_){arena}
    , decltype(_impl_.module_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.module_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.module_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PostModuleVersionsRequest::~PostModuleVersionsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostModuleVersionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostModuleVersionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.module_versions_.~RepeatedPtrField();
  _impl_.module_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PostModuleVersionsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostModuleVersionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostModuleVersionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.module_versions_.Clear();
  _impl_.module_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostModuleVersionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string module_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_module_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PostModuleVersionsRequest.module_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModuleVersion module_versions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_module_versions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostModuleVersionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostModuleVersionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string module_id = 2;
  if (!this->_internal_module_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_module_id().data(), static_cast<int>(this->_internal_module_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostModuleVersionsRequest.module_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_module_id(), target);
  }

  // repeated .clarifai.api.ModuleVersion module_versions = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_module_versions_size()); i < n; i++) {
    const auto& repfield = this->_internal_module_versions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostModuleVersionsRequest)
  return target;
}

size_t PostModuleVersionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostModuleVersionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ModuleVersion module_versions = 3;
  total_size += 1UL * this->_internal_module_versions_size();
  for (const auto& msg : this->_impl_.module_versions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string module_id = 2;
  if (!this->_internal_module_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_module_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostModuleVersionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostModuleVersionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostModuleVersionsRequest::GetClassData() const { return &_class_data_; }


void PostModuleVersionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostModuleVersionsRequest*>(&to_msg);
  auto& from = static_cast<const PostModuleVersionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostModuleVersionsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.module_versions_.MergeFrom(from._impl_.module_versions_);
  if (!from._internal_module_id().empty()) {
    _this->_internal_set_module_id(from._internal_module_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostModuleVersionsRequest::CopyFrom(const PostModuleVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostModuleVersionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostModuleVersionsRequest::IsInitialized() const {
  return true;
}

void PostModuleVersionsRequest::InternalSwap(PostModuleVersionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.module_versions_.InternalSwap(&other->_impl_.module_versions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.module_id_, lhs_arena,
      &other->_impl_.module_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostModuleVersionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[258]);
}

// ===================================================================

class DeleteModuleVersionsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteModuleVersionsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteModuleVersionsRequest::_Internal::user_app_id(const DeleteModuleVersionsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void DeleteModuleVersionsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
DeleteModuleVersionsRequest::DeleteModuleVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteModuleVersionsRequest)
}
DeleteModuleVersionsRequest::DeleteModuleVersionsRequest(const DeleteModuleVersionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteModuleVersionsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){from._impl_.ids_}
    , decltype(_impl_.module_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.module_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.module_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_module_id().empty()) {
    _this->_impl_.module_id_.Set(from._internal_module_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteModuleVersionsRequest)
}

inline void DeleteModuleVersionsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){arena}
    , decltype(_impl_.module_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.module_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.module_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteModuleVersionsRequest::~DeleteModuleVersionsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteModuleVersionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteModuleVersionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_.~RepeatedPtrField();
  _impl_.module_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void DeleteModuleVersionsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteModuleVersionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteModuleVersionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ids_.Clear();
  _impl_.module_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteModuleVersionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string module_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_module_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DeleteModuleVersionsRequest.module_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DeleteModuleVersionsRequest.ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteModuleVersionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteModuleVersionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string module_id = 2;
  if (!this->_internal_module_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_module_id().data(), static_cast<int>(this->_internal_module_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteModuleVersionsRequest.module_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_module_id(), target);
  }

  // repeated string ids = 3;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteModuleVersionsRequest.ids");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteModuleVersionsRequest)
  return target;
}

size_t DeleteModuleVersionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteModuleVersionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.ids_.size());
  for (int i = 0, n = _impl_.ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.ids_.Get(i));
  }

  // string module_id = 2;
  if (!this->_internal_module_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_module_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteModuleVersionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteModuleVersionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteModuleVersionsRequest::GetClassData() const { return &_class_data_; }


void DeleteModuleVersionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteModuleVersionsRequest*>(&to_msg);
  auto& from = static_cast<const DeleteModuleVersionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteModuleVersionsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_.MergeFrom(from._impl_.ids_);
  if (!from._internal_module_id().empty()) {
    _this->_internal_set_module_id(from._internal_module_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteModuleVersionsRequest::CopyFrom(const DeleteModuleVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteModuleVersionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteModuleVersionsRequest::IsInitialized() const {
  return true;
}

void DeleteModuleVersionsRequest::InternalSwap(DeleteModuleVersionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ids_.InternalSwap(&other->_impl_.ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.module_id_, lhs_arena,
      &other->_impl_.module_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteModuleVersionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[259]);
}

// ===================================================================

class SingleModuleVersionResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleModuleVersionResponse* msg);
  static const ::clarifai::api::ModuleVersion& module_version(const SingleModuleVersionResponse* msg);
};

const ::clarifai::api::status::Status&
SingleModuleVersionResponse::_Internal::status(const SingleModuleVersionResponse* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::ModuleVersion&
SingleModuleVersionResponse::_Internal::module_version(const SingleModuleVersionResponse* msg) {
  return *msg->_impl_.module_version_;
}
void SingleModuleVersionResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void SingleModuleVersionResponse::clear_module_version() {
  if (GetArenaForAllocation() == nullptr && _impl_.module_version_ != nullptr) {
    delete _impl_.module_version_;
  }
  _impl_.module_version_ = nullptr;
}
SingleModuleVersionResponse::SingleModuleVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleModuleVersionResponse)
}
SingleModuleVersionResponse::SingleModuleVersionResponse(const SingleModuleVersionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleModuleVersionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.module_version_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_module_version()) {
    _this->_impl_.module_version_ = new ::clarifai::api::ModuleVersion(*from._impl_.module_version_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleModuleVersionResponse)
}

inline void SingleModuleVersionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.module_version_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SingleModuleVersionResponse::~SingleModuleVersionResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleModuleVersionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleModuleVersionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.module_version_;
}

void SingleModuleVersionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleModuleVersionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleModuleVersionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.module_version_ != nullptr) {
    delete _impl_.module_version_;
  }
  _impl_.module_version_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleModuleVersionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ModuleVersion module_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_module_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleModuleVersionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleModuleVersionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.ModuleVersion module_version = 2;
  if (this->_internal_has_module_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::module_version(this),
        _Internal::module_version(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleModuleVersionResponse)
  return target;
}

size_t SingleModuleVersionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleModuleVersionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.ModuleVersion module_version = 2;
  if (this->_internal_has_module_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.module_version_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleModuleVersionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleModuleVersionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleModuleVersionResponse::GetClassData() const { return &_class_data_; }


void SingleModuleVersionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleModuleVersionResponse*>(&to_msg);
  auto& from = static_cast<const SingleModuleVersionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleModuleVersionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_module_version()) {
    _this->_internal_mutable_module_version()->::clarifai::api::ModuleVersion::MergeFrom(
        from._internal_module_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleModuleVersionResponse::CopyFrom(const SingleModuleVersionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleModuleVersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleModuleVersionResponse::IsInitialized() const {
  return true;
}

void SingleModuleVersionResponse::InternalSwap(SingleModuleVersionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleModuleVersionResponse, _impl_.module_version_)
      + sizeof(SingleModuleVersionResponse::_impl_.module_version_)
      - PROTOBUF_FIELD_OFFSET(SingleModuleVersionResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleModuleVersionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[260]);
}

// ===================================================================

class MultiModuleVersionResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiModuleVersionResponse* msg);
};

const ::clarifai::api::status::Status&
MultiModuleVersionResponse::_Internal::status(const MultiModuleVersionResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiModuleVersionResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiModuleVersionResponse::clear_module_versions() {
  _impl_.module_versions_.Clear();
}
MultiModuleVersionResponse::MultiModuleVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiModuleVersionResponse)
}
MultiModuleVersionResponse::MultiModuleVersionResponse(const MultiModuleVersionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiModuleVersionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.module_versions_){from._impl_.module_versions_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiModuleVersionResponse)
}

inline void MultiModuleVersionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.module_versions_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiModuleVersionResponse::~MultiModuleVersionResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiModuleVersionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiModuleVersionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.module_versions_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiModuleVersionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiModuleVersionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiModuleVersionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.module_versions_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiModuleVersionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModuleVersion module_versions = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_module_versions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiModuleVersionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiModuleVersionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.ModuleVersion module_versions = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_module_versions_size()); i < n; i++) {
    const auto& repfield = this->_internal_module_versions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiModuleVersionResponse)
  return target;
}

size_t MultiModuleVersionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiModuleVersionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ModuleVersion module_versions = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_module_versions_size();
  for (const auto& msg : this->_impl_.module_versions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiModuleVersionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiModuleVersionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiModuleVersionResponse::GetClassData() const { return &_class_data_; }


void MultiModuleVersionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiModuleVersionResponse*>(&to_msg);
  auto& from = static_cast<const MultiModuleVersionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiModuleVersionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.module_versions_.MergeFrom(from._impl_.module_versions_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiModuleVersionResponse::CopyFrom(const MultiModuleVersionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiModuleVersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiModuleVersionResponse::IsInitialized() const {
  return true;
}

void MultiModuleVersionResponse::InternalSwap(MultiModuleVersionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.module_versions_.InternalSwap(&other->_impl_.module_versions_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiModuleVersionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[261]);
}

// ===================================================================

class GetInstalledModuleVersionRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetInstalledModuleVersionRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetInstalledModuleVersionRequest::_Internal::user_app_id(const GetInstalledModuleVersionRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void GetInstalledModuleVersionRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
GetInstalledModuleVersionRequest::GetInstalledModuleVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetInstalledModuleVersionRequest)
}
GetInstalledModuleVersionRequest::GetInstalledModuleVersionRequest(const GetInstalledModuleVersionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetInstalledModuleVersionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.installed_module_version_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.installed_module_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.installed_module_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_installed_module_version_id().empty()) {
    _this->_impl_.installed_module_version_id_.Set(from._internal_installed_module_version_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetInstalledModuleVersionRequest)
}

inline void GetInstalledModuleVersionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.installed_module_version_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.installed_module_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.installed_module_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetInstalledModuleVersionRequest::~GetInstalledModuleVersionRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetInstalledModuleVersionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetInstalledModuleVersionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.installed_module_version_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void GetInstalledModuleVersionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetInstalledModuleVersionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetInstalledModuleVersionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.installed_module_version_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetInstalledModuleVersionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string installed_module_version_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_installed_module_version_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetInstalledModuleVersionRequest.installed_module_version_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetInstalledModuleVersionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetInstalledModuleVersionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string installed_module_version_id = 2;
  if (!this->_internal_installed_module_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_installed_module_version_id().data(), static_cast<int>(this->_internal_installed_module_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetInstalledModuleVersionRequest.installed_module_version_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_installed_module_version_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetInstalledModuleVersionRequest)
  return target;
}

size_t GetInstalledModuleVersionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetInstalledModuleVersionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string installed_module_version_id = 2;
  if (!this->_internal_installed_module_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_installed_module_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetInstalledModuleVersionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetInstalledModuleVersionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetInstalledModuleVersionRequest::GetClassData() const { return &_class_data_; }


void GetInstalledModuleVersionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetInstalledModuleVersionRequest*>(&to_msg);
  auto& from = static_cast<const GetInstalledModuleVersionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetInstalledModuleVersionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_installed_module_version_id().empty()) {
    _this->_internal_set_installed_module_version_id(from._internal_installed_module_version_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetInstalledModuleVersionRequest::CopyFrom(const GetInstalledModuleVersionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetInstalledModuleVersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInstalledModuleVersionRequest::IsInitialized() const {
  return true;
}

void GetInstalledModuleVersionRequest::InternalSwap(GetInstalledModuleVersionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.installed_module_version_id_, lhs_arena,
      &other->_impl_.installed_module_version_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInstalledModuleVersionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[262]);
}

// ===================================================================

class ListInstalledModuleVersionsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListInstalledModuleVersionsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListInstalledModuleVersionsRequest::_Internal::user_app_id(const ListInstalledModuleVersionsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListInstalledModuleVersionsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
ListInstalledModuleVersionsRequest::ListInstalledModuleVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListInstalledModuleVersionsRequest)
}
ListInstalledModuleVersionsRequest::ListInstalledModuleVersionsRequest(const ListInstalledModuleVersionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListInstalledModuleVersionsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.per_page_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListInstalledModuleVersionsRequest)
}

inline void ListInstalledModuleVersionsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListInstalledModuleVersionsRequest::~ListInstalledModuleVersionsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListInstalledModuleVersionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListInstalledModuleVersionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void ListInstalledModuleVersionsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListInstalledModuleVersionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListInstalledModuleVersionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.per_page_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListInstalledModuleVersionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListInstalledModuleVersionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListInstalledModuleVersionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListInstalledModuleVersionsRequest)
  return target;
}

size_t ListInstalledModuleVersionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListInstalledModuleVersionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListInstalledModuleVersionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListInstalledModuleVersionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListInstalledModuleVersionsRequest::GetClassData() const { return &_class_data_; }


void ListInstalledModuleVersionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListInstalledModuleVersionsRequest*>(&to_msg);
  auto& from = static_cast<const ListInstalledModuleVersionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListInstalledModuleVersionsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListInstalledModuleVersionsRequest::CopyFrom(const ListInstalledModuleVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListInstalledModuleVersionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListInstalledModuleVersionsRequest::IsInitialized() const {
  return true;
}

void ListInstalledModuleVersionsRequest::InternalSwap(ListInstalledModuleVersionsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListInstalledModuleVersionsRequest, _impl_.per_page_)
      + sizeof(ListInstalledModuleVersionsRequest::_impl_.per_page_)
      - PROTOBUF_FIELD_OFFSET(ListInstalledModuleVersionsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListInstalledModuleVersionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[263]);
}

// ===================================================================

class PostInstalledModuleVersionsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostInstalledModuleVersionsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostInstalledModuleVersionsRequest::_Internal::user_app_id(const PostInstalledModuleVersionsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PostInstalledModuleVersionsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostInstalledModuleVersionsRequest::clear_installed_module_versions() {
  _impl_.installed_module_versions_.Clear();
}
PostInstalledModuleVersionsRequest::PostInstalledModuleVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostInstalledModuleVersionsRequest)
}
PostInstalledModuleVersionsRequest::PostInstalledModuleVersionsRequest(const PostInstalledModuleVersionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostInstalledModuleVersionsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.installed_module_versions_){from._impl_.installed_module_versions_}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostInstalledModuleVersionsRequest)
}

inline void PostInstalledModuleVersionsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.installed_module_versions_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PostInstalledModuleVersionsRequest::~PostInstalledModuleVersionsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostInstalledModuleVersionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostInstalledModuleVersionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.installed_module_versions_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PostInstalledModuleVersionsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostInstalledModuleVersionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostInstalledModuleVersionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.installed_module_versions_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostInstalledModuleVersionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.InstalledModuleVersion installed_module_versions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_installed_module_versions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostInstalledModuleVersionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostInstalledModuleVersionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.InstalledModuleVersion installed_module_versions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_installed_module_versions_size()); i < n; i++) {
    const auto& repfield = this->_internal_installed_module_versions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostInstalledModuleVersionsRequest)
  return target;
}

size_t PostInstalledModuleVersionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostInstalledModuleVersionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.InstalledModuleVersion installed_module_versions = 2;
  total_size += 1UL * this->_internal_installed_module_versions_size();
  for (const auto& msg : this->_impl_.installed_module_versions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostInstalledModuleVersionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostInstalledModuleVersionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostInstalledModuleVersionsRequest::GetClassData() const { return &_class_data_; }


void PostInstalledModuleVersionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostInstalledModuleVersionsRequest*>(&to_msg);
  auto& from = static_cast<const PostInstalledModuleVersionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostInstalledModuleVersionsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.installed_module_versions_.MergeFrom(from._impl_.installed_module_versions_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostInstalledModuleVersionsRequest::CopyFrom(const PostInstalledModuleVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostInstalledModuleVersionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostInstalledModuleVersionsRequest::IsInitialized() const {
  return true;
}

void PostInstalledModuleVersionsRequest::InternalSwap(PostInstalledModuleVersionsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.installed_module_versions_.InternalSwap(&other->_impl_.installed_module_versions_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostInstalledModuleVersionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[264]);
}

// ===================================================================

class PostInstalledModuleVersionsKeyRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostInstalledModuleVersionsKeyRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostInstalledModuleVersionsKeyRequest::_Internal::user_app_id(const PostInstalledModuleVersionsKeyRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PostInstalledModuleVersionsKeyRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
PostInstalledModuleVersionsKeyRequest::PostInstalledModuleVersionsKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostInstalledModuleVersionsKeyRequest)
}
PostInstalledModuleVersionsKeyRequest::PostInstalledModuleVersionsKeyRequest(const PostInstalledModuleVersionsKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostInstalledModuleVersionsKeyRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.installed_module_version_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.installed_module_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.installed_module_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_installed_module_version_id().empty()) {
    _this->_impl_.installed_module_version_id_.Set(from._internal_installed_module_version_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostInstalledModuleVersionsKeyRequest)
}

inline void PostInstalledModuleVersionsKeyRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.installed_module_version_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.installed_module_version_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.installed_module_version_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PostInstalledModuleVersionsKeyRequest::~PostInstalledModuleVersionsKeyRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostInstalledModuleVersionsKeyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostInstalledModuleVersionsKeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.installed_module_version_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PostInstalledModuleVersionsKeyRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostInstalledModuleVersionsKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostInstalledModuleVersionsKeyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.installed_module_version_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostInstalledModuleVersionsKeyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string installed_module_version_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_installed_module_version_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PostInstalledModuleVersionsKeyRequest.installed_module_version_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostInstalledModuleVersionsKeyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostInstalledModuleVersionsKeyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string installed_module_version_id = 2;
  if (!this->_internal_installed_module_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_installed_module_version_id().data(), static_cast<int>(this->_internal_installed_module_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostInstalledModuleVersionsKeyRequest.installed_module_version_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_installed_module_version_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostInstalledModuleVersionsKeyRequest)
  return target;
}

size_t PostInstalledModuleVersionsKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostInstalledModuleVersionsKeyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string installed_module_version_id = 2;
  if (!this->_internal_installed_module_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_installed_module_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostInstalledModuleVersionsKeyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostInstalledModuleVersionsKeyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostInstalledModuleVersionsKeyRequest::GetClassData() const { return &_class_data_; }


void PostInstalledModuleVersionsKeyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostInstalledModuleVersionsKeyRequest*>(&to_msg);
  auto& from = static_cast<const PostInstalledModuleVersionsKeyRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostInstalledModuleVersionsKeyRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_installed_module_version_id().empty()) {
    _this->_internal_set_installed_module_version_id(from._internal_installed_module_version_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostInstalledModuleVersionsKeyRequest::CopyFrom(const PostInstalledModuleVersionsKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostInstalledModuleVersionsKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostInstalledModuleVersionsKeyRequest::IsInitialized() const {
  return true;
}

void PostInstalledModuleVersionsKeyRequest::InternalSwap(PostInstalledModuleVersionsKeyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.installed_module_version_id_, lhs_arena,
      &other->_impl_.installed_module_version_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostInstalledModuleVersionsKeyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[265]);
}

// ===================================================================

class DeleteInstalledModuleVersionsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteInstalledModuleVersionsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteInstalledModuleVersionsRequest::_Internal::user_app_id(const DeleteInstalledModuleVersionsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void DeleteInstalledModuleVersionsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
DeleteInstalledModuleVersionsRequest::DeleteInstalledModuleVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteInstalledModuleVersionsRequest)
}
DeleteInstalledModuleVersionsRequest::DeleteInstalledModuleVersionsRequest(const DeleteInstalledModuleVersionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteInstalledModuleVersionsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){from._impl_.ids_}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteInstalledModuleVersionsRequest)
}

inline void DeleteInstalledModuleVersionsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeleteInstalledModuleVersionsRequest::~DeleteInstalledModuleVersionsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteInstalledModuleVersionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteInstalledModuleVersionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void DeleteInstalledModuleVersionsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteInstalledModuleVersionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteInstalledModuleVersionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteInstalledModuleVersionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DeleteInstalledModuleVersionsRequest.ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteInstalledModuleVersionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteInstalledModuleVersionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteInstalledModuleVersionsRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteInstalledModuleVersionsRequest)
  return target;
}

size_t DeleteInstalledModuleVersionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteInstalledModuleVersionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.ids_.size());
  for (int i = 0, n = _impl_.ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteInstalledModuleVersionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteInstalledModuleVersionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteInstalledModuleVersionsRequest::GetClassData() const { return &_class_data_; }


void DeleteInstalledModuleVersionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteInstalledModuleVersionsRequest*>(&to_msg);
  auto& from = static_cast<const DeleteInstalledModuleVersionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteInstalledModuleVersionsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_.MergeFrom(from._impl_.ids_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteInstalledModuleVersionsRequest::CopyFrom(const DeleteInstalledModuleVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteInstalledModuleVersionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteInstalledModuleVersionsRequest::IsInitialized() const {
  return true;
}

void DeleteInstalledModuleVersionsRequest::InternalSwap(DeleteInstalledModuleVersionsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ids_.InternalSwap(&other->_impl_.ids_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteInstalledModuleVersionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[266]);
}

// ===================================================================

class SingleInstalledModuleVersionResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleInstalledModuleVersionResponse* msg);
  static const ::clarifai::api::InstalledModuleVersion& installed_module_version(const SingleInstalledModuleVersionResponse* msg);
};

const ::clarifai::api::status::Status&
SingleInstalledModuleVersionResponse::_Internal::status(const SingleInstalledModuleVersionResponse* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::InstalledModuleVersion&
SingleInstalledModuleVersionResponse::_Internal::installed_module_version(const SingleInstalledModuleVersionResponse* msg) {
  return *msg->_impl_.installed_module_version_;
}
void SingleInstalledModuleVersionResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void SingleInstalledModuleVersionResponse::clear_installed_module_version() {
  if (GetArenaForAllocation() == nullptr && _impl_.installed_module_version_ != nullptr) {
    delete _impl_.installed_module_version_;
  }
  _impl_.installed_module_version_ = nullptr;
}
SingleInstalledModuleVersionResponse::SingleInstalledModuleVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleInstalledModuleVersionResponse)
}
SingleInstalledModuleVersionResponse::SingleInstalledModuleVersionResponse(const SingleInstalledModuleVersionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleInstalledModuleVersionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.installed_module_version_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_installed_module_version()) {
    _this->_impl_.installed_module_version_ = new ::clarifai::api::InstalledModuleVersion(*from._impl_.installed_module_version_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleInstalledModuleVersionResponse)
}

inline void SingleInstalledModuleVersionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.installed_module_version_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SingleInstalledModuleVersionResponse::~SingleInstalledModuleVersionResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleInstalledModuleVersionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleInstalledModuleVersionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.installed_module_version_;
}

void SingleInstalledModuleVersionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleInstalledModuleVersionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleInstalledModuleVersionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.installed_module_version_ != nullptr) {
    delete _impl_.installed_module_version_;
  }
  _impl_.installed_module_version_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleInstalledModuleVersionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.InstalledModuleVersion installed_module_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_installed_module_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleInstalledModuleVersionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleInstalledModuleVersionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.InstalledModuleVersion installed_module_version = 2;
  if (this->_internal_has_installed_module_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::installed_module_version(this),
        _Internal::installed_module_version(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleInstalledModuleVersionResponse)
  return target;
}

size_t SingleInstalledModuleVersionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleInstalledModuleVersionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.InstalledModuleVersion installed_module_version = 2;
  if (this->_internal_has_installed_module_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.installed_module_version_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleInstalledModuleVersionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleInstalledModuleVersionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleInstalledModuleVersionResponse::GetClassData() const { return &_class_data_; }


void SingleInstalledModuleVersionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleInstalledModuleVersionResponse*>(&to_msg);
  auto& from = static_cast<const SingleInstalledModuleVersionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleInstalledModuleVersionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_installed_module_version()) {
    _this->_internal_mutable_installed_module_version()->::clarifai::api::InstalledModuleVersion::MergeFrom(
        from._internal_installed_module_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleInstalledModuleVersionResponse::CopyFrom(const SingleInstalledModuleVersionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleInstalledModuleVersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleInstalledModuleVersionResponse::IsInitialized() const {
  return true;
}

void SingleInstalledModuleVersionResponse::InternalSwap(SingleInstalledModuleVersionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleInstalledModuleVersionResponse, _impl_.installed_module_version_)
      + sizeof(SingleInstalledModuleVersionResponse::_impl_.installed_module_version_)
      - PROTOBUF_FIELD_OFFSET(SingleInstalledModuleVersionResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleInstalledModuleVersionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[267]);
}

// ===================================================================

class MultiInstalledModuleVersionResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiInstalledModuleVersionResponse* msg);
};

const ::clarifai::api::status::Status&
MultiInstalledModuleVersionResponse::_Internal::status(const MultiInstalledModuleVersionResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiInstalledModuleVersionResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiInstalledModuleVersionResponse::clear_installed_module_versions() {
  _impl_.installed_module_versions_.Clear();
}
MultiInstalledModuleVersionResponse::MultiInstalledModuleVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiInstalledModuleVersionResponse)
}
MultiInstalledModuleVersionResponse::MultiInstalledModuleVersionResponse(const MultiInstalledModuleVersionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiInstalledModuleVersionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.installed_module_versions_){from._impl_.installed_module_versions_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiInstalledModuleVersionResponse)
}

inline void MultiInstalledModuleVersionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.installed_module_versions_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiInstalledModuleVersionResponse::~MultiInstalledModuleVersionResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiInstalledModuleVersionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiInstalledModuleVersionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.installed_module_versions_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiInstalledModuleVersionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiInstalledModuleVersionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiInstalledModuleVersionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.installed_module_versions_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiInstalledModuleVersionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.InstalledModuleVersion installed_module_versions = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_installed_module_versions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiInstalledModuleVersionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiInstalledModuleVersionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.InstalledModuleVersion installed_module_versions = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_installed_module_versions_size()); i < n; i++) {
    const auto& repfield = this->_internal_installed_module_versions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiInstalledModuleVersionResponse)
  return target;
}

size_t MultiInstalledModuleVersionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiInstalledModuleVersionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.InstalledModuleVersion installed_module_versions = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_installed_module_versions_size();
  for (const auto& msg : this->_impl_.installed_module_versions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiInstalledModuleVersionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiInstalledModuleVersionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiInstalledModuleVersionResponse::GetClassData() const { return &_class_data_; }


void MultiInstalledModuleVersionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiInstalledModuleVersionResponse*>(&to_msg);
  auto& from = static_cast<const MultiInstalledModuleVersionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiInstalledModuleVersionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.installed_module_versions_.MergeFrom(from._impl_.installed_module_versions_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiInstalledModuleVersionResponse::CopyFrom(const MultiInstalledModuleVersionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiInstalledModuleVersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiInstalledModuleVersionResponse::IsInitialized() const {
  return true;
}

void MultiInstalledModuleVersionResponse::InternalSwap(MultiInstalledModuleVersionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.installed_module_versions_.InternalSwap(&other->_impl_.installed_module_versions_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiInstalledModuleVersionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[268]);
}

// ===================================================================

class PostBulkOperationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostBulkOperationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostBulkOperationsRequest::_Internal::user_app_id(const PostBulkOperationsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PostBulkOperationsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostBulkOperationsRequest::clear_bulk_operations() {
  _impl_.bulk_operations_.Clear();
}
PostBulkOperationsRequest::PostBulkOperationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostBulkOperationsRequest)
}
PostBulkOperationsRequest::PostBulkOperationsRequest(const PostBulkOperationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostBulkOperationsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bulk_operations_){from._impl_.bulk_operations_}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostBulkOperationsRequest)
}

inline void PostBulkOperationsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bulk_operations_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PostBulkOperationsRequest::~PostBulkOperationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostBulkOperationsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostBulkOperationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bulk_operations_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PostBulkOperationsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostBulkOperationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostBulkOperationsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bulk_operations_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostBulkOperationsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.BulkOperation bulk_operations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bulk_operations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostBulkOperationsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostBulkOperationsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.BulkOperation bulk_operations = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bulk_operations_size()); i < n; i++) {
    const auto& repfield = this->_internal_bulk_operations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostBulkOperationsRequest)
  return target;
}

size_t PostBulkOperationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostBulkOperationsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.BulkOperation bulk_operations = 2;
  total_size += 1UL * this->_internal_bulk_operations_size();
  for (const auto& msg : this->_impl_.bulk_operations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostBulkOperationsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostBulkOperationsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostBulkOperationsRequest::GetClassData() const { return &_class_data_; }


void PostBulkOperationsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostBulkOperationsRequest*>(&to_msg);
  auto& from = static_cast<const PostBulkOperationsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostBulkOperationsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.bulk_operations_.MergeFrom(from._impl_.bulk_operations_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostBulkOperationsRequest::CopyFrom(const PostBulkOperationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostBulkOperationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostBulkOperationsRequest::IsInitialized() const {
  return true;
}

void PostBulkOperationsRequest::InternalSwap(PostBulkOperationsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.bulk_operations_.InternalSwap(&other->_impl_.bulk_operations_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostBulkOperationsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[269]);
}

// ===================================================================

class ListBulkOperationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListBulkOperationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListBulkOperationsRequest::_Internal::user_app_id(const ListBulkOperationsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListBulkOperationsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
ListBulkOperationsRequest::ListBulkOperationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListBulkOperationsRequest)
}
ListBulkOperationsRequest::ListBulkOperationsRequest(const ListBulkOperationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListBulkOperationsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.per_page_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListBulkOperationsRequest)
}

inline void ListBulkOperationsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListBulkOperationsRequest::~ListBulkOperationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListBulkOperationsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListBulkOperationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void ListBulkOperationsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListBulkOperationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListBulkOperationsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.per_page_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListBulkOperationsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListBulkOperationsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListBulkOperationsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListBulkOperationsRequest)
  return target;
}

size_t ListBulkOperationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListBulkOperationsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListBulkOperationsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListBulkOperationsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListBulkOperationsRequest::GetClassData() const { return &_class_data_; }


void ListBulkOperationsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListBulkOperationsRequest*>(&to_msg);
  auto& from = static_cast<const ListBulkOperationsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListBulkOperationsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListBulkOperationsRequest::CopyFrom(const ListBulkOperationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListBulkOperationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListBulkOperationsRequest::IsInitialized() const {
  return true;
}

void ListBulkOperationsRequest::InternalSwap(ListBulkOperationsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListBulkOperationsRequest, _impl_.per_page_)
      + sizeof(ListBulkOperationsRequest::_impl_.per_page_)
      - PROTOBUF_FIELD_OFFSET(ListBulkOperationsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListBulkOperationsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[270]);
}

// ===================================================================

class GetBulkOperationRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetBulkOperationRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetBulkOperationRequest::_Internal::user_app_id(const GetBulkOperationRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void GetBulkOperationRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
GetBulkOperationRequest::GetBulkOperationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetBulkOperationRequest)
}
GetBulkOperationRequest::GetBulkOperationRequest(const GetBulkOperationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetBulkOperationRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetBulkOperationRequest)
}

inline void GetBulkOperationRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetBulkOperationRequest::~GetBulkOperationRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetBulkOperationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetBulkOperationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void GetBulkOperationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetBulkOperationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetBulkOperationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBulkOperationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetBulkOperationRequest.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBulkOperationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetBulkOperationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetBulkOperationRequest.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetBulkOperationRequest)
  return target;
}

size_t GetBulkOperationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetBulkOperationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBulkOperationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetBulkOperationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBulkOperationRequest::GetClassData() const { return &_class_data_; }


void GetBulkOperationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetBulkOperationRequest*>(&to_msg);
  auto& from = static_cast<const GetBulkOperationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetBulkOperationRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBulkOperationRequest::CopyFrom(const GetBulkOperationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetBulkOperationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBulkOperationRequest::IsInitialized() const {
  return true;
}

void GetBulkOperationRequest::InternalSwap(GetBulkOperationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBulkOperationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[271]);
}

// ===================================================================

class CancelBulkOperationRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const CancelBulkOperationRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
CancelBulkOperationRequest::_Internal::user_app_id(const CancelBulkOperationRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void CancelBulkOperationRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
CancelBulkOperationRequest::CancelBulkOperationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.CancelBulkOperationRequest)
}
CancelBulkOperationRequest::CancelBulkOperationRequest(const CancelBulkOperationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CancelBulkOperationRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){from._impl_.ids_}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.CancelBulkOperationRequest)
}

inline void CancelBulkOperationRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CancelBulkOperationRequest::~CancelBulkOperationRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.CancelBulkOperationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CancelBulkOperationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void CancelBulkOperationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CancelBulkOperationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.CancelBulkOperationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelBulkOperationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.CancelBulkOperationRequest.ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CancelBulkOperationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.CancelBulkOperationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.CancelBulkOperationRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.CancelBulkOperationRequest)
  return target;
}

size_t CancelBulkOperationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.CancelBulkOperationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.ids_.size());
  for (int i = 0, n = _impl_.ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CancelBulkOperationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CancelBulkOperationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CancelBulkOperationRequest::GetClassData() const { return &_class_data_; }


void CancelBulkOperationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CancelBulkOperationRequest*>(&to_msg);
  auto& from = static_cast<const CancelBulkOperationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.CancelBulkOperationRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_.MergeFrom(from._impl_.ids_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CancelBulkOperationRequest::CopyFrom(const CancelBulkOperationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.CancelBulkOperationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelBulkOperationRequest::IsInitialized() const {
  return true;
}

void CancelBulkOperationRequest::InternalSwap(CancelBulkOperationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ids_.InternalSwap(&other->_impl_.ids_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelBulkOperationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[272]);
}

// ===================================================================

class DeleteBulkOperationRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteBulkOperationRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteBulkOperationRequest::_Internal::user_app_id(const DeleteBulkOperationRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void DeleteBulkOperationRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
DeleteBulkOperationRequest::DeleteBulkOperationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteBulkOperationRequest)
}
DeleteBulkOperationRequest::DeleteBulkOperationRequest(const DeleteBulkOperationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteBulkOperationRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){from._impl_.ids_}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteBulkOperationRequest)
}

inline void DeleteBulkOperationRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeleteBulkOperationRequest::~DeleteBulkOperationRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteBulkOperationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteBulkOperationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void DeleteBulkOperationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteBulkOperationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteBulkOperationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteBulkOperationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DeleteBulkOperationRequest.ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteBulkOperationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteBulkOperationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteBulkOperationRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteBulkOperationRequest)
  return target;
}

size_t DeleteBulkOperationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteBulkOperationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.ids_.size());
  for (int i = 0, n = _impl_.ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteBulkOperationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteBulkOperationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteBulkOperationRequest::GetClassData() const { return &_class_data_; }


void DeleteBulkOperationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteBulkOperationRequest*>(&to_msg);
  auto& from = static_cast<const DeleteBulkOperationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteBulkOperationRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_.MergeFrom(from._impl_.ids_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteBulkOperationRequest::CopyFrom(const DeleteBulkOperationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteBulkOperationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteBulkOperationRequest::IsInitialized() const {
  return true;
}

void DeleteBulkOperationRequest::InternalSwap(DeleteBulkOperationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ids_.InternalSwap(&other->_impl_.ids_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteBulkOperationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[273]);
}

// ===================================================================

class SingleBulkOperationsResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleBulkOperationsResponse* msg);
  static const ::clarifai::api::BulkOperation& bulk_operation(const SingleBulkOperationsResponse* msg);
};

const ::clarifai::api::status::Status&
SingleBulkOperationsResponse::_Internal::status(const SingleBulkOperationsResponse* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::BulkOperation&
SingleBulkOperationsResponse::_Internal::bulk_operation(const SingleBulkOperationsResponse* msg) {
  return *msg->_impl_.bulk_operation_;
}
void SingleBulkOperationsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void SingleBulkOperationsResponse::clear_bulk_operation() {
  if (GetArenaForAllocation() == nullptr && _impl_.bulk_operation_ != nullptr) {
    delete _impl_.bulk_operation_;
  }
  _impl_.bulk_operation_ = nullptr;
}
SingleBulkOperationsResponse::SingleBulkOperationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleBulkOperationsResponse)
}
SingleBulkOperationsResponse::SingleBulkOperationsResponse(const SingleBulkOperationsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleBulkOperationsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.bulk_operation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_bulk_operation()) {
    _this->_impl_.bulk_operation_ = new ::clarifai::api::BulkOperation(*from._impl_.bulk_operation_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleBulkOperationsResponse)
}

inline void SingleBulkOperationsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.bulk_operation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SingleBulkOperationsResponse::~SingleBulkOperationsResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleBulkOperationsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleBulkOperationsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.bulk_operation_;
}

void SingleBulkOperationsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleBulkOperationsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleBulkOperationsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bulk_operation_ != nullptr) {
    delete _impl_.bulk_operation_;
  }
  _impl_.bulk_operation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleBulkOperationsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.BulkOperation bulk_operation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bulk_operation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleBulkOperationsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleBulkOperationsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.BulkOperation bulk_operation = 2;
  if (this->_internal_has_bulk_operation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::bulk_operation(this),
        _Internal::bulk_operation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleBulkOperationsResponse)
  return target;
}

size_t SingleBulkOperationsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleBulkOperationsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.BulkOperation bulk_operation = 2;
  if (this->_internal_has_bulk_operation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bulk_operation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleBulkOperationsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleBulkOperationsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleBulkOperationsResponse::GetClassData() const { return &_class_data_; }


void SingleBulkOperationsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleBulkOperationsResponse*>(&to_msg);
  auto& from = static_cast<const SingleBulkOperationsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleBulkOperationsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_bulk_operation()) {
    _this->_internal_mutable_bulk_operation()->::clarifai::api::BulkOperation::MergeFrom(
        from._internal_bulk_operation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleBulkOperationsResponse::CopyFrom(const SingleBulkOperationsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleBulkOperationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleBulkOperationsResponse::IsInitialized() const {
  return true;
}

void SingleBulkOperationsResponse::InternalSwap(SingleBulkOperationsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleBulkOperationsResponse, _impl_.bulk_operation_)
      + sizeof(SingleBulkOperationsResponse::_impl_.bulk_operation_)
      - PROTOBUF_FIELD_OFFSET(SingleBulkOperationsResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleBulkOperationsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[274]);
}

// ===================================================================

class MultiBulkOperationsResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiBulkOperationsResponse* msg);
};

const ::clarifai::api::status::Status&
MultiBulkOperationsResponse::_Internal::status(const MultiBulkOperationsResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiBulkOperationsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiBulkOperationsResponse::clear_bulk_operation() {
  _impl_.bulk_operation_.Clear();
}
MultiBulkOperationsResponse::MultiBulkOperationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiBulkOperationsResponse)
}
MultiBulkOperationsResponse::MultiBulkOperationsResponse(const MultiBulkOperationsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiBulkOperationsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bulk_operation_){from._impl_.bulk_operation_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiBulkOperationsResponse)
}

inline void MultiBulkOperationsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bulk_operation_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiBulkOperationsResponse::~MultiBulkOperationsResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiBulkOperationsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiBulkOperationsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bulk_operation_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiBulkOperationsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiBulkOperationsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiBulkOperationsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bulk_operation_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiBulkOperationsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.BulkOperation bulk_operation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bulk_operation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiBulkOperationsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiBulkOperationsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.BulkOperation bulk_operation = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bulk_operation_size()); i < n; i++) {
    const auto& repfield = this->_internal_bulk_operation(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiBulkOperationsResponse)
  return target;
}

size_t MultiBulkOperationsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiBulkOperationsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.BulkOperation bulk_operation = 2;
  total_size += 1UL * this->_internal_bulk_operation_size();
  for (const auto& msg : this->_impl_.bulk_operation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiBulkOperationsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiBulkOperationsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiBulkOperationsResponse::GetClassData() const { return &_class_data_; }


void MultiBulkOperationsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiBulkOperationsResponse*>(&to_msg);
  auto& from = static_cast<const MultiBulkOperationsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiBulkOperationsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.bulk_operation_.MergeFrom(from._impl_.bulk_operation_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiBulkOperationsResponse::CopyFrom(const MultiBulkOperationsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiBulkOperationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiBulkOperationsResponse::IsInitialized() const {
  return true;
}

void MultiBulkOperationsResponse::InternalSwap(MultiBulkOperationsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.bulk_operation_.InternalSwap(&other->_impl_.bulk_operation_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiBulkOperationsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[275]);
}

// ===================================================================

class ListInputsAddJobsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListInputsAddJobsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListInputsAddJobsRequest::_Internal::user_app_id(const ListInputsAddJobsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListInputsAddJobsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
ListInputsAddJobsRequest::ListInputsAddJobsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListInputsAddJobsRequest)
}
ListInputsAddJobsRequest::ListInputsAddJobsRequest(const ListInputsAddJobsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListInputsAddJobsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.per_page_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListInputsAddJobsRequest)
}

inline void ListInputsAddJobsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListInputsAddJobsRequest::~ListInputsAddJobsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListInputsAddJobsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListInputsAddJobsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void ListInputsAddJobsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListInputsAddJobsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListInputsAddJobsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.per_page_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListInputsAddJobsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListInputsAddJobsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListInputsAddJobsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListInputsAddJobsRequest)
  return target;
}

size_t ListInputsAddJobsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListInputsAddJobsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListInputsAddJobsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListInputsAddJobsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListInputsAddJobsRequest::GetClassData() const { return &_class_data_; }


void ListInputsAddJobsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListInputsAddJobsRequest*>(&to_msg);
  auto& from = static_cast<const ListInputsAddJobsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListInputsAddJobsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListInputsAddJobsRequest::CopyFrom(const ListInputsAddJobsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListInputsAddJobsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListInputsAddJobsRequest::IsInitialized() const {
  return true;
}

void ListInputsAddJobsRequest::InternalSwap(ListInputsAddJobsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListInputsAddJobsRequest, _impl_.per_page_)
      + sizeof(ListInputsAddJobsRequest::_impl_.per_page_)
      - PROTOBUF_FIELD_OFFSET(ListInputsAddJobsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListInputsAddJobsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[276]);
}

// ===================================================================

class GetInputsAddJobRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetInputsAddJobRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetInputsAddJobRequest::_Internal::user_app_id(const GetInputsAddJobRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void GetInputsAddJobRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
GetInputsAddJobRequest::GetInputsAddJobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetInputsAddJobRequest)
}
GetInputsAddJobRequest::GetInputsAddJobRequest(const GetInputsAddJobRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetInputsAddJobRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetInputsAddJobRequest)
}

inline void GetInputsAddJobRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetInputsAddJobRequest::~GetInputsAddJobRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetInputsAddJobRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetInputsAddJobRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void GetInputsAddJobRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetInputsAddJobRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetInputsAddJobRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetInputsAddJobRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetInputsAddJobRequest.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetInputsAddJobRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetInputsAddJobRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetInputsAddJobRequest.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetInputsAddJobRequest)
  return target;
}

size_t GetInputsAddJobRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetInputsAddJobRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetInputsAddJobRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetInputsAddJobRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetInputsAddJobRequest::GetClassData() const { return &_class_data_; }


void GetInputsAddJobRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetInputsAddJobRequest*>(&to_msg);
  auto& from = static_cast<const GetInputsAddJobRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetInputsAddJobRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetInputsAddJobRequest::CopyFrom(const GetInputsAddJobRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetInputsAddJobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInputsAddJobRequest::IsInitialized() const {
  return true;
}

void GetInputsAddJobRequest::InternalSwap(GetInputsAddJobRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInputsAddJobRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[277]);
}

// ===================================================================

class MultiInputsAddJobResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiInputsAddJobResponse* msg);
};

const ::clarifai::api::status::Status&
MultiInputsAddJobResponse::_Internal::status(const MultiInputsAddJobResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiInputsAddJobResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiInputsAddJobResponse::clear_inputs_add_jobs() {
  _impl_.inputs_add_jobs_.Clear();
}
MultiInputsAddJobResponse::MultiInputsAddJobResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiInputsAddJobResponse)
}
MultiInputsAddJobResponse::MultiInputsAddJobResponse(const MultiInputsAddJobResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiInputsAddJobResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.inputs_add_jobs_){from._impl_.inputs_add_jobs_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiInputsAddJobResponse)
}

inline void MultiInputsAddJobResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.inputs_add_jobs_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiInputsAddJobResponse::~MultiInputsAddJobResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiInputsAddJobResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiInputsAddJobResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.inputs_add_jobs_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiInputsAddJobResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiInputsAddJobResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiInputsAddJobResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.inputs_add_jobs_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiInputsAddJobResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.InputsAddJob inputs_add_jobs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs_add_jobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiInputsAddJobResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiInputsAddJobResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.InputsAddJob inputs_add_jobs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_inputs_add_jobs_size()); i < n; i++) {
    const auto& repfield = this->_internal_inputs_add_jobs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiInputsAddJobResponse)
  return target;
}

size_t MultiInputsAddJobResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiInputsAddJobResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.InputsAddJob inputs_add_jobs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_inputs_add_jobs_size();
  for (const auto& msg : this->_impl_.inputs_add_jobs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiInputsAddJobResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiInputsAddJobResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiInputsAddJobResponse::GetClassData() const { return &_class_data_; }


void MultiInputsAddJobResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiInputsAddJobResponse*>(&to_msg);
  auto& from = static_cast<const MultiInputsAddJobResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiInputsAddJobResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.inputs_add_jobs_.MergeFrom(from._impl_.inputs_add_jobs_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiInputsAddJobResponse::CopyFrom(const MultiInputsAddJobResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiInputsAddJobResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiInputsAddJobResponse::IsInitialized() const {
  return true;
}

void MultiInputsAddJobResponse::InternalSwap(MultiInputsAddJobResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.inputs_add_jobs_.InternalSwap(&other->_impl_.inputs_add_jobs_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiInputsAddJobResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[278]);
}

// ===================================================================

class SingleInputsAddJobResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleInputsAddJobResponse* msg);
  static const ::clarifai::api::InputsAddJob& inputs_add_job(const SingleInputsAddJobResponse* msg);
};

const ::clarifai::api::status::Status&
SingleInputsAddJobResponse::_Internal::status(const SingleInputsAddJobResponse* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::InputsAddJob&
SingleInputsAddJobResponse::_Internal::inputs_add_job(const SingleInputsAddJobResponse* msg) {
  return *msg->_impl_.inputs_add_job_;
}
void SingleInputsAddJobResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void SingleInputsAddJobResponse::clear_inputs_add_job() {
  if (GetArenaForAllocation() == nullptr && _impl_.inputs_add_job_ != nullptr) {
    delete _impl_.inputs_add_job_;
  }
  _impl_.inputs_add_job_ = nullptr;
}
SingleInputsAddJobResponse::SingleInputsAddJobResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleInputsAddJobResponse)
}
SingleInputsAddJobResponse::SingleInputsAddJobResponse(const SingleInputsAddJobResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleInputsAddJobResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.inputs_add_job_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_inputs_add_job()) {
    _this->_impl_.inputs_add_job_ = new ::clarifai::api::InputsAddJob(*from._impl_.inputs_add_job_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleInputsAddJobResponse)
}

inline void SingleInputsAddJobResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.inputs_add_job_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SingleInputsAddJobResponse::~SingleInputsAddJobResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleInputsAddJobResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleInputsAddJobResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.inputs_add_job_;
}

void SingleInputsAddJobResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleInputsAddJobResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleInputsAddJobResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.inputs_add_job_ != nullptr) {
    delete _impl_.inputs_add_job_;
  }
  _impl_.inputs_add_job_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleInputsAddJobResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.InputsAddJob inputs_add_job = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_inputs_add_job(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleInputsAddJobResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleInputsAddJobResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.InputsAddJob inputs_add_job = 2;
  if (this->_internal_has_inputs_add_job()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::inputs_add_job(this),
        _Internal::inputs_add_job(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleInputsAddJobResponse)
  return target;
}

size_t SingleInputsAddJobResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleInputsAddJobResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.InputsAddJob inputs_add_job = 2;
  if (this->_internal_has_inputs_add_job()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inputs_add_job_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleInputsAddJobResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleInputsAddJobResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleInputsAddJobResponse::GetClassData() const { return &_class_data_; }


void SingleInputsAddJobResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleInputsAddJobResponse*>(&to_msg);
  auto& from = static_cast<const SingleInputsAddJobResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleInputsAddJobResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_inputs_add_job()) {
    _this->_internal_mutable_inputs_add_job()->::clarifai::api::InputsAddJob::MergeFrom(
        from._internal_inputs_add_job());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleInputsAddJobResponse::CopyFrom(const SingleInputsAddJobResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleInputsAddJobResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleInputsAddJobResponse::IsInitialized() const {
  return true;
}

void SingleInputsAddJobResponse::InternalSwap(SingleInputsAddJobResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleInputsAddJobResponse, _impl_.inputs_add_job_)
      + sizeof(SingleInputsAddJobResponse::_impl_.inputs_add_job_)
      - PROTOBUF_FIELD_OFFSET(SingleInputsAddJobResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleInputsAddJobResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[279]);
}

// ===================================================================

class PostUploadsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostUploadsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostUploadsRequest::_Internal::user_app_id(const PostUploadsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PostUploadsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostUploadsRequest::clear_uploads() {
  _impl_.uploads_.Clear();
}
PostUploadsRequest::PostUploadsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostUploadsRequest)
}
PostUploadsRequest::PostUploadsRequest(const PostUploadsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostUploadsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uploads_){from._impl_.uploads_}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostUploadsRequest)
}

inline void PostUploadsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uploads_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PostUploadsRequest::~PostUploadsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostUploadsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostUploadsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uploads_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PostUploadsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostUploadsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostUploadsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uploads_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostUploadsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Upload uploads = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uploads(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostUploadsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostUploadsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Upload uploads = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_uploads_size()); i < n; i++) {
    const auto& repfield = this->_internal_uploads(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostUploadsRequest)
  return target;
}

size_t PostUploadsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostUploadsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Upload uploads = 2;
  total_size += 1UL * this->_internal_uploads_size();
  for (const auto& msg : this->_impl_.uploads_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostUploadsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostUploadsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostUploadsRequest::GetClassData() const { return &_class_data_; }


void PostUploadsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostUploadsRequest*>(&to_msg);
  auto& from = static_cast<const PostUploadsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostUploadsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.uploads_.MergeFrom(from._impl_.uploads_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostUploadsRequest::CopyFrom(const PostUploadsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostUploadsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostUploadsRequest::IsInitialized() const {
  return true;
}

void PostUploadsRequest::InternalSwap(PostUploadsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.uploads_.InternalSwap(&other->_impl_.uploads_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostUploadsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[280]);
}

// ===================================================================

class DeleteUploadsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteUploadsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteUploadsRequest::_Internal::user_app_id(const DeleteUploadsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void DeleteUploadsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
DeleteUploadsRequest::DeleteUploadsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteUploadsRequest)
}
DeleteUploadsRequest::DeleteUploadsRequest(const DeleteUploadsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteUploadsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){from._impl_.ids_}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteUploadsRequest)
}

inline void DeleteUploadsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){arena}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeleteUploadsRequest::~DeleteUploadsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteUploadsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteUploadsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void DeleteUploadsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteUploadsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteUploadsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteUploadsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.DeleteUploadsRequest.ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteUploadsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteUploadsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteUploadsRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteUploadsRequest)
  return target;
}

size_t DeleteUploadsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteUploadsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.ids_.size());
  for (int i = 0, n = _impl_.ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteUploadsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteUploadsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteUploadsRequest::GetClassData() const { return &_class_data_; }


void DeleteUploadsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteUploadsRequest*>(&to_msg);
  auto& from = static_cast<const DeleteUploadsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteUploadsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_.MergeFrom(from._impl_.ids_);
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteUploadsRequest::CopyFrom(const DeleteUploadsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteUploadsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteUploadsRequest::IsInitialized() const {
  return true;
}

void DeleteUploadsRequest::InternalSwap(DeleteUploadsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ids_.InternalSwap(&other->_impl_.ids_);
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteUploadsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[281]);
}

// ===================================================================

class ListUploadsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListUploadsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListUploadsRequest::_Internal::user_app_id(const ListUploadsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListUploadsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
ListUploadsRequest::ListUploadsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListUploadsRequest)
}
ListUploadsRequest::ListUploadsRequest(const ListUploadsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListUploadsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.per_page_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListUploadsRequest)
}

inline void ListUploadsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListUploadsRequest::~ListUploadsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListUploadsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListUploadsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void ListUploadsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListUploadsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListUploadsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.per_page_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListUploadsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListUploadsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListUploadsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListUploadsRequest)
  return target;
}

size_t ListUploadsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListUploadsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListUploadsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListUploadsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListUploadsRequest::GetClassData() const { return &_class_data_; }


void ListUploadsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListUploadsRequest*>(&to_msg);
  auto& from = static_cast<const ListUploadsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListUploadsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListUploadsRequest::CopyFrom(const ListUploadsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListUploadsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListUploadsRequest::IsInitialized() const {
  return true;
}

void ListUploadsRequest::InternalSwap(ListUploadsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListUploadsRequest, _impl_.per_page_)
      + sizeof(ListUploadsRequest::_impl_.per_page_)
      - PROTOBUF_FIELD_OFFSET(ListUploadsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListUploadsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[282]);
}

// ===================================================================

class GetUploadRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetUploadRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetUploadRequest::_Internal::user_app_id(const GetUploadRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void GetUploadRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
GetUploadRequest::GetUploadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetUploadRequest)
}
GetUploadRequest::GetUploadRequest(const GetUploadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetUploadRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.upload_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.upload_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.upload_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_upload_id().empty()) {
    _this->_impl_.upload_id_.Set(from._internal_upload_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetUploadRequest)
}

inline void GetUploadRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.upload_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.upload_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.upload_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetUploadRequest::~GetUploadRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetUploadRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetUploadRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.upload_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void GetUploadRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetUploadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetUploadRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.upload_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUploadRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string upload_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_upload_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetUploadRequest.upload_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetUploadRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetUploadRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string upload_id = 2;
  if (!this->_internal_upload_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_upload_id().data(), static_cast<int>(this->_internal_upload_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetUploadRequest.upload_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_upload_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetUploadRequest)
  return target;
}

size_t GetUploadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetUploadRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string upload_id = 2;
  if (!this->_internal_upload_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_upload_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetUploadRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetUploadRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetUploadRequest::GetClassData() const { return &_class_data_; }


void GetUploadRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetUploadRequest*>(&to_msg);
  auto& from = static_cast<const GetUploadRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetUploadRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_upload_id().empty()) {
    _this->_internal_set_upload_id(from._internal_upload_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetUploadRequest::CopyFrom(const GetUploadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetUploadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUploadRequest::IsInitialized() const {
  return true;
}

void GetUploadRequest::InternalSwap(GetUploadRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.upload_id_, lhs_arena,
      &other->_impl_.upload_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUploadRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[283]);
}

// ===================================================================

class SingleUploadResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleUploadResponse* msg);
  static const ::clarifai::api::Upload& upload(const SingleUploadResponse* msg);
};

const ::clarifai::api::status::Status&
SingleUploadResponse::_Internal::status(const SingleUploadResponse* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::Upload&
SingleUploadResponse::_Internal::upload(const SingleUploadResponse* msg) {
  return *msg->_impl_.upload_;
}
void SingleUploadResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void SingleUploadResponse::clear_upload() {
  if (GetArenaForAllocation() == nullptr && _impl_.upload_ != nullptr) {
    delete _impl_.upload_;
  }
  _impl_.upload_ = nullptr;
}
SingleUploadResponse::SingleUploadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleUploadResponse)
}
SingleUploadResponse::SingleUploadResponse(const SingleUploadResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleUploadResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.upload_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_upload()) {
    _this->_impl_.upload_ = new ::clarifai::api::Upload(*from._impl_.upload_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleUploadResponse)
}

inline void SingleUploadResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.upload_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SingleUploadResponse::~SingleUploadResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleUploadResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleUploadResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.upload_;
}

void SingleUploadResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleUploadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleUploadResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.upload_ != nullptr) {
    delete _impl_.upload_;
  }
  _impl_.upload_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleUploadResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Upload upload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_upload(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleUploadResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleUploadResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.Upload upload = 2;
  if (this->_internal_has_upload()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::upload(this),
        _Internal::upload(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleUploadResponse)
  return target;
}

size_t SingleUploadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleUploadResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.Upload upload = 2;
  if (this->_internal_has_upload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.upload_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleUploadResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleUploadResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleUploadResponse::GetClassData() const { return &_class_data_; }


void SingleUploadResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleUploadResponse*>(&to_msg);
  auto& from = static_cast<const SingleUploadResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleUploadResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_upload()) {
    _this->_internal_mutable_upload()->::clarifai::api::Upload::MergeFrom(
        from._internal_upload());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleUploadResponse::CopyFrom(const SingleUploadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleUploadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleUploadResponse::IsInitialized() const {
  return true;
}

void SingleUploadResponse::InternalSwap(SingleUploadResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleUploadResponse, _impl_.upload_)
      + sizeof(SingleUploadResponse::_impl_.upload_)
      - PROTOBUF_FIELD_OFFSET(SingleUploadResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleUploadResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[284]);
}

// ===================================================================

class MultiUploadResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiUploadResponse* msg);
};

const ::clarifai::api::status::Status&
MultiUploadResponse::_Internal::status(const MultiUploadResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiUploadResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiUploadResponse::clear_uploads() {
  _impl_.uploads_.Clear();
}
MultiUploadResponse::MultiUploadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiUploadResponse)
}
MultiUploadResponse::MultiUploadResponse(const MultiUploadResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiUploadResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uploads_){from._impl_.uploads_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiUploadResponse)
}

inline void MultiUploadResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uploads_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiUploadResponse::~MultiUploadResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiUploadResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiUploadResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uploads_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiUploadResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiUploadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiUploadResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uploads_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiUploadResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Upload uploads = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uploads(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiUploadResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiUploadResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.Upload uploads = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_uploads_size()); i < n; i++) {
    const auto& repfield = this->_internal_uploads(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiUploadResponse)
  return target;
}

size_t MultiUploadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiUploadResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Upload uploads = 2;
  total_size += 1UL * this->_internal_uploads_size();
  for (const auto& msg : this->_impl_.uploads_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiUploadResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiUploadResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiUploadResponse::GetClassData() const { return &_class_data_; }


void MultiUploadResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiUploadResponse*>(&to_msg);
  auto& from = static_cast<const MultiUploadResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiUploadResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.uploads_.MergeFrom(from._impl_.uploads_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiUploadResponse::CopyFrom(const MultiUploadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiUploadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiUploadResponse::IsInitialized() const {
  return true;
}

void MultiUploadResponse::InternalSwap(MultiUploadResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.uploads_.InternalSwap(&other->_impl_.uploads_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiUploadResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[285]);
}

// ===================================================================

class PutUploadContentPartsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PutUploadContentPartsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PutUploadContentPartsRequest::_Internal::user_app_id(const PutUploadContentPartsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PutUploadContentPartsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PutUploadContentPartsRequest::clear_content_parts() {
  _impl_.content_parts_.Clear();
}
PutUploadContentPartsRequest::PutUploadContentPartsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PutUploadContentPartsRequest)
}
PutUploadContentPartsRequest::PutUploadContentPartsRequest(const PutUploadContentPartsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PutUploadContentPartsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_parts_){from._impl_.content_parts_}
    , decltype(_impl_.upload_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.upload_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.upload_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_upload_id().empty()) {
    _this->_impl_.upload_id_.Set(from._internal_upload_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PutUploadContentPartsRequest)
}

inline void PutUploadContentPartsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_parts_){arena}
    , decltype(_impl_.upload_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.upload_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.upload_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PutUploadContentPartsRequest::~PutUploadContentPartsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PutUploadContentPartsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PutUploadContentPartsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_parts_.~RepeatedPtrField();
  _impl_.upload_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PutUploadContentPartsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PutUploadContentPartsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PutUploadContentPartsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_parts_.Clear();
  _impl_.upload_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PutUploadContentPartsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string upload_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_upload_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PutUploadContentPartsRequest.upload_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.UploadContentPart content_parts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_content_parts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PutUploadContentPartsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PutUploadContentPartsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string upload_id = 2;
  if (!this->_internal_upload_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_upload_id().data(), static_cast<int>(this->_internal_upload_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PutUploadContentPartsRequest.upload_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_upload_id(), target);
  }

  // repeated .clarifai.api.UploadContentPart content_parts = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_content_parts_size()); i < n; i++) {
    const auto& repfield = this->_internal_content_parts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PutUploadContentPartsRequest)
  return target;
}

size_t PutUploadContentPartsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PutUploadContentPartsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.UploadContentPart content_parts = 3;
  total_size += 1UL * this->_internal_content_parts_size();
  for (const auto& msg : this->_impl_.content_parts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string upload_id = 2;
  if (!this->_internal_upload_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_upload_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PutUploadContentPartsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PutUploadContentPartsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PutUploadContentPartsRequest::GetClassData() const { return &_class_data_; }


void PutUploadContentPartsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PutUploadContentPartsRequest*>(&to_msg);
  auto& from = static_cast<const PutUploadContentPartsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PutUploadContentPartsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.content_parts_.MergeFrom(from._impl_.content_parts_);
  if (!from._internal_upload_id().empty()) {
    _this->_internal_set_upload_id(from._internal_upload_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PutUploadContentPartsRequest::CopyFrom(const PutUploadContentPartsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PutUploadContentPartsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutUploadContentPartsRequest::IsInitialized() const {
  return true;
}

void PutUploadContentPartsRequest::InternalSwap(PutUploadContentPartsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.content_parts_.InternalSwap(&other->_impl_.content_parts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.upload_id_, lhs_arena,
      &other->_impl_.upload_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PutUploadContentPartsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[286]);
}

// ===================================================================

class PostInputsDataSourcesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostInputsDataSourcesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostInputsDataSourcesRequest::_Internal::user_app_id(const PostInputsDataSourcesRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void PostInputsDataSourcesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
void PostInputsDataSourcesRequest::clear_data_sources() {
  _impl_.data_sources_.Clear();
}
PostInputsDataSourcesRequest::PostInputsDataSourcesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostInputsDataSourcesRequest)
}
PostInputsDataSourcesRequest::PostInputsDataSourcesRequest(const PostInputsDataSourcesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostInputsDataSourcesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_sources_){from._impl_.data_sources_}
    , decltype(_impl_.call_back_url_){}
    , decltype(_impl_.app_pat_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.call_back_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.call_back_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_call_back_url().empty()) {
    _this->_impl_.call_back_url_.Set(from._internal_call_back_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_pat_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_pat_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_pat().empty()) {
    _this->_impl_.app_pat_.Set(from._internal_app_pat(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostInputsDataSourcesRequest)
}

inline void PostInputsDataSourcesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_sources_){arena}
    , decltype(_impl_.call_back_url_){}
    , decltype(_impl_.app_pat_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.call_back_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.call_back_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_pat_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_pat_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PostInputsDataSourcesRequest::~PostInputsDataSourcesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostInputsDataSourcesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostInputsDataSourcesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_sources_.~RepeatedPtrField();
  _impl_.call_back_url_.Destroy();
  _impl_.app_pat_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void PostInputsDataSourcesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostInputsDataSourcesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostInputsDataSourcesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_sources_.Clear();
  _impl_.call_back_url_.ClearToEmpty();
  _impl_.app_pat_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostInputsDataSourcesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.InputsDataSource data_sources = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_sources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string call_back_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_call_back_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PostInputsDataSourcesRequest.call_back_url"));
        } else
          goto handle_unusual;
        continue;
      // string app_pat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_app_pat();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.PostInputsDataSourcesRequest.app_pat"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostInputsDataSourcesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostInputsDataSourcesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.InputsDataSource data_sources = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_sources_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_sources(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string call_back_url = 3;
  if (!this->_internal_call_back_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_call_back_url().data(), static_cast<int>(this->_internal_call_back_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostInputsDataSourcesRequest.call_back_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_call_back_url(), target);
  }

  // string app_pat = 4;
  if (!this->_internal_app_pat().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_pat().data(), static_cast<int>(this->_internal_app_pat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostInputsDataSourcesRequest.app_pat");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_app_pat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostInputsDataSourcesRequest)
  return target;
}

size_t PostInputsDataSourcesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostInputsDataSourcesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.InputsDataSource data_sources = 2;
  total_size += 1UL * this->_internal_data_sources_size();
  for (const auto& msg : this->_impl_.data_sources_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string call_back_url = 3;
  if (!this->_internal_call_back_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_call_back_url());
  }

  // string app_pat = 4;
  if (!this->_internal_app_pat().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_pat());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostInputsDataSourcesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostInputsDataSourcesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostInputsDataSourcesRequest::GetClassData() const { return &_class_data_; }


void PostInputsDataSourcesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostInputsDataSourcesRequest*>(&to_msg);
  auto& from = static_cast<const PostInputsDataSourcesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostInputsDataSourcesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_sources_.MergeFrom(from._impl_.data_sources_);
  if (!from._internal_call_back_url().empty()) {
    _this->_internal_set_call_back_url(from._internal_call_back_url());
  }
  if (!from._internal_app_pat().empty()) {
    _this->_internal_set_app_pat(from._internal_app_pat());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostInputsDataSourcesRequest::CopyFrom(const PostInputsDataSourcesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostInputsDataSourcesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostInputsDataSourcesRequest::IsInitialized() const {
  return true;
}

void PostInputsDataSourcesRequest::InternalSwap(PostInputsDataSourcesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_sources_.InternalSwap(&other->_impl_.data_sources_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.call_back_url_, lhs_arena,
      &other->_impl_.call_back_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_pat_, lhs_arena,
      &other->_impl_.app_pat_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostInputsDataSourcesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[287]);
}

// ===================================================================

class GetInputsExtractionJobRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetInputsExtractionJobRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetInputsExtractionJobRequest::_Internal::user_app_id(const GetInputsExtractionJobRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void GetInputsExtractionJobRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
GetInputsExtractionJobRequest::GetInputsExtractionJobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetInputsExtractionJobRequest)
}
GetInputsExtractionJobRequest::GetInputsExtractionJobRequest(const GetInputsExtractionJobRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetInputsExtractionJobRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.inputs_extraction_job_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.inputs_extraction_job_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.inputs_extraction_job_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_inputs_extraction_job_id().empty()) {
    _this->_impl_.inputs_extraction_job_id_.Set(from._internal_inputs_extraction_job_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetInputsExtractionJobRequest)
}

inline void GetInputsExtractionJobRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.inputs_extraction_job_id_){}
    , decltype(_impl_.user_app_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.inputs_extraction_job_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.inputs_extraction_job_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetInputsExtractionJobRequest::~GetInputsExtractionJobRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetInputsExtractionJobRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetInputsExtractionJobRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.inputs_extraction_job_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void GetInputsExtractionJobRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetInputsExtractionJobRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetInputsExtractionJobRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.inputs_extraction_job_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetInputsExtractionJobRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string inputs_extraction_job_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_inputs_extraction_job_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clarifai.api.GetInputsExtractionJobRequest.inputs_extraction_job_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetInputsExtractionJobRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetInputsExtractionJobRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // string inputs_extraction_job_id = 2;
  if (!this->_internal_inputs_extraction_job_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inputs_extraction_job_id().data(), static_cast<int>(this->_internal_inputs_extraction_job_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetInputsExtractionJobRequest.inputs_extraction_job_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_inputs_extraction_job_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetInputsExtractionJobRequest)
  return target;
}

size_t GetInputsExtractionJobRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetInputsExtractionJobRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string inputs_extraction_job_id = 2;
  if (!this->_internal_inputs_extraction_job_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inputs_extraction_job_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetInputsExtractionJobRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetInputsExtractionJobRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetInputsExtractionJobRequest::GetClassData() const { return &_class_data_; }


void GetInputsExtractionJobRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetInputsExtractionJobRequest*>(&to_msg);
  auto& from = static_cast<const GetInputsExtractionJobRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetInputsExtractionJobRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_inputs_extraction_job_id().empty()) {
    _this->_internal_set_inputs_extraction_job_id(from._internal_inputs_extraction_job_id());
  }
  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetInputsExtractionJobRequest::CopyFrom(const GetInputsExtractionJobRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetInputsExtractionJobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInputsExtractionJobRequest::IsInitialized() const {
  return true;
}

void GetInputsExtractionJobRequest::InternalSwap(GetInputsExtractionJobRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.inputs_extraction_job_id_, lhs_arena,
      &other->_impl_.inputs_extraction_job_id_, rhs_arena
  );
  swap(_impl_.user_app_id_, other->_impl_.user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInputsExtractionJobRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[288]);
}

// ===================================================================

class ListInputsExtractionJobsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListInputsExtractionJobsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListInputsExtractionJobsRequest::_Internal::user_app_id(const ListInputsExtractionJobsRequest* msg) {
  return *msg->_impl_.user_app_id_;
}
void ListInputsExtractionJobsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
}
ListInputsExtractionJobsRequest::ListInputsExtractionJobsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListInputsExtractionJobsRequest)
}
ListInputsExtractionJobsRequest::ListInputsExtractionJobsRequest(const ListInputsExtractionJobsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListInputsExtractionJobsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.per_page_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    _this->_impl_.user_app_id_ = new ::clarifai::api::UserAppIDSet(*from._impl_.user_app_id_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.per_page_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListInputsExtractionJobsRequest)
}

inline void ListInputsExtractionJobsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_app_id_){nullptr}
    , decltype(_impl_.page_){0u}
    , decltype(_impl_.per_page_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListInputsExtractionJobsRequest::~ListInputsExtractionJobsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListInputsExtractionJobsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListInputsExtractionJobsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_app_id_;
}

void ListInputsExtractionJobsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListInputsExtractionJobsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListInputsExtractionJobsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_app_id_ != nullptr) {
    delete _impl_.user_app_id_;
  }
  _impl_.user_app_id_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.per_page_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListInputsExtractionJobsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListInputsExtractionJobsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListInputsExtractionJobsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user_app_id(this),
        _Internal::user_app_id(this).GetCachedSize(), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListInputsExtractionJobsRequest)
  return target;
}

size_t ListInputsExtractionJobsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListInputsExtractionJobsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListInputsExtractionJobsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListInputsExtractionJobsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListInputsExtractionJobsRequest::GetClassData() const { return &_class_data_; }


void ListInputsExtractionJobsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListInputsExtractionJobsRequest*>(&to_msg);
  auto& from = static_cast<const ListInputsExtractionJobsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListInputsExtractionJobsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _this->_internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(
        from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _this->_internal_set_per_page(from._internal_per_page());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListInputsExtractionJobsRequest::CopyFrom(const ListInputsExtractionJobsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListInputsExtractionJobsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListInputsExtractionJobsRequest::IsInitialized() const {
  return true;
}

void ListInputsExtractionJobsRequest::InternalSwap(ListInputsExtractionJobsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListInputsExtractionJobsRequest, _impl_.per_page_)
      + sizeof(ListInputsExtractionJobsRequest::_impl_.per_page_)
      - PROTOBUF_FIELD_OFFSET(ListInputsExtractionJobsRequest, _impl_.user_app_id_)>(
          reinterpret_cast<char*>(&_impl_.user_app_id_),
          reinterpret_cast<char*>(&other->_impl_.user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListInputsExtractionJobsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[289]);
}

// ===================================================================

class SingleInputsExtractionJobResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleInputsExtractionJobResponse* msg);
  static const ::clarifai::api::InputsExtractionJob& inputs_extraction_job(const SingleInputsExtractionJobResponse* msg);
};

const ::clarifai::api::status::Status&
SingleInputsExtractionJobResponse::_Internal::status(const SingleInputsExtractionJobResponse* msg) {
  return *msg->_impl_.status_;
}
const ::clarifai::api::InputsExtractionJob&
SingleInputsExtractionJobResponse::_Internal::inputs_extraction_job(const SingleInputsExtractionJobResponse* msg) {
  return *msg->_impl_.inputs_extraction_job_;
}
void SingleInputsExtractionJobResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void SingleInputsExtractionJobResponse::clear_inputs_extraction_job() {
  if (GetArenaForAllocation() == nullptr && _impl_.inputs_extraction_job_ != nullptr) {
    delete _impl_.inputs_extraction_job_;
  }
  _impl_.inputs_extraction_job_ = nullptr;
}
SingleInputsExtractionJobResponse::SingleInputsExtractionJobResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleInputsExtractionJobResponse)
}
SingleInputsExtractionJobResponse::SingleInputsExtractionJobResponse(const SingleInputsExtractionJobResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleInputsExtractionJobResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.inputs_extraction_job_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  if (from._internal_has_inputs_extraction_job()) {
    _this->_impl_.inputs_extraction_job_ = new ::clarifai::api::InputsExtractionJob(*from._impl_.inputs_extraction_job_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleInputsExtractionJobResponse)
}

inline void SingleInputsExtractionJobResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.inputs_extraction_job_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SingleInputsExtractionJobResponse::~SingleInputsExtractionJobResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleInputsExtractionJobResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleInputsExtractionJobResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.inputs_extraction_job_;
}

void SingleInputsExtractionJobResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleInputsExtractionJobResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleInputsExtractionJobResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.inputs_extraction_job_ != nullptr) {
    delete _impl_.inputs_extraction_job_;
  }
  _impl_.inputs_extraction_job_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleInputsExtractionJobResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.InputsExtractionJob inputs_extraction_job = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_inputs_extraction_job(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleInputsExtractionJobResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleInputsExtractionJobResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .clarifai.api.InputsExtractionJob inputs_extraction_job = 2;
  if (this->_internal_has_inputs_extraction_job()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::inputs_extraction_job(this),
        _Internal::inputs_extraction_job(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleInputsExtractionJobResponse)
  return target;
}

size_t SingleInputsExtractionJobResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleInputsExtractionJobResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .clarifai.api.InputsExtractionJob inputs_extraction_job = 2;
  if (this->_internal_has_inputs_extraction_job()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inputs_extraction_job_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleInputsExtractionJobResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleInputsExtractionJobResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleInputsExtractionJobResponse::GetClassData() const { return &_class_data_; }


void SingleInputsExtractionJobResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleInputsExtractionJobResponse*>(&to_msg);
  auto& from = static_cast<const SingleInputsExtractionJobResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleInputsExtractionJobResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_inputs_extraction_job()) {
    _this->_internal_mutable_inputs_extraction_job()->::clarifai::api::InputsExtractionJob::MergeFrom(
        from._internal_inputs_extraction_job());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleInputsExtractionJobResponse::CopyFrom(const SingleInputsExtractionJobResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleInputsExtractionJobResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleInputsExtractionJobResponse::IsInitialized() const {
  return true;
}

void SingleInputsExtractionJobResponse::InternalSwap(SingleInputsExtractionJobResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleInputsExtractionJobResponse, _impl_.inputs_extraction_job_)
      + sizeof(SingleInputsExtractionJobResponse::_impl_.inputs_extraction_job_)
      - PROTOBUF_FIELD_OFFSET(SingleInputsExtractionJobResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleInputsExtractionJobResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[290]);
}

// ===================================================================

class MultiInputsExtractionJobResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiInputsExtractionJobResponse* msg);
};

const ::clarifai::api::status::Status&
MultiInputsExtractionJobResponse::_Internal::status(const MultiInputsExtractionJobResponse* msg) {
  return *msg->_impl_.status_;
}
void MultiInputsExtractionJobResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void MultiInputsExtractionJobResponse::clear_inputs_extraction_jobs() {
  _impl_.inputs_extraction_jobs_.Clear();
}
MultiInputsExtractionJobResponse::MultiInputsExtractionJobResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiInputsExtractionJobResponse)
}
MultiInputsExtractionJobResponse::MultiInputsExtractionJobResponse(const MultiInputsExtractionJobResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiInputsExtractionJobResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.inputs_extraction_jobs_){from._impl_.inputs_extraction_jobs_}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::clarifai::api::status::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiInputsExtractionJobResponse)
}

inline void MultiInputsExtractionJobResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.inputs_extraction_jobs_){arena}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiInputsExtractionJobResponse::~MultiInputsExtractionJobResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiInputsExtractionJobResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiInputsExtractionJobResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.inputs_extraction_jobs_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void MultiInputsExtractionJobResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiInputsExtractionJobResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiInputsExtractionJobResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.inputs_extraction_jobs_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiInputsExtractionJobResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.InputsExtractionJob inputs_extraction_jobs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs_extraction_jobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiInputsExtractionJobResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiInputsExtractionJobResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .clarifai.api.InputsExtractionJob inputs_extraction_jobs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_inputs_extraction_jobs_size()); i < n; i++) {
    const auto& repfield = this->_internal_inputs_extraction_jobs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiInputsExtractionJobResponse)
  return target;
}

size_t MultiInputsExtractionJobResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiInputsExtractionJobResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.InputsExtractionJob inputs_extraction_jobs = 2;
  total_size += 1UL * this->_internal_inputs_extraction_jobs_size();
  for (const auto& msg : this->_impl_.inputs_extraction_jobs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiInputsExtractionJobResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiInputsExtractionJobResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiInputsExtractionJobResponse::GetClassData() const { return &_class_data_; }


void MultiInputsExtractionJobResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiInputsExtractionJobResponse*>(&to_msg);
  auto& from = static_cast<const MultiInputsExtractionJobResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiInputsExtractionJobResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.inputs_extraction_jobs_.MergeFrom(from._impl_.inputs_extraction_jobs_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiInputsExtractionJobResponse::CopyFrom(const MultiInputsExtractionJobResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiInputsExtractionJobResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiInputsExtractionJobResponse::IsInitialized() const {
  return true;
}

void MultiInputsExtractionJobResponse::InternalSwap(MultiInputsExtractionJobResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.inputs_extraction_jobs_.InternalSwap(&other->_impl_.inputs_extraction_jobs_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiInputsExtractionJobResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[291]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace clarifai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::clarifai::api::Pagination*
Arena::CreateMaybeMessage< ::clarifai::api::Pagination >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Pagination >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetAnnotationRequest*
Arena::CreateMaybeMessage< ::clarifai::api::GetAnnotationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetAnnotationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListAnnotationsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListAnnotationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListAnnotationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostAnnotationsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostAnnotationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostAnnotationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchAnnotationsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PatchAnnotationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchAnnotationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchAnnotationsStatusRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PatchAnnotationsStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchAnnotationsStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchAnnotationsStatusResponse*
Arena::CreateMaybeMessage< ::clarifai::api::PatchAnnotationsStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchAnnotationsStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteAnnotationRequest*
Arena::CreateMaybeMessage< ::clarifai::api::DeleteAnnotationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteAnnotationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteAnnotationsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::DeleteAnnotationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteAnnotationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleAnnotationResponse*
Arena::CreateMaybeMessage< ::clarifai::api::SingleAnnotationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleAnnotationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiAnnotationResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiAnnotationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiAnnotationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetAppRequest*
Arena::CreateMaybeMessage< ::clarifai::api::GetAppRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetAppRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListAppsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListAppsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListAppsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostAppsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostAppsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostAppsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteAppRequest*
Arena::CreateMaybeMessage< ::clarifai::api::DeleteAppRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteAppRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchAppsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PatchAppsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchAppsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchAppRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PatchAppRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchAppRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchAppsIdsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PatchAppsIdsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchAppsIdsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostAppsSearchesRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostAppsSearchesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostAppsSearchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleAppResponse*
Arena::CreateMaybeMessage< ::clarifai::api::SingleAppResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleAppResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiAppResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiAppResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiAppResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListCollaboratorsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListCollaboratorsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListCollaboratorsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostCollaboratorsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostCollaboratorsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostCollaboratorsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchCollaboratorsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PatchCollaboratorsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchCollaboratorsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteCollaboratorsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::DeleteCollaboratorsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteCollaboratorsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiCollaboratorsResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiCollaboratorsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiCollaboratorsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListCollaborationsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListCollaborationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListCollaborationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiCollaborationsResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiCollaborationsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiCollaborationsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetStatusCodeRequest*
Arena::CreateMaybeMessage< ::clarifai::api::GetStatusCodeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetStatusCodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListStatusCodesRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListStatusCodesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListStatusCodesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleStatusCodeResponse*
Arena::CreateMaybeMessage< ::clarifai::api::SingleStatusCodeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleStatusCodeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiStatusCodeResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiStatusCodeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiStatusCodeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetConceptRequest*
Arena::CreateMaybeMessage< ::clarifai::api::GetConceptRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetConceptRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListConceptsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListConceptsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListConceptsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListModelConceptsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListModelConceptsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListModelConceptsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostConceptsSearchesRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostConceptsSearchesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostConceptsSearchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostConceptsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostConceptsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostConceptsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchConceptsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PatchConceptsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchConceptsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetConceptCountsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::GetConceptCountsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetConceptCountsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleConceptResponse*
Arena::CreateMaybeMessage< ::clarifai::api::SingleConceptResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleConceptResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiConceptResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiConceptResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiConceptResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiConceptCountResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiConceptCountResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiConceptCountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListConceptRelationsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListConceptRelationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListConceptRelationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostConceptRelationsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostConceptRelationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostConceptRelationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteConceptRelationsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::DeleteConceptRelationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteConceptRelationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListKnowledgeGraphsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListKnowledgeGraphsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListKnowledgeGraphsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostKnowledgeGraphsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostKnowledgeGraphsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostKnowledgeGraphsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostConceptMappingJobsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostConceptMappingJobsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostConceptMappingJobsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiConceptRelationResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiConceptRelationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiConceptRelationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiKnowledgeGraphResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiKnowledgeGraphResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiKnowledgeGraphResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiConceptMappingJobResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiConceptMappingJobResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiConceptMappingJobResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetConceptLanguageRequest*
Arena::CreateMaybeMessage< ::clarifai::api::GetConceptLanguageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetConceptLanguageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListConceptLanguagesRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListConceptLanguagesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListConceptLanguagesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchConceptLanguagesRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PatchConceptLanguagesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchConceptLanguagesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostConceptLanguagesRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostConceptLanguagesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostConceptLanguagesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleConceptLanguageResponse*
Arena::CreateMaybeMessage< ::clarifai::api::SingleConceptLanguageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleConceptLanguageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiConceptLanguageResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiConceptLanguageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiConceptLanguageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetInputRequest*
Arena::CreateMaybeMessage< ::clarifai::api::GetInputRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetInputRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetInputSamplesRequest*
Arena::CreateMaybeMessage< ::clarifai::api::GetInputSamplesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetInputSamplesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListInputsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListInputsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListInputsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::StreamInputsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::StreamInputsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::StreamInputsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostInputsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostInputsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostInputsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchInputsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PatchInputsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchInputsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteInputRequest*
Arena::CreateMaybeMessage< ::clarifai::api::DeleteInputRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteInputRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteInputsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::DeleteInputsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteInputsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleInputResponse*
Arena::CreateMaybeMessage< ::clarifai::api::SingleInputResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleInputResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiInputResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiInputResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiInputResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiInputAnnotationResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiInputAnnotationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiInputAnnotationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleInputCountResponse*
Arena::CreateMaybeMessage< ::clarifai::api::SingleInputCountResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleInputCountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetInputCountRequest*
Arena::CreateMaybeMessage< ::clarifai::api::GetInputCountRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetInputCountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListDatasetsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListDatasetsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListDatasetsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetDatasetRequest*
Arena::CreateMaybeMessage< ::clarifai::api::GetDatasetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetDatasetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostDatasetsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostDatasetsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostDatasetsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchDatasetsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PatchDatasetsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchDatasetsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchDatasetIdsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PatchDatasetIdsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchDatasetIdsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteDatasetsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::DeleteDatasetsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteDatasetsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiDatasetResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiDatasetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiDatasetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleDatasetResponse*
Arena::CreateMaybeMessage< ::clarifai::api::SingleDatasetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleDatasetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListDatasetInputsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListDatasetInputsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListDatasetInputsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetDatasetInputRequest*
Arena::CreateMaybeMessage< ::clarifai::api::GetDatasetInputRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetDatasetInputRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostDatasetInputsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostDatasetInputsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostDatasetInputsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteDatasetInputsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::DeleteDatasetInputsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteDatasetInputsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiDatasetInputResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiDatasetInputResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiDatasetInputResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleDatasetInputResponse*
Arena::CreateMaybeMessage< ::clarifai::api::SingleDatasetInputResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleDatasetInputResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListDatasetVersionsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListDatasetVersionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListDatasetVersionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetDatasetVersionRequest*
Arena::CreateMaybeMessage< ::clarifai::api::GetDatasetVersionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetDatasetVersionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListDatasetVersionMetricsGroupsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListDatasetVersionMetricsGroupsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListDatasetVersionMetricsGroupsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostDatasetVersionsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostDatasetVersionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostDatasetVersionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchDatasetVersionsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PatchDatasetVersionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchDatasetVersionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteDatasetVersionsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::DeleteDatasetVersionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteDatasetVersionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PutDatasetVersionExportsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PutDatasetVersionExportsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PutDatasetVersionExportsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiDatasetVersionResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiDatasetVersionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiDatasetVersionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiDatasetVersionExportResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiDatasetVersionExportResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiDatasetVersionExportResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiDatasetVersionMetricsGroupResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiDatasetVersionMetricsGroupResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiDatasetVersionMetricsGroupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleDatasetVersionResponse*
Arena::CreateMaybeMessage< ::clarifai::api::SingleDatasetVersionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleDatasetVersionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetDatasetInputsSearchAddJobRequest*
Arena::CreateMaybeMessage< ::clarifai::api::GetDatasetInputsSearchAddJobRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetDatasetInputsSearchAddJobRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleDatasetInputsSearchAddJobResponse*
Arena::CreateMaybeMessage< ::clarifai::api::SingleDatasetInputsSearchAddJobResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleDatasetInputsSearchAddJobResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostModelOutputsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostModelOutputsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostModelOutputsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListModelInputsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListModelInputsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListModelInputsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetKeyRequest*
Arena::CreateMaybeMessage< ::clarifai::api::GetKeyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListKeysRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListKeysRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListKeysRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListAppKeysRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListAppKeysRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListAppKeysRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostKeysRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostKeysRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostKeysRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteKeyRequest*
Arena::CreateMaybeMessage< ::clarifai::api::DeleteKeyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchKeysRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PatchKeysRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchKeysRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleKeyResponse*
Arena::CreateMaybeMessage< ::clarifai::api::SingleKeyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleKeyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiKeyResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiKeyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiKeyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetModelRequest*
Arena::CreateMaybeMessage< ::clarifai::api::GetModelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetModelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListModelsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListModelsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListModelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchModelToolkitsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PatchModelToolkitsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchModelToolkitsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchModelCheckConsentsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PatchModelCheckConsentsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchModelCheckConsentsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchModelUseCasesRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PatchModelUseCasesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchModelUseCasesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchModelLanguagesRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PatchModelLanguagesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchModelLanguagesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiModelToolkitResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiModelToolkitResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiModelToolkitResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiModelCheckConsentResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiModelCheckConsentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiModelCheckConsentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiModelUseCaseResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiModelUseCaseResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiModelUseCaseResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiModelLanguageResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiModelLanguageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiModelLanguageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostModelsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostModelsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostModelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchModelsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PatchModelsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchModelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::IdUpdateSource*
Arena::CreateMaybeMessage< ::clarifai::api::IdUpdateSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::IdUpdateSource >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchModelIdsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PatchModelIdsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchModelIdsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteModelRequest*
Arena::CreateMaybeMessage< ::clarifai::api::DeleteModelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteModelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteModelsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::DeleteModelsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteModelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostModelsSearchesRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostModelsSearchesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostModelsSearchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleModelResponse*
Arena::CreateMaybeMessage< ::clarifai::api::SingleModelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleModelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiModelResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiModelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiModelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchModelVersionsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PatchModelVersionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchModelVersionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetModelVersionRequest*
Arena::CreateMaybeMessage< ::clarifai::api::GetModelVersionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetModelVersionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListModelVersionsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListModelVersionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListModelVersionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteModelVersionRequest*
Arena::CreateMaybeMessage< ::clarifai::api::DeleteModelVersionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteModelVersionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleModelVersionResponse*
Arena::CreateMaybeMessage< ::clarifai::api::SingleModelVersionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleModelVersionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiModelVersionResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiModelVersionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiModelVersionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostModelVersionsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostModelVersionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostModelVersionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostWorkflowVersionsUnPublishRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostWorkflowVersionsUnPublishRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostWorkflowVersionsUnPublishRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostWorkflowVersionsPublishRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostWorkflowVersionsPublishRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostWorkflowVersionsPublishRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::WorkflowVersionPublishRequest*
Arena::CreateMaybeMessage< ::clarifai::api::WorkflowVersionPublishRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::WorkflowVersionPublishRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::WorkflowVersionUnPublishRequest*
Arena::CreateMaybeMessage< ::clarifai::api::WorkflowVersionUnPublishRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::WorkflowVersionUnPublishRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ModelVersionPublishRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ModelVersionPublishRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ModelVersionPublishRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostModelVersionsPublishRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostModelVersionsPublishRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostModelVersionsPublishRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ModelVersionUnpublishRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ModelVersionUnpublishRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ModelVersionUnpublishRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostModelVersionsUnPublishRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostModelVersionsUnPublishRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostModelVersionsUnPublishRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostModelVersionEvaluationsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostModelVersionEvaluationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostModelVersionEvaluationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListModelVersionEvaluationsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListModelVersionEvaluationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListModelVersionEvaluationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetModelVersionEvaluationRequest*
Arena::CreateMaybeMessage< ::clarifai::api::GetModelVersionEvaluationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetModelVersionEvaluationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleEvalMetricsResponse*
Arena::CreateMaybeMessage< ::clarifai::api::SingleEvalMetricsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleEvalMetricsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiEvalMetricsResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiEvalMetricsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiEvalMetricsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostModelVersionMetricsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostModelVersionMetricsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostModelVersionMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetModelVersionMetricsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::GetModelVersionMetricsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetModelVersionMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetModelTypeRequest*
Arena::CreateMaybeMessage< ::clarifai::api::GetModelTypeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetModelTypeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListModelTypesRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListModelTypesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListModelTypesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListOpenSourceLicensesRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListOpenSourceLicensesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListOpenSourceLicensesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListOpenSourceLicensesResponse*
Arena::CreateMaybeMessage< ::clarifai::api::ListOpenSourceLicensesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListOpenSourceLicensesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleModelTypeResponse*
Arena::CreateMaybeMessage< ::clarifai::api::SingleModelTypeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleModelTypeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiModelTypeResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiModelTypeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiModelTypeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetModelVersionInputExampleRequest*
Arena::CreateMaybeMessage< ::clarifai::api::GetModelVersionInputExampleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetModelVersionInputExampleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListModelVersionInputExamplesRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListModelVersionInputExamplesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListModelVersionInputExamplesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleModelVersionInputExampleResponse*
Arena::CreateMaybeMessage< ::clarifai::api::SingleModelVersionInputExampleResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleModelVersionInputExampleResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiModelVersionInputExampleResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiModelVersionInputExampleResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiModelVersionInputExampleResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListModelReferencesRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListModelReferencesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListModelReferencesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiModelReferenceResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiModelReferenceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiModelReferenceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiOutputResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiOutputResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiOutputResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListScopesRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListScopesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListScopesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MyScopesRequest*
Arena::CreateMaybeMessage< ::clarifai::api::MyScopesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MyScopesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MyScopesUserRequest*
Arena::CreateMaybeMessage< ::clarifai::api::MyScopesUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MyScopesUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MyScopesRootRequest*
Arena::CreateMaybeMessage< ::clarifai::api::MyScopesRootRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MyScopesRootRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiScopeDepsResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiScopeDepsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiScopeDepsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiScopeResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiScopeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiScopeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiScopeUserResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiScopeUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiScopeUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiScopeRootResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiScopeRootResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiScopeRootResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetSearchRequest*
Arena::CreateMaybeMessage< ::clarifai::api::GetSearchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetSearchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListSearchesRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListSearchesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListSearchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostSearchesRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostSearchesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostSearchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchInputsSearchesRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PatchInputsSearchesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchInputsSearchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchAnnotationsSearchesRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PatchAnnotationsSearchesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchAnnotationsSearchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchSearchesRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PatchSearchesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchSearchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostSearchesByIDRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostSearchesByIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostSearchesByIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteSearchRequest*
Arena::CreateMaybeMessage< ::clarifai::api::DeleteSearchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteSearchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostAnnotationsSearchesRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostAnnotationsSearchesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostAnnotationsSearchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteAnnotationSearchMetricsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::DeleteAnnotationSearchMetricsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteAnnotationSearchMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostInputsSearchesRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostInputsSearchesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostInputsSearchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleSearchResponse*
Arena::CreateMaybeMessage< ::clarifai::api::SingleSearchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleSearchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiSearchResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiSearchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiSearchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostAnnotationSearchMetricsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostAnnotationSearchMetricsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostAnnotationSearchMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetAnnotationSearchMetricsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::GetAnnotationSearchMetricsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetAnnotationSearchMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListAnnotationSearchMetricsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListAnnotationSearchMetricsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListAnnotationSearchMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiAnnotationSearchMetricsResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiAnnotationSearchMetricsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiAnnotationSearchMetricsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListAnnotationFiltersRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListAnnotationFiltersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListAnnotationFiltersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetAnnotationFilterRequest*
Arena::CreateMaybeMessage< ::clarifai::api::GetAnnotationFilterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetAnnotationFilterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostAnnotationFiltersRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostAnnotationFiltersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostAnnotationFiltersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchAnnotationFiltersRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PatchAnnotationFiltersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchAnnotationFiltersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteAnnotationFiltersRequest*
Arena::CreateMaybeMessage< ::clarifai::api::DeleteAnnotationFiltersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteAnnotationFiltersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiAnnotationFilterResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiAnnotationFilterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiAnnotationFilterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleAnnotationFilterResponse*
Arena::CreateMaybeMessage< ::clarifai::api::SingleAnnotationFilterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleAnnotationFilterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostValidatePasswordRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostValidatePasswordRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostValidatePasswordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SinglePasswordValidationResponse*
Arena::CreateMaybeMessage< ::clarifai::api::SinglePasswordValidationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SinglePasswordValidationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetWorkflowRequest*
Arena::CreateMaybeMessage< ::clarifai::api::GetWorkflowRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetWorkflowRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListWorkflowsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListWorkflowsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListWorkflowsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostWorkflowsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostWorkflowsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostWorkflowsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchWorkflowsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PatchWorkflowsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchWorkflowsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchWorkflowIdsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PatchWorkflowIdsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchWorkflowIdsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteWorkflowRequest*
Arena::CreateMaybeMessage< ::clarifai::api::DeleteWorkflowRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteWorkflowRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteWorkflowsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::DeleteWorkflowsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteWorkflowsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleWorkflowResponse*
Arena::CreateMaybeMessage< ::clarifai::api::SingleWorkflowResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleWorkflowResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiWorkflowResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiWorkflowResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiWorkflowResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostWorkflowResultsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostWorkflowResultsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostWorkflowResultsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostWorkflowResultsResponse*
Arena::CreateMaybeMessage< ::clarifai::api::PostWorkflowResultsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostWorkflowResultsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostWorkflowResultsSimilarityRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostWorkflowResultsSimilarityRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostWorkflowResultsSimilarityRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostWorkflowResultsSimilarityResponse*
Arena::CreateMaybeMessage< ::clarifai::api::PostWorkflowResultsSimilarityResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostWorkflowResultsSimilarityResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListWorkflowVersionsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListWorkflowVersionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListWorkflowVersionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetWorkflowVersionRequest*
Arena::CreateMaybeMessage< ::clarifai::api::GetWorkflowVersionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetWorkflowVersionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteWorkflowVersionsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::DeleteWorkflowVersionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteWorkflowVersionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchWorkflowVersionsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PatchWorkflowVersionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchWorkflowVersionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiWorkflowVersionResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiWorkflowVersionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiWorkflowVersionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleWorkflowVersionResponse*
Arena::CreateMaybeMessage< ::clarifai::api::SingleWorkflowVersionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleWorkflowVersionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostAppDuplicationsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostAppDuplicationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostAppDuplicationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetAppDuplicationRequest*
Arena::CreateMaybeMessage< ::clarifai::api::GetAppDuplicationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetAppDuplicationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListAppDuplicationsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListAppDuplicationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListAppDuplicationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiAppDuplicationsResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiAppDuplicationsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiAppDuplicationsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleAppDuplicationResponse*
Arena::CreateMaybeMessage< ::clarifai::api::SingleAppDuplicationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleAppDuplicationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostTasksRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostTasksRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostTasksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetTaskRequest*
Arena::CreateMaybeMessage< ::clarifai::api::GetTaskRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetTaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListTasksRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListTasksRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListTasksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchTasksRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PatchTasksRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchTasksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteTasksRequest*
Arena::CreateMaybeMessage< ::clarifai::api::DeleteTasksRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteTasksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiTaskResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiTaskResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiTaskResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleTaskResponse*
Arena::CreateMaybeMessage< ::clarifai::api::SingleTaskResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleTaskResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetTaskCountRequest*
Arena::CreateMaybeMessage< ::clarifai::api::GetTaskCountRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetTaskCountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleTaskCountResponse*
Arena::CreateMaybeMessage< ::clarifai::api::SingleTaskCountResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleTaskCountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostLabelOrdersRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostLabelOrdersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostLabelOrdersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetLabelOrderRequest*
Arena::CreateMaybeMessage< ::clarifai::api::GetLabelOrderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetLabelOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListLabelOrdersRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListLabelOrdersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListLabelOrdersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchLabelOrdersRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PatchLabelOrdersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchLabelOrdersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteLabelOrdersRequest*
Arena::CreateMaybeMessage< ::clarifai::api::DeleteLabelOrdersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteLabelOrdersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiLabelOrderResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiLabelOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiLabelOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleLabelOrderResponse*
Arena::CreateMaybeMessage< ::clarifai::api::SingleLabelOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleLabelOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostCollectorsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostCollectorsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostCollectorsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchCollectorsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PatchCollectorsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchCollectorsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteCollectorsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::DeleteCollectorsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteCollectorsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetCollectorRequest*
Arena::CreateMaybeMessage< ::clarifai::api::GetCollectorRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetCollectorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListCollectorsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListCollectorsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListCollectorsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiCollectorResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiCollectorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiCollectorResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleCollectorResponse*
Arena::CreateMaybeMessage< ::clarifai::api::SingleCollectorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleCollectorResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostStatValuesRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostStatValuesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostStatValuesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiStatValueResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiStatValueResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiStatValueResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostStatValuesAggregateRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostStatValuesAggregateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostStatValuesAggregateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiStatValueAggregateResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiStatValueAggregateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiStatValueAggregateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostTrendingMetricsViewRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostTrendingMetricsViewRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostTrendingMetricsViewRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListTrendingMetricsViewsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListTrendingMetricsViewsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListTrendingMetricsViewsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiTrendingMetricsViewResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiTrendingMetricsViewResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiTrendingMetricsViewResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetModuleRequest*
Arena::CreateMaybeMessage< ::clarifai::api::GetModuleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetModuleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListModulesRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListModulesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListModulesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostModulesRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostModulesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostModulesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchModulesRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PatchModulesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchModulesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteModulesRequest*
Arena::CreateMaybeMessage< ::clarifai::api::DeleteModulesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteModulesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleModuleResponse*
Arena::CreateMaybeMessage< ::clarifai::api::SingleModuleResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleModuleResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiModuleResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiModuleResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiModuleResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetModuleVersionRequest*
Arena::CreateMaybeMessage< ::clarifai::api::GetModuleVersionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetModuleVersionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListModuleVersionsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListModuleVersionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListModuleVersionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostModuleVersionsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostModuleVersionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostModuleVersionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteModuleVersionsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::DeleteModuleVersionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteModuleVersionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleModuleVersionResponse*
Arena::CreateMaybeMessage< ::clarifai::api::SingleModuleVersionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleModuleVersionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiModuleVersionResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiModuleVersionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiModuleVersionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetInstalledModuleVersionRequest*
Arena::CreateMaybeMessage< ::clarifai::api::GetInstalledModuleVersionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetInstalledModuleVersionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListInstalledModuleVersionsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListInstalledModuleVersionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListInstalledModuleVersionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostInstalledModuleVersionsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostInstalledModuleVersionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostInstalledModuleVersionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostInstalledModuleVersionsKeyRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostInstalledModuleVersionsKeyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostInstalledModuleVersionsKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteInstalledModuleVersionsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::DeleteInstalledModuleVersionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteInstalledModuleVersionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleInstalledModuleVersionResponse*
Arena::CreateMaybeMessage< ::clarifai::api::SingleInstalledModuleVersionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleInstalledModuleVersionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiInstalledModuleVersionResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiInstalledModuleVersionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiInstalledModuleVersionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostBulkOperationsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostBulkOperationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostBulkOperationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListBulkOperationsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListBulkOperationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListBulkOperationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetBulkOperationRequest*
Arena::CreateMaybeMessage< ::clarifai::api::GetBulkOperationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetBulkOperationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::CancelBulkOperationRequest*
Arena::CreateMaybeMessage< ::clarifai::api::CancelBulkOperationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::CancelBulkOperationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteBulkOperationRequest*
Arena::CreateMaybeMessage< ::clarifai::api::DeleteBulkOperationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteBulkOperationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleBulkOperationsResponse*
Arena::CreateMaybeMessage< ::clarifai::api::SingleBulkOperationsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleBulkOperationsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiBulkOperationsResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiBulkOperationsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiBulkOperationsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListInputsAddJobsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListInputsAddJobsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListInputsAddJobsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetInputsAddJobRequest*
Arena::CreateMaybeMessage< ::clarifai::api::GetInputsAddJobRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetInputsAddJobRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiInputsAddJobResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiInputsAddJobResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiInputsAddJobResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleInputsAddJobResponse*
Arena::CreateMaybeMessage< ::clarifai::api::SingleInputsAddJobResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleInputsAddJobResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostUploadsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostUploadsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostUploadsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteUploadsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::DeleteUploadsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteUploadsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListUploadsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListUploadsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListUploadsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetUploadRequest*
Arena::CreateMaybeMessage< ::clarifai::api::GetUploadRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetUploadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleUploadResponse*
Arena::CreateMaybeMessage< ::clarifai::api::SingleUploadResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleUploadResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiUploadResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiUploadResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiUploadResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PutUploadContentPartsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PutUploadContentPartsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PutUploadContentPartsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostInputsDataSourcesRequest*
Arena::CreateMaybeMessage< ::clarifai::api::PostInputsDataSourcesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostInputsDataSourcesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetInputsExtractionJobRequest*
Arena::CreateMaybeMessage< ::clarifai::api::GetInputsExtractionJobRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetInputsExtractionJobRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListInputsExtractionJobsRequest*
Arena::CreateMaybeMessage< ::clarifai::api::ListInputsExtractionJobsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListInputsExtractionJobsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleInputsExtractionJobResponse*
Arena::CreateMaybeMessage< ::clarifai::api::SingleInputsExtractionJobResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleInputsExtractionJobResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiInputsExtractionJobResponse*
Arena::CreateMaybeMessage< ::clarifai::api::MultiInputsExtractionJobResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiInputsExtractionJobResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
