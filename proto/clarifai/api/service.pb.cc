// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clarifai/api/service.proto

#include "proto/clarifai/api/service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace clarifai {
namespace api {
constexpr Pagination::Pagination(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : page_(0u)
  , per_page_(0u){}
struct PaginationDefaultTypeInternal {
  constexpr PaginationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PaginationDefaultTypeInternal() {}
  union {
    Pagination _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PaginationDefaultTypeInternal _Pagination_default_instance_;
constexpr GetAnnotationRequest::GetAnnotationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : annotation_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , input_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct GetAnnotationRequestDefaultTypeInternal {
  constexpr GetAnnotationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAnnotationRequestDefaultTypeInternal() {}
  union {
    GetAnnotationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAnnotationRequestDefaultTypeInternal _GetAnnotationRequest_default_instance_;
constexpr ListAnnotationsRequest::ListAnnotationsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ids_()
  , input_ids_()
  , statuses_()
  , user_ids_()
  , model_version_ids_()
  , task_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr)
  , page_(0u)
  , per_page_(0u)
  , list_all_annotations_(false)
  , return_model_output_(false){}
struct ListAnnotationsRequestDefaultTypeInternal {
  constexpr ListAnnotationsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListAnnotationsRequestDefaultTypeInternal() {}
  union {
    ListAnnotationsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListAnnotationsRequestDefaultTypeInternal _ListAnnotationsRequest_default_instance_;
constexpr PostAnnotationsRequest::PostAnnotationsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : annotations_()
  , user_app_id_(nullptr){}
struct PostAnnotationsRequestDefaultTypeInternal {
  constexpr PostAnnotationsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostAnnotationsRequestDefaultTypeInternal() {}
  union {
    PostAnnotationsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostAnnotationsRequestDefaultTypeInternal _PostAnnotationsRequest_default_instance_;
constexpr PatchAnnotationsRequest::PatchAnnotationsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : annotations_()
  , action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct PatchAnnotationsRequestDefaultTypeInternal {
  constexpr PatchAnnotationsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PatchAnnotationsRequestDefaultTypeInternal() {}
  union {
    PatchAnnotationsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PatchAnnotationsRequestDefaultTypeInternal _PatchAnnotationsRequest_default_instance_;
constexpr PatchAnnotationsStatusRequest::PatchAnnotationsStatusRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_ids_()
  , task_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr)
  , status_code_(0)
{}
struct PatchAnnotationsStatusRequestDefaultTypeInternal {
  constexpr PatchAnnotationsStatusRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PatchAnnotationsStatusRequestDefaultTypeInternal() {}
  union {
    PatchAnnotationsStatusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PatchAnnotationsStatusRequestDefaultTypeInternal _PatchAnnotationsStatusRequest_default_instance_;
constexpr PatchAnnotationsStatusResponse::PatchAnnotationsStatusResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_ids_()
  , status_(nullptr)
  , updated_count_(0u){}
struct PatchAnnotationsStatusResponseDefaultTypeInternal {
  constexpr PatchAnnotationsStatusResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PatchAnnotationsStatusResponseDefaultTypeInternal() {}
  union {
    PatchAnnotationsStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PatchAnnotationsStatusResponseDefaultTypeInternal _PatchAnnotationsStatusResponse_default_instance_;
constexpr DeleteAnnotationRequest::DeleteAnnotationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : input_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , annotation_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct DeleteAnnotationRequestDefaultTypeInternal {
  constexpr DeleteAnnotationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteAnnotationRequestDefaultTypeInternal() {}
  union {
    DeleteAnnotationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteAnnotationRequestDefaultTypeInternal _DeleteAnnotationRequest_default_instance_;
constexpr DeleteAnnotationsRequest::DeleteAnnotationsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ids_()
  , input_ids_()
  , user_app_id_(nullptr){}
struct DeleteAnnotationsRequestDefaultTypeInternal {
  constexpr DeleteAnnotationsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteAnnotationsRequestDefaultTypeInternal() {}
  union {
    DeleteAnnotationsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteAnnotationsRequestDefaultTypeInternal _DeleteAnnotationsRequest_default_instance_;
constexpr SingleAnnotationResponse::SingleAnnotationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(nullptr)
  , annotation_(nullptr){}
struct SingleAnnotationResponseDefaultTypeInternal {
  constexpr SingleAnnotationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SingleAnnotationResponseDefaultTypeInternal() {}
  union {
    SingleAnnotationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SingleAnnotationResponseDefaultTypeInternal _SingleAnnotationResponse_default_instance_;
constexpr MultiAnnotationResponse::MultiAnnotationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : annotations_()
  , status_(nullptr){}
struct MultiAnnotationResponseDefaultTypeInternal {
  constexpr MultiAnnotationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiAnnotationResponseDefaultTypeInternal() {}
  union {
    MultiAnnotationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiAnnotationResponseDefaultTypeInternal _MultiAnnotationResponse_default_instance_;
constexpr GetAppRequest::GetAppRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : additional_fields_()
  , user_app_id_(nullptr){}
struct GetAppRequestDefaultTypeInternal {
  constexpr GetAppRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAppRequestDefaultTypeInternal() {}
  union {
    GetAppRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAppRequestDefaultTypeInternal _GetAppRequest_default_instance_;
constexpr ListAppsRequest::ListAppsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : additional_fields_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , query_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr)
  , page_(0u)
  , per_page_(0u)
  , sort_ascending_(false)
  , featured_only_(false)
  , starred_only_(false)
  , _oneof_case_{}{}
struct ListAppsRequestDefaultTypeInternal {
  constexpr ListAppsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListAppsRequestDefaultTypeInternal() {}
  union {
    ListAppsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListAppsRequestDefaultTypeInternal _ListAppsRequest_default_instance_;
constexpr PostAppsRequest::PostAppsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : apps_()
  , user_app_id_(nullptr){}
struct PostAppsRequestDefaultTypeInternal {
  constexpr PostAppsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostAppsRequestDefaultTypeInternal() {}
  union {
    PostAppsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostAppsRequestDefaultTypeInternal _PostAppsRequest_default_instance_;
constexpr DeleteAppRequest::DeleteAppRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_app_id_(nullptr){}
struct DeleteAppRequestDefaultTypeInternal {
  constexpr DeleteAppRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteAppRequestDefaultTypeInternal() {}
  union {
    DeleteAppRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteAppRequestDefaultTypeInternal _DeleteAppRequest_default_instance_;
constexpr PatchAppsRequest::PatchAppsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : apps_()
  , action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr)
  , metadata_action_(nullptr)
  , reindex_(false){}
struct PatchAppsRequestDefaultTypeInternal {
  constexpr PatchAppsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PatchAppsRequestDefaultTypeInternal() {}
  union {
    PatchAppsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PatchAppsRequestDefaultTypeInternal _PatchAppsRequest_default_instance_;
constexpr PatchAppRequest::PatchAppRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr)
  , app_(nullptr)
  , metadata_action_(nullptr)
  , reindex_(false){}
struct PatchAppRequestDefaultTypeInternal {
  constexpr PatchAppRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PatchAppRequestDefaultTypeInternal() {}
  union {
    PatchAppRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PatchAppRequestDefaultTypeInternal _PatchAppRequest_default_instance_;
constexpr PatchAppsIdsRequest::PatchAppsIdsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ids_()
  , action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct PatchAppsIdsRequestDefaultTypeInternal {
  constexpr PatchAppsIdsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PatchAppsIdsRequestDefaultTypeInternal() {}
  union {
    PatchAppsIdsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PatchAppsIdsRequestDefaultTypeInternal _PatchAppsIdsRequest_default_instance_;
constexpr PostAppsSearchesRequest::PostAppsSearchesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_app_id_(nullptr)
  , app_query_(nullptr)
  , pagination_(nullptr){}
struct PostAppsSearchesRequestDefaultTypeInternal {
  constexpr PostAppsSearchesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostAppsSearchesRequestDefaultTypeInternal() {}
  union {
    PostAppsSearchesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostAppsSearchesRequestDefaultTypeInternal _PostAppsSearchesRequest_default_instance_;
constexpr SingleAppResponse::SingleAppResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(nullptr)
  , app_(nullptr){}
struct SingleAppResponseDefaultTypeInternal {
  constexpr SingleAppResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SingleAppResponseDefaultTypeInternal() {}
  union {
    SingleAppResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SingleAppResponseDefaultTypeInternal _SingleAppResponse_default_instance_;
constexpr MultiAppResponse::MultiAppResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : apps_()
  , status_(nullptr){}
struct MultiAppResponseDefaultTypeInternal {
  constexpr MultiAppResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiAppResponseDefaultTypeInternal() {}
  union {
    MultiAppResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiAppResponseDefaultTypeInternal _MultiAppResponse_default_instance_;
constexpr ListCollaboratorsRequest::ListCollaboratorsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_app_id_(nullptr)
  , list_all_collaborators_(false){}
struct ListCollaboratorsRequestDefaultTypeInternal {
  constexpr ListCollaboratorsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListCollaboratorsRequestDefaultTypeInternal() {}
  union {
    ListCollaboratorsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListCollaboratorsRequestDefaultTypeInternal _ListCollaboratorsRequest_default_instance_;
constexpr PostCollaboratorsRequest::PostCollaboratorsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : collaborators_()
  , user_app_id_(nullptr){}
struct PostCollaboratorsRequestDefaultTypeInternal {
  constexpr PostCollaboratorsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostCollaboratorsRequestDefaultTypeInternal() {}
  union {
    PostCollaboratorsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostCollaboratorsRequestDefaultTypeInternal _PostCollaboratorsRequest_default_instance_;
constexpr PatchCollaboratorsRequest::PatchCollaboratorsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : collaborators_()
  , action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct PatchCollaboratorsRequestDefaultTypeInternal {
  constexpr PatchCollaboratorsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PatchCollaboratorsRequestDefaultTypeInternal() {}
  union {
    PatchCollaboratorsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PatchCollaboratorsRequestDefaultTypeInternal _PatchCollaboratorsRequest_default_instance_;
constexpr DeleteCollaboratorsRequest::DeleteCollaboratorsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : collaborator_ids_()
  , user_emails_()
  , user_app_id_(nullptr){}
struct DeleteCollaboratorsRequestDefaultTypeInternal {
  constexpr DeleteCollaboratorsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteCollaboratorsRequestDefaultTypeInternal() {}
  union {
    DeleteCollaboratorsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteCollaboratorsRequestDefaultTypeInternal _DeleteCollaboratorsRequest_default_instance_;
constexpr MultiCollaboratorsResponse::MultiCollaboratorsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : collaborators_()
  , status_(nullptr){}
struct MultiCollaboratorsResponseDefaultTypeInternal {
  constexpr MultiCollaboratorsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiCollaboratorsResponseDefaultTypeInternal() {}
  union {
    MultiCollaboratorsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiCollaboratorsResponseDefaultTypeInternal _MultiCollaboratorsResponse_default_instance_;
constexpr ListCollaborationsRequest::ListCollaborationsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_app_id_(nullptr)
  , page_(0u)
  , per_page_(0u){}
struct ListCollaborationsRequestDefaultTypeInternal {
  constexpr ListCollaborationsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListCollaborationsRequestDefaultTypeInternal() {}
  union {
    ListCollaborationsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListCollaborationsRequestDefaultTypeInternal _ListCollaborationsRequest_default_instance_;
constexpr MultiCollaborationsResponse::MultiCollaborationsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : collaborations_()
  , status_(nullptr){}
struct MultiCollaborationsResponseDefaultTypeInternal {
  constexpr MultiCollaborationsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiCollaborationsResponseDefaultTypeInternal() {}
  union {
    MultiCollaborationsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiCollaborationsResponseDefaultTypeInternal _MultiCollaborationsResponse_default_instance_;
constexpr GetStatusCodeRequest::GetStatusCodeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_code_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetStatusCodeRequestDefaultTypeInternal {
  constexpr GetStatusCodeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetStatusCodeRequestDefaultTypeInternal() {}
  union {
    GetStatusCodeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetStatusCodeRequestDefaultTypeInternal _GetStatusCodeRequest_default_instance_;
constexpr ListStatusCodesRequest::ListStatusCodesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ListStatusCodesRequestDefaultTypeInternal {
  constexpr ListStatusCodesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListStatusCodesRequestDefaultTypeInternal() {}
  union {
    ListStatusCodesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListStatusCodesRequestDefaultTypeInternal _ListStatusCodesRequest_default_instance_;
constexpr SingleStatusCodeResponse::SingleStatusCodeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(nullptr){}
struct SingleStatusCodeResponseDefaultTypeInternal {
  constexpr SingleStatusCodeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SingleStatusCodeResponseDefaultTypeInternal() {}
  union {
    SingleStatusCodeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SingleStatusCodeResponseDefaultTypeInternal _SingleStatusCodeResponse_default_instance_;
constexpr MultiStatusCodeResponse::MultiStatusCodeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : statuses_()
  , status_(nullptr){}
struct MultiStatusCodeResponseDefaultTypeInternal {
  constexpr MultiStatusCodeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiStatusCodeResponseDefaultTypeInternal() {}
  union {
    MultiStatusCodeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiStatusCodeResponseDefaultTypeInternal _MultiStatusCodeResponse_default_instance_;
constexpr GetConceptRequest::GetConceptRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : concept_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct GetConceptRequestDefaultTypeInternal {
  constexpr GetConceptRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetConceptRequestDefaultTypeInternal() {}
  union {
    GetConceptRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetConceptRequestDefaultTypeInternal _GetConceptRequest_default_instance_;
constexpr ListConceptsRequest::ListConceptsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_app_id_(nullptr)
  , page_(0u)
  , per_page_(0u){}
struct ListConceptsRequestDefaultTypeInternal {
  constexpr ListConceptsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListConceptsRequestDefaultTypeInternal() {}
  union {
    ListConceptsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListConceptsRequestDefaultTypeInternal _ListConceptsRequest_default_instance_;
constexpr PostConceptsSearchesRequest::PostConceptsSearchesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_app_id_(nullptr)
  , concept_query_(nullptr)
  , pagination_(nullptr){}
struct PostConceptsSearchesRequestDefaultTypeInternal {
  constexpr PostConceptsSearchesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostConceptsSearchesRequestDefaultTypeInternal() {}
  union {
    PostConceptsSearchesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostConceptsSearchesRequestDefaultTypeInternal _PostConceptsSearchesRequest_default_instance_;
constexpr PostConceptsRequest::PostConceptsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : concepts_()
  , user_app_id_(nullptr){}
struct PostConceptsRequestDefaultTypeInternal {
  constexpr PostConceptsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostConceptsRequestDefaultTypeInternal() {}
  union {
    PostConceptsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostConceptsRequestDefaultTypeInternal _PostConceptsRequest_default_instance_;
constexpr PatchConceptsRequest::PatchConceptsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : concepts_()
  , action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct PatchConceptsRequestDefaultTypeInternal {
  constexpr PatchConceptsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PatchConceptsRequestDefaultTypeInternal() {}
  union {
    PatchConceptsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PatchConceptsRequestDefaultTypeInternal _PatchConceptsRequest_default_instance_;
constexpr GetConceptCountsRequest::GetConceptCountsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_app_id_(nullptr)
  , page_(0u)
  , per_page_(0u){}
struct GetConceptCountsRequestDefaultTypeInternal {
  constexpr GetConceptCountsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetConceptCountsRequestDefaultTypeInternal() {}
  union {
    GetConceptCountsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetConceptCountsRequestDefaultTypeInternal _GetConceptCountsRequest_default_instance_;
constexpr SingleConceptResponse::SingleConceptResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(nullptr)
  , concept_(nullptr){}
struct SingleConceptResponseDefaultTypeInternal {
  constexpr SingleConceptResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SingleConceptResponseDefaultTypeInternal() {}
  union {
    SingleConceptResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SingleConceptResponseDefaultTypeInternal _SingleConceptResponse_default_instance_;
constexpr MultiConceptResponse::MultiConceptResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : concepts_()
  , status_(nullptr){}
struct MultiConceptResponseDefaultTypeInternal {
  constexpr MultiConceptResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiConceptResponseDefaultTypeInternal() {}
  union {
    MultiConceptResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiConceptResponseDefaultTypeInternal _MultiConceptResponse_default_instance_;
constexpr MultiConceptCountResponse::MultiConceptCountResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : concept_counts_()
  , status_(nullptr){}
struct MultiConceptCountResponseDefaultTypeInternal {
  constexpr MultiConceptCountResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiConceptCountResponseDefaultTypeInternal() {}
  union {
    MultiConceptCountResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiConceptCountResponseDefaultTypeInternal _MultiConceptCountResponse_default_instance_;
constexpr ListConceptRelationsRequest::ListConceptRelationsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : concept_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , predicate_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , knowledge_graph_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr)
  , page_(0u)
  , per_page_(0u){}
struct ListConceptRelationsRequestDefaultTypeInternal {
  constexpr ListConceptRelationsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListConceptRelationsRequestDefaultTypeInternal() {}
  union {
    ListConceptRelationsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListConceptRelationsRequestDefaultTypeInternal _ListConceptRelationsRequest_default_instance_;
constexpr PostConceptRelationsRequest::PostConceptRelationsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : concept_relations_()
  , concept_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct PostConceptRelationsRequestDefaultTypeInternal {
  constexpr PostConceptRelationsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostConceptRelationsRequestDefaultTypeInternal() {}
  union {
    PostConceptRelationsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostConceptRelationsRequestDefaultTypeInternal _PostConceptRelationsRequest_default_instance_;
constexpr DeleteConceptRelationsRequest::DeleteConceptRelationsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ids_()
  , concept_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct DeleteConceptRelationsRequestDefaultTypeInternal {
  constexpr DeleteConceptRelationsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteConceptRelationsRequestDefaultTypeInternal() {}
  union {
    DeleteConceptRelationsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteConceptRelationsRequestDefaultTypeInternal _DeleteConceptRelationsRequest_default_instance_;
constexpr ListKnowledgeGraphsRequest::ListKnowledgeGraphsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_app_id_(nullptr){}
struct ListKnowledgeGraphsRequestDefaultTypeInternal {
  constexpr ListKnowledgeGraphsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListKnowledgeGraphsRequestDefaultTypeInternal() {}
  union {
    ListKnowledgeGraphsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListKnowledgeGraphsRequestDefaultTypeInternal _ListKnowledgeGraphsRequest_default_instance_;
constexpr PostKnowledgeGraphsRequest::PostKnowledgeGraphsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : knowledge_graphs_()
  , user_app_id_(nullptr){}
struct PostKnowledgeGraphsRequestDefaultTypeInternal {
  constexpr PostKnowledgeGraphsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostKnowledgeGraphsRequestDefaultTypeInternal() {}
  union {
    PostKnowledgeGraphsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostKnowledgeGraphsRequestDefaultTypeInternal _PostKnowledgeGraphsRequest_default_instance_;
constexpr PostConceptMappingJobsRequest::PostConceptMappingJobsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : concept_mapping_jobs_()
  , user_app_id_(nullptr){}
struct PostConceptMappingJobsRequestDefaultTypeInternal {
  constexpr PostConceptMappingJobsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostConceptMappingJobsRequestDefaultTypeInternal() {}
  union {
    PostConceptMappingJobsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostConceptMappingJobsRequestDefaultTypeInternal _PostConceptMappingJobsRequest_default_instance_;
constexpr MultiConceptRelationResponse::MultiConceptRelationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : concept_relations_()
  , status_(nullptr){}
struct MultiConceptRelationResponseDefaultTypeInternal {
  constexpr MultiConceptRelationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiConceptRelationResponseDefaultTypeInternal() {}
  union {
    MultiConceptRelationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiConceptRelationResponseDefaultTypeInternal _MultiConceptRelationResponse_default_instance_;
constexpr MultiKnowledgeGraphResponse::MultiKnowledgeGraphResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : knowledge_graphs_()
  , status_(nullptr){}
struct MultiKnowledgeGraphResponseDefaultTypeInternal {
  constexpr MultiKnowledgeGraphResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiKnowledgeGraphResponseDefaultTypeInternal() {}
  union {
    MultiKnowledgeGraphResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiKnowledgeGraphResponseDefaultTypeInternal _MultiKnowledgeGraphResponse_default_instance_;
constexpr MultiConceptMappingJobResponse::MultiConceptMappingJobResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ids_()
  , status_(nullptr){}
struct MultiConceptMappingJobResponseDefaultTypeInternal {
  constexpr MultiConceptMappingJobResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiConceptMappingJobResponseDefaultTypeInternal() {}
  union {
    MultiConceptMappingJobResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiConceptMappingJobResponseDefaultTypeInternal _MultiConceptMappingJobResponse_default_instance_;
constexpr GetConceptLanguageRequest::GetConceptLanguageRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : concept_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct GetConceptLanguageRequestDefaultTypeInternal {
  constexpr GetConceptLanguageRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetConceptLanguageRequestDefaultTypeInternal() {}
  union {
    GetConceptLanguageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetConceptLanguageRequestDefaultTypeInternal _GetConceptLanguageRequest_default_instance_;
constexpr ListConceptLanguagesRequest::ListConceptLanguagesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : concept_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr)
  , page_(0u)
  , per_page_(0u){}
struct ListConceptLanguagesRequestDefaultTypeInternal {
  constexpr ListConceptLanguagesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListConceptLanguagesRequestDefaultTypeInternal() {}
  union {
    ListConceptLanguagesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListConceptLanguagesRequestDefaultTypeInternal _ListConceptLanguagesRequest_default_instance_;
constexpr PatchConceptLanguagesRequest::PatchConceptLanguagesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : concept_languages_()
  , concept_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct PatchConceptLanguagesRequestDefaultTypeInternal {
  constexpr PatchConceptLanguagesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PatchConceptLanguagesRequestDefaultTypeInternal() {}
  union {
    PatchConceptLanguagesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PatchConceptLanguagesRequestDefaultTypeInternal _PatchConceptLanguagesRequest_default_instance_;
constexpr PostConceptLanguagesRequest::PostConceptLanguagesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : concept_languages_()
  , concept_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct PostConceptLanguagesRequestDefaultTypeInternal {
  constexpr PostConceptLanguagesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostConceptLanguagesRequestDefaultTypeInternal() {}
  union {
    PostConceptLanguagesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostConceptLanguagesRequestDefaultTypeInternal _PostConceptLanguagesRequest_default_instance_;
constexpr SingleConceptLanguageResponse::SingleConceptLanguageResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(nullptr)
  , concept_language_(nullptr){}
struct SingleConceptLanguageResponseDefaultTypeInternal {
  constexpr SingleConceptLanguageResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SingleConceptLanguageResponseDefaultTypeInternal() {}
  union {
    SingleConceptLanguageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SingleConceptLanguageResponseDefaultTypeInternal _SingleConceptLanguageResponse_default_instance_;
constexpr MultiConceptLanguageResponse::MultiConceptLanguageResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : concept_languages_()
  , status_(nullptr){}
struct MultiConceptLanguageResponseDefaultTypeInternal {
  constexpr MultiConceptLanguageResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiConceptLanguageResponseDefaultTypeInternal() {}
  union {
    MultiConceptLanguageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiConceptLanguageResponseDefaultTypeInternal _MultiConceptLanguageResponse_default_instance_;
constexpr GetInputRequest::GetInputRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : input_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct GetInputRequestDefaultTypeInternal {
  constexpr GetInputRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetInputRequestDefaultTypeInternal() {}
  union {
    GetInputRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetInputRequestDefaultTypeInternal _GetInputRequest_default_instance_;
constexpr GetInputSamplesRequest::GetInputSamplesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_ids_()
  , task_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct GetInputSamplesRequestDefaultTypeInternal {
  constexpr GetInputSamplesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetInputSamplesRequestDefaultTypeInternal() {}
  union {
    GetInputSamplesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetInputSamplesRequestDefaultTypeInternal _GetInputSamplesRequest_default_instance_;
constexpr ListInputsRequest::ListInputsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ids_()
  , user_app_id_(nullptr)
  , status_(nullptr)
  , page_(0u)
  , per_page_(0u){}
struct ListInputsRequestDefaultTypeInternal {
  constexpr ListInputsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListInputsRequestDefaultTypeInternal() {}
  union {
    ListInputsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListInputsRequestDefaultTypeInternal _ListInputsRequest_default_instance_;
constexpr StreamInputsRequest::StreamInputsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : last_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr)
  , per_page_(0u)
  , order_by_id_(false)
  , descending_(false){}
struct StreamInputsRequestDefaultTypeInternal {
  constexpr StreamInputsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamInputsRequestDefaultTypeInternal() {}
  union {
    StreamInputsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamInputsRequestDefaultTypeInternal _StreamInputsRequest_default_instance_;
constexpr PostInputsRequest::PostInputsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : inputs_()
  , user_app_id_(nullptr){}
struct PostInputsRequestDefaultTypeInternal {
  constexpr PostInputsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostInputsRequestDefaultTypeInternal() {}
  union {
    PostInputsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostInputsRequestDefaultTypeInternal _PostInputsRequest_default_instance_;
constexpr PatchInputsRequest::PatchInputsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : inputs_()
  , action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct PatchInputsRequestDefaultTypeInternal {
  constexpr PatchInputsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PatchInputsRequestDefaultTypeInternal() {}
  union {
    PatchInputsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PatchInputsRequestDefaultTypeInternal _PatchInputsRequest_default_instance_;
constexpr DeleteInputRequest::DeleteInputRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : input_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct DeleteInputRequestDefaultTypeInternal {
  constexpr DeleteInputRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteInputRequestDefaultTypeInternal() {}
  union {
    DeleteInputRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteInputRequestDefaultTypeInternal _DeleteInputRequest_default_instance_;
constexpr DeleteInputsRequest::DeleteInputsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ids_()
  , user_app_id_(nullptr){}
struct DeleteInputsRequestDefaultTypeInternal {
  constexpr DeleteInputsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteInputsRequestDefaultTypeInternal() {}
  union {
    DeleteInputsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteInputsRequestDefaultTypeInternal _DeleteInputsRequest_default_instance_;
constexpr SingleInputResponse::SingleInputResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(nullptr)
  , input_(nullptr){}
struct SingleInputResponseDefaultTypeInternal {
  constexpr SingleInputResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SingleInputResponseDefaultTypeInternal() {}
  union {
    SingleInputResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SingleInputResponseDefaultTypeInternal _SingleInputResponse_default_instance_;
constexpr MultiInputResponse::MultiInputResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : inputs_()
  , status_(nullptr){}
struct MultiInputResponseDefaultTypeInternal {
  constexpr MultiInputResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiInputResponseDefaultTypeInternal() {}
  union {
    MultiInputResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiInputResponseDefaultTypeInternal _MultiInputResponse_default_instance_;
constexpr MultiInputAnnotationResponse::MultiInputAnnotationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hits_()
  , status_(nullptr){}
struct MultiInputAnnotationResponseDefaultTypeInternal {
  constexpr MultiInputAnnotationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiInputAnnotationResponseDefaultTypeInternal() {}
  union {
    MultiInputAnnotationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiInputAnnotationResponseDefaultTypeInternal _MultiInputAnnotationResponse_default_instance_;
constexpr SingleInputCountResponse::SingleInputCountResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(nullptr)
  , counts_(nullptr){}
struct SingleInputCountResponseDefaultTypeInternal {
  constexpr SingleInputCountResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SingleInputCountResponseDefaultTypeInternal() {}
  union {
    SingleInputCountResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SingleInputCountResponseDefaultTypeInternal _SingleInputCountResponse_default_instance_;
constexpr GetInputCountRequest::GetInputCountRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_app_id_(nullptr){}
struct GetInputCountRequestDefaultTypeInternal {
  constexpr GetInputCountRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetInputCountRequestDefaultTypeInternal() {}
  union {
    GetInputCountRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetInputCountRequestDefaultTypeInternal _GetInputCountRequest_default_instance_;
constexpr ListDatasetsRequest::ListDatasetsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_app_id_(nullptr)
  , page_(0u)
  , per_page_(0u){}
struct ListDatasetsRequestDefaultTypeInternal {
  constexpr ListDatasetsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListDatasetsRequestDefaultTypeInternal() {}
  union {
    ListDatasetsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListDatasetsRequestDefaultTypeInternal _ListDatasetsRequest_default_instance_;
constexpr GetDatasetRequest::GetDatasetRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dataset_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct GetDatasetRequestDefaultTypeInternal {
  constexpr GetDatasetRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetDatasetRequestDefaultTypeInternal() {}
  union {
    GetDatasetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetDatasetRequestDefaultTypeInternal _GetDatasetRequest_default_instance_;
constexpr PostDatasetsRequest::PostDatasetsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : datasets_()
  , user_app_id_(nullptr){}
struct PostDatasetsRequestDefaultTypeInternal {
  constexpr PostDatasetsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostDatasetsRequestDefaultTypeInternal() {}
  union {
    PostDatasetsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostDatasetsRequestDefaultTypeInternal _PostDatasetsRequest_default_instance_;
constexpr PatchDatasetsRequest::PatchDatasetsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : datasets_()
  , action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct PatchDatasetsRequestDefaultTypeInternal {
  constexpr PatchDatasetsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PatchDatasetsRequestDefaultTypeInternal() {}
  union {
    PatchDatasetsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PatchDatasetsRequestDefaultTypeInternal _PatchDatasetsRequest_default_instance_;
constexpr DeleteDatasetsRequest::DeleteDatasetsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dataset_ids_()
  , user_app_id_(nullptr){}
struct DeleteDatasetsRequestDefaultTypeInternal {
  constexpr DeleteDatasetsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteDatasetsRequestDefaultTypeInternal() {}
  union {
    DeleteDatasetsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteDatasetsRequestDefaultTypeInternal _DeleteDatasetsRequest_default_instance_;
constexpr MultiDatasetResponse::MultiDatasetResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : datasets_()
  , status_(nullptr){}
struct MultiDatasetResponseDefaultTypeInternal {
  constexpr MultiDatasetResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiDatasetResponseDefaultTypeInternal() {}
  union {
    MultiDatasetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiDatasetResponseDefaultTypeInternal _MultiDatasetResponse_default_instance_;
constexpr SingleDatasetResponse::SingleDatasetResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(nullptr)
  , dataset_(nullptr){}
struct SingleDatasetResponseDefaultTypeInternal {
  constexpr SingleDatasetResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SingleDatasetResponseDefaultTypeInternal() {}
  union {
    SingleDatasetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SingleDatasetResponseDefaultTypeInternal _SingleDatasetResponse_default_instance_;
constexpr ListDatasetInputsRequest::ListDatasetInputsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dataset_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr)
  , page_(0u)
  , per_page_(0u){}
struct ListDatasetInputsRequestDefaultTypeInternal {
  constexpr ListDatasetInputsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListDatasetInputsRequestDefaultTypeInternal() {}
  union {
    ListDatasetInputsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListDatasetInputsRequestDefaultTypeInternal _ListDatasetInputsRequest_default_instance_;
constexpr GetDatasetInputRequest::GetDatasetInputRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dataset_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , input_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct GetDatasetInputRequestDefaultTypeInternal {
  constexpr GetDatasetInputRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetDatasetInputRequestDefaultTypeInternal() {}
  union {
    GetDatasetInputRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetDatasetInputRequestDefaultTypeInternal _GetDatasetInputRequest_default_instance_;
constexpr PostDatasetInputsRequest::PostDatasetInputsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dataset_inputs_()
  , dataset_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr)
  , search_(nullptr){}
struct PostDatasetInputsRequestDefaultTypeInternal {
  constexpr PostDatasetInputsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostDatasetInputsRequestDefaultTypeInternal() {}
  union {
    PostDatasetInputsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostDatasetInputsRequestDefaultTypeInternal _PostDatasetInputsRequest_default_instance_;
constexpr DeleteDatasetInputsRequest::DeleteDatasetInputsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : input_ids_()
  , dataset_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct DeleteDatasetInputsRequestDefaultTypeInternal {
  constexpr DeleteDatasetInputsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteDatasetInputsRequestDefaultTypeInternal() {}
  union {
    DeleteDatasetInputsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteDatasetInputsRequestDefaultTypeInternal _DeleteDatasetInputsRequest_default_instance_;
constexpr MultiDatasetInputResponse::MultiDatasetInputResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dataset_inputs_()
  , status_(nullptr)
  , dataset_inputs_search_add_job_(nullptr){}
struct MultiDatasetInputResponseDefaultTypeInternal {
  constexpr MultiDatasetInputResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiDatasetInputResponseDefaultTypeInternal() {}
  union {
    MultiDatasetInputResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiDatasetInputResponseDefaultTypeInternal _MultiDatasetInputResponse_default_instance_;
constexpr SingleDatasetInputResponse::SingleDatasetInputResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(nullptr)
  , dataset_input_(nullptr){}
struct SingleDatasetInputResponseDefaultTypeInternal {
  constexpr SingleDatasetInputResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SingleDatasetInputResponseDefaultTypeInternal() {}
  union {
    SingleDatasetInputResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SingleDatasetInputResponseDefaultTypeInternal _SingleDatasetInputResponse_default_instance_;
constexpr ListDatasetVersionsRequest::ListDatasetVersionsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dataset_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr)
  , page_(0u)
  , per_page_(0u){}
struct ListDatasetVersionsRequestDefaultTypeInternal {
  constexpr ListDatasetVersionsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListDatasetVersionsRequestDefaultTypeInternal() {}
  union {
    ListDatasetVersionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListDatasetVersionsRequestDefaultTypeInternal _ListDatasetVersionsRequest_default_instance_;
constexpr GetDatasetVersionRequest::GetDatasetVersionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dataset_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dataset_version_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct GetDatasetVersionRequestDefaultTypeInternal {
  constexpr GetDatasetVersionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetDatasetVersionRequestDefaultTypeInternal() {}
  union {
    GetDatasetVersionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetDatasetVersionRequestDefaultTypeInternal _GetDatasetVersionRequest_default_instance_;
constexpr ListDatasetVersionMetricsGroupsRequest::ListDatasetVersionMetricsGroupsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_paths_()
  , types_()
  , _types_cached_byte_size_(0)
  , values_()
  , dataset_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dataset_version_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr)
  , page_(0u)
  , per_page_(0u){}
struct ListDatasetVersionMetricsGroupsRequestDefaultTypeInternal {
  constexpr ListDatasetVersionMetricsGroupsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListDatasetVersionMetricsGroupsRequestDefaultTypeInternal() {}
  union {
    ListDatasetVersionMetricsGroupsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListDatasetVersionMetricsGroupsRequestDefaultTypeInternal _ListDatasetVersionMetricsGroupsRequest_default_instance_;
constexpr PostDatasetVersionsRequest::PostDatasetVersionsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dataset_versions_()
  , dataset_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct PostDatasetVersionsRequestDefaultTypeInternal {
  constexpr PostDatasetVersionsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostDatasetVersionsRequestDefaultTypeInternal() {}
  union {
    PostDatasetVersionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostDatasetVersionsRequestDefaultTypeInternal _PostDatasetVersionsRequest_default_instance_;
constexpr PatchDatasetVersionsRequest::PatchDatasetVersionsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dataset_versions_()
  , dataset_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct PatchDatasetVersionsRequestDefaultTypeInternal {
  constexpr PatchDatasetVersionsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PatchDatasetVersionsRequestDefaultTypeInternal() {}
  union {
    PatchDatasetVersionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PatchDatasetVersionsRequestDefaultTypeInternal _PatchDatasetVersionsRequest_default_instance_;
constexpr DeleteDatasetVersionsRequest::DeleteDatasetVersionsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dataset_version_ids_()
  , dataset_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct DeleteDatasetVersionsRequestDefaultTypeInternal {
  constexpr DeleteDatasetVersionsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteDatasetVersionsRequestDefaultTypeInternal() {}
  union {
    DeleteDatasetVersionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteDatasetVersionsRequestDefaultTypeInternal _DeleteDatasetVersionsRequest_default_instance_;
constexpr MultiDatasetVersionResponse::MultiDatasetVersionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dataset_versions_()
  , status_(nullptr){}
struct MultiDatasetVersionResponseDefaultTypeInternal {
  constexpr MultiDatasetVersionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiDatasetVersionResponseDefaultTypeInternal() {}
  union {
    MultiDatasetVersionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiDatasetVersionResponseDefaultTypeInternal _MultiDatasetVersionResponse_default_instance_;
constexpr MultiDatasetVersionMetricsGroupResponse::MultiDatasetVersionMetricsGroupResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dataset_version_metrics_groups_()
  , status_(nullptr){}
struct MultiDatasetVersionMetricsGroupResponseDefaultTypeInternal {
  constexpr MultiDatasetVersionMetricsGroupResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiDatasetVersionMetricsGroupResponseDefaultTypeInternal() {}
  union {
    MultiDatasetVersionMetricsGroupResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiDatasetVersionMetricsGroupResponseDefaultTypeInternal _MultiDatasetVersionMetricsGroupResponse_default_instance_;
constexpr SingleDatasetVersionResponse::SingleDatasetVersionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(nullptr)
  , dataset_version_(nullptr){}
struct SingleDatasetVersionResponseDefaultTypeInternal {
  constexpr SingleDatasetVersionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SingleDatasetVersionResponseDefaultTypeInternal() {}
  union {
    SingleDatasetVersionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SingleDatasetVersionResponseDefaultTypeInternal _SingleDatasetVersionResponse_default_instance_;
constexpr GetDatasetInputsSearchAddJobRequest::GetDatasetInputsSearchAddJobRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : job_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct GetDatasetInputsSearchAddJobRequestDefaultTypeInternal {
  constexpr GetDatasetInputsSearchAddJobRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetDatasetInputsSearchAddJobRequestDefaultTypeInternal() {}
  union {
    GetDatasetInputsSearchAddJobRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetDatasetInputsSearchAddJobRequestDefaultTypeInternal _GetDatasetInputsSearchAddJobRequest_default_instance_;
constexpr SingleDatasetInputsSearchAddJobResponse::SingleDatasetInputsSearchAddJobResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(nullptr)
  , job_(nullptr){}
struct SingleDatasetInputsSearchAddJobResponseDefaultTypeInternal {
  constexpr SingleDatasetInputsSearchAddJobResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SingleDatasetInputsSearchAddJobResponseDefaultTypeInternal() {}
  union {
    SingleDatasetInputsSearchAddJobResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SingleDatasetInputsSearchAddJobResponseDefaultTypeInternal _SingleDatasetInputsSearchAddJobResponse_default_instance_;
constexpr PostModelOutputsRequest::PostModelOutputsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : inputs_()
  , model_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr)
  , model_(nullptr){}
struct PostModelOutputsRequestDefaultTypeInternal {
  constexpr PostModelOutputsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostModelOutputsRequestDefaultTypeInternal() {}
  union {
    PostModelOutputsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostModelOutputsRequestDefaultTypeInternal _PostModelOutputsRequest_default_instance_;
constexpr ListModelInputsRequest::ListModelInputsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr)
  , page_(0u)
  , per_page_(0u){}
struct ListModelInputsRequestDefaultTypeInternal {
  constexpr ListModelInputsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListModelInputsRequestDefaultTypeInternal() {}
  union {
    ListModelInputsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListModelInputsRequestDefaultTypeInternal _ListModelInputsRequest_default_instance_;
constexpr GetKeyRequest::GetKeyRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct GetKeyRequestDefaultTypeInternal {
  constexpr GetKeyRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetKeyRequestDefaultTypeInternal() {}
  union {
    GetKeyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetKeyRequestDefaultTypeInternal _GetKeyRequest_default_instance_;
constexpr ListKeysRequest::ListKeysRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_app_id_(nullptr)
  , page_(0u)
  , per_page_(0u){}
struct ListKeysRequestDefaultTypeInternal {
  constexpr ListKeysRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListKeysRequestDefaultTypeInternal() {}
  union {
    ListKeysRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListKeysRequestDefaultTypeInternal _ListKeysRequest_default_instance_;
constexpr ListAppKeysRequest::ListAppKeysRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_app_id_(nullptr)
  , page_(0u)
  , per_page_(0u){}
struct ListAppKeysRequestDefaultTypeInternal {
  constexpr ListAppKeysRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListAppKeysRequestDefaultTypeInternal() {}
  union {
    ListAppKeysRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListAppKeysRequestDefaultTypeInternal _ListAppKeysRequest_default_instance_;
constexpr PostKeysRequest::PostKeysRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : keys_()
  , user_app_id_(nullptr){}
struct PostKeysRequestDefaultTypeInternal {
  constexpr PostKeysRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostKeysRequestDefaultTypeInternal() {}
  union {
    PostKeysRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostKeysRequestDefaultTypeInternal _PostKeysRequest_default_instance_;
constexpr DeleteKeyRequest::DeleteKeyRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct DeleteKeyRequestDefaultTypeInternal {
  constexpr DeleteKeyRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteKeyRequestDefaultTypeInternal() {}
  union {
    DeleteKeyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteKeyRequestDefaultTypeInternal _DeleteKeyRequest_default_instance_;
constexpr PatchKeysRequest::PatchKeysRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : keys_()
  , action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct PatchKeysRequestDefaultTypeInternal {
  constexpr PatchKeysRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PatchKeysRequestDefaultTypeInternal() {}
  union {
    PatchKeysRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PatchKeysRequestDefaultTypeInternal _PatchKeysRequest_default_instance_;
constexpr SingleKeyResponse::SingleKeyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(nullptr)
  , key_(nullptr){}
struct SingleKeyResponseDefaultTypeInternal {
  constexpr SingleKeyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SingleKeyResponseDefaultTypeInternal() {}
  union {
    SingleKeyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SingleKeyResponseDefaultTypeInternal _SingleKeyResponse_default_instance_;
constexpr MultiKeyResponse::MultiKeyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : keys_()
  , status_(nullptr){}
struct MultiKeyResponseDefaultTypeInternal {
  constexpr MultiKeyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiKeyResponseDefaultTypeInternal() {}
  union {
    MultiKeyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiKeyResponseDefaultTypeInternal _MultiKeyResponse_default_instance_;
constexpr GetModelRequest::GetModelRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : additional_fields_()
  , model_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr)
  , trained_before_(false){}
struct GetModelRequestDefaultTypeInternal {
  constexpr GetModelRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetModelRequestDefaultTypeInternal() {}
  union {
    GetModelRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetModelRequestDefaultTypeInternal _GetModelRequest_default_instance_;
constexpr ListModelsRequest::ListModelsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : input_fields_()
  , output_fields_()
  , toolkits_()
  , use_cases_()
  , additional_fields_()
  , languages_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , model_type_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , query_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , license_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr)
  , page_(0u)
  , per_page_(0u)
  , sort_ascending_(false)
  , filter_by_user_id_(false)
  , trained_only_(false)
  , featured_only_(false)
  , starred_only_(false)
  , _oneof_case_{}{}
struct ListModelsRequestDefaultTypeInternal {
  constexpr ListModelsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListModelsRequestDefaultTypeInternal() {}
  union {
    ListModelsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListModelsRequestDefaultTypeInternal _ListModelsRequest_default_instance_;
constexpr PatchModelToolkitsRequest::PatchModelToolkitsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : toolkits_()
  , model_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct PatchModelToolkitsRequestDefaultTypeInternal {
  constexpr PatchModelToolkitsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PatchModelToolkitsRequestDefaultTypeInternal() {}
  union {
    PatchModelToolkitsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PatchModelToolkitsRequestDefaultTypeInternal _PatchModelToolkitsRequest_default_instance_;
constexpr PatchModelUseCasesRequest::PatchModelUseCasesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : usecases_()
  , model_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct PatchModelUseCasesRequestDefaultTypeInternal {
  constexpr PatchModelUseCasesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PatchModelUseCasesRequestDefaultTypeInternal() {}
  union {
    PatchModelUseCasesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PatchModelUseCasesRequestDefaultTypeInternal _PatchModelUseCasesRequest_default_instance_;
constexpr PatchModelLanguagesRequest::PatchModelLanguagesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : languages_()
  , model_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct PatchModelLanguagesRequestDefaultTypeInternal {
  constexpr PatchModelLanguagesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PatchModelLanguagesRequestDefaultTypeInternal() {}
  union {
    PatchModelLanguagesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PatchModelLanguagesRequestDefaultTypeInternal _PatchModelLanguagesRequest_default_instance_;
constexpr MultiModelToolkitResponse::MultiModelToolkitResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : toolkits_()
  , status_(nullptr){}
struct MultiModelToolkitResponseDefaultTypeInternal {
  constexpr MultiModelToolkitResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiModelToolkitResponseDefaultTypeInternal() {}
  union {
    MultiModelToolkitResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiModelToolkitResponseDefaultTypeInternal _MultiModelToolkitResponse_default_instance_;
constexpr MultiModelUseCaseResponse::MultiModelUseCaseResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : usecases_()
  , status_(nullptr){}
struct MultiModelUseCaseResponseDefaultTypeInternal {
  constexpr MultiModelUseCaseResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiModelUseCaseResponseDefaultTypeInternal() {}
  union {
    MultiModelUseCaseResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiModelUseCaseResponseDefaultTypeInternal _MultiModelUseCaseResponse_default_instance_;
constexpr MultiModelLanguageResponse::MultiModelLanguageResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : languages_()
  , status_(nullptr){}
struct MultiModelLanguageResponseDefaultTypeInternal {
  constexpr MultiModelLanguageResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiModelLanguageResponseDefaultTypeInternal() {}
  union {
    MultiModelLanguageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiModelLanguageResponseDefaultTypeInternal _MultiModelLanguageResponse_default_instance_;
constexpr PostModelsRequest::PostModelsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : models_()
  , user_app_id_(nullptr)
  , model_(nullptr){}
struct PostModelsRequestDefaultTypeInternal {
  constexpr PostModelsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostModelsRequestDefaultTypeInternal() {}
  union {
    PostModelsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostModelsRequestDefaultTypeInternal _PostModelsRequest_default_instance_;
constexpr PatchModelsRequest::PatchModelsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : models_()
  , action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct PatchModelsRequestDefaultTypeInternal {
  constexpr PatchModelsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PatchModelsRequestDefaultTypeInternal() {}
  union {
    PatchModelsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PatchModelsRequestDefaultTypeInternal _PatchModelsRequest_default_instance_;
constexpr IdUpdateSource::IdUpdateSource(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , new_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct IdUpdateSourceDefaultTypeInternal {
  constexpr IdUpdateSourceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IdUpdateSourceDefaultTypeInternal() {}
  union {
    IdUpdateSource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IdUpdateSourceDefaultTypeInternal _IdUpdateSource_default_instance_;
constexpr PatchModelIdsRequest::PatchModelIdsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ids_()
  , action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct PatchModelIdsRequestDefaultTypeInternal {
  constexpr PatchModelIdsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PatchModelIdsRequestDefaultTypeInternal() {}
  union {
    PatchModelIdsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PatchModelIdsRequestDefaultTypeInternal _PatchModelIdsRequest_default_instance_;
constexpr DeleteModelRequest::DeleteModelRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct DeleteModelRequestDefaultTypeInternal {
  constexpr DeleteModelRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteModelRequestDefaultTypeInternal() {}
  union {
    DeleteModelRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteModelRequestDefaultTypeInternal _DeleteModelRequest_default_instance_;
constexpr DeleteModelsRequest::DeleteModelsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ids_()
  , user_app_id_(nullptr)
  , delete_all_(false){}
struct DeleteModelsRequestDefaultTypeInternal {
  constexpr DeleteModelsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteModelsRequestDefaultTypeInternal() {}
  union {
    DeleteModelsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteModelsRequestDefaultTypeInternal _DeleteModelsRequest_default_instance_;
constexpr PostModelsSearchesRequest::PostModelsSearchesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_app_id_(nullptr)
  , model_query_(nullptr)
  , pagination_(nullptr){}
struct PostModelsSearchesRequestDefaultTypeInternal {
  constexpr PostModelsSearchesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostModelsSearchesRequestDefaultTypeInternal() {}
  union {
    PostModelsSearchesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostModelsSearchesRequestDefaultTypeInternal _PostModelsSearchesRequest_default_instance_;
constexpr SingleModelResponse::SingleModelResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(nullptr)
  , model_(nullptr){}
struct SingleModelResponseDefaultTypeInternal {
  constexpr SingleModelResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SingleModelResponseDefaultTypeInternal() {}
  union {
    SingleModelResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SingleModelResponseDefaultTypeInternal _SingleModelResponse_default_instance_;
constexpr MultiModelResponse::MultiModelResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : models_()
  , status_(nullptr){}
struct MultiModelResponseDefaultTypeInternal {
  constexpr MultiModelResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiModelResponseDefaultTypeInternal() {}
  union {
    MultiModelResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiModelResponseDefaultTypeInternal _MultiModelResponse_default_instance_;
constexpr PatchModelVersionsRequest::PatchModelVersionsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_versions_()
  , model_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct PatchModelVersionsRequestDefaultTypeInternal {
  constexpr PatchModelVersionsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PatchModelVersionsRequestDefaultTypeInternal() {}
  union {
    PatchModelVersionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PatchModelVersionsRequestDefaultTypeInternal _PatchModelVersionsRequest_default_instance_;
constexpr GetModelVersionRequest::GetModelVersionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct GetModelVersionRequestDefaultTypeInternal {
  constexpr GetModelVersionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetModelVersionRequestDefaultTypeInternal() {}
  union {
    GetModelVersionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetModelVersionRequestDefaultTypeInternal _GetModelVersionRequest_default_instance_;
constexpr ListModelVersionsRequest::ListModelVersionsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : concept_ids_()
  , model_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr)
  , page_(0u)
  , per_page_(0u){}
struct ListModelVersionsRequestDefaultTypeInternal {
  constexpr ListModelVersionsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListModelVersionsRequestDefaultTypeInternal() {}
  union {
    ListModelVersionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListModelVersionsRequestDefaultTypeInternal _ListModelVersionsRequest_default_instance_;
constexpr DeleteModelVersionRequest::DeleteModelVersionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct DeleteModelVersionRequestDefaultTypeInternal {
  constexpr DeleteModelVersionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteModelVersionRequestDefaultTypeInternal() {}
  union {
    DeleteModelVersionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteModelVersionRequestDefaultTypeInternal _DeleteModelVersionRequest_default_instance_;
constexpr SingleModelVersionResponse::SingleModelVersionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(nullptr)
  , model_version_(nullptr){}
struct SingleModelVersionResponseDefaultTypeInternal {
  constexpr SingleModelVersionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SingleModelVersionResponseDefaultTypeInternal() {}
  union {
    SingleModelVersionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SingleModelVersionResponseDefaultTypeInternal _SingleModelVersionResponse_default_instance_;
constexpr MultiModelVersionResponse::MultiModelVersionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_versions_()
  , status_(nullptr){}
struct MultiModelVersionResponseDefaultTypeInternal {
  constexpr MultiModelVersionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiModelVersionResponseDefaultTypeInternal() {}
  union {
    MultiModelVersionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiModelVersionResponseDefaultTypeInternal _MultiModelVersionResponse_default_instance_;
constexpr PostModelVersionsRequest::PostModelVersionsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_versions_()
  , model_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr)
  , search_(nullptr)
  , train_search_(nullptr)
  , test_search_(nullptr)
  , dataset_version_(nullptr)
  , eval_info_(nullptr)
  , evaluate_after_training_(false){}
struct PostModelVersionsRequestDefaultTypeInternal {
  constexpr PostModelVersionsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostModelVersionsRequestDefaultTypeInternal() {}
  union {
    PostModelVersionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostModelVersionsRequestDefaultTypeInternal _PostModelVersionsRequest_default_instance_;
constexpr PostWorkflowVersionsUnPublishRequest::PostWorkflowVersionsUnPublishRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publications_()
  , workflow_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct PostWorkflowVersionsUnPublishRequestDefaultTypeInternal {
  constexpr PostWorkflowVersionsUnPublishRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostWorkflowVersionsUnPublishRequestDefaultTypeInternal() {}
  union {
    PostWorkflowVersionsUnPublishRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostWorkflowVersionsUnPublishRequestDefaultTypeInternal _PostWorkflowVersionsUnPublishRequest_default_instance_;
constexpr PostWorkflowVersionsPublishRequest::PostWorkflowVersionsPublishRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publications_()
  , workflow_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct PostWorkflowVersionsPublishRequestDefaultTypeInternal {
  constexpr PostWorkflowVersionsPublishRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostWorkflowVersionsPublishRequestDefaultTypeInternal() {}
  union {
    PostWorkflowVersionsPublishRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostWorkflowVersionsPublishRequestDefaultTypeInternal _PostWorkflowVersionsPublishRequest_default_instance_;
constexpr WorkflowVersionPublishRequest::WorkflowVersionPublishRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct WorkflowVersionPublishRequestDefaultTypeInternal {
  constexpr WorkflowVersionPublishRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkflowVersionPublishRequestDefaultTypeInternal() {}
  union {
    WorkflowVersionPublishRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkflowVersionPublishRequestDefaultTypeInternal _WorkflowVersionPublishRequest_default_instance_;
constexpr WorkflowVersionUnPublishRequest::WorkflowVersionUnPublishRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct WorkflowVersionUnPublishRequestDefaultTypeInternal {
  constexpr WorkflowVersionUnPublishRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkflowVersionUnPublishRequestDefaultTypeInternal() {}
  union {
    WorkflowVersionUnPublishRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkflowVersionUnPublishRequestDefaultTypeInternal _WorkflowVersionUnPublishRequest_default_instance_;
constexpr ModelVersionPublishRequest::ModelVersionPublishRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ModelVersionPublishRequestDefaultTypeInternal {
  constexpr ModelVersionPublishRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModelVersionPublishRequestDefaultTypeInternal() {}
  union {
    ModelVersionPublishRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModelVersionPublishRequestDefaultTypeInternal _ModelVersionPublishRequest_default_instance_;
constexpr PostModelVersionsPublishRequest::PostModelVersionsPublishRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publications_()
  , model_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct PostModelVersionsPublishRequestDefaultTypeInternal {
  constexpr PostModelVersionsPublishRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostModelVersionsPublishRequestDefaultTypeInternal() {}
  union {
    PostModelVersionsPublishRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostModelVersionsPublishRequestDefaultTypeInternal _PostModelVersionsPublishRequest_default_instance_;
constexpr ModelVersionUnpublishRequest::ModelVersionUnpublishRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ModelVersionUnpublishRequestDefaultTypeInternal {
  constexpr ModelVersionUnpublishRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModelVersionUnpublishRequestDefaultTypeInternal() {}
  union {
    ModelVersionUnpublishRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModelVersionUnpublishRequestDefaultTypeInternal _ModelVersionUnpublishRequest_default_instance_;
constexpr PostModelVersionsUnPublishRequest::PostModelVersionsUnPublishRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publications_()
  , model_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct PostModelVersionsUnPublishRequestDefaultTypeInternal {
  constexpr PostModelVersionsUnPublishRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostModelVersionsUnPublishRequestDefaultTypeInternal() {}
  union {
    PostModelVersionsUnPublishRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostModelVersionsUnPublishRequestDefaultTypeInternal _PostModelVersionsUnPublishRequest_default_instance_;
constexpr PostModelVersionMetricsRequest::PostModelVersionMetricsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr)
  , test_search_(nullptr)
  , eval_info_(nullptr)
  , max_examples_(0u){}
struct PostModelVersionMetricsRequestDefaultTypeInternal {
  constexpr PostModelVersionMetricsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostModelVersionMetricsRequestDefaultTypeInternal() {}
  union {
    PostModelVersionMetricsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostModelVersionMetricsRequestDefaultTypeInternal _PostModelVersionMetricsRequest_default_instance_;
constexpr GetModelVersionMetricsRequest::GetModelVersionMetricsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr)
  , fields_(nullptr){}
struct GetModelVersionMetricsRequestDefaultTypeInternal {
  constexpr GetModelVersionMetricsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetModelVersionMetricsRequestDefaultTypeInternal() {}
  union {
    GetModelVersionMetricsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetModelVersionMetricsRequestDefaultTypeInternal _GetModelVersionMetricsRequest_default_instance_;
constexpr GetModelTypeRequest::GetModelTypeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_type_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct GetModelTypeRequestDefaultTypeInternal {
  constexpr GetModelTypeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetModelTypeRequestDefaultTypeInternal() {}
  union {
    GetModelTypeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetModelTypeRequestDefaultTypeInternal _GetModelTypeRequest_default_instance_;
constexpr ListModelTypesRequest::ListModelTypesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_app_id_(nullptr)
  , page_(0u)
  , per_page_(0u){}
struct ListModelTypesRequestDefaultTypeInternal {
  constexpr ListModelTypesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListModelTypesRequestDefaultTypeInternal() {}
  union {
    ListModelTypesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListModelTypesRequestDefaultTypeInternal _ListModelTypesRequest_default_instance_;
constexpr ListOpenSourceLicensesRequest::ListOpenSourceLicensesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ListOpenSourceLicensesRequestDefaultTypeInternal {
  constexpr ListOpenSourceLicensesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListOpenSourceLicensesRequestDefaultTypeInternal() {}
  union {
    ListOpenSourceLicensesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListOpenSourceLicensesRequestDefaultTypeInternal _ListOpenSourceLicensesRequest_default_instance_;
constexpr ListOpenSourceLicensesResponse::ListOpenSourceLicensesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : licenses_()
  , status_(nullptr){}
struct ListOpenSourceLicensesResponseDefaultTypeInternal {
  constexpr ListOpenSourceLicensesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListOpenSourceLicensesResponseDefaultTypeInternal() {}
  union {
    ListOpenSourceLicensesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListOpenSourceLicensesResponseDefaultTypeInternal _ListOpenSourceLicensesResponse_default_instance_;
constexpr SingleModelTypeResponse::SingleModelTypeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(nullptr)
  , model_type_(nullptr){}
struct SingleModelTypeResponseDefaultTypeInternal {
  constexpr SingleModelTypeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SingleModelTypeResponseDefaultTypeInternal() {}
  union {
    SingleModelTypeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SingleModelTypeResponseDefaultTypeInternal _SingleModelTypeResponse_default_instance_;
constexpr MultiModelTypeResponse::MultiModelTypeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_types_()
  , status_(nullptr)
  , model_importers_(nullptr){}
struct MultiModelTypeResponseDefaultTypeInternal {
  constexpr MultiModelTypeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiModelTypeResponseDefaultTypeInternal() {}
  union {
    MultiModelTypeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiModelTypeResponseDefaultTypeInternal _MultiModelTypeResponse_default_instance_;
constexpr GetModelVersionInputExampleRequest::GetModelVersionInputExampleRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , model_version_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , example_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct GetModelVersionInputExampleRequestDefaultTypeInternal {
  constexpr GetModelVersionInputExampleRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetModelVersionInputExampleRequestDefaultTypeInternal() {}
  union {
    GetModelVersionInputExampleRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetModelVersionInputExampleRequestDefaultTypeInternal _GetModelVersionInputExampleRequest_default_instance_;
constexpr ListModelVersionInputExamplesRequest::ListModelVersionInputExamplesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , model_version_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr)
  , page_(0u)
  , per_page_(0u){}
struct ListModelVersionInputExamplesRequestDefaultTypeInternal {
  constexpr ListModelVersionInputExamplesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListModelVersionInputExamplesRequestDefaultTypeInternal() {}
  union {
    ListModelVersionInputExamplesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListModelVersionInputExamplesRequestDefaultTypeInternal _ListModelVersionInputExamplesRequest_default_instance_;
constexpr SingleModelVersionInputExampleResponse::SingleModelVersionInputExampleResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(nullptr)
  , model_version_input_example_(nullptr){}
struct SingleModelVersionInputExampleResponseDefaultTypeInternal {
  constexpr SingleModelVersionInputExampleResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SingleModelVersionInputExampleResponseDefaultTypeInternal() {}
  union {
    SingleModelVersionInputExampleResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SingleModelVersionInputExampleResponseDefaultTypeInternal _SingleModelVersionInputExampleResponse_default_instance_;
constexpr MultiModelVersionInputExampleResponse::MultiModelVersionInputExampleResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_version_input_examples_()
  , status_(nullptr){}
struct MultiModelVersionInputExampleResponseDefaultTypeInternal {
  constexpr MultiModelVersionInputExampleResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiModelVersionInputExampleResponseDefaultTypeInternal() {}
  union {
    MultiModelVersionInputExampleResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiModelVersionInputExampleResponseDefaultTypeInternal _MultiModelVersionInputExampleResponse_default_instance_;
constexpr ListModelReferencesRequest::ListModelReferencesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr)
  , page_(0u)
  , per_page_(0u){}
struct ListModelReferencesRequestDefaultTypeInternal {
  constexpr ListModelReferencesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListModelReferencesRequestDefaultTypeInternal() {}
  union {
    ListModelReferencesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListModelReferencesRequestDefaultTypeInternal _ListModelReferencesRequest_default_instance_;
constexpr MultiModelReferenceResponse::MultiModelReferenceResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_references_()
  , status_(nullptr){}
struct MultiModelReferenceResponseDefaultTypeInternal {
  constexpr MultiModelReferenceResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiModelReferenceResponseDefaultTypeInternal() {}
  union {
    MultiModelReferenceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiModelReferenceResponseDefaultTypeInternal _MultiModelReferenceResponse_default_instance_;
constexpr MultiOutputResponse::MultiOutputResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : outputs_()
  , status_(nullptr){}
struct MultiOutputResponseDefaultTypeInternal {
  constexpr MultiOutputResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiOutputResponseDefaultTypeInternal() {}
  union {
    MultiOutputResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiOutputResponseDefaultTypeInternal _MultiOutputResponse_default_instance_;
constexpr ListScopesRequest::ListScopesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct ListScopesRequestDefaultTypeInternal {
  constexpr ListScopesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListScopesRequestDefaultTypeInternal() {}
  union {
    ListScopesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListScopesRequestDefaultTypeInternal _ListScopesRequest_default_instance_;
constexpr MyScopesRequest::MyScopesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_app_id_(nullptr){}
struct MyScopesRequestDefaultTypeInternal {
  constexpr MyScopesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MyScopesRequestDefaultTypeInternal() {}
  union {
    MyScopesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MyScopesRequestDefaultTypeInternal _MyScopesRequest_default_instance_;
constexpr MyScopesUserRequest::MyScopesUserRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_app_id_(nullptr){}
struct MyScopesUserRequestDefaultTypeInternal {
  constexpr MyScopesUserRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MyScopesUserRequestDefaultTypeInternal() {}
  union {
    MyScopesUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MyScopesUserRequestDefaultTypeInternal _MyScopesUserRequest_default_instance_;
constexpr MyScopesRootRequest::MyScopesRootRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct MyScopesRootRequestDefaultTypeInternal {
  constexpr MyScopesRootRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MyScopesRootRequestDefaultTypeInternal() {}
  union {
    MyScopesRootRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MyScopesRootRequestDefaultTypeInternal _MyScopesRootRequest_default_instance_;
constexpr MultiScopeDepsResponse::MultiScopeDepsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : scope_deps_()
  , endpoint_deps_()
  , status_(nullptr){}
struct MultiScopeDepsResponseDefaultTypeInternal {
  constexpr MultiScopeDepsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiScopeDepsResponseDefaultTypeInternal() {}
  union {
    MultiScopeDepsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiScopeDepsResponseDefaultTypeInternal _MultiScopeDepsResponse_default_instance_;
constexpr MultiScopeResponse::MultiScopeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : scopes_()
  , endpoints_()
  , user_feature_flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(nullptr)
  , app_(nullptr){}
struct MultiScopeResponseDefaultTypeInternal {
  constexpr MultiScopeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiScopeResponseDefaultTypeInternal() {}
  union {
    MultiScopeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiScopeResponseDefaultTypeInternal _MultiScopeResponse_default_instance_;
constexpr MultiScopeUserResponse::MultiScopeUserResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : scopes_()
  , endpoints_()
  , user_feature_flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(nullptr){}
struct MultiScopeUserResponseDefaultTypeInternal {
  constexpr MultiScopeUserResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiScopeUserResponseDefaultTypeInternal() {}
  union {
    MultiScopeUserResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiScopeUserResponseDefaultTypeInternal _MultiScopeUserResponse_default_instance_;
constexpr MultiScopeRootResponse::MultiScopeRootResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : scopes_()
  , endpoints_()
  , user_feature_flags_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(nullptr){}
struct MultiScopeRootResponseDefaultTypeInternal {
  constexpr MultiScopeRootResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiScopeRootResponseDefaultTypeInternal() {}
  union {
    MultiScopeRootResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiScopeRootResponseDefaultTypeInternal _MultiScopeRootResponse_default_instance_;
constexpr GetSearchRequest::GetSearchRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct GetSearchRequestDefaultTypeInternal {
  constexpr GetSearchRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetSearchRequestDefaultTypeInternal() {}
  union {
    GetSearchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetSearchRequestDefaultTypeInternal _GetSearchRequest_default_instance_;
constexpr ListSearchesRequest::ListSearchesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_app_id_(nullptr)
  , page_(0u)
  , per_page_(0u){}
struct ListSearchesRequestDefaultTypeInternal {
  constexpr ListSearchesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListSearchesRequestDefaultTypeInternal() {}
  union {
    ListSearchesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListSearchesRequestDefaultTypeInternal _ListSearchesRequest_default_instance_;
constexpr PostSearchesRequest::PostSearchesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : searches_()
  , user_app_id_(nullptr)
  , query_(nullptr)
  , pagination_(nullptr){}
struct PostSearchesRequestDefaultTypeInternal {
  constexpr PostSearchesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostSearchesRequestDefaultTypeInternal() {}
  union {
    PostSearchesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostSearchesRequestDefaultTypeInternal _PostSearchesRequest_default_instance_;
constexpr PatchInputsSearchesRequest::PatchInputsSearchesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : searches_()
  , action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct PatchInputsSearchesRequestDefaultTypeInternal {
  constexpr PatchInputsSearchesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PatchInputsSearchesRequestDefaultTypeInternal() {}
  union {
    PatchInputsSearchesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PatchInputsSearchesRequestDefaultTypeInternal _PatchInputsSearchesRequest_default_instance_;
constexpr PatchAnnotationsSearchesRequest::PatchAnnotationsSearchesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : searches_()
  , action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct PatchAnnotationsSearchesRequestDefaultTypeInternal {
  constexpr PatchAnnotationsSearchesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PatchAnnotationsSearchesRequestDefaultTypeInternal() {}
  union {
    PatchAnnotationsSearchesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PatchAnnotationsSearchesRequestDefaultTypeInternal _PatchAnnotationsSearchesRequest_default_instance_;
constexpr PatchSearchesRequest::PatchSearchesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : searches_()
  , action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct PatchSearchesRequestDefaultTypeInternal {
  constexpr PatchSearchesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PatchSearchesRequestDefaultTypeInternal() {}
  union {
    PatchSearchesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PatchSearchesRequestDefaultTypeInternal _PatchSearchesRequest_default_instance_;
constexpr PostSearchesByIDRequest::PostSearchesByIDRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr)
  , pagination_(nullptr){}
struct PostSearchesByIDRequestDefaultTypeInternal {
  constexpr PostSearchesByIDRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostSearchesByIDRequestDefaultTypeInternal() {}
  union {
    PostSearchesByIDRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostSearchesByIDRequestDefaultTypeInternal _PostSearchesByIDRequest_default_instance_;
constexpr DeleteSearchRequest::DeleteSearchRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct DeleteSearchRequestDefaultTypeInternal {
  constexpr DeleteSearchRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteSearchRequestDefaultTypeInternal() {}
  union {
    DeleteSearchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteSearchRequestDefaultTypeInternal _DeleteSearchRequest_default_instance_;
constexpr PostAnnotationsSearchesRequest::PostAnnotationsSearchesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : searches_()
  , user_app_id_(nullptr)
  , pagination_(nullptr){}
struct PostAnnotationsSearchesRequestDefaultTypeInternal {
  constexpr PostAnnotationsSearchesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostAnnotationsSearchesRequestDefaultTypeInternal() {}
  union {
    PostAnnotationsSearchesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostAnnotationsSearchesRequestDefaultTypeInternal _PostAnnotationsSearchesRequest_default_instance_;
constexpr DeleteAnnotationSearchMetricsRequest::DeleteAnnotationSearchMetricsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct DeleteAnnotationSearchMetricsRequestDefaultTypeInternal {
  constexpr DeleteAnnotationSearchMetricsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteAnnotationSearchMetricsRequestDefaultTypeInternal() {}
  union {
    DeleteAnnotationSearchMetricsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteAnnotationSearchMetricsRequestDefaultTypeInternal _DeleteAnnotationSearchMetricsRequest_default_instance_;
constexpr PostInputsSearchesRequest::PostInputsSearchesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : searches_()
  , user_app_id_(nullptr)
  , pagination_(nullptr){}
struct PostInputsSearchesRequestDefaultTypeInternal {
  constexpr PostInputsSearchesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostInputsSearchesRequestDefaultTypeInternal() {}
  union {
    PostInputsSearchesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostInputsSearchesRequestDefaultTypeInternal _PostInputsSearchesRequest_default_instance_;
constexpr SingleSearchResponse::SingleSearchResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(nullptr)
  , search_(nullptr){}
struct SingleSearchResponseDefaultTypeInternal {
  constexpr SingleSearchResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SingleSearchResponseDefaultTypeInternal() {}
  union {
    SingleSearchResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SingleSearchResponseDefaultTypeInternal _SingleSearchResponse_default_instance_;
constexpr MultiSearchResponse::MultiSearchResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hits_()
  , searches_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(nullptr)
  , query_(nullptr){}
struct MultiSearchResponseDefaultTypeInternal {
  constexpr MultiSearchResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiSearchResponseDefaultTypeInternal() {}
  union {
    MultiSearchResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiSearchResponseDefaultTypeInternal _MultiSearchResponse_default_instance_;
constexpr PostAnnotationSearchMetricsRequest::PostAnnotationSearchMetricsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr)
  , ground_truth_(nullptr)
  , search_to_eval_(nullptr)
  , data_(nullptr)
  , evaluation_type_(0)
{}
struct PostAnnotationSearchMetricsRequestDefaultTypeInternal {
  constexpr PostAnnotationSearchMetricsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostAnnotationSearchMetricsRequestDefaultTypeInternal() {}
  union {
    PostAnnotationSearchMetricsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostAnnotationSearchMetricsRequestDefaultTypeInternal _PostAnnotationSearchMetricsRequest_default_instance_;
constexpr GetAnnotationSearchMetricsRequest::GetAnnotationSearchMetricsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct GetAnnotationSearchMetricsRequestDefaultTypeInternal {
  constexpr GetAnnotationSearchMetricsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAnnotationSearchMetricsRequestDefaultTypeInternal() {}
  union {
    GetAnnotationSearchMetricsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAnnotationSearchMetricsRequestDefaultTypeInternal _GetAnnotationSearchMetricsRequest_default_instance_;
constexpr ListAnnotationSearchMetricsRequest::ListAnnotationSearchMetricsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_app_id_(nullptr){}
struct ListAnnotationSearchMetricsRequestDefaultTypeInternal {
  constexpr ListAnnotationSearchMetricsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListAnnotationSearchMetricsRequestDefaultTypeInternal() {}
  union {
    ListAnnotationSearchMetricsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListAnnotationSearchMetricsRequestDefaultTypeInternal _ListAnnotationSearchMetricsRequest_default_instance_;
constexpr MultiAnnotationSearchMetricsResponse::MultiAnnotationSearchMetricsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : annotation_search_metrics_()
  , status_(nullptr){}
struct MultiAnnotationSearchMetricsResponseDefaultTypeInternal {
  constexpr MultiAnnotationSearchMetricsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiAnnotationSearchMetricsResponseDefaultTypeInternal() {}
  union {
    MultiAnnotationSearchMetricsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiAnnotationSearchMetricsResponseDefaultTypeInternal _MultiAnnotationSearchMetricsResponse_default_instance_;
constexpr ListAnnotationFiltersRequest::ListAnnotationFiltersRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_app_id_(nullptr)
  , page_(0u)
  , per_page_(0u){}
struct ListAnnotationFiltersRequestDefaultTypeInternal {
  constexpr ListAnnotationFiltersRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListAnnotationFiltersRequestDefaultTypeInternal() {}
  union {
    ListAnnotationFiltersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListAnnotationFiltersRequestDefaultTypeInternal _ListAnnotationFiltersRequest_default_instance_;
constexpr GetAnnotationFilterRequest::GetAnnotationFilterRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : annotation_filter_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct GetAnnotationFilterRequestDefaultTypeInternal {
  constexpr GetAnnotationFilterRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAnnotationFilterRequestDefaultTypeInternal() {}
  union {
    GetAnnotationFilterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAnnotationFilterRequestDefaultTypeInternal _GetAnnotationFilterRequest_default_instance_;
constexpr PostAnnotationFiltersRequest::PostAnnotationFiltersRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : annotation_filters_()
  , user_app_id_(nullptr){}
struct PostAnnotationFiltersRequestDefaultTypeInternal {
  constexpr PostAnnotationFiltersRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostAnnotationFiltersRequestDefaultTypeInternal() {}
  union {
    PostAnnotationFiltersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostAnnotationFiltersRequestDefaultTypeInternal _PostAnnotationFiltersRequest_default_instance_;
constexpr PatchAnnotationFiltersRequest::PatchAnnotationFiltersRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : annotation_filters_()
  , action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct PatchAnnotationFiltersRequestDefaultTypeInternal {
  constexpr PatchAnnotationFiltersRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PatchAnnotationFiltersRequestDefaultTypeInternal() {}
  union {
    PatchAnnotationFiltersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PatchAnnotationFiltersRequestDefaultTypeInternal _PatchAnnotationFiltersRequest_default_instance_;
constexpr DeleteAnnotationFiltersRequest::DeleteAnnotationFiltersRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : annotation_filter_ids_()
  , user_app_id_(nullptr){}
struct DeleteAnnotationFiltersRequestDefaultTypeInternal {
  constexpr DeleteAnnotationFiltersRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteAnnotationFiltersRequestDefaultTypeInternal() {}
  union {
    DeleteAnnotationFiltersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteAnnotationFiltersRequestDefaultTypeInternal _DeleteAnnotationFiltersRequest_default_instance_;
constexpr MultiAnnotationFilterResponse::MultiAnnotationFilterResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : annotation_filters_()
  , status_(nullptr){}
struct MultiAnnotationFilterResponseDefaultTypeInternal {
  constexpr MultiAnnotationFilterResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiAnnotationFilterResponseDefaultTypeInternal() {}
  union {
    MultiAnnotationFilterResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiAnnotationFilterResponseDefaultTypeInternal _MultiAnnotationFilterResponse_default_instance_;
constexpr SingleAnnotationFilterResponse::SingleAnnotationFilterResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(nullptr)
  , annotation_filter_(nullptr){}
struct SingleAnnotationFilterResponseDefaultTypeInternal {
  constexpr SingleAnnotationFilterResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SingleAnnotationFilterResponseDefaultTypeInternal() {}
  union {
    SingleAnnotationFilterResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SingleAnnotationFilterResponseDefaultTypeInternal _SingleAnnotationFilterResponse_default_instance_;
constexpr PostValidatePasswordRequest::PostValidatePasswordRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_app_id_(nullptr)
  , password_(nullptr){}
struct PostValidatePasswordRequestDefaultTypeInternal {
  constexpr PostValidatePasswordRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostValidatePasswordRequestDefaultTypeInternal() {}
  union {
    PostValidatePasswordRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostValidatePasswordRequestDefaultTypeInternal _PostValidatePasswordRequest_default_instance_;
constexpr SinglePasswordValidationResponse::SinglePasswordValidationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(nullptr)
  , password_violations_(nullptr){}
struct SinglePasswordValidationResponseDefaultTypeInternal {
  constexpr SinglePasswordValidationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SinglePasswordValidationResponseDefaultTypeInternal() {}
  union {
    SinglePasswordValidationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SinglePasswordValidationResponseDefaultTypeInternal _SinglePasswordValidationResponse_default_instance_;
constexpr GetWorkflowRequest::GetWorkflowRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : additional_fields_()
  , workflow_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr)
  , favor_clarifai_workflows_(false)
  , exclude_clarifai_workflows_(false){}
struct GetWorkflowRequestDefaultTypeInternal {
  constexpr GetWorkflowRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetWorkflowRequestDefaultTypeInternal() {}
  union {
    GetWorkflowRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetWorkflowRequestDefaultTypeInternal _GetWorkflowRequest_default_instance_;
constexpr ListWorkflowsRequest::ListWorkflowsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : additional_fields_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , query_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr)
  , page_(0u)
  , per_page_(0u)
  , sort_ascending_(false)
  , featured_only_(false)
  , starred_only_(false)
  , _oneof_case_{}{}
struct ListWorkflowsRequestDefaultTypeInternal {
  constexpr ListWorkflowsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListWorkflowsRequestDefaultTypeInternal() {}
  union {
    ListWorkflowsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListWorkflowsRequestDefaultTypeInternal _ListWorkflowsRequest_default_instance_;
constexpr PostWorkflowsRequest::PostWorkflowsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : workflows_()
  , user_app_id_(nullptr){}
struct PostWorkflowsRequestDefaultTypeInternal {
  constexpr PostWorkflowsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostWorkflowsRequestDefaultTypeInternal() {}
  union {
    PostWorkflowsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostWorkflowsRequestDefaultTypeInternal _PostWorkflowsRequest_default_instance_;
constexpr PatchWorkflowsRequest::PatchWorkflowsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : workflows_()
  , action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct PatchWorkflowsRequestDefaultTypeInternal {
  constexpr PatchWorkflowsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PatchWorkflowsRequestDefaultTypeInternal() {}
  union {
    PatchWorkflowsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PatchWorkflowsRequestDefaultTypeInternal _PatchWorkflowsRequest_default_instance_;
constexpr DeleteWorkflowRequest::DeleteWorkflowRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : workflow_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct DeleteWorkflowRequestDefaultTypeInternal {
  constexpr DeleteWorkflowRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteWorkflowRequestDefaultTypeInternal() {}
  union {
    DeleteWorkflowRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteWorkflowRequestDefaultTypeInternal _DeleteWorkflowRequest_default_instance_;
constexpr DeleteWorkflowsRequest::DeleteWorkflowsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ids_()
  , user_app_id_(nullptr)
  , delete_all_(false){}
struct DeleteWorkflowsRequestDefaultTypeInternal {
  constexpr DeleteWorkflowsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteWorkflowsRequestDefaultTypeInternal() {}
  union {
    DeleteWorkflowsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteWorkflowsRequestDefaultTypeInternal _DeleteWorkflowsRequest_default_instance_;
constexpr SingleWorkflowResponse::SingleWorkflowResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(nullptr)
  , workflow_(nullptr){}
struct SingleWorkflowResponseDefaultTypeInternal {
  constexpr SingleWorkflowResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SingleWorkflowResponseDefaultTypeInternal() {}
  union {
    SingleWorkflowResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SingleWorkflowResponseDefaultTypeInternal _SingleWorkflowResponse_default_instance_;
constexpr MultiWorkflowResponse::MultiWorkflowResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : workflows_()
  , status_(nullptr){}
struct MultiWorkflowResponseDefaultTypeInternal {
  constexpr MultiWorkflowResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiWorkflowResponseDefaultTypeInternal() {}
  union {
    MultiWorkflowResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiWorkflowResponseDefaultTypeInternal _MultiWorkflowResponse_default_instance_;
constexpr PostWorkflowResultsRequest::PostWorkflowResultsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : inputs_()
  , workflow_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr)
  , output_config_(nullptr)
  , workflow_state_(nullptr)
  , favor_clarifai_workflows_(false){}
struct PostWorkflowResultsRequestDefaultTypeInternal {
  constexpr PostWorkflowResultsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostWorkflowResultsRequestDefaultTypeInternal() {}
  union {
    PostWorkflowResultsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostWorkflowResultsRequestDefaultTypeInternal _PostWorkflowResultsRequest_default_instance_;
constexpr PostWorkflowResultsResponse::PostWorkflowResultsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_()
  , status_(nullptr)
  , workflow_(nullptr)
  , workflow_state_(nullptr){}
struct PostWorkflowResultsResponseDefaultTypeInternal {
  constexpr PostWorkflowResultsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostWorkflowResultsResponseDefaultTypeInternal() {}
  union {
    PostWorkflowResultsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostWorkflowResultsResponseDefaultTypeInternal _PostWorkflowResultsResponse_default_instance_;
constexpr PostWorkflowResultsSimilarityRequest::PostWorkflowResultsSimilarityRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : probe_inputs_()
  , pool_inputs_()
  , workflow_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , model_version_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr)
  , favor_clarifai_workflows_(false){}
struct PostWorkflowResultsSimilarityRequestDefaultTypeInternal {
  constexpr PostWorkflowResultsSimilarityRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostWorkflowResultsSimilarityRequestDefaultTypeInternal() {}
  union {
    PostWorkflowResultsSimilarityRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostWorkflowResultsSimilarityRequestDefaultTypeInternal _PostWorkflowResultsSimilarityRequest_default_instance_;
constexpr PostWorkflowResultsSimilarityResponse::PostWorkflowResultsSimilarityResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_()
  , status_(nullptr){}
struct PostWorkflowResultsSimilarityResponseDefaultTypeInternal {
  constexpr PostWorkflowResultsSimilarityResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostWorkflowResultsSimilarityResponseDefaultTypeInternal() {}
  union {
    PostWorkflowResultsSimilarityResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostWorkflowResultsSimilarityResponseDefaultTypeInternal _PostWorkflowResultsSimilarityResponse_default_instance_;
constexpr ListWorkflowVersionsRequest::ListWorkflowVersionsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : workflow_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr)
  , page_(0u)
  , per_page_(0u){}
struct ListWorkflowVersionsRequestDefaultTypeInternal {
  constexpr ListWorkflowVersionsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListWorkflowVersionsRequestDefaultTypeInternal() {}
  union {
    ListWorkflowVersionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListWorkflowVersionsRequestDefaultTypeInternal _ListWorkflowVersionsRequest_default_instance_;
constexpr GetWorkflowVersionRequest::GetWorkflowVersionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : workflow_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , workflow_version_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct GetWorkflowVersionRequestDefaultTypeInternal {
  constexpr GetWorkflowVersionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetWorkflowVersionRequestDefaultTypeInternal() {}
  union {
    GetWorkflowVersionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetWorkflowVersionRequestDefaultTypeInternal _GetWorkflowVersionRequest_default_instance_;
constexpr DeleteWorkflowVersionsRequest::DeleteWorkflowVersionsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : workflow_version_ids_()
  , workflow_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct DeleteWorkflowVersionsRequestDefaultTypeInternal {
  constexpr DeleteWorkflowVersionsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteWorkflowVersionsRequestDefaultTypeInternal() {}
  union {
    DeleteWorkflowVersionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteWorkflowVersionsRequestDefaultTypeInternal _DeleteWorkflowVersionsRequest_default_instance_;
constexpr PatchWorkflowVersionsRequest::PatchWorkflowVersionsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : workflow_versions_()
  , workflow_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct PatchWorkflowVersionsRequestDefaultTypeInternal {
  constexpr PatchWorkflowVersionsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PatchWorkflowVersionsRequestDefaultTypeInternal() {}
  union {
    PatchWorkflowVersionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PatchWorkflowVersionsRequestDefaultTypeInternal _PatchWorkflowVersionsRequest_default_instance_;
constexpr MultiWorkflowVersionResponse::MultiWorkflowVersionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : workflow_versions_()
  , status_(nullptr){}
struct MultiWorkflowVersionResponseDefaultTypeInternal {
  constexpr MultiWorkflowVersionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiWorkflowVersionResponseDefaultTypeInternal() {}
  union {
    MultiWorkflowVersionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiWorkflowVersionResponseDefaultTypeInternal _MultiWorkflowVersionResponse_default_instance_;
constexpr SingleWorkflowVersionResponse::SingleWorkflowVersionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(nullptr)
  , workflow_version_(nullptr){}
struct SingleWorkflowVersionResponseDefaultTypeInternal {
  constexpr SingleWorkflowVersionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SingleWorkflowVersionResponseDefaultTypeInternal() {}
  union {
    SingleWorkflowVersionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SingleWorkflowVersionResponseDefaultTypeInternal _SingleWorkflowVersionResponse_default_instance_;
constexpr PostAppDuplicationsRequest::PostAppDuplicationsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_duplications_()
  , user_app_id_(nullptr){}
struct PostAppDuplicationsRequestDefaultTypeInternal {
  constexpr PostAppDuplicationsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostAppDuplicationsRequestDefaultTypeInternal() {}
  union {
    PostAppDuplicationsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostAppDuplicationsRequestDefaultTypeInternal _PostAppDuplicationsRequest_default_instance_;
constexpr GetAppDuplicationRequest::GetAppDuplicationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_duplication_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct GetAppDuplicationRequestDefaultTypeInternal {
  constexpr GetAppDuplicationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAppDuplicationRequestDefaultTypeInternal() {}
  union {
    GetAppDuplicationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAppDuplicationRequestDefaultTypeInternal _GetAppDuplicationRequest_default_instance_;
constexpr ListAppDuplicationsRequest::ListAppDuplicationsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_app_id_(nullptr)
  , page_(0u)
  , per_page_(0u){}
struct ListAppDuplicationsRequestDefaultTypeInternal {
  constexpr ListAppDuplicationsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListAppDuplicationsRequestDefaultTypeInternal() {}
  union {
    ListAppDuplicationsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListAppDuplicationsRequestDefaultTypeInternal _ListAppDuplicationsRequest_default_instance_;
constexpr MultiAppDuplicationsResponse::MultiAppDuplicationsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_duplications_()
  , status_(nullptr){}
struct MultiAppDuplicationsResponseDefaultTypeInternal {
  constexpr MultiAppDuplicationsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiAppDuplicationsResponseDefaultTypeInternal() {}
  union {
    MultiAppDuplicationsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiAppDuplicationsResponseDefaultTypeInternal _MultiAppDuplicationsResponse_default_instance_;
constexpr SingleAppDuplicationResponse::SingleAppDuplicationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(nullptr)
  , app_duplication_(nullptr){}
struct SingleAppDuplicationResponseDefaultTypeInternal {
  constexpr SingleAppDuplicationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SingleAppDuplicationResponseDefaultTypeInternal() {}
  union {
    SingleAppDuplicationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SingleAppDuplicationResponseDefaultTypeInternal _SingleAppDuplicationResponse_default_instance_;
constexpr PostTasksRequest::PostTasksRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tasks_()
  , user_app_id_(nullptr){}
struct PostTasksRequestDefaultTypeInternal {
  constexpr PostTasksRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostTasksRequestDefaultTypeInternal() {}
  union {
    PostTasksRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostTasksRequestDefaultTypeInternal _PostTasksRequest_default_instance_;
constexpr GetTaskRequest::GetTaskRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : additional_fields_()
  , task_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct GetTaskRequestDefaultTypeInternal {
  constexpr GetTaskRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetTaskRequestDefaultTypeInternal() {}
  union {
    GetTaskRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetTaskRequestDefaultTypeInternal _GetTaskRequest_default_instance_;
constexpr ListTasksRequest::ListTasksRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : worker_user_ids_()
  , review_user_ids_()
  , additional_fields_()
  , user_app_id_(nullptr)
  , page_(0u)
  , per_page_(0u)
  , including_label_order_tasks_(false){}
struct ListTasksRequestDefaultTypeInternal {
  constexpr ListTasksRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListTasksRequestDefaultTypeInternal() {}
  union {
    ListTasksRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListTasksRequestDefaultTypeInternal _ListTasksRequest_default_instance_;
constexpr PatchTasksRequest::PatchTasksRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tasks_()
  , action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct PatchTasksRequestDefaultTypeInternal {
  constexpr PatchTasksRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PatchTasksRequestDefaultTypeInternal() {}
  union {
    PatchTasksRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PatchTasksRequestDefaultTypeInternal _PatchTasksRequest_default_instance_;
constexpr DeleteTasksRequest::DeleteTasksRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ids_()
  , user_app_id_(nullptr){}
struct DeleteTasksRequestDefaultTypeInternal {
  constexpr DeleteTasksRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteTasksRequestDefaultTypeInternal() {}
  union {
    DeleteTasksRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteTasksRequestDefaultTypeInternal _DeleteTasksRequest_default_instance_;
constexpr MultiTaskResponse::MultiTaskResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tasks_()
  , status_(nullptr){}
struct MultiTaskResponseDefaultTypeInternal {
  constexpr MultiTaskResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiTaskResponseDefaultTypeInternal() {}
  union {
    MultiTaskResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiTaskResponseDefaultTypeInternal _MultiTaskResponse_default_instance_;
constexpr SingleTaskResponse::SingleTaskResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(nullptr)
  , task_(nullptr){}
struct SingleTaskResponseDefaultTypeInternal {
  constexpr SingleTaskResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SingleTaskResponseDefaultTypeInternal() {}
  union {
    SingleTaskResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SingleTaskResponseDefaultTypeInternal _SingleTaskResponse_default_instance_;
constexpr GetTaskCountRequest::GetTaskCountRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_ids_()
  , task_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct GetTaskCountRequestDefaultTypeInternal {
  constexpr GetTaskCountRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetTaskCountRequestDefaultTypeInternal() {}
  union {
    GetTaskCountRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetTaskCountRequestDefaultTypeInternal _GetTaskCountRequest_default_instance_;
constexpr SingleTaskCountResponse::SingleTaskCountResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : counts_()
  , app_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , task_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(nullptr){}
struct SingleTaskCountResponseDefaultTypeInternal {
  constexpr SingleTaskCountResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SingleTaskCountResponseDefaultTypeInternal() {}
  union {
    SingleTaskCountResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SingleTaskCountResponseDefaultTypeInternal _SingleTaskCountResponse_default_instance_;
constexpr PostLabelOrdersRequest::PostLabelOrdersRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : label_orders_()
  , user_app_id_(nullptr){}
struct PostLabelOrdersRequestDefaultTypeInternal {
  constexpr PostLabelOrdersRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostLabelOrdersRequestDefaultTypeInternal() {}
  union {
    PostLabelOrdersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostLabelOrdersRequestDefaultTypeInternal _PostLabelOrdersRequest_default_instance_;
constexpr GetLabelOrderRequest::GetLabelOrderRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : label_order_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct GetLabelOrderRequestDefaultTypeInternal {
  constexpr GetLabelOrderRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetLabelOrderRequestDefaultTypeInternal() {}
  union {
    GetLabelOrderRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetLabelOrderRequestDefaultTypeInternal _GetLabelOrderRequest_default_instance_;
constexpr ListLabelOrdersRequest::ListLabelOrdersRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_app_id_(nullptr)
  , page_(0u)
  , per_page_(0u){}
struct ListLabelOrdersRequestDefaultTypeInternal {
  constexpr ListLabelOrdersRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListLabelOrdersRequestDefaultTypeInternal() {}
  union {
    ListLabelOrdersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListLabelOrdersRequestDefaultTypeInternal _ListLabelOrdersRequest_default_instance_;
constexpr PatchLabelOrdersRequest::PatchLabelOrdersRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : label_orders_()
  , action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct PatchLabelOrdersRequestDefaultTypeInternal {
  constexpr PatchLabelOrdersRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PatchLabelOrdersRequestDefaultTypeInternal() {}
  union {
    PatchLabelOrdersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PatchLabelOrdersRequestDefaultTypeInternal _PatchLabelOrdersRequest_default_instance_;
constexpr DeleteLabelOrdersRequest::DeleteLabelOrdersRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ids_()
  , user_app_id_(nullptr){}
struct DeleteLabelOrdersRequestDefaultTypeInternal {
  constexpr DeleteLabelOrdersRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteLabelOrdersRequestDefaultTypeInternal() {}
  union {
    DeleteLabelOrdersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteLabelOrdersRequestDefaultTypeInternal _DeleteLabelOrdersRequest_default_instance_;
constexpr MultiLabelOrderResponse::MultiLabelOrderResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : label_orders_()
  , status_(nullptr){}
struct MultiLabelOrderResponseDefaultTypeInternal {
  constexpr MultiLabelOrderResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiLabelOrderResponseDefaultTypeInternal() {}
  union {
    MultiLabelOrderResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiLabelOrderResponseDefaultTypeInternal _MultiLabelOrderResponse_default_instance_;
constexpr SingleLabelOrderResponse::SingleLabelOrderResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(nullptr)
  , label_order_(nullptr){}
struct SingleLabelOrderResponseDefaultTypeInternal {
  constexpr SingleLabelOrderResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SingleLabelOrderResponseDefaultTypeInternal() {}
  union {
    SingleLabelOrderResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SingleLabelOrderResponseDefaultTypeInternal _SingleLabelOrderResponse_default_instance_;
constexpr PostCollectorsRequest::PostCollectorsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : collectors_()
  , user_app_id_(nullptr){}
struct PostCollectorsRequestDefaultTypeInternal {
  constexpr PostCollectorsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostCollectorsRequestDefaultTypeInternal() {}
  union {
    PostCollectorsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostCollectorsRequestDefaultTypeInternal _PostCollectorsRequest_default_instance_;
constexpr PatchCollectorsRequest::PatchCollectorsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : collectors_()
  , action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct PatchCollectorsRequestDefaultTypeInternal {
  constexpr PatchCollectorsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PatchCollectorsRequestDefaultTypeInternal() {}
  union {
    PatchCollectorsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PatchCollectorsRequestDefaultTypeInternal _PatchCollectorsRequest_default_instance_;
constexpr DeleteCollectorsRequest::DeleteCollectorsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ids_()
  , user_app_id_(nullptr)
  , delete_all_(false){}
struct DeleteCollectorsRequestDefaultTypeInternal {
  constexpr DeleteCollectorsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteCollectorsRequestDefaultTypeInternal() {}
  union {
    DeleteCollectorsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteCollectorsRequestDefaultTypeInternal _DeleteCollectorsRequest_default_instance_;
constexpr GetCollectorRequest::GetCollectorRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : collector_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct GetCollectorRequestDefaultTypeInternal {
  constexpr GetCollectorRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetCollectorRequestDefaultTypeInternal() {}
  union {
    GetCollectorRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetCollectorRequestDefaultTypeInternal _GetCollectorRequest_default_instance_;
constexpr ListCollectorsRequest::ListCollectorsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_app_id_(nullptr)
  , page_(0u)
  , per_page_(0u){}
struct ListCollectorsRequestDefaultTypeInternal {
  constexpr ListCollectorsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListCollectorsRequestDefaultTypeInternal() {}
  union {
    ListCollectorsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListCollectorsRequestDefaultTypeInternal _ListCollectorsRequest_default_instance_;
constexpr MultiCollectorResponse::MultiCollectorResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : collectors_()
  , status_(nullptr){}
struct MultiCollectorResponseDefaultTypeInternal {
  constexpr MultiCollectorResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiCollectorResponseDefaultTypeInternal() {}
  union {
    MultiCollectorResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiCollectorResponseDefaultTypeInternal _MultiCollectorResponse_default_instance_;
constexpr SingleCollectorResponse::SingleCollectorResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(nullptr)
  , collector_(nullptr){}
struct SingleCollectorResponseDefaultTypeInternal {
  constexpr SingleCollectorResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SingleCollectorResponseDefaultTypeInternal() {}
  union {
    SingleCollectorResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SingleCollectorResponseDefaultTypeInternal _SingleCollectorResponse_default_instance_;
constexpr PostStatValuesRequest::PostStatValuesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stat_values_()
  , user_app_id_(nullptr){}
struct PostStatValuesRequestDefaultTypeInternal {
  constexpr PostStatValuesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostStatValuesRequestDefaultTypeInternal() {}
  union {
    PostStatValuesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostStatValuesRequestDefaultTypeInternal _PostStatValuesRequest_default_instance_;
constexpr MultiStatValueResponse::MultiStatValueResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stat_values_()
  , status_(nullptr){}
struct MultiStatValueResponseDefaultTypeInternal {
  constexpr MultiStatValueResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiStatValueResponseDefaultTypeInternal() {}
  union {
    MultiStatValueResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiStatValueResponseDefaultTypeInternal _MultiStatValueResponse_default_instance_;
constexpr PostStatValuesAggregateRequest::PostStatValuesAggregateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stat_value_aggregate_queries_()
  , user_app_id_(nullptr){}
struct PostStatValuesAggregateRequestDefaultTypeInternal {
  constexpr PostStatValuesAggregateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostStatValuesAggregateRequestDefaultTypeInternal() {}
  union {
    PostStatValuesAggregateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostStatValuesAggregateRequestDefaultTypeInternal _PostStatValuesAggregateRequest_default_instance_;
constexpr MultiStatValueAggregateResponse::MultiStatValueAggregateResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stat_value_aggregate_results_()
  , status_(nullptr){}
struct MultiStatValueAggregateResponseDefaultTypeInternal {
  constexpr MultiStatValueAggregateResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiStatValueAggregateResponseDefaultTypeInternal() {}
  union {
    MultiStatValueAggregateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiStatValueAggregateResponseDefaultTypeInternal _MultiStatValueAggregateResponse_default_instance_;
constexpr PostTrendingMetricsViewRequest::PostTrendingMetricsViewRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : view_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , object_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct PostTrendingMetricsViewRequestDefaultTypeInternal {
  constexpr PostTrendingMetricsViewRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostTrendingMetricsViewRequestDefaultTypeInternal() {}
  union {
    PostTrendingMetricsViewRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostTrendingMetricsViewRequestDefaultTypeInternal _PostTrendingMetricsViewRequest_default_instance_;
constexpr ListTrendingMetricsViewsRequest::ListTrendingMetricsViewsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : view_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr)
  , page_(0u)
  , per_page_(0u){}
struct ListTrendingMetricsViewsRequestDefaultTypeInternal {
  constexpr ListTrendingMetricsViewsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListTrendingMetricsViewsRequestDefaultTypeInternal() {}
  union {
    ListTrendingMetricsViewsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListTrendingMetricsViewsRequestDefaultTypeInternal _ListTrendingMetricsViewsRequest_default_instance_;
constexpr MultiTrendingMetricsViewResponse::MultiTrendingMetricsViewResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metrics_()
  , status_(nullptr){}
struct MultiTrendingMetricsViewResponseDefaultTypeInternal {
  constexpr MultiTrendingMetricsViewResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiTrendingMetricsViewResponseDefaultTypeInternal() {}
  union {
    MultiTrendingMetricsViewResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiTrendingMetricsViewResponseDefaultTypeInternal _MultiTrendingMetricsViewResponse_default_instance_;
constexpr PostBulkOperationsRequest::PostBulkOperationsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bulk_operations_()
  , user_app_id_(nullptr){}
struct PostBulkOperationsRequestDefaultTypeInternal {
  constexpr PostBulkOperationsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PostBulkOperationsRequestDefaultTypeInternal() {}
  union {
    PostBulkOperationsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PostBulkOperationsRequestDefaultTypeInternal _PostBulkOperationsRequest_default_instance_;
constexpr ListBulkOperationsRequest::ListBulkOperationsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_app_id_(nullptr)
  , page_(0u)
  , per_page_(0u){}
struct ListBulkOperationsRequestDefaultTypeInternal {
  constexpr ListBulkOperationsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListBulkOperationsRequestDefaultTypeInternal() {}
  union {
    ListBulkOperationsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListBulkOperationsRequestDefaultTypeInternal _ListBulkOperationsRequest_default_instance_;
constexpr GetBulkOperationRequest::GetBulkOperationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_app_id_(nullptr){}
struct GetBulkOperationRequestDefaultTypeInternal {
  constexpr GetBulkOperationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBulkOperationRequestDefaultTypeInternal() {}
  union {
    GetBulkOperationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBulkOperationRequestDefaultTypeInternal _GetBulkOperationRequest_default_instance_;
constexpr CancelBulkOperationRequest::CancelBulkOperationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ids_()
  , user_app_id_(nullptr){}
struct CancelBulkOperationRequestDefaultTypeInternal {
  constexpr CancelBulkOperationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CancelBulkOperationRequestDefaultTypeInternal() {}
  union {
    CancelBulkOperationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CancelBulkOperationRequestDefaultTypeInternal _CancelBulkOperationRequest_default_instance_;
constexpr DeleteBulkOperationRequest::DeleteBulkOperationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ids_()
  , user_app_id_(nullptr){}
struct DeleteBulkOperationRequestDefaultTypeInternal {
  constexpr DeleteBulkOperationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteBulkOperationRequestDefaultTypeInternal() {}
  union {
    DeleteBulkOperationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteBulkOperationRequestDefaultTypeInternal _DeleteBulkOperationRequest_default_instance_;
constexpr SingleBulkOperationsResponse::SingleBulkOperationsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(nullptr)
  , bulk_operation_(nullptr){}
struct SingleBulkOperationsResponseDefaultTypeInternal {
  constexpr SingleBulkOperationsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SingleBulkOperationsResponseDefaultTypeInternal() {}
  union {
    SingleBulkOperationsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SingleBulkOperationsResponseDefaultTypeInternal _SingleBulkOperationsResponse_default_instance_;
constexpr MultiBulkOperationsResponse::MultiBulkOperationsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bulk_operation_()
  , status_(nullptr){}
struct MultiBulkOperationsResponseDefaultTypeInternal {
  constexpr MultiBulkOperationsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiBulkOperationsResponseDefaultTypeInternal() {}
  union {
    MultiBulkOperationsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiBulkOperationsResponseDefaultTypeInternal _MultiBulkOperationsResponse_default_instance_;
}  // namespace api
}  // namespace clarifai
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[244];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2fclarifai_2fapi_2fservice_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fclarifai_2fapi_2fservice_2eproto = nullptr;

const uint32_t TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Pagination, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Pagination, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::Pagination, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAnnotationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAnnotationRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAnnotationRequest, annotation_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAnnotationRequest, input_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, input_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, user_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, model_version_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, statuses_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, list_all_annotations_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, return_model_output_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, per_page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationsRequest, task_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationsRequest, annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsRequest, annotations_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsStatusRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsStatusRequest, status_code_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsStatusRequest, user_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsStatusRequest, task_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsStatusRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsStatusResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsStatusResponse, user_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsStatusResponse, updated_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationRequest, input_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationRequest, annotation_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationsRequest, ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationsRequest, input_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAnnotationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAnnotationResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAnnotationResponse, annotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAnnotationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAnnotationResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAnnotationResponse, annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAppRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAppRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAppRequest, additional_fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppsRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppsRequest, per_page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppsRequest, sort_ascending_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppsRequest, query_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppsRequest, name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppsRequest, featured_only_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppsRequest, starred_only_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppsRequest, additional_fields_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppsRequest, sort_by_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAppsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAppsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAppsRequest, apps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAppRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAppRequest, user_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppsRequest, apps_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppsRequest, action_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppsRequest, metadata_action_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppsRequest, reindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppRequest, app_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppRequest, action_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppRequest, metadata_action_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppRequest, reindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppsIdsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppsIdsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppsIdsRequest, ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAppsIdsRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAppsSearchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAppsSearchesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAppsSearchesRequest, app_query_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAppsSearchesRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAppResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAppResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAppResponse, app_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAppResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAppResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAppResponse, apps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollaboratorsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollaboratorsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollaboratorsRequest, list_all_collaborators_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostCollaboratorsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostCollaboratorsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostCollaboratorsRequest, collaborators_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchCollaboratorsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchCollaboratorsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchCollaboratorsRequest, collaborators_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchCollaboratorsRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteCollaboratorsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteCollaboratorsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteCollaboratorsRequest, collaborator_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteCollaboratorsRequest, user_emails_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiCollaboratorsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiCollaboratorsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiCollaboratorsResponse, collaborators_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollaborationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollaborationsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollaborationsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollaborationsRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiCollaborationsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiCollaborationsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiCollaborationsResponse, collaborations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetStatusCodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetStatusCodeRequest, status_code_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListStatusCodesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleStatusCodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleStatusCodeResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiStatusCodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiStatusCodeResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiStatusCodeResponse, statuses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptRequest, concept_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptsRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptsSearchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptsSearchesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptsSearchesRequest, concept_query_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptsSearchesRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptsRequest, concepts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchConceptsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchConceptsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchConceptsRequest, concepts_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchConceptsRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptCountsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptCountsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptCountsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptCountsRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleConceptResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleConceptResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleConceptResponse, concept_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptResponse, concepts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptCountResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptCountResponse, concept_counts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptRelationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptRelationsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptRelationsRequest, concept_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptRelationsRequest, predicate_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptRelationsRequest, knowledge_graph_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptRelationsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptRelationsRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptRelationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptRelationsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptRelationsRequest, concept_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptRelationsRequest, concept_relations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteConceptRelationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteConceptRelationsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteConceptRelationsRequest, concept_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteConceptRelationsRequest, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListKnowledgeGraphsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListKnowledgeGraphsRequest, user_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostKnowledgeGraphsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostKnowledgeGraphsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostKnowledgeGraphsRequest, knowledge_graphs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptMappingJobsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptMappingJobsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptMappingJobsRequest, concept_mapping_jobs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptRelationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptRelationResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptRelationResponse, concept_relations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiKnowledgeGraphResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiKnowledgeGraphResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiKnowledgeGraphResponse, knowledge_graphs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptMappingJobResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptMappingJobResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptMappingJobResponse, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptLanguageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptLanguageRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptLanguageRequest, concept_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetConceptLanguageRequest, language_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptLanguagesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptLanguagesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptLanguagesRequest, concept_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptLanguagesRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListConceptLanguagesRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchConceptLanguagesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchConceptLanguagesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchConceptLanguagesRequest, concept_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchConceptLanguagesRequest, concept_languages_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchConceptLanguagesRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptLanguagesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptLanguagesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptLanguagesRequest, concept_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostConceptLanguagesRequest, concept_languages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleConceptLanguageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleConceptLanguageResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleConceptLanguageResponse, concept_language_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptLanguageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptLanguageResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiConceptLanguageResponse, concept_languages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInputRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInputRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInputRequest, input_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInputSamplesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInputSamplesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInputSamplesRequest, task_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInputSamplesRequest, user_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListInputsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListInputsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListInputsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListInputsRequest, per_page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListInputsRequest, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListInputsRequest, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StreamInputsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StreamInputsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StreamInputsRequest, per_page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StreamInputsRequest, last_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StreamInputsRequest, order_by_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::StreamInputsRequest, descending_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsRequest, inputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchInputsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchInputsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchInputsRequest, inputs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchInputsRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteInputRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteInputRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteInputRequest, input_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteInputsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteInputsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteInputsRequest, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleInputResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleInputResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleInputResponse, input_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiInputResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiInputResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiInputResponse, inputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiInputAnnotationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiInputAnnotationResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiInputAnnotationResponse, hits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleInputCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleInputCountResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleInputCountResponse, counts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInputCountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetInputCountRequest, user_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetsRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetDatasetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetDatasetRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetDatasetRequest, dataset_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostDatasetsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostDatasetsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostDatasetsRequest, datasets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchDatasetsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchDatasetsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchDatasetsRequest, datasets_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchDatasetsRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteDatasetsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteDatasetsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteDatasetsRequest, dataset_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiDatasetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiDatasetResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiDatasetResponse, datasets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleDatasetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleDatasetResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleDatasetResponse, dataset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetInputsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetInputsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetInputsRequest, dataset_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetInputsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetInputsRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetDatasetInputRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetDatasetInputRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetDatasetInputRequest, dataset_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetDatasetInputRequest, input_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostDatasetInputsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostDatasetInputsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostDatasetInputsRequest, dataset_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostDatasetInputsRequest, dataset_inputs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostDatasetInputsRequest, search_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteDatasetInputsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteDatasetInputsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteDatasetInputsRequest, dataset_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteDatasetInputsRequest, input_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiDatasetInputResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiDatasetInputResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiDatasetInputResponse, dataset_inputs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiDatasetInputResponse, dataset_inputs_search_add_job_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleDatasetInputResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleDatasetInputResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleDatasetInputResponse, dataset_input_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetVersionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetVersionsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetVersionsRequest, dataset_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetVersionsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetVersionsRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetDatasetVersionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetDatasetVersionRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetDatasetVersionRequest, dataset_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetDatasetVersionRequest, dataset_version_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetVersionMetricsGroupsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetVersionMetricsGroupsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetVersionMetricsGroupsRequest, dataset_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetVersionMetricsGroupsRequest, dataset_version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetVersionMetricsGroupsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetVersionMetricsGroupsRequest, per_page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetVersionMetricsGroupsRequest, parent_paths_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetVersionMetricsGroupsRequest, types_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListDatasetVersionMetricsGroupsRequest, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostDatasetVersionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostDatasetVersionsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostDatasetVersionsRequest, dataset_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostDatasetVersionsRequest, dataset_versions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchDatasetVersionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchDatasetVersionsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchDatasetVersionsRequest, dataset_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchDatasetVersionsRequest, dataset_versions_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchDatasetVersionsRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteDatasetVersionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteDatasetVersionsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteDatasetVersionsRequest, dataset_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteDatasetVersionsRequest, dataset_version_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiDatasetVersionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiDatasetVersionResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiDatasetVersionResponse, dataset_versions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiDatasetVersionMetricsGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiDatasetVersionMetricsGroupResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiDatasetVersionMetricsGroupResponse, dataset_version_metrics_groups_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleDatasetVersionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleDatasetVersionResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleDatasetVersionResponse, dataset_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetDatasetInputsSearchAddJobRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetDatasetInputsSearchAddJobRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetDatasetInputsSearchAddJobRequest, job_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleDatasetInputsSearchAddJobResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleDatasetInputsSearchAddJobResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleDatasetInputsSearchAddJobResponse, job_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelOutputsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelOutputsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelOutputsRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelOutputsRequest, version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelOutputsRequest, inputs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelOutputsRequest, model_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelInputsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelInputsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelInputsRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelInputsRequest, version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelInputsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelInputsRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetKeyRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetKeyRequest, key_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListKeysRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListKeysRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListKeysRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListKeysRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppKeysRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppKeysRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppKeysRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppKeysRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostKeysRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostKeysRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostKeysRequest, keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteKeyRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteKeyRequest, key_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchKeysRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchKeysRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchKeysRequest, keys_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchKeysRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleKeyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleKeyResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleKeyResponse, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiKeyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiKeyResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiKeyResponse, keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelRequest, version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelRequest, language_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelRequest, trained_before_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelRequest, additional_fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, per_page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, sort_ascending_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, query_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, name_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, filter_by_user_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, model_type_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, trained_only_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, input_fields_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, output_fields_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, license_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, featured_only_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, starred_only_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, toolkits_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, use_cases_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, languages_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, additional_fields_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelsRequest, sort_by_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelToolkitsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelToolkitsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelToolkitsRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelToolkitsRequest, toolkits_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelToolkitsRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelUseCasesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelUseCasesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelUseCasesRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelUseCasesRequest, usecases_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelUseCasesRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelLanguagesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelLanguagesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelLanguagesRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelLanguagesRequest, languages_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelLanguagesRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelToolkitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelToolkitResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelToolkitResponse, toolkits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelUseCaseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelUseCaseResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelUseCaseResponse, usecases_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelLanguageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelLanguageResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelLanguageResponse, languages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelsRequest, model_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelsRequest, models_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelsRequest, models_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelsRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::IdUpdateSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::IdUpdateSource, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::IdUpdateSource, new_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelIdsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelIdsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelIdsRequest, ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelIdsRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelRequest, model_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelsRequest, ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelsRequest, delete_all_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelsSearchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelsSearchesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelsSearchesRequest, model_query_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelsSearchesRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelResponse, model_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelResponse, models_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelVersionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelVersionsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelVersionsRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelVersionsRequest, model_versions_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchModelVersionsRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionRequest, version_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionsRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionsRequest, per_page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionsRequest, concept_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelVersionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelVersionRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelVersionRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteModelVersionRequest, version_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelVersionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelVersionResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelVersionResponse, model_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelVersionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelVersionResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelVersionResponse, model_versions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsRequest, model_versions_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsRequest, search_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsRequest, train_search_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsRequest, test_search_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsRequest, evaluate_after_training_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsRequest, description_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsRequest, dataset_version_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsRequest, eval_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowVersionsUnPublishRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowVersionsUnPublishRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowVersionsUnPublishRequest, workflow_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowVersionsUnPublishRequest, publications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowVersionsPublishRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowVersionsPublishRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowVersionsPublishRequest, workflow_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowVersionsPublishRequest, publications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersionPublishRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersionPublishRequest, version_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersionUnPublishRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::WorkflowVersionUnPublishRequest, version_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersionPublishRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersionPublishRequest, version_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsPublishRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsPublishRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsPublishRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsPublishRequest, publications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersionUnpublishRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ModelVersionUnpublishRequest, version_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsUnPublishRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsUnPublishRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsUnPublishRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionsUnPublishRequest, publications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionMetricsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionMetricsRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionMetricsRequest, version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionMetricsRequest, max_examples_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionMetricsRequest, test_search_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostModelVersionMetricsRequest, eval_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionMetricsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionMetricsRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionMetricsRequest, version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionMetricsRequest, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelTypeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelTypeRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelTypeRequest, model_type_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelTypesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelTypesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelTypesRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelTypesRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListOpenSourceLicensesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListOpenSourceLicensesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListOpenSourceLicensesResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListOpenSourceLicensesResponse, licenses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelTypeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelTypeResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelTypeResponse, model_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelTypeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelTypeResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelTypeResponse, model_types_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelTypeResponse, model_importers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionInputExampleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionInputExampleRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionInputExampleRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionInputExampleRequest, model_version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetModelVersionInputExampleRequest, example_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionInputExamplesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionInputExamplesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionInputExamplesRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionInputExamplesRequest, model_version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionInputExamplesRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelVersionInputExamplesRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelVersionInputExampleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelVersionInputExampleResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleModelVersionInputExampleResponse, model_version_input_example_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelVersionInputExampleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelVersionInputExampleResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelVersionInputExampleResponse, model_version_input_examples_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelReferencesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelReferencesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelReferencesRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelReferencesRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListModelReferencesRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelReferenceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelReferenceResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiModelReferenceResponse, model_references_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiOutputResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiOutputResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiOutputResponse, outputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListScopesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListScopesRequest, key_type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListScopesRequest, user_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MyScopesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MyScopesRequest, user_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MyScopesUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MyScopesUserRequest, user_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MyScopesRootRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeDepsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeDepsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeDepsResponse, scope_deps_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeDepsResponse, endpoint_deps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeResponse, scopes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeResponse, app_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeResponse, endpoints_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeResponse, user_feature_flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeUserResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeUserResponse, scopes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeUserResponse, endpoints_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeUserResponse, user_feature_flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeRootResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeRootResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeRootResponse, scopes_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeRootResponse, endpoints_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiScopeRootResponse, user_feature_flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetSearchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetSearchRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetSearchRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListSearchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListSearchesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListSearchesRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListSearchesRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSearchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSearchesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSearchesRequest, query_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSearchesRequest, searches_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSearchesRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchInputsSearchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchInputsSearchesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchInputsSearchesRequest, searches_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchInputsSearchesRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsSearchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsSearchesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsSearchesRequest, searches_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationsSearchesRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchSearchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchSearchesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchSearchesRequest, searches_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchSearchesRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSearchesByIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSearchesByIDRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSearchesByIDRequest, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostSearchesByIDRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteSearchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteSearchRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteSearchRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationsSearchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationsSearchesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationsSearchesRequest, searches_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationsSearchesRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationSearchMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationSearchMetricsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationSearchMetricsRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsSearchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsSearchesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsSearchesRequest, searches_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostInputsSearchesRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleSearchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleSearchResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleSearchResponse, search_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiSearchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiSearchResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiSearchResponse, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiSearchResponse, hits_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiSearchResponse, query_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiSearchResponse, searches_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationSearchMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationSearchMetricsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationSearchMetricsRequest, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationSearchMetricsRequest, ground_truth_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationSearchMetricsRequest, search_to_eval_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationSearchMetricsRequest, data_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationSearchMetricsRequest, evaluation_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAnnotationSearchMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAnnotationSearchMetricsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAnnotationSearchMetricsRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationSearchMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationSearchMetricsRequest, user_app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAnnotationSearchMetricsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAnnotationSearchMetricsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAnnotationSearchMetricsResponse, annotation_search_metrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationFiltersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationFiltersRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationFiltersRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAnnotationFiltersRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAnnotationFilterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAnnotationFilterRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAnnotationFilterRequest, annotation_filter_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationFiltersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationFiltersRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAnnotationFiltersRequest, annotation_filters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationFiltersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationFiltersRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationFiltersRequest, annotation_filters_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchAnnotationFiltersRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationFiltersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationFiltersRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteAnnotationFiltersRequest, annotation_filter_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAnnotationFilterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAnnotationFilterResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAnnotationFilterResponse, annotation_filters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAnnotationFilterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAnnotationFilterResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAnnotationFilterResponse, annotation_filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostValidatePasswordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostValidatePasswordRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostValidatePasswordRequest, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SinglePasswordValidationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SinglePasswordValidationResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SinglePasswordValidationResponse, password_violations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetWorkflowRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetWorkflowRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetWorkflowRequest, workflow_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetWorkflowRequest, favor_clarifai_workflows_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetWorkflowRequest, additional_fields_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetWorkflowRequest, exclude_clarifai_workflows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowsRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowsRequest, per_page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowsRequest, sort_ascending_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowsRequest, query_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowsRequest, id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowsRequest, featured_only_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowsRequest, starred_only_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowsRequest, additional_fields_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowsRequest, sort_by_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowsRequest, workflows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchWorkflowsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchWorkflowsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchWorkflowsRequest, workflows_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchWorkflowsRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteWorkflowRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteWorkflowRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteWorkflowRequest, workflow_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteWorkflowsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteWorkflowsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteWorkflowsRequest, ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteWorkflowsRequest, delete_all_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleWorkflowResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleWorkflowResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleWorkflowResponse, workflow_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiWorkflowResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiWorkflowResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiWorkflowResponse, workflows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsRequest, workflow_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsRequest, version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsRequest, inputs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsRequest, output_config_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsRequest, favor_clarifai_workflows_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsRequest, workflow_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsResponse, workflow_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsResponse, results_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsResponse, workflow_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityRequest, workflow_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityRequest, version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityRequest, model_version_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityRequest, probe_inputs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityRequest, pool_inputs_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityRequest, favor_clarifai_workflows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostWorkflowResultsSimilarityResponse, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowVersionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowVersionsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowVersionsRequest, workflow_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowVersionsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListWorkflowVersionsRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetWorkflowVersionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetWorkflowVersionRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetWorkflowVersionRequest, workflow_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetWorkflowVersionRequest, workflow_version_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteWorkflowVersionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteWorkflowVersionsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteWorkflowVersionsRequest, workflow_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteWorkflowVersionsRequest, workflow_version_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchWorkflowVersionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchWorkflowVersionsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchWorkflowVersionsRequest, workflow_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchWorkflowVersionsRequest, workflow_versions_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchWorkflowVersionsRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiWorkflowVersionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiWorkflowVersionResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiWorkflowVersionResponse, workflow_versions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleWorkflowVersionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleWorkflowVersionResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleWorkflowVersionResponse, workflow_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAppDuplicationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAppDuplicationsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostAppDuplicationsRequest, app_duplications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAppDuplicationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAppDuplicationRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetAppDuplicationRequest, app_duplication_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppDuplicationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppDuplicationsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppDuplicationsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListAppDuplicationsRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAppDuplicationsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAppDuplicationsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiAppDuplicationsResponse, app_duplications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAppDuplicationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAppDuplicationResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleAppDuplicationResponse, app_duplication_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostTasksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostTasksRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostTasksRequest, tasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetTaskRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetTaskRequest, task_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetTaskRequest, additional_fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTasksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTasksRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTasksRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTasksRequest, per_page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTasksRequest, worker_user_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTasksRequest, review_user_ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTasksRequest, including_label_order_tasks_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTasksRequest, additional_fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchTasksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchTasksRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchTasksRequest, tasks_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchTasksRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteTasksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteTasksRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteTasksRequest, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiTaskResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiTaskResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiTaskResponse, tasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleTaskResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleTaskResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleTaskResponse, task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetTaskCountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetTaskCountRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetTaskCountRequest, task_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetTaskCountRequest, user_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleTaskCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleTaskCountResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleTaskCountResponse, app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleTaskCountResponse, task_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleTaskCountResponse, counts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostLabelOrdersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostLabelOrdersRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostLabelOrdersRequest, label_orders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetLabelOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetLabelOrderRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetLabelOrderRequest, label_order_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListLabelOrdersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListLabelOrdersRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListLabelOrdersRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListLabelOrdersRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchLabelOrdersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchLabelOrdersRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchLabelOrdersRequest, label_orders_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchLabelOrdersRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteLabelOrdersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteLabelOrdersRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteLabelOrdersRequest, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiLabelOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiLabelOrderResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiLabelOrderResponse, label_orders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleLabelOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleLabelOrderResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleLabelOrderResponse, label_order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostCollectorsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostCollectorsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostCollectorsRequest, collectors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchCollectorsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchCollectorsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchCollectorsRequest, collectors_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PatchCollectorsRequest, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteCollectorsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteCollectorsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteCollectorsRequest, ids_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteCollectorsRequest, delete_all_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetCollectorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetCollectorRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetCollectorRequest, collector_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollectorsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollectorsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollectorsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListCollectorsRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiCollectorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiCollectorResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiCollectorResponse, collectors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleCollectorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleCollectorResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleCollectorResponse, collector_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostStatValuesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostStatValuesRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostStatValuesRequest, stat_values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiStatValueResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiStatValueResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiStatValueResponse, stat_values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostStatValuesAggregateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostStatValuesAggregateRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostStatValuesAggregateRequest, stat_value_aggregate_queries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiStatValueAggregateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiStatValueAggregateResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiStatValueAggregateResponse, stat_value_aggregate_results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostTrendingMetricsViewRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostTrendingMetricsViewRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostTrendingMetricsViewRequest, view_type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostTrendingMetricsViewRequest, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTrendingMetricsViewsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTrendingMetricsViewsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTrendingMetricsViewsRequest, view_type_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTrendingMetricsViewsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListTrendingMetricsViewsRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiTrendingMetricsViewResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiTrendingMetricsViewResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiTrendingMetricsViewResponse, metrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostBulkOperationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostBulkOperationsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::PostBulkOperationsRequest, bulk_operations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListBulkOperationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListBulkOperationsRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListBulkOperationsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::ListBulkOperationsRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetBulkOperationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetBulkOperationRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::GetBulkOperationRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CancelBulkOperationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CancelBulkOperationRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::CancelBulkOperationRequest, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteBulkOperationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteBulkOperationRequest, user_app_id_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::DeleteBulkOperationRequest, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleBulkOperationsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleBulkOperationsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::SingleBulkOperationsResponse, bulk_operation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiBulkOperationsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiBulkOperationsResponse, status_),
  PROTOBUF_FIELD_OFFSET(::clarifai::api::MultiBulkOperationsResponse, bulk_operation_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::clarifai::api::Pagination)},
  { 8, -1, -1, sizeof(::clarifai::api::GetAnnotationRequest)},
  { 17, -1, -1, sizeof(::clarifai::api::ListAnnotationsRequest)},
  { 34, -1, -1, sizeof(::clarifai::api::PostAnnotationsRequest)},
  { 42, -1, -1, sizeof(::clarifai::api::PatchAnnotationsRequest)},
  { 51, -1, -1, sizeof(::clarifai::api::PatchAnnotationsStatusRequest)},
  { 62, -1, -1, sizeof(::clarifai::api::PatchAnnotationsStatusResponse)},
  { 71, -1, -1, sizeof(::clarifai::api::DeleteAnnotationRequest)},
  { 80, -1, -1, sizeof(::clarifai::api::DeleteAnnotationsRequest)},
  { 89, -1, -1, sizeof(::clarifai::api::SingleAnnotationResponse)},
  { 97, -1, -1, sizeof(::clarifai::api::MultiAnnotationResponse)},
  { 105, -1, -1, sizeof(::clarifai::api::GetAppRequest)},
  { 113, -1, -1, sizeof(::clarifai::api::ListAppsRequest)},
  { 131, -1, -1, sizeof(::clarifai::api::PostAppsRequest)},
  { 139, -1, -1, sizeof(::clarifai::api::DeleteAppRequest)},
  { 146, -1, -1, sizeof(::clarifai::api::PatchAppsRequest)},
  { 157, -1, -1, sizeof(::clarifai::api::PatchAppRequest)},
  { 168, -1, -1, sizeof(::clarifai::api::PatchAppsIdsRequest)},
  { 177, -1, -1, sizeof(::clarifai::api::PostAppsSearchesRequest)},
  { 186, -1, -1, sizeof(::clarifai::api::SingleAppResponse)},
  { 194, -1, -1, sizeof(::clarifai::api::MultiAppResponse)},
  { 202, -1, -1, sizeof(::clarifai::api::ListCollaboratorsRequest)},
  { 210, -1, -1, sizeof(::clarifai::api::PostCollaboratorsRequest)},
  { 218, -1, -1, sizeof(::clarifai::api::PatchCollaboratorsRequest)},
  { 227, -1, -1, sizeof(::clarifai::api::DeleteCollaboratorsRequest)},
  { 236, -1, -1, sizeof(::clarifai::api::MultiCollaboratorsResponse)},
  { 244, -1, -1, sizeof(::clarifai::api::ListCollaborationsRequest)},
  { 253, -1, -1, sizeof(::clarifai::api::MultiCollaborationsResponse)},
  { 261, -1, -1, sizeof(::clarifai::api::GetStatusCodeRequest)},
  { 268, -1, -1, sizeof(::clarifai::api::ListStatusCodesRequest)},
  { 274, -1, -1, sizeof(::clarifai::api::SingleStatusCodeResponse)},
  { 281, -1, -1, sizeof(::clarifai::api::MultiStatusCodeResponse)},
  { 289, -1, -1, sizeof(::clarifai::api::GetConceptRequest)},
  { 297, -1, -1, sizeof(::clarifai::api::ListConceptsRequest)},
  { 306, -1, -1, sizeof(::clarifai::api::PostConceptsSearchesRequest)},
  { 315, -1, -1, sizeof(::clarifai::api::PostConceptsRequest)},
  { 323, -1, -1, sizeof(::clarifai::api::PatchConceptsRequest)},
  { 332, -1, -1, sizeof(::clarifai::api::GetConceptCountsRequest)},
  { 341, -1, -1, sizeof(::clarifai::api::SingleConceptResponse)},
  { 349, -1, -1, sizeof(::clarifai::api::MultiConceptResponse)},
  { 357, -1, -1, sizeof(::clarifai::api::MultiConceptCountResponse)},
  { 365, -1, -1, sizeof(::clarifai::api::ListConceptRelationsRequest)},
  { 377, -1, -1, sizeof(::clarifai::api::PostConceptRelationsRequest)},
  { 386, -1, -1, sizeof(::clarifai::api::DeleteConceptRelationsRequest)},
  { 395, -1, -1, sizeof(::clarifai::api::ListKnowledgeGraphsRequest)},
  { 402, -1, -1, sizeof(::clarifai::api::PostKnowledgeGraphsRequest)},
  { 410, -1, -1, sizeof(::clarifai::api::PostConceptMappingJobsRequest)},
  { 418, -1, -1, sizeof(::clarifai::api::MultiConceptRelationResponse)},
  { 426, -1, -1, sizeof(::clarifai::api::MultiKnowledgeGraphResponse)},
  { 434, -1, -1, sizeof(::clarifai::api::MultiConceptMappingJobResponse)},
  { 442, -1, -1, sizeof(::clarifai::api::GetConceptLanguageRequest)},
  { 451, -1, -1, sizeof(::clarifai::api::ListConceptLanguagesRequest)},
  { 461, -1, -1, sizeof(::clarifai::api::PatchConceptLanguagesRequest)},
  { 471, -1, -1, sizeof(::clarifai::api::PostConceptLanguagesRequest)},
  { 480, -1, -1, sizeof(::clarifai::api::SingleConceptLanguageResponse)},
  { 488, -1, -1, sizeof(::clarifai::api::MultiConceptLanguageResponse)},
  { 496, -1, -1, sizeof(::clarifai::api::GetInputRequest)},
  { 504, -1, -1, sizeof(::clarifai::api::GetInputSamplesRequest)},
  { 513, -1, -1, sizeof(::clarifai::api::ListInputsRequest)},
  { 524, -1, -1, sizeof(::clarifai::api::StreamInputsRequest)},
  { 535, -1, -1, sizeof(::clarifai::api::PostInputsRequest)},
  { 543, -1, -1, sizeof(::clarifai::api::PatchInputsRequest)},
  { 552, -1, -1, sizeof(::clarifai::api::DeleteInputRequest)},
  { 560, -1, -1, sizeof(::clarifai::api::DeleteInputsRequest)},
  { 568, -1, -1, sizeof(::clarifai::api::SingleInputResponse)},
  { 576, -1, -1, sizeof(::clarifai::api::MultiInputResponse)},
  { 584, -1, -1, sizeof(::clarifai::api::MultiInputAnnotationResponse)},
  { 592, -1, -1, sizeof(::clarifai::api::SingleInputCountResponse)},
  { 600, -1, -1, sizeof(::clarifai::api::GetInputCountRequest)},
  { 607, -1, -1, sizeof(::clarifai::api::ListDatasetsRequest)},
  { 616, -1, -1, sizeof(::clarifai::api::GetDatasetRequest)},
  { 624, -1, -1, sizeof(::clarifai::api::PostDatasetsRequest)},
  { 632, -1, -1, sizeof(::clarifai::api::PatchDatasetsRequest)},
  { 641, -1, -1, sizeof(::clarifai::api::DeleteDatasetsRequest)},
  { 649, -1, -1, sizeof(::clarifai::api::MultiDatasetResponse)},
  { 657, -1, -1, sizeof(::clarifai::api::SingleDatasetResponse)},
  { 665, -1, -1, sizeof(::clarifai::api::ListDatasetInputsRequest)},
  { 675, -1, -1, sizeof(::clarifai::api::GetDatasetInputRequest)},
  { 684, -1, -1, sizeof(::clarifai::api::PostDatasetInputsRequest)},
  { 694, -1, -1, sizeof(::clarifai::api::DeleteDatasetInputsRequest)},
  { 703, -1, -1, sizeof(::clarifai::api::MultiDatasetInputResponse)},
  { 712, -1, -1, sizeof(::clarifai::api::SingleDatasetInputResponse)},
  { 720, -1, -1, sizeof(::clarifai::api::ListDatasetVersionsRequest)},
  { 730, -1, -1, sizeof(::clarifai::api::GetDatasetVersionRequest)},
  { 739, -1, -1, sizeof(::clarifai::api::ListDatasetVersionMetricsGroupsRequest)},
  { 753, -1, -1, sizeof(::clarifai::api::PostDatasetVersionsRequest)},
  { 762, -1, -1, sizeof(::clarifai::api::PatchDatasetVersionsRequest)},
  { 772, -1, -1, sizeof(::clarifai::api::DeleteDatasetVersionsRequest)},
  { 781, -1, -1, sizeof(::clarifai::api::MultiDatasetVersionResponse)},
  { 789, -1, -1, sizeof(::clarifai::api::MultiDatasetVersionMetricsGroupResponse)},
  { 797, -1, -1, sizeof(::clarifai::api::SingleDatasetVersionResponse)},
  { 805, -1, -1, sizeof(::clarifai::api::GetDatasetInputsSearchAddJobRequest)},
  { 813, -1, -1, sizeof(::clarifai::api::SingleDatasetInputsSearchAddJobResponse)},
  { 821, -1, -1, sizeof(::clarifai::api::PostModelOutputsRequest)},
  { 832, -1, -1, sizeof(::clarifai::api::ListModelInputsRequest)},
  { 843, -1, -1, sizeof(::clarifai::api::GetKeyRequest)},
  { 851, -1, -1, sizeof(::clarifai::api::ListKeysRequest)},
  { 860, -1, -1, sizeof(::clarifai::api::ListAppKeysRequest)},
  { 869, -1, -1, sizeof(::clarifai::api::PostKeysRequest)},
  { 877, -1, -1, sizeof(::clarifai::api::DeleteKeyRequest)},
  { 885, -1, -1, sizeof(::clarifai::api::PatchKeysRequest)},
  { 894, -1, -1, sizeof(::clarifai::api::SingleKeyResponse)},
  { 902, -1, -1, sizeof(::clarifai::api::MultiKeyResponse)},
  { 910, -1, -1, sizeof(::clarifai::api::GetModelRequest)},
  { 922, -1, -1, sizeof(::clarifai::api::ListModelsRequest)},
  { 950, -1, -1, sizeof(::clarifai::api::PatchModelToolkitsRequest)},
  { 960, -1, -1, sizeof(::clarifai::api::PatchModelUseCasesRequest)},
  { 970, -1, -1, sizeof(::clarifai::api::PatchModelLanguagesRequest)},
  { 980, -1, -1, sizeof(::clarifai::api::MultiModelToolkitResponse)},
  { 988, -1, -1, sizeof(::clarifai::api::MultiModelUseCaseResponse)},
  { 996, -1, -1, sizeof(::clarifai::api::MultiModelLanguageResponse)},
  { 1004, -1, -1, sizeof(::clarifai::api::PostModelsRequest)},
  { 1013, -1, -1, sizeof(::clarifai::api::PatchModelsRequest)},
  { 1022, -1, -1, sizeof(::clarifai::api::IdUpdateSource)},
  { 1030, -1, -1, sizeof(::clarifai::api::PatchModelIdsRequest)},
  { 1039, -1, -1, sizeof(::clarifai::api::DeleteModelRequest)},
  { 1047, -1, -1, sizeof(::clarifai::api::DeleteModelsRequest)},
  { 1056, -1, -1, sizeof(::clarifai::api::PostModelsSearchesRequest)},
  { 1065, -1, -1, sizeof(::clarifai::api::SingleModelResponse)},
  { 1073, -1, -1, sizeof(::clarifai::api::MultiModelResponse)},
  { 1081, -1, -1, sizeof(::clarifai::api::PatchModelVersionsRequest)},
  { 1091, -1, -1, sizeof(::clarifai::api::GetModelVersionRequest)},
  { 1100, -1, -1, sizeof(::clarifai::api::ListModelVersionsRequest)},
  { 1111, -1, -1, sizeof(::clarifai::api::DeleteModelVersionRequest)},
  { 1120, -1, -1, sizeof(::clarifai::api::SingleModelVersionResponse)},
  { 1128, -1, -1, sizeof(::clarifai::api::MultiModelVersionResponse)},
  { 1136, -1, -1, sizeof(::clarifai::api::PostModelVersionsRequest)},
  { 1152, -1, -1, sizeof(::clarifai::api::PostWorkflowVersionsUnPublishRequest)},
  { 1161, -1, -1, sizeof(::clarifai::api::PostWorkflowVersionsPublishRequest)},
  { 1170, -1, -1, sizeof(::clarifai::api::WorkflowVersionPublishRequest)},
  { 1177, -1, -1, sizeof(::clarifai::api::WorkflowVersionUnPublishRequest)},
  { 1184, -1, -1, sizeof(::clarifai::api::ModelVersionPublishRequest)},
  { 1191, -1, -1, sizeof(::clarifai::api::PostModelVersionsPublishRequest)},
  { 1200, -1, -1, sizeof(::clarifai::api::ModelVersionUnpublishRequest)},
  { 1207, -1, -1, sizeof(::clarifai::api::PostModelVersionsUnPublishRequest)},
  { 1216, -1, -1, sizeof(::clarifai::api::PostModelVersionMetricsRequest)},
  { 1228, -1, -1, sizeof(::clarifai::api::GetModelVersionMetricsRequest)},
  { 1238, -1, -1, sizeof(::clarifai::api::GetModelTypeRequest)},
  { 1246, -1, -1, sizeof(::clarifai::api::ListModelTypesRequest)},
  { 1255, -1, -1, sizeof(::clarifai::api::ListOpenSourceLicensesRequest)},
  { 1261, -1, -1, sizeof(::clarifai::api::ListOpenSourceLicensesResponse)},
  { 1269, -1, -1, sizeof(::clarifai::api::SingleModelTypeResponse)},
  { 1277, -1, -1, sizeof(::clarifai::api::MultiModelTypeResponse)},
  { 1286, -1, -1, sizeof(::clarifai::api::GetModelVersionInputExampleRequest)},
  { 1296, -1, -1, sizeof(::clarifai::api::ListModelVersionInputExamplesRequest)},
  { 1307, -1, -1, sizeof(::clarifai::api::SingleModelVersionInputExampleResponse)},
  { 1315, -1, -1, sizeof(::clarifai::api::MultiModelVersionInputExampleResponse)},
  { 1323, -1, -1, sizeof(::clarifai::api::ListModelReferencesRequest)},
  { 1333, -1, -1, sizeof(::clarifai::api::MultiModelReferenceResponse)},
  { 1341, -1, -1, sizeof(::clarifai::api::MultiOutputResponse)},
  { 1349, -1, -1, sizeof(::clarifai::api::ListScopesRequest)},
  { 1357, -1, -1, sizeof(::clarifai::api::MyScopesRequest)},
  { 1364, -1, -1, sizeof(::clarifai::api::MyScopesUserRequest)},
  { 1371, -1, -1, sizeof(::clarifai::api::MyScopesRootRequest)},
  { 1377, -1, -1, sizeof(::clarifai::api::MultiScopeDepsResponse)},
  { 1386, -1, -1, sizeof(::clarifai::api::MultiScopeResponse)},
  { 1397, -1, -1, sizeof(::clarifai::api::MultiScopeUserResponse)},
  { 1407, -1, -1, sizeof(::clarifai::api::MultiScopeRootResponse)},
  { 1417, -1, -1, sizeof(::clarifai::api::GetSearchRequest)},
  { 1425, -1, -1, sizeof(::clarifai::api::ListSearchesRequest)},
  { 1434, -1, -1, sizeof(::clarifai::api::PostSearchesRequest)},
  { 1444, -1, -1, sizeof(::clarifai::api::PatchInputsSearchesRequest)},
  { 1453, -1, -1, sizeof(::clarifai::api::PatchAnnotationsSearchesRequest)},
  { 1462, -1, -1, sizeof(::clarifai::api::PatchSearchesRequest)},
  { 1471, -1, -1, sizeof(::clarifai::api::PostSearchesByIDRequest)},
  { 1480, -1, -1, sizeof(::clarifai::api::DeleteSearchRequest)},
  { 1488, -1, -1, sizeof(::clarifai::api::PostAnnotationsSearchesRequest)},
  { 1497, -1, -1, sizeof(::clarifai::api::DeleteAnnotationSearchMetricsRequest)},
  { 1505, -1, -1, sizeof(::clarifai::api::PostInputsSearchesRequest)},
  { 1514, -1, -1, sizeof(::clarifai::api::SingleSearchResponse)},
  { 1522, -1, -1, sizeof(::clarifai::api::MultiSearchResponse)},
  { 1533, -1, -1, sizeof(::clarifai::api::PostAnnotationSearchMetricsRequest)},
  { 1545, -1, -1, sizeof(::clarifai::api::GetAnnotationSearchMetricsRequest)},
  { 1553, -1, -1, sizeof(::clarifai::api::ListAnnotationSearchMetricsRequest)},
  { 1560, -1, -1, sizeof(::clarifai::api::MultiAnnotationSearchMetricsResponse)},
  { 1568, -1, -1, sizeof(::clarifai::api::ListAnnotationFiltersRequest)},
  { 1577, -1, -1, sizeof(::clarifai::api::GetAnnotationFilterRequest)},
  { 1585, -1, -1, sizeof(::clarifai::api::PostAnnotationFiltersRequest)},
  { 1593, -1, -1, sizeof(::clarifai::api::PatchAnnotationFiltersRequest)},
  { 1602, -1, -1, sizeof(::clarifai::api::DeleteAnnotationFiltersRequest)},
  { 1610, -1, -1, sizeof(::clarifai::api::MultiAnnotationFilterResponse)},
  { 1618, -1, -1, sizeof(::clarifai::api::SingleAnnotationFilterResponse)},
  { 1626, -1, -1, sizeof(::clarifai::api::PostValidatePasswordRequest)},
  { 1634, -1, -1, sizeof(::clarifai::api::SinglePasswordValidationResponse)},
  { 1642, -1, -1, sizeof(::clarifai::api::GetWorkflowRequest)},
  { 1653, -1, -1, sizeof(::clarifai::api::ListWorkflowsRequest)},
  { 1671, -1, -1, sizeof(::clarifai::api::PostWorkflowsRequest)},
  { 1679, -1, -1, sizeof(::clarifai::api::PatchWorkflowsRequest)},
  { 1688, -1, -1, sizeof(::clarifai::api::DeleteWorkflowRequest)},
  { 1696, -1, -1, sizeof(::clarifai::api::DeleteWorkflowsRequest)},
  { 1705, -1, -1, sizeof(::clarifai::api::SingleWorkflowResponse)},
  { 1713, -1, -1, sizeof(::clarifai::api::MultiWorkflowResponse)},
  { 1721, -1, -1, sizeof(::clarifai::api::PostWorkflowResultsRequest)},
  { 1734, -1, -1, sizeof(::clarifai::api::PostWorkflowResultsResponse)},
  { 1744, -1, -1, sizeof(::clarifai::api::PostWorkflowResultsSimilarityRequest)},
  { 1757, -1, -1, sizeof(::clarifai::api::PostWorkflowResultsSimilarityResponse)},
  { 1765, -1, -1, sizeof(::clarifai::api::ListWorkflowVersionsRequest)},
  { 1775, -1, -1, sizeof(::clarifai::api::GetWorkflowVersionRequest)},
  { 1784, -1, -1, sizeof(::clarifai::api::DeleteWorkflowVersionsRequest)},
  { 1793, -1, -1, sizeof(::clarifai::api::PatchWorkflowVersionsRequest)},
  { 1803, -1, -1, sizeof(::clarifai::api::MultiWorkflowVersionResponse)},
  { 1811, -1, -1, sizeof(::clarifai::api::SingleWorkflowVersionResponse)},
  { 1819, -1, -1, sizeof(::clarifai::api::PostAppDuplicationsRequest)},
  { 1827, -1, -1, sizeof(::clarifai::api::GetAppDuplicationRequest)},
  { 1835, -1, -1, sizeof(::clarifai::api::ListAppDuplicationsRequest)},
  { 1844, -1, -1, sizeof(::clarifai::api::MultiAppDuplicationsResponse)},
  { 1852, -1, -1, sizeof(::clarifai::api::SingleAppDuplicationResponse)},
  { 1860, -1, -1, sizeof(::clarifai::api::PostTasksRequest)},
  { 1868, -1, -1, sizeof(::clarifai::api::GetTaskRequest)},
  { 1877, -1, -1, sizeof(::clarifai::api::ListTasksRequest)},
  { 1890, -1, -1, sizeof(::clarifai::api::PatchTasksRequest)},
  { 1899, -1, -1, sizeof(::clarifai::api::DeleteTasksRequest)},
  { 1907, -1, -1, sizeof(::clarifai::api::MultiTaskResponse)},
  { 1915, -1, -1, sizeof(::clarifai::api::SingleTaskResponse)},
  { 1923, -1, -1, sizeof(::clarifai::api::GetTaskCountRequest)},
  { 1932, -1, -1, sizeof(::clarifai::api::SingleTaskCountResponse)},
  { 1942, -1, -1, sizeof(::clarifai::api::PostLabelOrdersRequest)},
  { 1950, -1, -1, sizeof(::clarifai::api::GetLabelOrderRequest)},
  { 1958, -1, -1, sizeof(::clarifai::api::ListLabelOrdersRequest)},
  { 1967, -1, -1, sizeof(::clarifai::api::PatchLabelOrdersRequest)},
  { 1976, -1, -1, sizeof(::clarifai::api::DeleteLabelOrdersRequest)},
  { 1984, -1, -1, sizeof(::clarifai::api::MultiLabelOrderResponse)},
  { 1992, -1, -1, sizeof(::clarifai::api::SingleLabelOrderResponse)},
  { 2000, -1, -1, sizeof(::clarifai::api::PostCollectorsRequest)},
  { 2008, -1, -1, sizeof(::clarifai::api::PatchCollectorsRequest)},
  { 2017, -1, -1, sizeof(::clarifai::api::DeleteCollectorsRequest)},
  { 2026, -1, -1, sizeof(::clarifai::api::GetCollectorRequest)},
  { 2034, -1, -1, sizeof(::clarifai::api::ListCollectorsRequest)},
  { 2043, -1, -1, sizeof(::clarifai::api::MultiCollectorResponse)},
  { 2051, -1, -1, sizeof(::clarifai::api::SingleCollectorResponse)},
  { 2059, -1, -1, sizeof(::clarifai::api::PostStatValuesRequest)},
  { 2067, -1, -1, sizeof(::clarifai::api::MultiStatValueResponse)},
  { 2075, -1, -1, sizeof(::clarifai::api::PostStatValuesAggregateRequest)},
  { 2083, -1, -1, sizeof(::clarifai::api::MultiStatValueAggregateResponse)},
  { 2091, -1, -1, sizeof(::clarifai::api::PostTrendingMetricsViewRequest)},
  { 2100, -1, -1, sizeof(::clarifai::api::ListTrendingMetricsViewsRequest)},
  { 2110, -1, -1, sizeof(::clarifai::api::MultiTrendingMetricsViewResponse)},
  { 2118, -1, -1, sizeof(::clarifai::api::PostBulkOperationsRequest)},
  { 2126, -1, -1, sizeof(::clarifai::api::ListBulkOperationsRequest)},
  { 2135, -1, -1, sizeof(::clarifai::api::GetBulkOperationRequest)},
  { 2143, -1, -1, sizeof(::clarifai::api::CancelBulkOperationRequest)},
  { 2151, -1, -1, sizeof(::clarifai::api::DeleteBulkOperationRequest)},
  { 2159, -1, -1, sizeof(::clarifai::api::SingleBulkOperationsResponse)},
  { 2167, -1, -1, sizeof(::clarifai::api::MultiBulkOperationsResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_Pagination_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetAnnotationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListAnnotationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostAnnotationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchAnnotationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchAnnotationsStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchAnnotationsStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteAnnotationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteAnnotationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleAnnotationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiAnnotationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetAppRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListAppsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostAppsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteAppRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchAppsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchAppRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchAppsIdsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostAppsSearchesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleAppResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiAppResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListCollaboratorsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostCollaboratorsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchCollaboratorsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteCollaboratorsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiCollaboratorsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListCollaborationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiCollaborationsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetStatusCodeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListStatusCodesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleStatusCodeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiStatusCodeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetConceptRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListConceptsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostConceptsSearchesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostConceptsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchConceptsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetConceptCountsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleConceptResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiConceptResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiConceptCountResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListConceptRelationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostConceptRelationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteConceptRelationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListKnowledgeGraphsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostKnowledgeGraphsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostConceptMappingJobsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiConceptRelationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiKnowledgeGraphResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiConceptMappingJobResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetConceptLanguageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListConceptLanguagesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchConceptLanguagesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostConceptLanguagesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleConceptLanguageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiConceptLanguageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetInputRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetInputSamplesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListInputsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_StreamInputsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostInputsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchInputsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteInputRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteInputsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleInputResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiInputResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiInputAnnotationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleInputCountResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetInputCountRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListDatasetsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetDatasetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostDatasetsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchDatasetsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteDatasetsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiDatasetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleDatasetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListDatasetInputsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetDatasetInputRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostDatasetInputsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteDatasetInputsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiDatasetInputResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleDatasetInputResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListDatasetVersionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetDatasetVersionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListDatasetVersionMetricsGroupsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostDatasetVersionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchDatasetVersionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteDatasetVersionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiDatasetVersionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiDatasetVersionMetricsGroupResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleDatasetVersionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetDatasetInputsSearchAddJobRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleDatasetInputsSearchAddJobResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostModelOutputsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListModelInputsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetKeyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListKeysRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListAppKeysRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostKeysRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteKeyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchKeysRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleKeyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiKeyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetModelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListModelsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchModelToolkitsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchModelUseCasesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchModelLanguagesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiModelToolkitResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiModelUseCaseResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiModelLanguageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostModelsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchModelsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_IdUpdateSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchModelIdsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteModelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteModelsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostModelsSearchesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleModelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiModelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchModelVersionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetModelVersionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListModelVersionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteModelVersionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleModelVersionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiModelVersionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostModelVersionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostWorkflowVersionsUnPublishRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostWorkflowVersionsPublishRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_WorkflowVersionPublishRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_WorkflowVersionUnPublishRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ModelVersionPublishRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostModelVersionsPublishRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ModelVersionUnpublishRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostModelVersionsUnPublishRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostModelVersionMetricsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetModelVersionMetricsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetModelTypeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListModelTypesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListOpenSourceLicensesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListOpenSourceLicensesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleModelTypeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiModelTypeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetModelVersionInputExampleRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListModelVersionInputExamplesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleModelVersionInputExampleResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiModelVersionInputExampleResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListModelReferencesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiModelReferenceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiOutputResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListScopesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MyScopesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MyScopesUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MyScopesRootRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiScopeDepsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiScopeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiScopeUserResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiScopeRootResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetSearchRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListSearchesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostSearchesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchInputsSearchesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchAnnotationsSearchesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchSearchesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostSearchesByIDRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteSearchRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostAnnotationsSearchesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteAnnotationSearchMetricsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostInputsSearchesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleSearchResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiSearchResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostAnnotationSearchMetricsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetAnnotationSearchMetricsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListAnnotationSearchMetricsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiAnnotationSearchMetricsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListAnnotationFiltersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetAnnotationFilterRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostAnnotationFiltersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchAnnotationFiltersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteAnnotationFiltersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiAnnotationFilterResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleAnnotationFilterResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostValidatePasswordRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SinglePasswordValidationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetWorkflowRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListWorkflowsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostWorkflowsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchWorkflowsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteWorkflowRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteWorkflowsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleWorkflowResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiWorkflowResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostWorkflowResultsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostWorkflowResultsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostWorkflowResultsSimilarityRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostWorkflowResultsSimilarityResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListWorkflowVersionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetWorkflowVersionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteWorkflowVersionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchWorkflowVersionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiWorkflowVersionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleWorkflowVersionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostAppDuplicationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetAppDuplicationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListAppDuplicationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiAppDuplicationsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleAppDuplicationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostTasksRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetTaskRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListTasksRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchTasksRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteTasksRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiTaskResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleTaskResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetTaskCountRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleTaskCountResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostLabelOrdersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetLabelOrderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListLabelOrdersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchLabelOrdersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteLabelOrdersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiLabelOrderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleLabelOrderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostCollectorsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PatchCollectorsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteCollectorsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetCollectorRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListCollectorsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiCollectorResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleCollectorResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostStatValuesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiStatValueResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostStatValuesAggregateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiStatValueAggregateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostTrendingMetricsViewRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListTrendingMetricsViewsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiTrendingMetricsViewResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_PostBulkOperationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_ListBulkOperationsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_GetBulkOperationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_CancelBulkOperationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_DeleteBulkOperationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_SingleBulkOperationsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clarifai::api::_MultiBulkOperationsResponse_default_instance_),
};

const char descriptor_table_protodef_proto_2fclarifai_2fapi_2fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  { '\n', ' ', 'p', 'r', 'o', 't', 'o', '/', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '/', 'a', 'p', 'i', '/', 's', 'e', 'r', 'v', 
  'i', 'c', 'e', '.', 'p', 'r', 'o', 't', 'o', '\022', '\014', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '\032', '\"', 
  'p', 'r', 'o', 't', 'o', '/', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '/', 'a', 'p', 'i', '/', 'r', 'e', 's', 'o', 'u', 'r', 
  'c', 'e', 's', '.', 'p', 'r', 'o', 't', 'o', '\032', '&', 'p', 'r', 'o', 't', 'o', '/', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '/', 'a', 'p', 'i', '/', 's', 't', 'a', 't', 'u', 's', '/', 's', 't', 'a', 't', 'u', 's', '.', 'p', 'r', 'o', 't', 'o', '\032', 
  ')', 'p', 'r', 'o', 't', 'o', '/', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '/', 'a', 'p', 'i', '/', 'u', 't', 'i', 'l', 's', 
  '/', 'e', 'x', 't', 'e', 'n', 's', 'i', 'o', 'n', 's', '.', 'p', 'r', 'o', 't', 'o', '\032', '%', 'p', 'r', 'o', 't', 'o', '/', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '/', 'a', 'u', 't', 'h', '/', 's', 'c', 'o', 'p', 'e', '/', 's', 'c', 'o', 'p', 'e', 
  '.', 'p', 'r', 'o', 't', 'o', '\032', '(', 'p', 'r', 'o', 't', 'o', '/', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '/', 'a', 'u', 
  't', 'h', '/', 'u', 't', 'i', 'l', '/', 'e', 'x', 't', 'e', 'n', 's', 'i', 'o', 'n', '.', 'p', 'r', 'o', 't', 'o', '\032', '+', 
  'p', 'r', 'o', 't', 'o', '/', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '/', 'a', 'p', 'i', '/', 's', 't', 'a', 't', 'u', 's', 
  '/', 's', 't', 'a', 't', 'u', 's', '_', 'c', 'o', 'd', 'e', '.', 'p', 'r', 'o', 't', 'o', '\032', '\034', 'g', 'o', 'o', 'g', 'l', 
  'e', '/', 'a', 'p', 'i', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', '.', 'p', 'r', 'o', 't', 'o', '\032', '\036', 
  'g', 'o', 'o', 'g', 'l', 'e', '/', 'p', 'r', 'o', 't', 'o', 'b', 'u', 'f', '/', 'd', 'u', 'r', 'a', 't', 'i', 'o', 'n', '.', 
  'p', 'r', 'o', 't', 'o', '\032', '\034', 'g', 'o', 'o', 'g', 'l', 'e', '/', 'p', 'r', 'o', 't', 'o', 'b', 'u', 'f', '/', 's', 't', 
  'r', 'u', 'c', 't', '.', 'p', 'r', 'o', 't', 'o', '\032', '\037', 'g', 'o', 'o', 'g', 'l', 'e', '/', 'p', 'r', 'o', 't', 'o', 'b', 
  'u', 'f', '/', 't', 'i', 'm', 'e', 's', 't', 'a', 'm', 'p', '.', 'p', 'r', 'o', 't', 'o', '\"', ',', '\n', '\n', 'P', 'a', 'g', 
  'i', 'n', 'a', 't', 'i', 'o', 'n', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 
  'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\002', ' ', '\001', '(', '\r', '\"', 'p', '\n', '\024', 'G', 'e', 't', 'A', 'n', 'n', 'o', 
  't', 'a', 't', 'i', 'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', 
  '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\025', '\n', '\r', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 
  'n', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\020', '\n', '\010', 'i', 'n', 'p', 'u', 't', '_', 'i', 'd', '\030', '\003', ' ', 
  '\001', '(', '\t', '\"', '\267', '\002', '\n', '\026', 'L', 'i', 's', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 
  'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', 
  '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 
  'D', 'S', 'e', 't', '\022', '\013', '\n', '\003', 'i', 'd', 's', '\030', '\002', ' ', '\003', '(', '\t', '\022', '\021', '\n', '\t', 'i', 'n', 'p', 'u', 
  't', '_', 'i', 'd', 's', '\030', '\003', ' ', '\003', '(', '\t', '\022', '\020', '\n', '\010', 'u', 's', 'e', 'r', '_', 'i', 'd', 's', '\030', '\t', 
  ' ', '\003', '(', '\t', '\022', '\031', '\n', '\021', 'm', 'o', 'd', 'e', 'l', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', 's', 
  '\030', '\n', ' ', '\003', '(', '\t', '\022', '-', '\n', '\010', 's', 't', 'a', 't', 'u', 's', 'e', 's', '\030', '\005', ' ', '\003', '(', '\013', '2', 
  '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 
  't', 'u', 's', '\022', '\034', '\n', '\024', 'l', 'i', 's', 't', '_', 'a', 'l', 'l', '_', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 
  'n', 's', '\030', '\006', ' ', '\001', '(', '\010', '\022', '\033', '\n', '\023', 'r', 'e', 't', 'u', 'r', 'n', '_', 'm', 'o', 'd', 'e', 'l', '_', 
  'o', 'u', 't', 'p', 'u', 't', '\030', '\014', ' ', '\001', '(', '\010', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\007', ' ', '\001', '(', 
  '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\010', ' ', '\001', '(', '\r', '\022', '\017', '\n', '\007', 't', 'a', 
  's', 'k', '_', 'i', 'd', '\030', '\013', ' ', '\001', '(', '\t', 'J', '\004', '\010', '\004', '\020', '\005', '\"', 'x', '\n', '\026', 'P', 'o', 's', 't', 
  'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '-', '\n', '\013', 'a', 'n', 'n', 'o', 
  't', 'a', 't', 'i', 'o', 'n', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\030', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '\"', '\211', '\001', '\n', '\027', 'P', 'a', 't', 'c', 'h', 'A', 
  'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '-', '\n', '\013', 'a', 'n', 'n', 'o', 't', 
  'a', 't', 'i', 'o', 'n', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\030', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\003', 
  ' ', '\001', '(', '\t', '\"', '\271', '\001', '\n', '\035', 'P', 'a', 't', 'c', 'h', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', 
  'S', 't', 'a', 't', 'u', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', 
  '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '4', '\n', '\013', 's', 't', 'a', 't', 'u', 's', '_', 'c', 'o', 
  'd', 'e', '\030', '\002', ' ', '\001', '(', '\016', '2', '\037', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 
  't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', 'C', 'o', 'd', 'e', '\022', '\020', '\n', '\010', 'u', 's', 'e', 'r', '_', 
  'i', 'd', 's', '\030', '\003', ' ', '\003', '(', '\t', '\022', '\017', '\n', '\007', 't', 'a', 's', 'k', '_', 'i', 'd', '\030', '\004', ' ', '\001', '(', 
  '\t', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\005', ' ', '\001', '(', '\t', '\"', 'v', '\n', '\036', 'P', 'a', 't', 'c', 
  'h', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', 'S', 't', 'a', 't', 'u', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 
  'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '\020', '\n', '\010', 
  'u', 's', 'e', 'r', '_', 'i', 'd', 's', '\030', '\002', ' ', '\003', '(', '\t', '\022', '\025', '\n', '\r', 'u', 'p', 'd', 'a', 't', 'e', 'd', 
  '_', 'c', 'o', 'u', 'n', 't', '\030', '\003', ' ', '\001', '(', '\r', '\"', 's', '\n', '\027', 'D', 'e', 'l', 'e', 't', 'e', 'A', 'n', 'n', 
  'o', 't', 'a', 't', 'i', 'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 'i', 'n', 'p', 'u', 't', '_', 'i', 'd', 
  '\030', '\002', ' ', '\001', '(', '\t', '\022', '\025', '\n', '\r', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '_', 'i', 'd', '\030', '\003', 
  ' ', '\001', '(', '\t', '\"', 'k', '\n', '\030', 'D', 'e', 'l', 'e', 't', 'e', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', 
  'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', 
  '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 
  'p', 'I', 'D', 'S', 'e', 't', '\022', '\013', '\n', '\003', 'i', 'd', 's', '\030', '\002', ' ', '\003', '(', '\t', '\022', '\021', '\n', '\t', 'i', 'n', 
  'p', 'u', 't', '_', 'i', 'd', 's', '\030', '\003', ' ', '\003', '(', '\t', '\"', 'u', '\n', '\030', 'S', 'i', 'n', 'g', 'l', 'e', 'A', 'n', 
  'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 
  's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 
  'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', ',', '\n', '\n', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 
  '\030', '\002', ' ', '\001', '(', '\013', '2', '\030', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'A', 'n', 'n', 
  'o', 't', 'a', 't', 'i', 'o', 'n', '\"', '{', '\n', '\027', 'M', 'u', 'l', 't', 'i', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 
  'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', 
  '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 
  'a', 't', 'u', 's', '\022', '3', '\n', '\013', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', '\030', '\002', ' ', '\003', '(', '\013', 
  '2', '\030', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 
  'n', 'B', '\004', '\200', '\265', '\030', '\001', '\"', '[', '\n', '\r', 'G', 'e', 't', 'A', 'p', 'p', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', 
  '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\031', 
  '\n', '\021', 'a', 'd', 'd', 'i', 't', 'i', 'o', 'n', 'a', 'l', '_', 'f', 'i', 'e', 'l', 'd', 's', '\030', '\002', ' ', '\003', '(', '\t', 
  '\"', '\245', '\002', '\n', '\017', 'L', 'i', 's', 't', 'A', 'p', 'p', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\014', '\n', '\004', 'p', 'a', 
  'g', 'e', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', 
  '\r', '\022', '\026', '\n', '\016', 's', 'o', 'r', 't', '_', 'a', 's', 'c', 'e', 'n', 'd', 'i', 'n', 'g', '\030', '\005', ' ', '\001', '(', '\010', 
  '\022', '\026', '\n', '\014', 's', 'o', 'r', 't', '_', 'b', 'y', '_', 'n', 'a', 'm', 'e', '\030', '\006', ' ', '\001', '(', '\010', 'H', '\000', '\022', 
  '\035', '\n', '\023', 's', 'o', 'r', 't', '_', 'b', 'y', '_', 'm', 'o', 'd', 'i', 'f', 'i', 'e', 'd', '_', 'a', 't', '\030', '\007', ' ', 
  '\001', '(', '\010', 'H', '\000', '\022', '\r', '\n', '\005', 'q', 'u', 'e', 'r', 'y', '\030', '\010', ' ', '\001', '(', '\t', '\022', '\020', '\n', '\004', 'n', 
  'a', 'm', 'e', '\030', '\004', ' ', '\001', '(', '\t', 'B', '\002', '\030', '\001', '\022', '\025', '\n', '\r', 'f', 'e', 'a', 't', 'u', 'r', 'e', 'd', 
  '_', 'o', 'n', 'l', 'y', '\030', '\t', ' ', '\001', '(', '\010', '\022', '\024', '\n', '\014', 's', 't', 'a', 'r', 'r', 'e', 'd', '_', 'o', 'n', 
  'l', 'y', '\030', '\013', ' ', '\001', '(', '\010', '\022', '\031', '\n', '\021', 'a', 'd', 'd', 'i', 't', 'i', 'o', 'n', 'a', 'l', '_', 'f', 'i', 
  'e', 'l', 'd', 's', '\030', '\n', ' ', '\003', '(', '\t', 'B', '\t', '\n', '\007', 's', 'o', 'r', 't', '_', 'b', 'y', '\"', 'c', '\n', '\017', 
  'P', 'o', 's', 't', 'A', 'p', 'p', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 
  'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\037', '\n', '\004', 'a', 'p', 'p', 's', '\030', '\002', ' ', 
  '\003', '(', '\013', '2', '\021', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'A', 'p', 'p', '\"', 'C', '\n', 
  '\020', 'D', 'e', 'l', 'e', 't', 'e', 'A', 'p', 'p', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\"', '\271', '\001', '\n', '\020', 'P', 'a', 't', 'c', 
  'h', 'A', 'p', 'p', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 
  's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\037', '\n', '\004', 'a', 'p', 'p', 's', '\030', '\002', ' ', '\003', '(', '\013', 
  '2', '\021', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'A', 'p', 'p', '\022', '\016', '\n', '\006', 'a', 'c', 
  't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\t', '\022', '2', '\n', '\017', 'm', 'e', 't', 'a', 'd', 'a', 't', 'a', '_', 'a', 'c', 
  't', 'i', 'o', 'n', '\030', '\004', ' ', '\001', '(', '\013', '2', '\031', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'P', 'a', 't', 'c', 'h', 'A', 'c', 't', 'i', 'o', 'n', '\022', '\017', '\n', '\007', 'r', 'e', 'i', 'n', 'd', 'e', 'x', '\030', '\005', 
  ' ', '\001', '(', '\010', '\"', '\267', '\001', '\n', '\017', 'P', 'a', 't', 'c', 'h', 'A', 'p', 'p', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', 
  '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\036', 
  '\n', '\003', 'a', 'p', 'p', '\030', '\002', ' ', '\001', '(', '\013', '2', '\021', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'A', 'p', 'p', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\t', '\022', '2', '\n', '\017', 
  'm', 'e', 't', 'a', 'd', 'a', 't', 'a', '_', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\004', ' ', '\001', '(', '\013', '2', '\031', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'A', 'c', 't', 'i', 'o', 'n', '\022', '\017', 
  '\n', '\007', 'r', 'e', 'i', 'n', 'd', 'e', 'x', '\030', '\005', ' ', '\001', '(', '\010', '\"', '\201', '\001', '\n', '\023', 'P', 'a', 't', 'c', 'h', 
  'A', 'p', 'p', 's', 'I', 'd', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', ')', '\n', '\003', 'i', 'd', 's', '\030', '\003', ' ', '\003', '(', 
  '\013', '2', '\034', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'I', 'd', 'U', 'p', 'd', 'a', 't', 'e', 
  'S', 'o', 'u', 'r', 'c', 'e', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\004', ' ', '\001', '(', '\t', '\"', '\243', '\001', 
  '\n', '\027', 'P', 'o', 's', 't', 'A', 'p', 'p', 's', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', 
  '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', 
  ')', '\n', '\t', 'a', 'p', 'p', '_', 'q', 'u', 'e', 'r', 'y', '\030', '\002', ' ', '\001', '(', '\013', '2', '\026', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'A', 'p', 'p', 'Q', 'u', 'e', 'r', 'y', '\022', ',', '\n', '\n', 'p', 'a', 'g', 'i', 
  'n', 'a', 't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\013', '2', '\030', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'P', 'a', 'g', 'i', 'n', 'a', 't', 'i', 'o', 'n', '\"', '`', '\n', '\021', 'S', 'i', 'n', 'g', 'l', 'e', 'A', 'p', 
  'p', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', 
  '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 
  'a', 't', 'u', 's', '\022', '\036', '\n', '\003', 'a', 'p', 'p', '\030', '\002', ' ', '\001', '(', '\013', '2', '\021', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'A', 'p', 'p', '\"', 'f', '\n', '\020', 'M', 'u', 'l', 't', 'i', 'A', 'p', 'p', 'R', 'e', 
  's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 
  's', '\022', '%', '\n', '\004', 'a', 'p', 'p', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\021', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'A', 'p', 'p', 'B', '\004', '\200', '\265', '\030', '\001', '\"', 'k', '\n', '\030', 'L', 'i', 's', 't', 'C', 'o', 
  'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\036', '\n', '\026', 'l', 'i', 's', 't', 
  '_', 'a', 'l', 'l', '_', 'c', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', 's', '\030', '\002', ' ', '\001', '(', '\010', '\"', 
  '~', '\n', '\030', 'P', 'o', 's', 't', 'C', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', 's', 'R', 'e', 'q', 'u', 'e', 
  's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 
  't', '\022', '1', '\n', '\r', 'c', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', 
  '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'C', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 
  'o', 'r', '\"', '\217', '\001', '\n', '\031', 'P', 'a', 't', 'c', 'h', 'C', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', 's', 
  'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', 
  '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 
  'p', 'I', 'D', 'S', 'e', 't', '\022', '1', '\n', '\r', 'c', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', 's', '\030', '\002', 
  ' ', '\003', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'C', 'o', 'l', 'l', 'a', 
  'b', 'o', 'r', 'a', 't', 'o', 'r', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\t', '\"', '|', 
  '\n', '\032', 'D', 'e', 'l', 'e', 't', 'e', 'C', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', 's', 'R', 'e', 'q', 'u', 
  'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', 
  '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 
  'e', 't', '\022', '\030', '\n', '\020', 'c', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', '_', 'i', 'd', 's', '\030', '\002', ' ', 
  '\003', '(', '\t', '\022', '\023', '\n', '\013', 'u', 's', 'e', 'r', '_', 'e', 'm', 'a', 'i', 'l', 's', '\030', '\003', ' ', '\003', '(', '\t', '\"', 
  '\202', '\001', '\n', '\032', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', 's', 'R', 'e', 's', 
  'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', 
  '\022', '7', '\n', '\r', 'c', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\032', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'C', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 
  'r', 'B', '\004', '\200', '\265', '\030', '\001', '\"', 'l', '\n', '\031', 'L', 'i', 's', 't', 'C', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 
  'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 
  'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\002', ' ', '\001', '(', '\r', '\022', 
  '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\"', '\205', '\001', '\n', '\033', 'M', 'u', 'l', 
  't', 'i', 'C', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', 
  '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '9', '\n', '\016', 'c', 'o', 
  'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'i', 'o', 'n', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'C', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'i', 'o', 'n', 'B', '\004', '\200', 
  '\265', '\030', '\001', '\"', '.', '\n', '\024', 'G', 'e', 't', 'S', 't', 'a', 't', 'u', 's', 'C', 'o', 'd', 'e', 'R', 'e', 'q', 'u', 'e', 
  's', 't', '\022', '\026', '\n', '\016', 's', 't', 'a', 't', 'u', 's', '_', 'c', 'o', 'd', 'e', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', 
  '\t', '\"', '\030', '\n', '\026', 'L', 'i', 's', 't', 'S', 't', 'a', 't', 'u', 's', 'C', 'o', 'd', 'e', 's', 'R', 'e', 'q', 'u', 'e', 
  's', 't', '\"', 'G', '\n', '\030', 'S', 'i', 'n', 'g', 'l', 'e', 'S', 't', 'a', 't', 'u', 's', 'C', 'o', 'd', 'e', 'R', 'e', 's', 
  'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', 
  '\"', 'u', '\n', '\027', 'M', 'u', 'l', 't', 'i', 'S', 't', 'a', 't', 'u', 's', 'C', 'o', 'd', 'e', 'R', 'e', 's', 'p', 'o', 'n', 
  's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '-', '\n', 
  '\010', 's', 't', 'a', 't', 'u', 's', 'e', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\"', 'X', '\n', '\021', 'G', 'e', 
  't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 
  'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\022', '\n', '\n', 'c', 'o', 'n', 'c', 'e', 'p', 't', 
  '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\"', 'f', '\n', '\023', 'L', 'i', 's', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 's', 
  'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', 
  '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 
  'p', 'I', 'D', 'S', 'e', 't', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 
  'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\"', '\257', '\001', '\n', '\033', 'P', 'o', 's', 't', 'C', 'o', 'n', 
  'c', 'e', 'p', 't', 's', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '1', '\n', '\r', 'c', 'o', 
  'n', 'c', 'e', 'p', 't', '_', 'q', 'u', 'e', 'r', 'y', '\030', '\002', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'Q', 'u', 'e', 'r', 'y', '\022', ',', '\n', '\n', 'p', 
  'a', 'g', 'i', 'n', 'a', 't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\013', '2', '\030', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 'g', 'i', 'n', 'a', 't', 'i', 'o', 'n', '\"', 'o', '\n', '\023', 'P', 'o', 's', 't', 'C', 
  'o', 'n', 'c', 'e', 'p', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\'', '\n', '\010', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', 
  '\030', '\002', ' ', '\003', '(', '\013', '2', '\025', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'C', 'o', 'n', 
  'c', 'e', 'p', 't', '\"', '\200', '\001', '\n', '\024', 'P', 'a', 't', 'c', 'h', 'C', 'o', 'n', 'c', 'e', 'p', 't', 's', 'R', 'e', 'q', 
  'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', 
  '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 
  'S', 'e', 't', '\022', '\'', '\n', '\010', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\025', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'C', 'o', 'n', 'c', 'e', 'p', 't', '\022', '\016', '\n', '\006', 'a', 'c', 
  't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\t', '\"', 'j', '\n', '\027', 'G', 'e', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'C', 
  'o', 'u', 'n', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 
  's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\002', ' ', '\001', '(', '\r', 
  '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\"', 'l', '\n', '\025', 'S', 'i', 'n', 
  'g', 'l', 'e', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 
  't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '&', '\n', '\007', 'c', 'o', 'n', 'c', 'e', 'p', 't', '\030', 
  '\002', ' ', '\001', '(', '\013', '2', '\025', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'C', 'o', 'n', 'c', 
  'e', 'p', 't', '\"', 'r', '\n', '\024', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'R', 'e', 's', 'p', 'o', 'n', 
  's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '-', '\n', 
  '\010', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\025', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'B', '\004', '\200', '\265', '\030', '\001', '\"', '\202', '\001', '\n', '\031', 'M', 
  'u', 'l', 't', 'i', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'C', 'o', 'u', 'n', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', 
  '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '8', '\n', '\016', 'c', 'o', 
  'n', 'c', 'e', 'p', 't', '_', 'c', 'o', 'u', 'n', 't', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'C', 'o', 'u', 'n', 't', 'B', '\004', '\200', '\265', 
  '\030', '\001', '\"', '\261', '\001', '\n', '\033', 'L', 'i', 's', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'R', 'e', 'l', 'a', 't', 'i', 'o', 
  'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', 
  '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 
  'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\022', '\n', '\n', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'i', 'd', '\030', '\002', ' ', 
  '\001', '(', '\t', '\022', '\021', '\n', '\t', 'p', 'r', 'e', 'd', 'i', 'c', 'a', 't', 'e', '\030', '\003', ' ', '\001', '(', '\t', '\022', '\032', '\n', 
  '\022', 'k', 'n', 'o', 'w', 'l', 'e', 'd', 'g', 'e', '_', 'g', 'r', 'a', 'p', 'h', '_', 'i', 'd', '\030', '\004', ' ', '\001', '(', '\t', 
  '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\005', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 
  'e', '\030', '\006', ' ', '\001', '(', '\r', '\"', '\234', '\001', '\n', '\033', 'P', 'o', 's', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'R', 'e', 
  'l', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\022', '\n', '\n', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 
  'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '8', '\n', '\021', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'r', 'e', 'l', 'a', 't', 
  'i', 'o', 'n', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '\035', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'R', 'e', 'l', 'a', 't', 'i', 'o', 'n', '\"', 'q', '\n', '\035', 'D', 'e', 'l', 'e', 't', 
  'e', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'R', 'e', 'l', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', 
  '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\022', 
  '\n', '\n', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\013', '\n', '\003', 'i', 'd', 's', 
  '\030', '\003', ' ', '\003', '(', '\t', '\"', 'M', '\n', '\032', 'L', 'i', 's', 't', 'K', 'n', 'o', 'w', 'l', 'e', 'd', 'g', 'e', 'G', 'r', 
  'a', 'p', 'h', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 
  'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\"', '\205', '\001', '\n', '\032', 'P', 'o', 's', 't', 'K', 'n', 'o', 'w', 'l', 'e', 
  'd', 'g', 'e', 'G', 'r', 'a', 'p', 'h', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '6', '\n', '\020', 'k', 'n', 'o', 'w', 'l', 'e', 
  'd', 'g', 'e', '_', 'g', 'r', 'a', 'p', 'h', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\034', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'K', 'n', 'o', 'w', 'l', 'e', 'd', 'g', 'e', 'G', 'r', 'a', 'p', 'h', '\"', '\217', '\001', '\n', 
  '\035', 'P', 'o', 's', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'M', 'a', 'p', 'p', 'i', 'n', 'g', 'J', 'o', 'b', 's', 'R', 'e', 
  'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', 
  '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 
  'D', 'S', 'e', 't', '\022', '=', '\n', '\024', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'm', 'a', 'p', 'p', 'i', 'n', 'g', '_', 'j', 
  'o', 'b', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\037', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'C', 'o', 'n', 'c', 'e', 'p', 't', 'M', 'a', 'p', 'p', 'i', 'n', 'g', 'J', 'o', 'b', '\"', '\213', '\001', '\n', '\034', 'M', 'u', 'l', 
  't', 'i', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'R', 'e', 'l', 'a', 't', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', 
  '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '>', '\n', '\021', 'c', 
  'o', 'n', 'c', 'e', 'p', 't', '_', 'r', 'e', 'l', 'a', 't', 'i', 'o', 'n', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\035', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'R', 'e', 'l', 'a', 't', 
  'i', 'o', 'n', 'B', '\004', '\200', '\265', '\030', '\001', '\"', '\210', '\001', '\n', '\033', 'M', 'u', 'l', 't', 'i', 'K', 'n', 'o', 'w', 'l', 'e', 
  'd', 'g', 'e', 'G', 'r', 'a', 'p', 'h', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 
  's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 
  'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '<', '\n', '\020', 'k', 'n', 'o', 'w', 'l', 'e', 'd', 'g', 'e', '_', 
  'g', 'r', 'a', 'p', 'h', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\034', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'K', 'n', 'o', 'w', 'l', 'e', 'd', 'g', 'e', 'G', 'r', 'a', 'p', 'h', 'B', '\004', '\200', '\265', '\030', '\001', '\"', 'Z', 
  '\n', '\036', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'M', 'a', 'p', 'p', 'i', 'n', 'g', 'J', 'o', 'b', 'R', 
  'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 
  'u', 's', '\022', '\013', '\n', '\003', 'i', 'd', 's', '\030', '\002', ' ', '\003', '(', '\t', '\"', 'r', '\n', '\031', 'G', 'e', 't', 'C', 'o', 'n', 
  'c', 'e', 'p', 't', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\022', '\n', '\n', 'c', 'o', 'n', 
  'c', 'e', 'p', 't', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\020', '\n', '\010', 'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 
  '\030', '\003', ' ', '\001', '(', '\t', '\"', '\202', '\001', '\n', '\033', 'L', 'i', 's', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'L', 'a', 'n', 
  'g', 'u', 'a', 'g', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', 
  '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\022', '\n', '\n', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'i', 
  'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 
  'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\004', ' ', '\001', '(', '\r', '\"', '\255', '\001', '\n', '\034', 'P', 'a', 't', 'c', 'h', 'C', 
  'o', 'n', 'c', 'e', 'p', 't', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', 
  '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\022', '\n', '\n', 
  'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '8', '\n', '\021', 'c', 'o', 'n', 'c', 'e', 
  'p', 't', '_', 'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '\035', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', '\022', 
  '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\004', ' ', '\001', '(', '\t', '\"', '\234', '\001', '\n', '\033', 'P', 'o', 's', 't', 'C', 
  'o', 'n', 'c', 'e', 'p', 't', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', 
  '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\022', '\n', '\n', 
  'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '8', '\n', '\021', 'c', 'o', 'n', 'c', 'e', 
  'p', 't', '_', 'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '\035', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', '\"', 
  '\205', '\001', '\n', '\035', 'S', 'i', 'n', 'g', 'l', 'e', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 
  'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', 
  '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 
  't', 'u', 's', '\022', '7', '\n', '\020', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e', '\030', '\002', 
  ' ', '\001', '(', '\013', '2', '\035', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'C', 'o', 'n', 'c', 'e', 
  'p', 't', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', '\"', '\213', '\001', '\n', '\034', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'n', 'c', 'e', 
  'p', 't', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 
  't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '>', '\n', '\021', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 
  'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\035', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 'B', '\004', '\200', '\265', 
  '\030', '\001', '\"', 'T', '\n', '\017', 'G', 'e', 't', 'I', 'n', 'p', 'u', 't', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 
  'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 'i', 
  'n', 'p', 'u', 't', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\"', 'l', '\n', '\026', 'G', 'e', 't', 'I', 'n', 'p', 'u', 't', 
  'S', 'a', 'm', 'p', 'l', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\017', '\n', '\007', 't', 'a', 's', 'k', '_', 'i', 'd', '\030', 
  '\002', ' ', '\001', '(', '\t', '\022', '\020', '\n', '\010', 'u', 's', 'e', 'r', '_', 'i', 'd', 's', '\030', '\003', ' ', '\003', '(', '\t', '\"', '\236', 
  '\001', '\n', '\021', 'L', 'i', 's', 't', 'I', 'n', 'p', 'u', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\014', '\n', '\004', 'p', 'a', 
  'g', 'e', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', 
  '\r', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\005', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '\013', '\n', '\003', 
  'i', 'd', 's', '\030', '\004', ' ', '\003', '(', '\t', '\"', '\222', '\001', '\n', '\023', 'S', 't', 'r', 'e', 'a', 'm', 'I', 'n', 'p', 'u', 't', 
  's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', 
  ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 
  'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\002', ' ', '\001', '(', '\r', 
  '\022', '\017', '\n', '\007', 'l', 'a', 's', 't', '_', 'i', 'd', '\030', '\003', ' ', '\001', '(', '\t', '\022', '\023', '\n', '\013', 'o', 'r', 'd', 'e', 
  'r', '_', 'b', 'y', '_', 'i', 'd', '\030', '\005', ' ', '\001', '(', '\010', '\022', '\022', '\n', '\n', 'd', 'e', 's', 'c', 'e', 'n', 'd', 'i', 
  'n', 'g', '\030', '\004', ' ', '\001', '(', '\010', '\"', 'i', '\n', '\021', 'P', 'o', 's', 't', 'I', 'n', 'p', 'u', 't', 's', 'R', 'e', 'q', 
  'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', 
  '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 
  'S', 'e', 't', '\022', '#', '\n', '\006', 'i', 'n', 'p', 'u', 't', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\023', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'I', 'n', 'p', 'u', 't', '\"', 'z', '\n', '\022', 'P', 'a', 't', 'c', 'h', 'I', 
  'n', 'p', 'u', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 
  's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '#', '\n', '\006', 'i', 'n', 'p', 'u', 't', 's', '\030', '\002', ' ', '\003', 
  '(', '\013', '2', '\023', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'I', 'n', 'p', 'u', 't', '\022', '\016', 
  '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\t', '\"', 'W', '\n', '\022', 'D', 'e', 'l', 'e', 't', 'e', 'I', 
  'n', 'p', 'u', 't', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 
  'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 'i', 'n', 'p', 'u', 't', '_', 'i', 'd', '\030', '\002', ' ', 
  '\001', '(', '\t', '\"', 'Y', '\n', '\023', 'D', 'e', 'l', 'e', 't', 'e', 'I', 'n', 'p', 'u', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 
  't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', 
  '\022', '\013', '\n', '\003', 'i', 'd', 's', '\030', '\002', ' ', '\003', '(', '\t', 'J', '\004', '\010', '\003', '\020', '\004', '\"', 'f', '\n', '\023', 'S', 'i', 
  'n', 'g', 'l', 'e', 'I', 'n', 'p', 'u', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 
  'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 
  't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '\"', '\n', '\005', 'i', 'n', 'p', 'u', 't', '\030', '\002', ' ', '\001', 
  '(', '\013', '2', '\023', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'I', 'n', 'p', 'u', 't', '\"', 'l', 
  '\n', '\022', 'M', 'u', 'l', 't', 'i', 'I', 'n', 'p', 'u', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 
  't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', ')', '\n', '\006', 'i', 'n', 'p', 'u', 't', 's', 
  '\030', '\002', ' ', '\003', '(', '\013', '2', '\023', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'I', 'n', 'p', 
  'u', 't', 'B', '\004', '\200', '\265', '\030', '\001', '\"', 'r', '\n', '\034', 'M', 'u', 'l', 't', 'i', 'I', 'n', 'p', 'u', 't', 'A', 'n', 'n', 
  'o', 't', 'a', 't', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', 
  '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 
  't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '%', '\n', '\004', 'h', 'i', 't', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', 
  '\021', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'H', 'i', 't', 'B', '\004', '\200', '\265', '\030', '\001', '\"', 
  'q', '\n', '\030', 'S', 'i', 'n', 'g', 'l', 'e', 'I', 'n', 'p', 'u', 't', 'C', 'o', 'u', 'n', 't', 'R', 'e', 's', 'p', 'o', 'n', 
  's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '(', '\n', 
  '\006', 'c', 'o', 'u', 'n', 't', 's', '\030', '\002', ' ', '\001', '(', '\013', '2', '\030', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'I', 'n', 'p', 'u', 't', 'C', 'o', 'u', 'n', 't', '\"', 'G', '\n', '\024', 'G', 'e', 't', 'I', 'n', 'p', 'u', 
  't', 'C', 'o', 'u', 'n', 't', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', 
  '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\"', 'f', '\n', '\023', 'L', 'i', 's', 't', 'D', 'a', 't', 'a', 's', 
  'e', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 
  'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\020', 
  '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\"', 'X', '\n', '\021', 'G', 'e', 't', 'D', 'a', 
  't', 'a', 's', 'e', 't', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 
  's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\022', '\n', '\n', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', 
  '\030', '\002', ' ', '\001', '(', '\t', '\"', 'o', '\n', '\023', 'P', 'o', 's', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 's', 'R', 'e', 'q', 
  'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', 
  '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 
  'S', 'e', 't', '\022', '\'', '\n', '\010', 'd', 'a', 't', 'a', 's', 'e', 't', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\025', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'a', 't', 'a', 's', 'e', 't', '\"', '\200', '\001', '\n', '\024', 'P', 
  'a', 't', 'c', 'h', 'D', 'a', 't', 'a', 's', 'e', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\'', '\n', '\010', 'd', 'a', 't', 
  'a', 's', 'e', 't', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\025', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'D', 'a', 't', 'a', 's', 'e', 't', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\t', 
  '\"', ']', '\n', '\025', 'D', 'e', 'l', 'e', 't', 'e', 'D', 'a', 't', 'a', 's', 'e', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', 
  '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', 
  '\023', '\n', '\013', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', 's', '\030', '\002', ' ', '\003', '(', '\t', '\"', 'r', '\n', '\024', 'M', 
  'u', 'l', 't', 'i', 'D', 'a', 't', 'a', 's', 'e', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 
  'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '-', '\n', '\010', 'd', 'a', 't', 'a', 's', 'e', 't', 
  's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\025', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'a', 
  't', 'a', 's', 'e', 't', 'B', '\004', '\200', '\265', '\030', '\001', '\"', 'l', '\n', '\025', 'S', 'i', 'n', 'g', 'l', 'e', 'D', 'a', 't', 'a', 
  's', 'e', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', 
  '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 
  'S', 't', 'a', 't', 'u', 's', '\022', '&', '\n', '\007', 'd', 'a', 't', 'a', 's', 'e', 't', '\030', '\002', ' ', '\001', '(', '\013', '2', '\025', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'a', 't', 'a', 's', 'e', 't', '\"', '\177', '\n', '\030', 
  'L', 'i', 's', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', 
  '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\022', 
  '\n', '\n', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 
  'e', '\030', '\003', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\004', ' ', '\001', '(', '\r', 
  '\"', 'o', '\n', '\026', 'G', 'e', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 't', 'R', 'e', 'q', 'u', 'e', 's', 
  't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', 
  '\022', '\022', '\n', '\n', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\020', '\n', '\010', 'i', 
  'n', 'p', 'u', 't', '_', 'i', 'd', '\030', '\003', ' ', '\001', '(', '\t', '\"', '\271', '\001', '\n', '\030', 'P', 'o', 's', 't', 'D', 'a', 't', 
  'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\022', '\n', '\n', 'd', 'a', 't', 'a', 's', 
  'e', 't', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '2', '\n', '\016', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'n', 
  'p', 'u', 't', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 't', '\022', '$', '\n', '\006', 's', 'e', 'a', 'r', 'c', 'h', '\030', '\004', 
  ' ', '\001', '(', '\013', '2', '\024', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'e', 'a', 'r', 'c', 
  'h', '\"', 't', '\n', '\032', 'D', 'e', 'l', 'e', 't', 'e', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 't', 's', 'R', 
  'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', 
  '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 
  'I', 'D', 'S', 'e', 't', '\022', '\022', '\n', '\n', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', 
  '\022', '\021', '\n', '\t', 'i', 'n', 'p', 'u', 't', '_', 'i', 'd', 's', '\030', '\003', ' ', '\003', '(', '\t', '\"', '\322', '\001', '\n', '\031', 'M', 
  'u', 'l', 't', 'i', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', 
  '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '8', '\n', '\016', 'd', 'a', 
  't', 'a', 's', 'e', 't', '_', 'i', 'n', 'p', 'u', 't', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 't', 'B', '\004', '\200', '\265', 
  '\030', '\001', '\022', 'N', '\n', '\035', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'n', 'p', 'u', 't', 's', '_', 's', 'e', 'a', 'r', 
  'c', 'h', '_', 'a', 'd', 'd', '_', 'j', 'o', 'b', '\030', '\003', ' ', '\001', '(', '\013', '2', '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 't', 's', 'S', 'e', 'a', 'r', 'c', 
  'h', 'A', 'd', 'd', 'J', 'o', 'b', '\"', '|', '\n', '\032', 'S', 'i', 'n', 'g', 'l', 'e', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 
  'n', 'p', 'u', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', 
  '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', 
  '.', 'S', 't', 'a', 't', 'u', 's', '\022', '1', '\n', '\r', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'n', 'p', 'u', 't', '\030', 
  '\002', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'a', 't', 'a', 
  's', 'e', 't', 'I', 'n', 'p', 'u', 't', '\"', '\201', '\001', '\n', '\032', 'L', 'i', 's', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 
  'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\022', '\n', '\n', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 
  'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\022', '\020', '\n', 
  '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\004', ' ', '\001', '(', '\r', '\"', '{', '\n', '\030', 'G', 'e', 't', 'D', 'a', 't', 
  'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\022', '\n', '\n', 'd', 'a', 't', 'a', 
  's', 'e', 't', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\032', '\n', '\022', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'v', 
  'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '\030', '\003', ' ', '\001', '(', '\t', '\"', '\244', '\002', '\n', '&', 'L', 'i', 's', 't', 'D', 
  'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'M', 'e', 't', 'r', 'i', 'c', 's', 'G', 'r', 'o', 'u', 'p', 
  's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', 
  ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 
  'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\022', '\n', '\n', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', '\030', '\002', ' ', '\001', 
  '(', '\t', '\022', '\032', '\n', '\022', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '\030', 
  '\003', ' ', '\001', '(', '\t', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\004', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 
  'r', '_', 'p', 'a', 'g', 'e', '\030', '\005', ' ', '\001', '(', '\r', '\022', '\024', '\n', '\014', 'p', 'a', 'r', 'e', 'n', 't', '_', 'p', 'a', 
  't', 'h', 's', '\030', '\006', ' ', '\003', '(', '\t', '\022', ';', '\n', '\005', 't', 'y', 'p', 'e', 's', '\030', '\007', ' ', '\003', '(', '\016', '2', 
  ',', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 
  's', 'i', 'o', 'n', 'M', 'e', 't', 'r', 'i', 'c', 's', 'G', 'r', 'o', 'u', 'p', 'T', 'y', 'p', 'e', '\022', '&', '\n', '\006', 'v', 
  'a', 'l', 'u', 'e', 's', '\030', '\010', ' ', '\003', '(', '\013', '2', '\026', '.', 'g', 'o', 'o', 'g', 'l', 'e', '.', 'p', 'r', 'o', 't', 
  'o', 'b', 'u', 'f', '.', 'V', 'a', 'l', 'u', 'e', '\"', '\231', '\001', '\n', '\032', 'P', 'o', 's', 't', 'D', 'a', 't', 'a', 's', 'e', 
  't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\022', '\n', '\n', 'd', 'a', 't', 'a', 's', 'e', 
  't', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '6', '\n', '\020', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'v', 'e', 'r', 
  's', 'i', 'o', 'n', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '\034', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', '\"', '\252', '\001', '\n', '\033', 'P', 'a', 't', 'c', 
  'h', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', 
  '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\022', '\n', 
  '\n', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '6', '\n', '\020', 'd', 'a', 't', 'a', 
  's', 'e', 't', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '\034', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', '\022', '\016', 
  '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\004', ' ', '\001', '(', '\t', '\"', '\200', '\001', '\n', '\034', 'D', 'e', 'l', 'e', 't', 'e', 
  'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', 
  '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\022', '\n', '\n', 
  'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\033', '\n', '\023', 'd', 'a', 't', 'a', 's', 
  'e', 't', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', 's', '\030', '\003', ' ', '\003', '(', '\t', '\"', '\210', '\001', '\n', '\033', 
  'M', 'u', 'l', 't', 'i', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 
  's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '<', '\n', 
  '\020', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\034', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 
  'i', 'o', 'n', 'B', '\004', '\200', '\265', '\030', '\001', '\"', '\256', '\001', '\n', '\'', 'M', 'u', 'l', 't', 'i', 'D', 'a', 't', 'a', 's', 'e', 
  't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'M', 'e', 't', 'r', 'i', 'c', 's', 'G', 'r', 'o', 'u', 'p', 'R', 'e', 's', 'p', 'o', 
  'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', 'V', 
  '\n', '\036', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'm', 'e', 't', 'r', 'i', 'c', 's', 
  '_', 'g', 'r', 'o', 'u', 'p', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '(', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'M', 'e', 't', 'r', 'i', 'c', 's', 
  'G', 'r', 'o', 'u', 'p', 'B', '\004', '\200', '\265', '\030', '\001', '\"', '\202', '\001', '\n', '\034', 'S', 'i', 'n', 'g', 'l', 'e', 'D', 'a', 't', 
  'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 
  'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '5', '\n', '\017', 'd', 'a', 't', 'a', 's', 'e', 't', 
  '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '\030', '\002', ' ', '\001', '(', '\013', '2', '\034', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', '\"', 'f', '\n', '#', 'G', 'e', 
  't', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 't', 's', 'S', 'e', 'a', 'r', 'c', 'h', 'A', 'd', 'd', 'J', 'o', 
  'b', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', 
  ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 
  'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\016', '\n', '\006', 'j', 'o', 'b', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\"', '\214', 
  '\001', '\n', '\'', 'S', 'i', 'n', 'g', 'l', 'e', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 't', 's', 'S', 'e', 'a', 
  'r', 'c', 'h', 'A', 'd', 'd', 'J', 'o', 'b', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 
  'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 
  't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '4', '\n', '\003', 'j', 'o', 'b', '\030', '\002', ' ', '\001', '(', '\013', 
  '2', '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 'n', 
  'p', 'u', 't', 's', 'S', 'e', 'a', 'r', 'c', 'h', 'A', 'd', 'd', 'J', 'o', 'b', '\"', '\271', '\001', '\n', '\027', 'P', 'o', 's', 't', 
  'M', 'o', 'd', 'e', 'l', 'O', 'u', 't', 'p', 'u', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 'm', 'o', 'd', 
  'e', 'l', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\022', '\n', '\n', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', 
  '\030', '\003', ' ', '\001', '(', '\t', '\022', '#', '\n', '\006', 'i', 'n', 'p', 'u', 't', 's', '\030', '\004', ' ', '\003', '(', '\013', '2', '\023', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'I', 'n', 'p', 'u', 't', '\022', '\"', '\n', '\005', 'm', 'o', 'd', 
  'e', 'l', '\030', '\005', ' ', '\001', '(', '\013', '2', '\023', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 
  'o', 'd', 'e', 'l', '\"', '\217', '\001', '\n', '\026', 'L', 'i', 's', 't', 'M', 'o', 'd', 'e', 'l', 'I', 'n', 'p', 'u', 't', 's', 'R', 
  'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', 
  '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 
  'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\022', 
  '\n', '\n', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '\030', '\003', ' ', '\001', '(', '\t', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 
  'e', '\030', '\004', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\005', ' ', '\001', '(', '\r', 
  '\"', 'P', '\n', '\r', 'G', 'e', 't', 'K', 'e', 'y', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\016', '\n', '\006', 'k', 'e', 'y', '_', 'i', 
  'd', '\030', '\002', ' ', '\001', '(', '\t', '\"', 'b', '\n', '\017', 'L', 'i', 's', 't', 'K', 'e', 'y', 's', 'R', 'e', 'q', 'u', 'e', 's', 
  't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', 
  '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 
  'e', '\030', '\003', ' ', '\001', '(', '\r', '\"', 'e', '\n', '\022', 'L', 'i', 's', 't', 'A', 'p', 'p', 'K', 'e', 'y', 's', 'R', 'e', 'q', 
  'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', 
  '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 
  'S', 'e', 't', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 
  'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\"', 'c', '\n', '\017', 'P', 'o', 's', 't', 'K', 'e', 'y', 's', 'R', 'e', 'q', 
  'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', 
  '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 
  'S', 'e', 't', '\022', '\037', '\n', '\004', 'k', 'e', 'y', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\021', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'K', 'e', 'y', '\"', 'S', '\n', '\020', 'D', 'e', 'l', 'e', 't', 'e', 'K', 'e', 'y', 'R', 
  'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', 
  '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 
  'I', 'D', 'S', 'e', 't', '\022', '\016', '\n', '\006', 'k', 'e', 'y', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\"', 't', '\n', '\020', 
  'P', 'a', 't', 'c', 'h', 'K', 'e', 'y', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\037', '\n', '\004', 'k', 'e', 'y', 's', '\030', '\002', 
  ' ', '\003', '(', '\013', '2', '\021', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'K', 'e', 'y', '\022', '\016', 
  '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\t', '\"', '`', '\n', '\021', 'S', 'i', 'n', 'g', 'l', 'e', 'K', 
  'e', 'y', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', 
  '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 
  't', 'a', 't', 'u', 's', '\022', '\036', '\n', '\003', 'k', 'e', 'y', '\030', '\002', ' ', '\001', '(', '\013', '2', '\021', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'K', 'e', 'y', '\"', 'f', '\n', '\020', 'M', 'u', 'l', 't', 'i', 'K', 'e', 'y', 'R', 
  'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 
  'u', 's', '\022', '%', '\n', '\004', 'k', 'e', 'y', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\021', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'K', 'e', 'y', 'B', '\004', '\200', '\265', '\030', '\001', '\"', '\255', '\001', '\n', '\017', 'G', 'e', 't', 'M', 
  'o', 'd', 'e', 'l', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 
  'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '\030', '\002', ' ', 
  '\001', '(', '\t', '\022', '\022', '\n', '\n', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '\030', '\003', ' ', '\001', '(', '\t', '\022', '\020', 
  '\n', '\010', 'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e', '\030', '\004', ' ', '\001', '(', '\t', '\022', '\026', '\n', '\016', 't', 'r', 'a', 'i', 'n', 
  'e', 'd', '_', 'b', 'e', 'f', 'o', 'r', 'e', '\030', '\005', ' ', '\001', '(', '\010', '\022', '\031', '\n', '\021', 'a', 'd', 'd', 'i', 't', 'i', 
  'o', 'n', 'a', 'l', '_', 'f', 'i', 'e', 'l', 'd', 's', '\030', '\023', ' ', '\003', '(', '\t', '\"', '\205', '\004', '\n', '\021', 'L', 'i', 's', 
  't', 'M', 'o', 'd', 'e', 'l', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\002', ' ', '\001', 
  '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\022', '\026', '\n', '\016', 's', 
  'o', 'r', 't', '_', 'a', 's', 'c', 'e', 'n', 'd', 'i', 'n', 'g', '\030', '\n', ' ', '\001', '(', '\010', '\022', '\026', '\n', '\014', 's', 'o', 
  'r', 't', '_', 'b', 'y', '_', 'n', 'a', 'm', 'e', '\030', '\013', ' ', '\001', '(', '\010', 'H', '\000', '\022', '\034', '\n', '\022', 's', 'o', 'r', 
  't', '_', 'b', 'y', '_', 'n', 'u', 'm', '_', 'i', 'n', 'p', 'u', 't', 's', '\030', '\014', ' ', '\001', '(', '\010', 'H', '\000', '\022', '\035', 
  '\n', '\023', 's', 'o', 'r', 't', '_', 'b', 'y', '_', 'm', 'o', 'd', 'i', 'f', 'i', 'e', 'd', '_', 'a', 't', '\030', '\r', ' ', '\001', 
  '(', '\010', 'H', '\000', '\022', '\r', '\n', '\005', 'q', 'u', 'e', 'r', 'y', '\030', '\016', ' ', '\001', '(', '\t', '\022', '\014', '\n', '\004', 'n', 'a', 
  'm', 'e', '\030', '\005', ' ', '\001', '(', '\t', '\022', '\031', '\n', '\021', 'f', 'i', 'l', 't', 'e', 'r', '_', 'b', 'y', '_', 'u', 's', 'e', 
  'r', '_', 'i', 'd', '\030', '\026', ' ', '\001', '(', '\010', '\022', '\025', '\n', '\r', 'm', 'o', 'd', 'e', 'l', '_', 't', 'y', 'p', 'e', '_', 
  'i', 'd', '\030', '\006', ' ', '\001', '(', '\t', '\022', '\024', '\n', '\014', 't', 'r', 'a', 'i', 'n', 'e', 'd', '_', 'o', 'n', 'l', 'y', '\030', 
  '\007', ' ', '\001', '(', '\010', '\022', '\024', '\n', '\014', 'i', 'n', 'p', 'u', 't', '_', 'f', 'i', 'e', 'l', 'd', 's', '\030', '\010', ' ', '\003', 
  '(', '\t', '\022', '\025', '\n', '\r', 'o', 'u', 't', 'p', 'u', 't', '_', 'f', 'i', 'e', 'l', 'd', 's', '\030', '\t', ' ', '\003', '(', '\t', 
  '\022', '\017', '\n', '\007', 'l', 'i', 'c', 'e', 'n', 's', 'e', '\030', '\017', ' ', '\001', '(', '\t', '\022', '\025', '\n', '\r', 'f', 'e', 'a', 't', 
  'u', 'r', 'e', 'd', '_', 'o', 'n', 'l', 'y', '\030', '\020', ' ', '\001', '(', '\010', '\022', '\024', '\n', '\014', 's', 't', 'a', 'r', 'r', 'e', 
  'd', '_', 'o', 'n', 'l', 'y', '\030', '\024', ' ', '\001', '(', '\010', '\022', '\020', '\n', '\010', 't', 'o', 'o', 'l', 'k', 'i', 't', 's', '\030', 
  '\021', ' ', '\003', '(', '\t', '\022', '\021', '\n', '\t', 'u', 's', 'e', '_', 'c', 'a', 's', 'e', 's', '\030', '\022', ' ', '\003', '(', '\t', '\022', 
  '\021', '\n', '\t', 'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', '\030', '\025', ' ', '\003', '(', '\t', '\022', '\031', '\n', '\021', 'a', 'd', 'd', 
  'i', 't', 'i', 'o', 'n', 'a', 'l', '_', 'f', 'i', 'e', 'l', 'd', 's', '\030', '\023', ' ', '\003', '(', '\t', 'B', '\t', '\n', '\007', 's', 
  'o', 'r', 't', '_', 'b', 'y', 'J', '\004', '\010', '\004', '\020', '\005', '\"', '\200', '\001', '\n', '\031', 'P', 'a', 't', 'c', 'h', 'M', 'o', 'd', 
  'e', 'l', 'T', 'o', 'o', 'l', 'k', 'i', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 'm', 'o', 'd', 'e', 'l', 
  '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\020', '\n', '\010', 't', 'o', 'o', 'l', 'k', 'i', 't', 's', '\030', '\003', ' ', '\003', 
  '(', '\t', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\004', ' ', '\001', '(', '\t', '\"', '\200', '\001', '\n', '\031', 'P', 'a', 
  't', 'c', 'h', 'M', 'o', 'd', 'e', 'l', 'U', 's', 'e', 'C', 'a', 's', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', 
  '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', 
  '\010', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\020', '\n', '\010', 'u', 's', 'e', 'c', 'a', 's', 
  'e', 's', '\030', '\003', ' ', '\003', '(', '\t', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\004', ' ', '\001', '(', '\t', '\"', 
  '\202', '\001', '\n', '\032', 'P', 'a', 't', 'c', 'h', 'M', 'o', 'd', 'e', 'l', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', 'R', 'e', 
  'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', 
  '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 
  'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\021', '\n', 
  '\t', 'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', '\030', '\003', ' ', '\003', '(', '\t', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 
  'n', '\030', '\004', ' ', '\001', '(', '\t', '\"', 'Z', '\n', '\031', 'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 'e', 'l', 'T', 'o', 'o', 'l', 
  'k', 'i', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', 
  '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 
  'S', 't', 'a', 't', 'u', 's', '\022', '\020', '\n', '\010', 't', 'o', 'o', 'l', 'k', 'i', 't', 's', '\030', '\002', ' ', '\003', '(', '\t', '\"', 
  'Z', '\n', '\031', 'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 'e', 'l', 'U', 's', 'e', 'C', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 
  'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '\020', 
  '\n', '\010', 'u', 's', 'e', 'c', 'a', 's', 'e', 's', '\030', '\002', ' ', '\003', '(', '\t', '\"', '\\', '\n', '\032', 'M', 'u', 'l', 't', 'i', 
  'M', 'o', 'd', 'e', 'l', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 
  's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '\021', '\n', '\t', 'l', 'a', 'n', 'g', 'u', 
  'a', 'g', 'e', 's', '\030', '\002', ' ', '\003', '(', '\t', '\"', '\221', '\001', '\n', '\021', 'P', 'o', 's', 't', 'M', 'o', 'd', 'e', 'l', 's', 
  'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', 
  '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 
  'p', 'I', 'D', 'S', 'e', 't', '\022', '&', '\n', '\005', 'm', 'o', 'd', 'e', 'l', '\030', '\002', ' ', '\001', '(', '\013', '2', '\023', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'o', 'd', 'e', 'l', 'B', '\002', '\030', '\001', '\022', '#', '\n', '\006', 
  'm', 'o', 'd', 'e', 'l', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '\023', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'M', 'o', 'd', 'e', 'l', '\"', 'z', '\n', '\022', 'P', 'a', 't', 'c', 'h', 'M', 'o', 'd', 'e', 'l', 's', 'R', 'e', 
  'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', 
  '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 
  'D', 'S', 'e', 't', '\022', '#', '\n', '\006', 'm', 'o', 'd', 'e', 'l', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\023', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'o', 'd', 'e', 'l', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 
  'n', '\030', '\003', ' ', '\001', '(', '\t', '\"', ',', '\n', '\016', 'I', 'd', 'U', 'p', 'd', 'a', 't', 'e', 'S', 'o', 'u', 'r', 'c', 'e', 
  '\022', '\n', '\n', '\002', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\016', '\n', '\006', 'n', 'e', 'w', '_', 'i', 'd', '\030', '\002', ' ', 
  '\001', '(', '\t', '\"', '\202', '\001', '\n', '\024', 'P', 'a', 't', 'c', 'h', 'M', 'o', 'd', 'e', 'l', 'I', 'd', 's', 'R', 'e', 'q', 'u', 
  'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', 
  '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 
  'e', 't', '\022', ')', '\n', '\003', 'i', 'd', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '\034', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'I', 'd', 'U', 'p', 'd', 'a', 't', 'e', 'S', 'o', 'u', 'r', 'c', 'e', '\022', '\016', '\n', '\006', 'a', 
  'c', 't', 'i', 'o', 'n', '\030', '\004', ' ', '\001', '(', '\t', '\"', 'W', '\n', '\022', 'D', 'e', 'l', 'e', 't', 'e', 'M', 'o', 'd', 'e', 
  'l', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', 
  ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 
  'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', 
  '\"', 'g', '\n', '\023', 'D', 'e', 'l', 'e', 't', 'e', 'M', 'o', 'd', 'e', 'l', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', 
  '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\013', '\n', 
  '\003', 'i', 'd', 's', '\030', '\002', ' ', '\003', '(', '\t', '\022', '\022', '\n', '\n', 'd', 'e', 'l', 'e', 't', 'e', '_', 'a', 'l', 'l', '\030', 
  '\003', ' ', '\001', '(', '\010', '\"', '\251', '\001', '\n', '\031', 'P', 'o', 's', 't', 'M', 'o', 'd', 'e', 'l', 's', 'S', 'e', 'a', 'r', 'c', 
  'h', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 
  'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '-', '\n', '\013', 'm', 'o', 'd', 'e', 'l', '_', 'q', 'u', 'e', 'r', 'y', '\030', 
  '\002', ' ', '\001', '(', '\013', '2', '\030', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'o', 'd', 'e', 
  'l', 'Q', 'u', 'e', 'r', 'y', '\022', ',', '\n', '\n', 'p', 'a', 'g', 'i', 'n', 'a', 't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', 
  '\013', '2', '\030', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 'g', 'i', 'n', 'a', 't', 'i', 
  'o', 'n', '\"', 'f', '\n', '\023', 'S', 'i', 'n', 'g', 'l', 'e', 'M', 'o', 'd', 'e', 'l', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', 
  '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '\"', '\n', '\005', 'm', 
  'o', 'd', 'e', 'l', '\030', '\002', ' ', '\001', '(', '\013', '2', '\023', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'M', 'o', 'd', 'e', 'l', '\"', 'l', '\n', '\022', 'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 'e', 'l', 'R', 'e', 's', 'p', 'o', 
  'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', ')', 
  '\n', '\006', 'm', 'o', 'd', 'e', 'l', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\023', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'M', 'o', 'd', 'e', 'l', 'B', '\004', '\200', '\265', '\030', '\001', '\"', '\242', '\001', '\n', '\031', 'P', 'a', 't', 'c', 
  'h', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 
  'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 'm', 
  'o', 'd', 'e', 'l', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '2', '\n', '\016', 'm', 'o', 'd', 'e', 'l', '_', 'v', 'e', 
  'r', 's', 'i', 'o', 'n', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', 
  '\030', '\004', ' ', '\001', '(', '\t', '\"', 'o', '\n', '\026', 'G', 'e', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 
  'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', 
  '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 
  'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', 
  '\022', '\n', '\n', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '\030', '\003', ' ', '\001', '(', '\t', '\"', '\222', '\001', '\n', '\030', 'L', 
  'i', 's', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', 
  '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', 
  '\010', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\003', 
  ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\004', ' ', '\001', '(', '\r', '\022', '\023', '\n', 
  '\013', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'i', 'd', 's', '\030', '\005', ' ', '\003', '(', '\t', '\"', 'r', '\n', '\031', 'D', 'e', 'l', 
  'e', 't', 'e', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', 
  '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 
  'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '\030', '\003', ' ', '\001', '(', '\t', '\022', '\022', '\n', '\n', 'v', 'e', 'r', 's', 'i', 'o', 'n', 
  '_', 'i', 'd', '\030', '\004', ' ', '\001', '(', '\t', '\"', '|', '\n', '\032', 'S', 'i', 'n', 'g', 'l', 'e', 'M', 'o', 'd', 'e', 'l', 'V', 
  'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', 
  '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 
  'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '1', '\n', '\r', 'm', 'o', 'd', 'e', 'l', '_', 'v', 'e', 'r', 's', 'i', 'o', 
  'n', '\030', '\002', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'o', 
  'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', '\"', '\202', '\001', '\n', '\031', 'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 'e', 'l', 
  'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', 
  '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 
  't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '8', '\n', '\016', 'm', 'o', 'd', 'e', 'l', '_', 'v', 'e', 'r', 's', 'i', 
  'o', 'n', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'B', '\004', '\200', '\265', '\030', '\001', '\"', '\252', '\003', '\n', '\030', 'P', 'o', 
  's', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', 
  '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 
  'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '2', '\n', '\016', 'm', 'o', 'd', 'e', 'l', '_', 'v', 
  'e', 'r', 's', 'i', 'o', 'n', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', '\022', '(', '\n', '\006', 's', 'e', 'a', 'r', 'c', 
  'h', '\030', '\004', ' ', '\001', '(', '\013', '2', '\024', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'e', 
  'a', 'r', 'c', 'h', 'B', '\002', '\030', '\001', '\022', '*', '\n', '\014', 't', 'r', 'a', 'i', 'n', '_', 's', 'e', 'a', 'r', 'c', 'h', '\030', 
  '\005', ' ', '\001', '(', '\013', '2', '\024', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'e', 'a', 'r', 
  'c', 'h', '\022', ')', '\n', '\013', 't', 'e', 's', 't', '_', 's', 'e', 'a', 'r', 'c', 'h', '\030', '\006', ' ', '\001', '(', '\013', '2', '\024', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'e', 'a', 'r', 'c', 'h', '\022', '\037', '\n', '\027', 'e', 
  'v', 'a', 'l', 'u', 'a', 't', 'e', '_', 'a', 'f', 't', 'e', 'r', '_', 't', 'r', 'a', 'i', 'n', 'i', 'n', 'g', '\030', '\007', ' ', 
  '\001', '(', '\010', '\022', '\023', '\n', '\013', 'd', 'e', 's', 'c', 'r', 'i', 'p', 't', 'i', 'o', 'n', '\030', '\010', ' ', '\001', '(', '\t', '\022', 
  '5', '\n', '\017', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '\030', '\t', ' ', '\001', '(', '\013', '2', 
  '\034', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 
  's', 'i', 'o', 'n', '\022', ')', '\n', '\t', 'e', 'v', 'a', 'l', '_', 'i', 'n', 'f', 'o', '\030', '\n', ' ', '\001', '(', '\013', '2', '\026', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'E', 'v', 'a', 'l', 'I', 'n', 'f', 'o', '\"', '\261', '\001', 
  '\n', '$', 'P', 'o', 's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'U', 'n', 'P', 
  'u', 'b', 'l', 'i', 's', 'h', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', 
  '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\023', '\n', '\013', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 
  'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', 'C', '\n', '\014', 'p', 'u', 'b', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 's', '\030', 
  '\003', ' ', '\003', '(', '\013', '2', '-', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'W', 'o', 'r', 'k', 
  'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'U', 'n', 'P', 'u', 'b', 'l', 'i', 's', 'h', 'R', 'e', 'q', 'u', 'e', 
  's', 't', '\"', '\255', '\001', '\n', '\"', 'P', 'o', 's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 
  'n', 's', 'P', 'u', 'b', 'l', 'i', 's', 'h', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\023', '\n', '\013', 'w', 'o', 'r', 'k', 'f', 'l', 
  'o', 'w', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', 'A', '\n', '\014', 'p', 'u', 'b', 'l', 'i', 'c', 'a', 't', 'i', 'o', 
  'n', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '+', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'W', 
  'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'P', 'u', 'b', 'l', 'i', 's', 'h', 'R', 'e', 'q', 'u', 
  'e', 's', 't', '\"', '3', '\n', '\035', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'P', 'u', 'b', 
  'l', 'i', 's', 'h', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '\022', '\n', '\n', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', 
  '\030', '\001', ' ', '\001', '(', '\t', '\"', '5', '\n', '\037', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 
  'U', 'n', 'P', 'u', 'b', 'l', 'i', 's', 'h', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '\022', '\n', '\n', 'v', 'e', 'r', 's', 'i', 
  'o', 'n', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\t', '\"', '0', '\n', '\032', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 
  'o', 'n', 'P', 'u', 'b', 'l', 'i', 's', 'h', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '\022', '\n', '\n', 'v', 'e', 'r', 's', 'i', 
  'o', 'n', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\t', '\"', '\244', '\001', '\n', '\037', 'P', 'o', 's', 't', 'M', 'o', 'd', 'e', 'l', 
  'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'P', 'u', 'b', 'l', 'i', 's', 'h', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', 
  '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 
  'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '>', '\n', '\014', 'p', 'u', 'b', 'l', 'i', 'c', 'a', 
  't', 'i', 'o', 'n', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '(', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'P', 'u', 'b', 'l', 'i', 's', 'h', 'R', 'e', 'q', 'u', 
  'e', 's', 't', '\"', '2', '\n', '\034', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'U', 'n', 'p', 'u', 'b', 'l', 
  'i', 's', 'h', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '\022', '\n', '\n', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '\030', 
  '\001', ' ', '\001', '(', '\t', '\"', '\250', '\001', '\n', '!', 'P', 'o', 's', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 
  'n', 's', 'U', 'n', 'P', 'u', 'b', 'l', 'i', 's', 'h', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 'm', 'o', 'd', 'e', 
  'l', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '@', '\n', '\014', 'p', 'u', 'b', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 
  's', '\030', '\003', ' ', '\003', '(', '\013', '2', '*', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'o', 
  'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'U', 'n', 'p', 'u', 'b', 'l', 'i', 's', 'h', 'R', 'e', 'q', 'u', 'e', 's', 
  't', '\"', '\343', '\001', '\n', '\036', 'P', 'o', 's', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'M', 'e', 't', 
  'r', 'i', 'c', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 
  'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '\030', '\002', ' ', 
  '\001', '(', '\t', '\022', '\022', '\n', '\n', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '\030', '\003', ' ', '\001', '(', '\t', '\022', '\024', 
  '\n', '\014', 'm', 'a', 'x', '_', 'e', 'x', 'a', 'm', 'p', 'l', 'e', 's', '\030', '\004', ' ', '\001', '(', '\r', '\022', ')', '\n', '\013', 't', 
  'e', 's', 't', '_', 's', 'e', 'a', 'r', 'c', 'h', '\030', '\005', ' ', '\001', '(', '\013', '2', '\024', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'e', 'a', 'r', 'c', 'h', '\022', ')', '\n', '\t', 'e', 'v', 'a', 'l', '_', 'i', 'n', 'f', 
  'o', '\030', '\n', ' ', '\001', '(', '\013', '2', '\026', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'E', 'v', 
  'a', 'l', 'I', 'n', 'f', 'o', '\"', '\241', '\001', '\n', '\035', 'G', 'e', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 
  'n', 'M', 'e', 't', 'r', 'i', 'c', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 
  'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 'm', 'o', 'd', 'e', 'l', '_', 'i', 
  'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\022', '\n', '\n', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '\030', '\003', ' ', '\001', 
  '(', '\t', '\022', ')', '\n', '\006', 'f', 'i', 'e', 'l', 'd', 's', '\030', '\004', ' ', '\001', '(', '\013', '2', '\031', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'F', 'i', 'e', 'l', 'd', 's', 'V', 'a', 'l', 'u', 'e', '\"', ']', '\n', '\023', 'G', 
  'e', 't', 'M', 'o', 'd', 'e', 'l', 'T', 'y', 'p', 'e', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\025', '\n', '\r', 'm', 'o', 'd', 'e', 
  'l', '_', 't', 'y', 'p', 'e', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\"', 'h', '\n', '\025', 'L', 'i', 's', 't', 'M', 'o', 
  'd', 'e', 'l', 'T', 'y', 'p', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 
  'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\002', ' ', 
  '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\"', '\037', '\n', '\035', 
  'L', 'i', 's', 't', 'O', 'p', 'e', 'n', 'S', 'o', 'u', 'r', 'c', 'e', 'L', 'i', 'c', 'e', 'n', 's', 'e', 's', 'R', 'e', 'q', 
  'u', 'e', 's', 't', '\"', '_', '\n', '\036', 'L', 'i', 's', 't', 'O', 'p', 'e', 'n', 'S', 'o', 'u', 'r', 'c', 'e', 'L', 'i', 'c', 
  'e', 'n', 's', 'e', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', 
  ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 
  's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '\020', '\n', '\010', 'l', 'i', 'c', 'e', 'n', 's', 'e', 's', '\030', '\002', ' ', '\003', '(', 
  '\t', '\"', 'y', '\n', '\027', 'S', 'i', 'n', 'g', 'l', 'e', 'M', 'o', 'd', 'e', 'l', 'T', 'y', 'p', 'e', 'R', 'e', 's', 'p', 'o', 
  'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '1', 
  '\n', '\n', 'm', 'o', 'd', 'e', 'l', '_', 't', 'y', 'p', 'e', '\030', '\002', ' ', '\001', '(', '\013', '2', '\027', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'o', 'd', 'e', 'l', 'T', 'y', 'p', 'e', 'B', '\004', '\200', '\265', '\030', '\001', '\"', 
  '\260', '\001', '\n', '\026', 'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 'e', 'l', 'T', 'y', 'p', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 
  'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '2', '\n', '\013', 
  'm', 'o', 'd', 'e', 'l', '_', 't', 'y', 'p', 'e', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\027', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'o', 'd', 'e', 'l', 'T', 'y', 'p', 'e', 'B', '\004', '\200', '\265', '\030', '\001', '\022', '5', 
  '\n', '\017', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'm', 'p', 'o', 'r', 't', 'e', 'r', 's', '\030', '\003', ' ', '\001', '(', '\013', '2', '\034', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'o', 'd', 'e', 'l', 'T', 'y', 'p', 'e', 'F', 'i', 
  'e', 'l', 'd', '\"', '\225', '\001', '\n', '\"', 'G', 'e', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'I', 'n', 
  'p', 'u', 't', 'E', 'x', 'a', 'm', 'p', 'l', 'e', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 'm', 'o', 'd', 'e', 'l', 
  '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\030', '\n', '\020', 'm', 'o', 'd', 'e', 'l', '_', 'v', 'e', 'r', 's', 'i', 'o', 
  'n', '_', 'i', 'd', '\030', '\003', ' ', '\001', '(', '\t', '\022', '\022', '\n', '\n', 'e', 'x', 'a', 'm', 'p', 'l', 'e', '_', 'i', 'd', '\030', 
  '\004', ' ', '\001', '(', '\t', '\"', '\243', '\001', '\n', '$', 'L', 'i', 's', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 
  'n', 'I', 'n', 'p', 'u', 't', 'E', 'x', 'a', 'm', 'p', 'l', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 
  'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 'm', 
  'o', 'd', 'e', 'l', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\030', '\n', '\020', 'm', 'o', 'd', 'e', 'l', '_', 'v', 'e', 
  'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '\030', '\003', ' ', '\001', '(', '\t', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\004', ' ', 
  '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\005', ' ', '\001', '(', '\r', '\"', '\242', '\001', '\n', 
  '&', 'S', 'i', 'n', 'g', 'l', 'e', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'I', 'n', 'p', 'u', 't', 'E', 
  'x', 'a', 'm', 'p', 'l', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', 
  '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 
  'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', 'K', '\n', '\033', 'm', 'o', 'd', 'e', 'l', '_', 'v', 'e', 'r', 's', 'i', 'o', 
  'n', '_', 'i', 'n', 'p', 'u', 't', '_', 'e', 'x', 'a', 'm', 'p', 'l', 'e', '\030', '\002', ' ', '\001', '(', '\013', '2', '&', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'I', 
  'n', 'p', 'u', 't', 'E', 'x', 'a', 'm', 'p', 'l', 'e', '\"', '\242', '\001', '\n', '%', 'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 'e', 
  'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'I', 'n', 'p', 'u', 't', 'E', 'x', 'a', 'm', 'p', 'l', 'e', 'R', 'e', 's', 'p', 'o', 
  'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', 'L', 
  '\n', '\034', 'm', 'o', 'd', 'e', 'l', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'n', 'p', 'u', 't', '_', 'e', 'x', 'a', 
  'm', 'p', 'l', 'e', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '&', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'I', 'n', 'p', 'u', 't', 'E', 'x', 'a', 'm', 'p', 'l', 
  'e', '\"', '\177', '\n', '\032', 'L', 'i', 's', 't', 'M', 'o', 'd', 'e', 'l', 'R', 'e', 'f', 'e', 'r', 'e', 'n', 'c', 'e', 's', 'R', 
  'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', 
  '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 
  'I', 'D', 'S', 'e', 't', '\022', '\020', '\n', '\010', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\014', 
  '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', 
  '\004', ' ', '\001', '(', '\r', '\"', '\202', '\001', '\n', '\033', 'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 'e', 'l', 'R', 'e', 'f', 'e', 'r', 
  'e', 'n', 'c', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', 
  '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', 
  '.', 'S', 't', 'a', 't', 'u', 's', '\022', '6', '\n', '\020', 'm', 'o', 'd', 'e', 'l', '_', 'r', 'e', 'f', 'e', 'r', 'e', 'n', 'c', 
  'e', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\034', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 
  'o', 'd', 'e', 'l', 'R', 'e', 'f', 'e', 'r', 'e', 'n', 'c', 'e', '\"', 'o', '\n', '\023', 'M', 'u', 'l', 't', 'i', 'O', 'u', 't', 
  'p', 'u', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', 
  '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 
  'S', 't', 'a', 't', 'u', 's', '\022', '+', '\n', '\007', 'o', 'u', 't', 'p', 'u', 't', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\024', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'O', 'u', 't', 'p', 'u', 't', 'B', '\004', '\200', '\265', '\030', 
  '\001', '\"', 'V', '\n', '\021', 'L', 'i', 's', 't', 'S', 'c', 'o', 'p', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '\020', '\n', 
  '\010', 'k', 'e', 'y', '_', 't', 'y', 'p', 'e', '\030', '\001', ' ', '\001', '(', '\t', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 
  'p', 'p', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\"', 'B', '\n', '\017', 'M', 'y', 'S', 'c', 'o', 'p', 'e', 
  's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', 
  ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 
  'p', 'p', 'I', 'D', 'S', 'e', 't', '\"', 'F', '\n', '\023', 'M', 'y', 'S', 'c', 'o', 'p', 'e', 's', 'U', 's', 'e', 'r', 'R', 'e', 
  'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', 
  '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 
  'D', 'S', 'e', 't', '\"', '\025', '\n', '\023', 'M', 'y', 'S', 'c', 'o', 'p', 'e', 's', 'R', 'o', 'o', 't', 'R', 'e', 'q', 'u', 'e', 
  's', 't', '\"', '\245', '\001', '\n', '\026', 'M', 'u', 'l', 't', 'i', 'S', 'c', 'o', 'p', 'e', 'D', 'e', 'p', 's', 'R', 'e', 's', 'p', 
  'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', 
  '+', '\n', '\n', 's', 'c', 'o', 'p', 'e', '_', 'd', 'e', 'p', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\027', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'c', 'o', 'p', 'e', 'D', 'e', 'p', 's', '\022', '1', '\n', '\r', 'e', 'n', 
  'd', 'p', 'o', 'i', 'n', 't', '_', 'd', 'e', 'p', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'E', 'n', 'd', 'p', 'o', 'i', 'n', 't', 'D', 'e', 'p', 's', '\"', '\240', '\001', '\n', '\022', 
  'M', 'u', 'l', 't', 'i', 'S', 'c', 'o', 'p', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 
  't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '\016', '\n', '\006', 's', 'c', 'o', 'p', 'e', 's', '\030', '\002', 
  ' ', '\003', '(', '\t', '\022', '\036', '\n', '\003', 'a', 'p', 'p', '\030', '\003', ' ', '\001', '(', '\013', '2', '\021', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'A', 'p', 'p', '\022', '\021', '\n', '\t', 'e', 'n', 'd', 'p', 'o', 'i', 'n', 't', 's', '\030', 
  '\004', ' ', '\003', '(', '\t', '\022', '\032', '\n', '\022', 'u', 's', 'e', 'r', '_', 'f', 'e', 'a', 't', 'u', 'r', 'e', '_', 'f', 'l', 'a', 
  'g', 's', '\030', '\005', ' ', '\001', '(', '\t', '\"', '\204', '\001', '\n', '\026', 'M', 'u', 'l', 't', 'i', 'S', 'c', 'o', 'p', 'e', 'U', 's', 
  'e', 'r', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', 
  '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 
  't', 'a', 't', 'u', 's', '\022', '\016', '\n', '\006', 's', 'c', 'o', 'p', 'e', 's', '\030', '\002', ' ', '\003', '(', '\t', '\022', '\021', '\n', '\t', 
  'e', 'n', 'd', 'p', 'o', 'i', 'n', 't', 's', '\030', '\004', ' ', '\003', '(', '\t', '\022', '\032', '\n', '\022', 'u', 's', 'e', 'r', '_', 'f', 
  'e', 'a', 't', 'u', 'r', 'e', '_', 'f', 'l', 'a', 'g', 's', '\030', '\005', ' ', '\001', '(', '\t', '\"', '\204', '\001', '\n', '\026', 'M', 'u', 
  'l', 't', 'i', 'S', 'c', 'o', 'p', 'e', 'R', 'o', 'o', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 
  't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '\016', '\n', '\006', 's', 'c', 'o', 'p', 'e', 's', 
  '\030', '\002', ' ', '\003', '(', '\t', '\022', '\021', '\n', '\t', 'e', 'n', 'd', 'p', 'o', 'i', 'n', 't', 's', '\030', '\004', ' ', '\003', '(', '\t', 
  '\022', '\032', '\n', '\022', 'u', 's', 'e', 'r', '_', 'f', 'e', 'a', 't', 'u', 'r', 'e', '_', 'f', 'l', 'a', 'g', 's', '\030', '\005', ' ', 
  '\001', '(', '\t', '\"', 'O', '\n', '\020', 'G', 'e', 't', 'S', 'e', 'a', 'r', 'c', 'h', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', 
  '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\n', '\n', 
  '\002', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\"', 'f', '\n', '\023', 'L', 'i', 's', 't', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', 
  'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', 
  '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 
  'p', 'I', 'D', 'S', 'e', 't', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 
  'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\"', '\304', '\001', '\n', '\023', 'P', 'o', 's', 't', 'S', 'e', 'a', 
  'r', 'c', 'h', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 
  's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '&', '\n', '\005', 'q', 'u', 'e', 'r', 'y', '\030', '\002', ' ', '\001', '(', 
  '\013', '2', '\023', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'Q', 'u', 'e', 'r', 'y', 'B', '\002', '\030', 
  '\001', '\022', '&', '\n', '\010', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '\024', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'e', 'a', 'r', 'c', 'h', '\022', ',', '\n', '\n', 'p', 'a', 'g', 'i', 'n', 
  'a', 't', 'i', 'o', 'n', '\030', '\004', ' ', '\001', '(', '\013', '2', '\030', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'P', 'a', 'g', 'i', 'n', 'a', 't', 'i', 'o', 'n', '\"', '\205', '\001', '\n', '\032', 'P', 'a', 't', 'c', 'h', 'I', 'n', 'p', 
  'u', 't', 's', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '&', '\n', '\010', 's', 'e', 'a', 'r', 
  'c', 'h', 'e', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\024', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'S', 'e', 'a', 'r', 'c', 'h', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\t', '\"', '\212', 
  '\001', '\n', '\037', 'P', 'a', 't', 'c', 'h', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', 'S', 'e', 'a', 'r', 'c', 'h', 
  'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', 
  '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 
  'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '&', '\n', '\010', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', '\030', '\002', ' ', '\003', '(', 
  '\013', '2', '\024', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'e', 'a', 'r', 'c', 'h', '\022', '\016', 
  '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\t', '\"', '\177', '\n', '\024', 'P', 'a', 't', 'c', 'h', 'S', 'e', 
  'a', 'r', 'c', 'h', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', 
  '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '&', '\n', '\010', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', '\030', 
  '\002', ' ', '\003', '(', '\013', '2', '\024', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'e', 'a', 'r', 
  'c', 'h', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\t', '\"', '\204', '\001', '\n', '\027', 'P', 'o', 
  's', 't', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', 'B', 'y', 'I', 'D', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 
  'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\n', '\n', '\002', 'i', 
  'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', ',', '\n', '\n', 'p', 'a', 'g', 'i', 'n', 'a', 't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', 
  '(', '\013', '2', '\030', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 'g', 'i', 'n', 'a', 't', 
  'i', 'o', 'n', '\"', 'R', '\n', '\023', 'D', 'e', 'l', 'e', 't', 'e', 'S', 'e', 'a', 'r', 'c', 'h', 'R', 'e', 'q', 'u', 'e', 's', 
  't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', 
  '\022', '\n', '\n', '\002', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\"', '\247', '\001', '\n', '\036', 'P', 'o', 's', 't', 'A', 'n', 'n', 'o', 
  't', 'a', 't', 'i', 'o', 'n', 's', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', 
  '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '&', '\n', '\010', 
  's', 'e', 'a', 'r', 'c', 'h', 'e', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\024', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'S', 'e', 'a', 'r', 'c', 'h', '\022', ',', '\n', '\n', 'p', 'a', 'g', 'i', 'n', 'a', 't', 'i', 'o', 'n', 
  '\030', '\003', ' ', '\001', '(', '\013', '2', '\030', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 'g', 
  'i', 'n', 'a', 't', 'i', 'o', 'n', '\"', 'c', '\n', '$', 'D', 'e', 'l', 'e', 't', 'e', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 
  'o', 'n', 'S', 'e', 'a', 'r', 'c', 'h', 'M', 'e', 't', 'r', 'i', 'c', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', 
  '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\n', '\n', '\002', 
  'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\"', '\242', '\001', '\n', '\031', 'P', 'o', 's', 't', 'I', 'n', 'p', 'u', 't', 's', 'S', 'e', 
  'a', 'r', 'c', 'h', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', 
  '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '&', '\n', '\010', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', '\030', 
  '\002', ' ', '\003', '(', '\013', '2', '\024', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'e', 'a', 'r', 
  'c', 'h', '\022', ',', '\n', '\n', 'p', 'a', 'g', 'i', 'n', 'a', 't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\013', '2', '\030', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 'g', 'i', 'n', 'a', 't', 'i', 'o', 'n', '\"', 'i', 
  '\n', '\024', 'S', 'i', 'n', 'g', 'l', 'e', 'S', 'e', 'a', 'r', 'c', 'h', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', 
  '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '$', '\n', '\006', 's', 'e', 'a', 'r', 
  'c', 'h', '\030', '\005', ' ', '\001', '(', '\013', '2', '\024', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 
  'e', 'a', 'r', 'c', 'h', '\"', '\301', '\001', '\n', '\023', 'M', 'u', 'l', 't', 'i', 'S', 'e', 'a', 'r', 'c', 'h', 'R', 'e', 's', 'p', 
  'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', 
  '\n', '\n', '\002', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '%', '\n', '\004', 'h', 'i', 't', 's', '\030', '\003', ' ', '\003', '(', '\013', 
  '2', '\021', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'H', 'i', 't', 'B', '\004', '\200', '\265', '\030', '\001', 
  '\022', '\"', '\n', '\005', 'q', 'u', 'e', 'r', 'y', '\030', '\004', ' ', '\001', '(', '\013', '2', '\023', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'Q', 'u', 'e', 'r', 'y', '\022', '&', '\n', '\010', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', '\030', '\005', 
  ' ', '\003', '(', '\013', '2', '\024', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'e', 'a', 'r', 'c', 
  'h', '\"', '\224', '\002', '\n', '\"', 'P', 'o', 's', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'S', 'e', 'a', 'r', 'c', 
  'h', 'M', 'e', 't', 'r', 'i', 'c', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 
  'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\n', '\n', '\002', 'i', 'd', '\030', '\002', ' ', '\001', '(', 
  '\t', '\022', '*', '\n', '\014', 'g', 'r', 'o', 'u', 'n', 'd', '_', 't', 'r', 'u', 't', 'h', '\030', '\003', ' ', '\001', '(', '\013', '2', '\024', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'e', 'a', 'r', 'c', 'h', '\022', ',', '\n', '\016', 's', 
  'e', 'a', 'r', 'c', 'h', '_', 't', 'o', '_', 'e', 'v', 'a', 'l', '\030', '\004', ' ', '\001', '(', '\013', '2', '\024', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'e', 'a', 'r', 'c', 'h', '\022', ' ', '\n', '\004', 'd', 'a', 't', 'a', '\030', 
  '\005', ' ', '\001', '(', '\013', '2', '\022', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'a', 't', 'a', 
  '\022', '5', '\n', '\017', 'e', 'v', 'a', 'l', 'u', 'a', 't', 'i', 'o', 'n', '_', 't', 'y', 'p', 'e', '\030', '\006', ' ', '\001', '(', '\016', 
  '2', '\034', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'E', 'v', 'a', 'l', 'u', 'a', 't', 'i', 'o', 
  'n', 'T', 'y', 'p', 'e', '\"', '`', '\n', '!', 'G', 'e', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'S', 'e', 'a', 
  'r', 'c', 'h', 'M', 'e', 't', 'r', 'i', 'c', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\n', '\n', '\002', 'i', 'd', '\030', '\002', ' ', 
  '\001', '(', '\t', '\"', 'U', '\n', '\"', 'L', 'i', 's', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'S', 'e', 'a', 'r', 
  'c', 'h', 'M', 'e', 't', 'r', 'i', 'c', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\"', '\235', '\001', '\n', '$', 'M', 'u', 'l', 't', 'i', 
  'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'S', 'e', 'a', 'r', 'c', 'h', 'M', 'e', 't', 'r', 'i', 'c', 's', 'R', 'e', 
  's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 
  's', '\022', 'H', '\n', '\031', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '_', 's', 'e', 'a', 'r', 'c', 'h', '_', 'm', 'e', 
  't', 'r', 'i', 'c', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '%', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'S', 'e', 'a', 'r', 'c', 'h', 'M', 'e', 't', 'r', 'i', 'c', 's', 
  '\"', 'o', '\n', '\034', 'L', 'i', 's', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 's', 
  'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', 
  '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 
  'p', 'I', 'D', 'S', 'e', 't', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 
  'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\"', 'k', '\n', '\032', 'G', 'e', 't', 'A', 'n', 'n', 'o', 't', 
  'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\034', '\n', '\024', 'a', 'n', 'n', 'o', 
  't', 'a', 't', 'i', 'o', 'n', '_', 'f', 'i', 'l', 't', 'e', 'r', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\"', '\213', '\001', 
  '\n', '\034', 'P', 'o', 's', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 's', 'R', 'e', 
  'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', 
  '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 
  'D', 'S', 'e', 't', '\022', ':', '\n', '\022', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '_', 'f', 'i', 'l', 't', 'e', 'r', 
  's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\036', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'A', 'n', 
  'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', '\"', '\234', '\001', '\n', '\035', 'P', 'a', 't', 'c', 'h', 'A', 
  'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', 
  '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', ':', '\n', 
  '\022', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '_', 'f', 'i', 'l', 't', 'e', 'r', 's', '\030', '\002', ' ', '\003', '(', '\013', 
  '2', '\036', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 
  'n', 'F', 'i', 'l', 't', 'e', 'r', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\t', '\"', 'p', 
  '\n', '\036', 'D', 'e', 'l', 'e', 't', 'e', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 's', 
  'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', 
  '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 
  'p', 'I', 'D', 'S', 'e', 't', '\022', '\035', '\n', '\025', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '_', 'f', 'i', 'l', 't', 
  'e', 'r', '_', 'i', 'd', 's', '\030', '\002', ' ', '\003', '(', '\t', '\"', '\216', '\001', '\n', '\035', 'M', 'u', 'l', 't', 'i', 'A', 'n', 'n', 
  'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 
  's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '@', '\n', '\022', 'a', 'n', 'n', 'o', 't', 
  'a', 't', 'i', 'o', 'n', '_', 'f', 'i', 'l', 't', 'e', 'r', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\036', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 
  'r', 'B', '\004', '\200', '\265', '\030', '\001', '\"', '\210', '\001', '\n', '\036', 'S', 'i', 'n', 'g', 'l', 'e', 'A', 'n', 'n', 'o', 't', 'a', 't', 
  'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 
  'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 
  't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '9', '\n', '\021', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 
  'n', '_', 'f', 'i', 'l', 't', 'e', 'r', '\030', '\002', ' ', '\001', '(', '\013', '2', '\036', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', '\"', 'x', '\n', '\033', 
  'P', 'o', 's', 't', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'e', 'P', 'a', 's', 's', 'w', 'o', 'r', 'd', 'R', 'e', 'q', 'u', 'e', 
  's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 
  't', '\022', '(', '\n', '\010', 'p', 'a', 's', 's', 'w', 'o', 'r', 'd', '\030', '\002', ' ', '\001', '(', '\013', '2', '\026', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 's', 's', 'w', 'o', 'r', 'd', '\"', '\216', '\001', '\n', ' ', 'S', 'i', 
  'n', 'g', 'l', 'e', 'P', 'a', 's', 's', 'w', 'o', 'r', 'd', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'i', 'o', 'n', 'R', 'e', 's', 
  'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', 
  '\022', '=', '\n', '\023', 'p', 'a', 's', 's', 'w', 'o', 'r', 'd', '_', 'v', 'i', 'o', 'l', 'a', 't', 'i', 'o', 'n', 's', '\030', '\002', 
  ' ', '\001', '(', '\013', '2', ' ', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 's', 's', 'w', 
  'o', 'r', 'd', 'V', 'i', 'o', 'l', 'a', 't', 'i', 'o', 'n', 's', '\"', '\273', '\001', '\n', '\022', 'G', 'e', 't', 'W', 'o', 'r', 'k', 
  'f', 'l', 'o', 'w', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 
  'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\023', '\n', '\013', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', 
  '\030', '\002', ' ', '\001', '(', '\t', '\022', ' ', '\n', '\030', 'f', 'a', 'v', 'o', 'r', '_', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '_', 
  'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '\030', '\003', ' ', '\001', '(', '\010', '\022', '\031', '\n', '\021', 'a', 'd', 'd', 'i', 't', 'i', 
  'o', 'n', 'a', 'l', '_', 'f', 'i', 'e', 'l', 'd', 's', '\030', '\004', ' ', '\003', '(', '\t', '\022', '\"', '\n', '\032', 'e', 'x', 'c', 'l', 
  'u', 'd', 'e', '_', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '_', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '\030', '\005', ' ', 
  '\001', '(', '\010', '\"', '\246', '\002', '\n', '\024', 'L', 'i', 's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', 'R', 'e', 'q', 'u', 
  'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', 
  '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 
  'e', 't', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 
  'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\022', '\026', '\n', '\016', 's', 'o', 'r', 't', '_', 'a', 's', 'c', 'e', 'n', 'd', 'i', 
  'n', 'g', '\030', '\005', ' ', '\001', '(', '\010', '\022', '\024', '\n', '\n', 's', 'o', 'r', 't', '_', 'b', 'y', '_', 'i', 'd', '\030', '\006', ' ', 
  '\001', '(', '\010', 'H', '\000', '\022', '\035', '\n', '\023', 's', 'o', 'r', 't', '_', 'b', 'y', '_', 'm', 'o', 'd', 'i', 'f', 'i', 'e', 'd', 
  '_', 'a', 't', '\030', '\007', ' ', '\001', '(', '\010', 'H', '\000', '\022', '\r', '\n', '\005', 'q', 'u', 'e', 'r', 'y', '\030', '\010', ' ', '\001', '(', 
  '\t', '\022', '\016', '\n', '\002', 'i', 'd', '\030', '\004', ' ', '\001', '(', '\t', 'B', '\002', '\030', '\001', '\022', '\025', '\n', '\r', 'f', 'e', 'a', 't', 
  'u', 'r', 'e', 'd', '_', 'o', 'n', 'l', 'y', '\030', '\t', ' ', '\001', '(', '\010', '\022', '\024', '\n', '\014', 's', 't', 'a', 'r', 'r', 'e', 
  'd', '_', 'o', 'n', 'l', 'y', '\030', '\013', ' ', '\001', '(', '\010', '\022', '\031', '\n', '\021', 'a', 'd', 'd', 'i', 't', 'i', 'o', 'n', 'a', 
  'l', '_', 'f', 'i', 'e', 'l', 'd', 's', '\030', '\n', ' ', '\003', '(', '\t', 'B', '\t', '\n', '\007', 's', 'o', 'r', 't', '_', 'b', 'y', 
  '\"', 'r', '\n', '\024', 'P', 'o', 's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', 
  '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', ')', 
  '\n', '\t', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\026', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '\"', '\203', '\001', '\n', '\025', 'P', 'a', 't', 'c', 
  'h', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', ')', '\n', '\t', 'w', 'o', 'r', 'k', 'f', 
  'l', 'o', 'w', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\026', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\t', 
  '\"', ']', '\n', '\025', 'D', 'e', 'l', 'e', 't', 'e', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'R', 'e', 'q', 'u', 'e', 's', 't', 
  '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', 
  '\023', '\n', '\013', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\"', 'j', '\n', '\026', 'D', 
  'e', 'l', 'e', 't', 'e', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 
  'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\013', '\n', '\003', 'i', 
  'd', 's', '\030', '\002', ' ', '\003', '(', '\t', '\022', '\022', '\n', '\n', 'd', 'e', 'l', 'e', 't', 'e', '_', 'a', 'l', 'l', '\030', '\003', ' ', 
  '\001', '(', '\010', '\"', 'o', '\n', '\026', 'S', 'i', 'n', 'g', 'l', 'e', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'R', 'e', 's', 'p', 
  'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', 
  '(', '\n', '\010', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '\030', '\002', ' ', '\001', '(', '\013', '2', '\026', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '\"', 'u', '\n', '\025', 'M', 'u', 'l', 't', 'i', 
  'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 
  's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 
  'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '/', '\n', '\t', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '\030', 
  '\002', ' ', '\003', '(', '\013', '2', '\026', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'W', 'o', 'r', 'k', 
  'f', 'l', 'o', 'w', 'B', '\004', '\200', '\265', '\030', '\001', '\"', '\245', '\002', '\n', '\032', 'P', 'o', 's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 
  'o', 'w', 'R', 'e', 's', 'u', 'l', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\023', '\n', '\013', 'w', 'o', 'r', 'k', 'f', 'l', 
  'o', 'w', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\022', '\n', '\n', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', 
  '\030', '\007', ' ', '\001', '(', '\t', '\022', '#', '\n', '\006', 'i', 'n', 'p', 'u', 't', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '\023', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'I', 'n', 'p', 'u', 't', '\022', '1', '\n', '\r', 'o', 'u', 't', 
  'p', 'u', 't', '_', 'c', 'o', 'n', 'f', 'i', 'g', '\030', '\004', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'O', 'u', 't', 'p', 'u', 't', 'C', 'o', 'n', 'f', 'i', 'g', '\022', ' ', '\n', '\030', 'f', 'a', 
  'v', 'o', 'r', '_', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '_', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '\030', '\005', ' ', 
  '\001', '(', '\010', '\022', '3', '\n', '\016', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 's', 't', 'a', 't', 'e', '\030', '\006', ' ', '\001', 
  '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 
  'w', 'S', 't', 'a', 't', 'e', '\"', '\330', '\001', '\n', '\033', 'P', 'o', 's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'R', 'e', 
  's', 'u', 'l', 't', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', 
  ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 
  's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '(', '\n', '\010', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '\030', '\002', ' ', '\001', '(', 
  '\013', '2', '\026', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 
  '\022', '-', '\n', '\007', 'r', 'e', 's', 'u', 'l', 't', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '\034', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'R', 'e', 's', 'u', 'l', 't', '\022', '3', '\n', 
  '\016', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 's', 't', 'a', 't', 'e', '\030', '\004', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'S', 't', 'a', 't', 'e', 
  '\"', '\221', '\002', '\n', '$', 'P', 'o', 's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'R', 'e', 's', 'u', 'l', 't', 's', 'S', 
  'i', 'm', 'i', 'l', 'a', 'r', 'i', 't', 'y', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\023', '\n', '\013', 'w', 'o', 'r', 'k', 'f', 'l', 
  'o', 'w', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\022', '\n', '\n', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', 
  '\030', '\007', ' ', '\001', '(', '\t', '\022', '\030', '\n', '\020', 'm', 'o', 'd', 'e', 'l', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 
  'd', '\030', '\003', ' ', '\001', '(', '\t', '\022', ')', '\n', '\014', 'p', 'r', 'o', 'b', 'e', '_', 'i', 'n', 'p', 'u', 't', 's', '\030', '\004', 
  ' ', '\003', '(', '\013', '2', '\023', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'I', 'n', 'p', 'u', 't', 
  '\022', '(', '\n', '\013', 'p', 'o', 'o', 'l', '_', 'i', 'n', 'p', 'u', 't', 's', '\030', '\005', ' ', '\003', '(', '\013', '2', '\023', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'I', 'n', 'p', 'u', 't', '\022', ' ', '\n', '\030', 'f', 'a', 'v', 'o', 
  'r', '_', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '_', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '\030', '\006', ' ', '\001', '(', 
  '\010', '\"', '\216', '\001', '\n', '%', 'P', 'o', 's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'R', 'e', 's', 'u', 'l', 't', 's', 
  'S', 'i', 'm', 'i', 'l', 'a', 'r', 'i', 't', 'y', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 
  't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '8', '\n', '\007', 'r', 'e', 's', 'u', 'l', 't', 's', '\030', 
  '\002', ' ', '\003', '(', '\013', '2', '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'W', 'o', 'r', 'k', 
  'f', 'l', 'o', 'w', 'R', 'e', 's', 'u', 'l', 't', 's', 'S', 'i', 'm', 'i', 'l', 'a', 'r', 'i', 't', 'y', '\"', '\203', '\001', '\n', 
  '\033', 'L', 'i', 's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 
  'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', 
  '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 
  'e', 't', '\022', '\023', '\n', '\013', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\014', 
  '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', 
  '\004', ' ', '\001', '(', '\r', '\"', '~', '\n', '\031', 'G', 'e', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 
  'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', 
  '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 
  'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\023', '\n', '\013', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '\030', '\002', 
  ' ', '\001', '(', '\t', '\022', '\033', '\n', '\023', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 
  'i', 'd', '\030', '\003', ' ', '\001', '(', '\t', '\"', '\203', '\001', '\n', '\035', 'D', 'e', 'l', 'e', 't', 'e', 'W', 'o', 'r', 'k', 'f', 'l', 
  'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\023', '\n', '\013', 'w', 'o', 'r', 'k', 'f', 
  'l', 'o', 'w', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\034', '\n', '\024', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 
  'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', 's', '\030', '\003', ' ', '\003', '(', '\t', '\"', '\256', '\001', '\n', '\034', 'P', 'a', 't', 
  'c', 'h', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', 
  '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', 
  '\023', '\n', '\013', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '8', '\n', '\021', 'w', 
  'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '\035', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 
  'i', 'o', 'n', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\004', ' ', '\001', '(', '\t', '\"', '\213', '\001', '\n', '\034', 'M', 
  'u', 'l', 't', 'i', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 
  's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '>', '\n', 
  '\021', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', 
  '\035', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 
  'r', 's', 'i', 'o', 'n', 'B', '\004', '\200', '\265', '\030', '\001', '\"', '\205', '\001', '\n', '\035', 'S', 'i', 'n', 'g', 'l', 'e', 'W', 'o', 'r', 
  'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 
  't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '7', '\n', '\020', 'w', 'o', 'r', 'k', 'f', 'l', 
  'o', 'w', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '\030', '\002', ' ', '\001', '(', '\013', '2', '\035', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', '\"', '\205', '\001', 
  '\n', '\032', 'P', 'o', 's', 't', 'A', 'p', 'p', 'D', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 
  'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', 
  '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 
  'e', 't', '\022', '6', '\n', '\020', 'a', 'p', 'p', '_', 'd', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 's', '\030', '\002', ' ', 
  '\003', '(', '\013', '2', '\034', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'A', 'p', 'p', 'D', 'u', 'p', 
  'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', '\"', 'g', '\n', '\030', 'G', 'e', 't', 'A', 'p', 'p', 'D', 'u', 'p', 'l', 'i', 'c', 'a', 
  't', 'i', 'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 
  'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\032', '\n', '\022', 'a', 'p', 'p', '_', 'd', 'u', 'p', 'l', 'i', 'c', 'a', 
  't', 'i', 'o', 'n', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\"', 'm', '\n', '\032', 'L', 'i', 's', 't', 'A', 'p', 'p', 'D', 
  'u', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', 
  '\030', '\002', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\"', 
  '\203', '\001', '\n', '\034', 'M', 'u', 'l', 't', 'i', 'A', 'p', 'p', 'D', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 's', 'R', 
  'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 
  'u', 's', '\022', '6', '\n', '\020', 'a', 'p', 'p', '_', 'd', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 's', '\030', '\002', ' ', 
  '\003', '(', '\013', '2', '\034', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'A', 'p', 'p', 'D', 'u', 'p', 
  'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', '\"', '\202', '\001', '\n', '\034', 'S', 'i', 'n', 'g', 'l', 'e', 'A', 'p', 'p', 'D', 'u', 'p', 
  'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 
  's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 
  'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '5', '\n', '\017', 'a', 'p', 'p', '_', 'd', 'u', 'p', 'l', 'i', 'c', 
  'a', 't', 'i', 'o', 'n', '\030', '\002', ' ', '\001', '(', '\013', '2', '\034', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'A', 'p', 'p', 'D', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', '\"', 'f', '\n', '\020', 'P', 'o', 's', 't', 'T', 
  'a', 's', 'k', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 
  'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '!', '\n', '\005', 't', 'a', 's', 'k', 's', '\030', '\002', ' ', '\003', '(', '\013', 
  '2', '\022', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'T', 'a', 's', 'k', '\"', 'm', '\n', '\016', 'G', 
  'e', 't', 'T', 'a', 's', 'k', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', 
  '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\017', '\n', '\007', 't', 'a', 's', 'k', '_', 'i', 'd', '\030', '\002', 
  ' ', '\001', '(', '\t', '\022', '\031', '\n', '\021', 'a', 'd', 'd', 'i', 't', 'i', 'o', 'n', 'a', 'l', '_', 'f', 'i', 'e', 'l', 'd', 's', 
  '\030', '\003', ' ', '\003', '(', '\t', '\"', '\325', '\001', '\n', '\020', 'L', 'i', 's', 't', 'T', 'a', 's', 'k', 's', 'R', 'e', 'q', 'u', 'e', 
  's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 
  't', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 
  'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\022', '\027', '\n', '\017', 'w', 'o', 'r', 'k', 'e', 'r', '_', 'u', 's', 'e', 'r', '_', 'i', 
  'd', 's', '\030', '\004', ' ', '\003', '(', '\t', '\022', '\027', '\n', '\017', 'r', 'e', 'v', 'i', 'e', 'w', '_', 'u', 's', 'e', 'r', '_', 'i', 
  'd', 's', '\030', '\005', ' ', '\003', '(', '\t', '\022', '#', '\n', '\033', 'i', 'n', 'c', 'l', 'u', 'd', 'i', 'n', 'g', '_', 'l', 'a', 'b', 
  'e', 'l', '_', 'o', 'r', 'd', 'e', 'r', '_', 't', 'a', 's', 'k', 's', '\030', '\006', ' ', '\001', '(', '\010', '\022', '\031', '\n', '\021', 'a', 
  'd', 'd', 'i', 't', 'i', 'o', 'n', 'a', 'l', '_', 'f', 'i', 'e', 'l', 'd', 's', '\030', '\007', ' ', '\003', '(', '\t', '\"', 'w', '\n', 
  '\021', 'P', 'a', 't', 'c', 'h', 'T', 'a', 's', 'k', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '!', '\n', '\005', 't', 'a', 's', 'k', 
  's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\022', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'T', 'a', 
  's', 'k', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\t', '\"', 'R', '\n', '\022', 'D', 'e', 'l', 
  'e', 't', 'e', 'T', 'a', 's', 'k', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 
  'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\013', '\n', '\003', 'i', 'd', 's', '\030', '\002', ' ', '\003', 
  '(', '\t', '\"', 'i', '\n', '\021', 'M', 'u', 'l', 't', 'i', 'T', 'a', 's', 'k', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', 
  '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '\'', '\n', '\005', 't', 'a', 's', 
  'k', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\022', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'T', 
  'a', 's', 'k', 'B', '\004', '\200', '\265', '\030', '\001', '\"', 'c', '\n', '\022', 'S', 'i', 'n', 'g', 'l', 'e', 'T', 'a', 's', 'k', 'R', 'e', 
  's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 
  's', '\022', ' ', '\n', '\004', 't', 'a', 's', 'k', '\030', '\002', ' ', '\001', '(', '\013', '2', '\022', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'T', 'a', 's', 'k', '\"', 'i', '\n', '\023', 'G', 'e', 't', 'T', 'a', 's', 'k', 'C', 'o', 'u', 'n', 
  't', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', 
  ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 
  'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\017', '\n', '\007', 't', 'a', 's', 'k', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', 
  '\020', '\n', '\010', 'u', 's', 'e', 'r', '_', 'i', 'd', 's', '\030', '\003', ' ', '\003', '(', '\t', '\"', '\235', '\001', '\n', '\027', 'S', 'i', 'n', 
  'g', 'l', 'e', 'T', 'a', 's', 'k', 'C', 'o', 'u', 'n', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 
  't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '\016', '\n', '\006', 'a', 'p', 'p', '_', 'i', 'd', 
  '\030', '\002', ' ', '\001', '(', '\t', '\022', '\017', '\n', '\007', 't', 'a', 's', 'k', '_', 'i', 'd', '\030', '\003', ' ', '\001', '(', '\t', '\022', '4', 
  '\n', '\006', 'c', 'o', 'u', 'n', 't', 's', '\030', '\004', ' ', '\003', '(', '\013', '2', '$', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'T', 'a', 's', 'k', 'S', 't', 'a', 't', 'u', 's', 'C', 'o', 'u', 'n', 't', 'P', 'e', 'r', 'U', 's', 
  'e', 'r', '\"', 'y', '\n', '\026', 'P', 'o', 's', 't', 'L', 'a', 'b', 'e', 'l', 'O', 'r', 'd', 'e', 'r', 's', 'R', 'e', 'q', 'u', 
  'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', 
  '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 
  'e', 't', '\022', '.', '\n', '\014', 'l', 'a', 'b', 'e', 'l', '_', 'o', 'r', 'd', 'e', 'r', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', 
  '\030', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'a', 'b', 'e', 'l', 'O', 'r', 'd', 'e', 'r', 
  '\"', '_', '\n', '\024', 'G', 'e', 't', 'L', 'a', 'b', 'e', 'l', 'O', 'r', 'd', 'e', 'r', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', 
  '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\026', 
  '\n', '\016', 'l', 'a', 'b', 'e', 'l', '_', 'o', 'r', 'd', 'e', 'r', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\"', 'i', '\n', 
  '\026', 'L', 'i', 's', 't', 'L', 'a', 'b', 'e', 'l', 'O', 'r', 'd', 'e', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', 
  '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\014', '\n', 
  '\004', 'p', 'a', 'g', 'e', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\003', 
  ' ', '\001', '(', '\r', '\"', '\212', '\001', '\n', '\027', 'P', 'a', 't', 'c', 'h', 'L', 'a', 'b', 'e', 'l', 'O', 'r', 'd', 'e', 'r', 's', 
  'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', 
  '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 
  'p', 'I', 'D', 'S', 'e', 't', '\022', '.', '\n', '\014', 'l', 'a', 'b', 'e', 'l', '_', 'o', 'r', 'd', 'e', 'r', 's', '\030', '\002', ' ', 
  '\003', '(', '\013', '2', '\030', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'a', 'b', 'e', 'l', 'O', 
  'r', 'd', 'e', 'r', '\022', '\016', '\n', '\006', 'a', 'c', 't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\t', '\"', 'X', '\n', '\030', 'D', 
  'e', 'l', 'e', 't', 'e', 'L', 'a', 'b', 'e', 'l', 'O', 'r', 'd', 'e', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', 
  '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\013', '\n', 
  '\003', 'i', 'd', 's', '\030', '\002', ' ', '\003', '(', '\t', '\"', '|', '\n', '\027', 'M', 'u', 'l', 't', 'i', 'L', 'a', 'b', 'e', 'l', 'O', 
  'r', 'd', 'e', 'r', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', 
  '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', 
  '.', 'S', 't', 'a', 't', 'u', 's', '\022', '4', '\n', '\014', 'l', 'a', 'b', 'e', 'l', '_', 'o', 'r', 'd', 'e', 'r', 's', '\030', '\002', 
  ' ', '\003', '(', '\013', '2', '\030', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'a', 'b', 'e', 'l', 
  'O', 'r', 'd', 'e', 'r', 'B', '\004', '\200', '\265', '\030', '\001', '\"', 'v', '\n', '\030', 'S', 'i', 'n', 'g', 'l', 'e', 'L', 'a', 'b', 'e', 
  'l', 'O', 'r', 'd', 'e', 'r', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', 
  '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 
  'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '-', '\n', '\013', 'l', 'a', 'b', 'e', 'l', '_', 'o', 'r', 'd', 'e', 'r', '\030', 
  '\002', ' ', '\001', '(', '\013', '2', '\030', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'a', 'b', 'e', 
  'l', 'O', 'r', 'd', 'e', 'r', '\"', 'u', '\n', '\025', 'P', 'o', 's', 't', 'C', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 's', 'R', 
  'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', 
  '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 
  'I', 'D', 'S', 'e', 't', '\022', '+', '\n', '\n', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 's', '\030', '\002', ' ', '\003', '(', '\013', 
  '2', '\027', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'C', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 
  '\"', '\206', '\001', '\n', '\026', 'P', 'a', 't', 'c', 'h', 'C', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 's', 'R', 'e', 'q', 'u', 'e', 
  's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 
  't', '\022', '+', '\n', '\n', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\027', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'C', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', '\022', '\016', '\n', '\006', 
  'a', 'c', 't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\t', '\"', 'k', '\n', '\027', 'D', 'e', 'l', 'e', 't', 'e', 'C', 'o', 'l', 
  'l', 'e', 'c', 't', 'o', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\013', '\n', '\003', 'i', 'd', 's', '\030', '\002', ' ', '\003', '(', 
  '\t', '\022', '\022', '\n', '\n', 'd', 'e', 'l', 'e', 't', 'e', '_', 'a', 'l', 'l', '\030', '\003', ' ', '\001', '(', '\010', '\"', '\\', '\n', '\023', 
  'G', 'e', 't', 'C', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\024', '\n', '\014', 'c', 'o', 'l', 
  'l', 'e', 'c', 't', 'o', 'r', '_', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\"', 'h', '\n', '\025', 'L', 'i', 's', 't', 'C', 'o', 
  'l', 'l', 'e', 'c', 't', 'o', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 
  'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\002', ' ', 
  '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\"', 'r', '\n', '\026', 
  'M', 'u', 'l', 't', 'i', 'C', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', 
  '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '+', '\n', '\n', 'c', 'o', 'l', 'l', 
  'e', 'c', 't', 'o', 'r', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\027', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'C', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', '\"', 'r', '\n', '\027', 'S', 'i', 'n', 'g', 'l', 'e', 'C', 'o', 'l', 
  'l', 'e', 'c', 't', 'o', 'r', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', 
  '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 
  'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '*', '\n', '\t', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', '\030', '\002', ' ', 
  '\001', '(', '\013', '2', '\027', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'C', 'o', 'l', 'l', 'e', 'c', 
  't', 'o', 'r', '\"', 'v', '\n', '\025', 'P', 'o', 's', 't', 'S', 't', 'a', 't', 'V', 'a', 'l', 'u', 'e', 's', 'R', 'e', 'q', 'u', 
  'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', 
  '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 
  'e', 't', '\022', ',', '\n', '\013', 's', 't', 'a', 't', '_', 'v', 'a', 'l', 'u', 'e', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\027', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 't', 'a', 't', 'V', 'a', 'l', 'u', 'e', '\"', 'y', 
  '\n', '\026', 'M', 'u', 'l', 't', 'i', 'S', 't', 'a', 't', 'V', 'a', 'l', 'u', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', 
  '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '2', '\n', '\013', 's', 't', 
  'a', 't', '_', 'v', 'a', 'l', 'u', 'e', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\027', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'S', 't', 'a', 't', 'V', 'a', 'l', 'u', 'e', 'B', '\004', '\200', '\265', '\030', '\001', '\"', '\236', '\001', '\n', 
  '\036', 'P', 'o', 's', 't', 'S', 't', 'a', 't', 'V', 'a', 'l', 'u', 'e', 's', 'A', 'g', 'g', 'r', 'e', 'g', 'a', 't', 'e', 'R', 
  'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', 
  '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 
  'I', 'D', 'S', 'e', 't', '\022', 'K', '\n', '\034', 's', 't', 'a', 't', '_', 'v', 'a', 'l', 'u', 'e', '_', 'a', 'g', 'g', 'r', 'e', 
  'g', 'a', 't', 'e', '_', 'q', 'u', 'e', 'r', 'i', 'e', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '%', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 't', 'a', 't', 'V', 'a', 'l', 'u', 'e', 'A', 'g', 'g', 'r', 'e', 'g', 'a', 
  't', 'e', 'Q', 'u', 'e', 'r', 'y', '\"', '\234', '\001', '\n', '\037', 'M', 'u', 'l', 't', 'i', 'S', 't', 'a', 't', 'V', 'a', 'l', 'u', 
  'e', 'A', 'g', 'g', 'r', 'e', 'g', 'a', 't', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 
  't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', 'L', '\n', '\034', 's', 't', 'a', 't', '_', 'v', 'a', 'l', 
  'u', 'e', '_', 'a', 'g', 'g', 'r', 'e', 'g', 'a', 't', 'e', '_', 'r', 'e', 's', 'u', 'l', 't', 's', '\030', '\002', ' ', '\003', '(', 
  '\013', '2', '&', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 't', 'a', 't', 'V', 'a', 'l', 'u', 
  'e', 'A', 'g', 'g', 'r', 'e', 'g', 'a', 't', 'e', 'R', 'e', 's', 'u', 'l', 't', '\"', 'w', '\n', '\036', 'P', 'o', 's', 't', 'T', 
  'r', 'e', 'n', 'd', 'i', 'n', 'g', 'M', 'e', 't', 'r', 'i', 'c', 's', 'V', 'i', 'e', 'w', 'R', 'e', 'q', 'u', 'e', 's', 't', 
  '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', 
  '\021', '\n', '\t', 'v', 'i', 'e', 'w', '_', 't', 'y', 'p', 'e', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\021', '\n', '\t', 'o', 'b', 'j', 
  'e', 'c', 't', '_', 'i', 'd', '\030', '\003', ' ', '\001', '(', '\t', '\"', '\205', '\001', '\n', '\037', 'L', 'i', 's', 't', 'T', 'r', 'e', 'n', 
  'd', 'i', 'n', 'g', 'M', 'e', 't', 'r', 'i', 'c', 's', 'V', 'i', 'e', 'w', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', 
  '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\021', '\n', 
  '\t', 'v', 'i', 'e', 'w', '_', 't', 'y', 'p', 'e', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', 
  '\003', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\004', ' ', '\001', '(', '\r', '\"', '~', 
  '\n', ' ', 'M', 'u', 'l', 't', 'i', 'T', 'r', 'e', 'n', 'd', 'i', 'n', 'g', 'M', 'e', 't', 'r', 'i', 'c', 's', 'V', 'i', 'e', 
  'w', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', 
  '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 
  'a', 't', 'u', 's', '\022', '-', '\n', '\007', 'm', 'e', 't', 'r', 'i', 'c', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\034', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'T', 'r', 'e', 'n', 'd', 'i', 'n', 'g', 'M', 'e', 't', 'r', 'i', 
  'c', '\"', '\202', '\001', '\n', '\031', 'P', 'o', 's', 't', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', 'R', 
  'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', 
  '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 
  'I', 'D', 'S', 'e', 't', '\022', '4', '\n', '\017', 'b', 'u', 'l', 'k', '_', 'o', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', '\030', 
  '\002', ' ', '\003', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'B', 'u', 'l', 'k', 
  'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', '\"', 'l', '\n', '\031', 'L', 'i', 's', 't', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 
  'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', 
  '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\014', '\n', '\004', 'p', 'a', 'g', 'e', '\030', '\002', ' ', '\001', '(', 
  '\r', '\022', '\020', '\n', '\010', 'p', 'e', 'r', '_', 'p', 'a', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\"', 'V', '\n', '\027', 'G', 'e', 
  't', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 
  'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\n', '\n', '\002', 'i', 
  'd', '\030', '\002', ' ', '\001', '(', '\t', '\"', 'Z', '\n', '\032', 'C', 'a', 'n', 'c', 'e', 'l', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 
  'a', 't', 'i', 'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 
  's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 'S', 'e', 't', '\022', '\013', '\n', '\003', 'i', 'd', 's', '\030', '\002', ' ', '\003', '(', '\t', '\"', 
  'Z', '\n', '\032', 'D', 'e', 'l', 'e', 't', 'e', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 'R', 'e', 'q', 
  'u', 'e', 's', 't', '\022', '/', '\n', '\013', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '\030', '\001', ' ', '\001', '(', '\013', 
  '2', '\032', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'U', 's', 'e', 'r', 'A', 'p', 'p', 'I', 'D', 
  'S', 'e', 't', '\022', '\013', '\n', '\003', 'i', 'd', 's', '\030', '\002', ' ', '\003', '(', '\t', '\"', '\200', '\001', '\n', '\034', 'S', 'i', 'n', 'g', 
  'l', 'e', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\022', 
  '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '3', '\n', '\016', 'b', 'u', 
  'l', 'k', '_', 'o', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', '\030', '\002', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', '\"', '\177', '\n', 
  '\033', 'M', 'u', 'l', 't', 'i', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 's', 'p', 'o', 
  'n', 's', 'e', '\022', '+', '\n', '\006', 's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\033', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'S', 't', 'a', 't', 'u', 's', '\022', '3', 
  '\n', '\016', 'b', 'u', 'l', 'k', '_', 'o', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', '\030', '\002', ' ', '\003', '(', '\013', '2', '\033', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 
  'n', '*', 'p', '\n', '\034', 'O', 'r', 'g', 'a', 'n', 'i', 'z', 'a', 't', 'i', 'o', 'n', 'I', 'n', 'v', 'i', 't', 'a', 't', 'i', 
  'o', 'n', 'S', 't', 'a', 't', 'u', 's', '\022', '\013', '\n', '\007', 'N', 'O', 'T', '_', 'S', 'E', 'T', '\020', '\000', '\022', '\013', '\n', '\007', 
  'P', 'E', 'N', 'D', 'I', 'N', 'G', '\020', '\001', '\022', '\014', '\n', '\010', 'A', 'C', 'C', 'E', 'P', 'T', 'E', 'D', '\020', '\002', '\022', '\r', 
  '\n', '\t', 'C', 'A', 'N', 'C', 'E', 'L', 'L', 'E', 'D', '\020', '\003', '\022', '\014', '\n', '\010', 'D', 'E', 'C', 'L', 'I', 'N', 'E', 'D', 
  '\020', '\004', '\022', '\013', '\n', '\007', 'E', 'X', 'P', 'I', 'R', 'E', 'D', '\020', '\005', '2', '\207', '\255', '\002', '\n', '\002', 'V', '2', '\022', '\252', 
  '\002', '\n', '\024', 'L', 'i', 's', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'R', 'e', 'l', 'a', 't', 'i', 'o', 'n', 's', '\022', ')', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 
  'R', 'e', 'l', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '*', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'R', 'e', 'l', 'a', 't', 'i', 
  'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\272', '\001', '\202', '\323', '\344', '\223', '\002', '\253', '\001', '\022', 'Y', '/', 'v', '2', 
  '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 
  'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', 
  '_', 'i', 'd', '}', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', '/', '{', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'i', 'd', 
  '}', '/', 'r', 'e', 'l', 'a', 't', 'i', 'o', 'n', 's', 'Z', 'N', '\022', 'L', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', 
  '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 
  's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'c', 'o', 
  'n', 'c', 'e', 'p', 't', 's', '/', 'r', 'e', 'l', 'a', 't', 'i', 'o', 'n', 's', '\230', '\234', '\'', '\005', '\220', '\234', '\'', '\013', '\022', 
  '\337', '\001', '\n', '\024', 'P', 'o', 's', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'R', 'e', 'l', 'a', 't', 'i', 'o', 'n', 's', '\022', 
  ')', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'C', 'o', 'n', 'c', 'e', 'p', 
  't', 'R', 'e', 'l', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '*', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'R', 'e', 'l', 'a', 't', 
  'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'p', '\202', '\323', '\344', '\223', '\002', '^', '\"', 'Y', '/', 'v', '2', '/', 
  'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 
  'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 
  'i', 'd', '}', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', '/', '{', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'i', 'd', '}', 
  '/', 'r', 'e', 'l', 'a', 't', 'i', 'o', 'n', 's', ':', '\001', '*', '\230', '\234', '\'', '\005', '\220', '\234', '\'', '\n', '\220', '\234', '\'', '\013', 
  '\022', '\336', '\001', '\n', '\026', 'D', 'e', 'l', 'e', 't', 'e', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'R', 'e', 'l', 'a', 't', 'i', 'o', 
  'n', 's', '\022', '+', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'C', 
  'o', 'n', 'c', 'e', 'p', 't', 'R', 'e', 'l', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 
  'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 't', '\202', '\323', '\344', '\223', '\002', '^', '*', 'Y', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 
  's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 
  'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 
  'c', 'o', 'n', 'c', 'e', 'p', 't', 's', '/', '{', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'i', 'd', '}', '/', 'r', 'e', 'l', 
  'a', 't', 'i', 'o', 'n', 's', ':', '\001', '*', '\230', '\234', '\'', '\005', '\220', '\234', '\'', '\r', '\220', '\234', '\'', '\n', '\220', '\234', '\'', '\013', 
  '\022', '\334', '\001', '\n', '\020', 'G', 'e', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'C', 'o', 'u', 'n', 't', 's', '\022', '%', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'C', 'o', 'u', 
  'n', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'C', 'o', 'u', 'n', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 
  'e', '\"', 'x', '\202', '\323', '\344', '\223', '\002', 'b', '\022', 'I', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'c', 'o', 'n', 'c', 'e', 'p', 
  't', 's', '/', 's', 't', 'a', 't', 'u', 's', 'Z', '\025', '\022', '\023', '/', 'v', '2', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', 
  '/', 's', 't', 'a', 't', 'u', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\005', '\022', '\320', 
  '\001', '\n', '\n', 'G', 'e', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', '\022', '\037', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'G', 'e', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '#', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'C', 'o', 'n', 'c', 'e', 'p', 't', 
  'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '|', '\202', '\323', '\344', '\223', '\002', 'n', '\022', 'O', '/', 'v', '2', '/', 'u', 's', 'e', 
  'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 
  'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', 
  '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', '/', '{', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'i', 'd', '}', 'Z', '\033', '\022', 
  '\031', '/', 'v', '2', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', '/', '{', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'i', 'd', 
  '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\013', '\022', '\271', '\001', '\n', '\014', 'L', 'i', 's', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 
  's', '\022', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'C', 'o', 'n', 'c', 
  'e', 'p', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\"', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'b', '\202', 
  '\323', '\344', '\223', '\002', 'T', '\022', 'B', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', 'Z', '\016', 
  '\022', '\014', '/', 'v', '2', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\013', '\022', '\352', '\001', 
  '\n', '\024', 'P', 'o', 's', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 's', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', '\022', ')', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 's', 
  'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\"', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 
  'e', '\"', '\202', '\001', '\202', '\323', '\344', '\223', '\002', 'l', '\"', 'K', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 
  'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'c', 'o', 'n', 'c', 'e', 
  'p', 't', 's', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', ':', '\001', '*', 'Z', '\032', '\"', '\025', '/', 'v', '2', '/', 'c', 'o', 
  'n', 'c', 'e', 'p', 't', 's', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 
  '\013', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\023', '\022', '\303', '\001', '\n', '\014', 'P', 'o', 's', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 
  's', '\022', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'C', 'o', 'n', 'c', 
  'e', 'p', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\"', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'l', '\202', 
  '\323', '\344', '\223', '\002', 'Z', '\"', 'B', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', ':', '\001', 
  '*', 'Z', '\021', '\"', '\014', '/', 'v', '2', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', 
  '\234', '\'', '\n', '\220', '\234', '\'', '\013', '\022', '\305', '\001', '\n', '\r', 'P', 'a', 't', 'c', 'h', 'C', 'o', 'n', 'c', 'e', 'p', 't', 's', 
  '\022', '\"', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'C', 'o', 'n', 'c', 
  'e', 'p', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\"', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'l', '\202', 
  '\323', '\344', '\223', '\002', 'Z', '2', 'B', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', ':', '\001', 
  '*', 'Z', '\021', '2', '\014', '/', 'v', '2', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', 
  '\234', '\'', '\n', '\220', '\234', '\'', '\013', '\022', '\224', '\002', '\n', '\022', 'G', 'e', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'L', 'a', 'n', 
  'g', 'u', 'a', 'g', 'e', '\022', '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'C', 
  'o', 'n', 'c', 'e', 'p', 't', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '+', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'C', 'o', 'n', 'c', 'e', 'p', 't', 
  'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\247', '\001', '\202', '\323', '\344', '\223', '\002', '\230', 
  '\001', '\022', 'd', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', '/', '{', 'c', 'o', 'n', 'c', 
  'e', 'p', 't', '_', 'i', 'd', '}', '/', 'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', '/', '{', 'l', 'a', 'n', 'g', 'u', 'a', 
  'g', 'e', '}', 'Z', '0', '\022', '.', '/', 'v', '2', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', '/', '{', 'c', 'o', 'n', 'c', 
  'e', 'p', 't', '_', 'i', 'd', '}', '/', 'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', '/', '{', 'l', 'a', 'n', 'g', 'u', 'a', 
  'g', 'e', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\013', '\022', '\201', '\002', '\n', '\024', 'L', 'i', 's', 't', 'C', 'o', 'n', 'c', 'e', 
  'p', 't', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', '\022', ')', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'L', 'i', 's', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', 'R', 'e', 'q', 
  'u', 'e', 's', 't', '\032', '*', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 
  'C', 'o', 'n', 'c', 'e', 'p', 't', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\221', 
  '\001', '\202', '\323', '\344', '\223', '\002', '\202', '\001', '\022', 'Y', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 
  's', '/', '{', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'i', 'd', '}', '/', 'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', 'Z', 
  '%', '\022', '#', '/', 'v', '2', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', '/', '{', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 
  'i', 'd', '}', '/', 'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\013', '\022', '\213', '\002', '\n', 
  '\024', 'P', 'o', 's', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', '\022', ')', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'L', 'a', 
  'n', 'g', 'u', 'a', 'g', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '*', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 
  'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\233', '\001', '\202', '\323', '\344', '\223', '\002', '\210', '\001', '\"', 'Y', '/', 'v', '2', '/', 'u', 
  's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', 
  '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 
  'd', '}', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', '/', '{', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'i', 'd', '}', '/', 
  'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', ':', '\001', '*', 'Z', '(', '\"', '#', '/', 'v', '2', '/', 'c', 'o', 'n', 'c', 'e', 
  'p', 't', 's', '/', '{', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'i', 'd', '}', '/', 'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 
  's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\n', '\220', '\234', '\'', '\013', '\022', '\215', '\002', '\n', '\025', 'P', 'a', 't', 'c', 
  'h', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', '\022', '*', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'L', 'a', 'n', 'g', 'u', 
  'a', 'g', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '*', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 'R', 'e', 's', 
  'p', 'o', 'n', 's', 'e', '\"', '\233', '\001', '\202', '\323', '\344', '\223', '\002', '\210', '\001', '2', 'Y', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 
  's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 
  'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 
  'c', 'o', 'n', 'c', 'e', 'p', 't', 's', '/', '{', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'i', 'd', '}', '/', 'l', 'a', 'n', 
  'g', 'u', 'a', 'g', 'e', 's', ':', '\001', '*', 'Z', '(', '2', '#', '/', 'v', '2', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', 
  '/', '{', 'c', 'o', 'n', 'c', 'e', 'p', 't', '_', 'i', 'd', '}', '/', 'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', ':', '\001', 
  '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\n', '\220', '\234', '\'', '\013', '\022', '\361', '\001', '\n', '\023', 'L', 'i', 's', 't', 'K', 'n', 'o', 
  'w', 'l', 'e', 'd', 'g', 'e', 'G', 'r', 'a', 'p', 'h', 's', '\022', '(', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'L', 'i', 's', 't', 'K', 'n', 'o', 'w', 'l', 'e', 'd', 'g', 'e', 'G', 'r', 'a', 'p', 'h', 's', 'R', 'e', 'q', 
  'u', 'e', 's', 't', '\032', ')', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 
  'K', 'n', 'o', 'w', 'l', 'e', 'd', 'g', 'e', 'G', 'r', 'a', 'p', 'h', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\204', '\001', 
  '\202', '\323', '\344', '\223', '\002', 'v', '\022', 'S', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 
  'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', '/', 
  'k', 'n', 'o', 'w', 'l', 'e', 'd', 'g', 'e', '_', 'g', 'r', 'a', 'p', 'h', 's', 'Z', '\037', '\022', '\035', '/', 'v', '2', '/', 'c', 
  'o', 'n', 'c', 'e', 'p', 't', 's', '/', 'k', 'n', 'o', 'w', 'l', 'e', 'd', 'g', 'e', '_', 'g', 'r', 'a', 'p', 'h', 's', '\230', 
  '\234', '\'', '\002', '\220', '\234', '\'', '\013', '\022', '\373', '\001', '\n', '\023', 'P', 'o', 's', 't', 'K', 'n', 'o', 'w', 'l', 'e', 'd', 'g', 'e', 
  'G', 'r', 'a', 'p', 'h', 's', '\022', '(', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 
  't', 'K', 'n', 'o', 'w', 'l', 'e', 'd', 'g', 'e', 'G', 'r', 'a', 'p', 'h', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ')', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'K', 'n', 'o', 'w', 'l', 'e', 
  'd', 'g', 'e', 'G', 'r', 'a', 'p', 'h', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\216', '\001', '\202', '\323', '\344', '\223', '\002', '|', 
  '\"', 'S', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 
  'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', '/', 'k', 'n', 'o', 'w', 'l', 'e', 
  'd', 'g', 'e', '_', 'g', 'r', 'a', 'p', 'h', 's', ':', '\001', '*', 'Z', '\"', '\"', '\035', '/', 'v', '2', '/', 'c', 'o', 'n', 'c', 
  'e', 'p', 't', 's', '/', 'k', 'n', 'o', 'w', 'l', 'e', 'd', 'g', 'e', '_', 'g', 'r', 'a', 'p', 'h', 's', ':', '\001', '*', '\230', 
  '\234', '\'', '\002', '\220', '\234', '\'', '\n', '\220', '\234', '\'', '\013', '\022', '\376', '\001', '\n', '\026', 'P', 'o', 's', 't', 'C', 'o', 'n', 'c', 'e', 
  'p', 't', 'M', 'a', 'p', 'p', 'i', 'n', 'g', 'J', 'o', 'b', 's', '\022', '+', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'M', 'a', 'p', 'p', 'i', 'n', 'g', 'J', 'o', 'b', 
  's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ',', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 
  'u', 'l', 't', 'i', 'C', 'o', 'n', 'c', 'e', 'p', 't', 'M', 'a', 'p', 'p', 'i', 'n', 'g', 'J', 'o', 'b', 'R', 'e', 's', 'p', 
  'o', 'n', 's', 'e', '\"', '\210', '\001', '\202', '\323', '\344', '\223', '\002', 'v', '\"', 'P', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', 
  '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 
  's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'c', 'o', 
  'n', 'c', 'e', 'p', 't', 's', '/', 'm', 'a', 'p', 'p', 'i', 'n', 'g', 's', '/', 'j', 'o', 'b', 's', ':', '\001', '*', 'Z', '\037', 
  '\"', '\032', '/', 'v', '2', '/', 'c', 'o', 'n', 'c', 'e', 'p', 't', 's', '/', 'm', 'a', 'p', 'p', 'i', 'n', 'g', 's', '/', 'j', 
  'o', 'b', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\n', '\220', '\234', '\'', '\013', '\022', '\223', '\002', '\n', '\r', 'G', 'e', 
  't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '\022', '\"', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'G', 'e', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '&', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'A', 'n', 'n', 'o', 't', 'a', 
  't', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\265', '\001', '\202', '\323', '\344', '\223', '\002', '\236', '\001', '\022', 'g', '/', 
  'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 
  'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 
  'p', 'p', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', '/', '{', 'i', 'n', 'p', 'u', 't', '_', 'i', 'd', '}', '/', 
  'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', '/', '{', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '_', 'i', 
  'd', '}', 'Z', '3', '\022', '1', '/', 'v', '2', '/', 'i', 'n', 'p', 'u', 't', 's', '/', '{', 'i', 'n', 'p', 'u', 't', '_', 'i', 
  'd', '}', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', '/', '{', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 
  'n', '_', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\017', '\022', '\320', '\001', '\n', 
  '\017', 'L', 'i', 's', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', '\022', '$', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 'q', 
  'u', 'e', 's', 't', '\032', '%', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 
  'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'p', '\202', '\323', '\344', '\223', '\002', 
  'Z', '\022', 'E', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', 'Z', '\021', '\022', 
  '\017', '/', 'v', '2', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '&', '\220', 
  '\234', '\'', '\013', '\220', '\234', '\'', '\017', '\022', '\343', '\001', '\n', '\017', 'P', 'o', 's', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 
  'n', 's', '\022', '$', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'A', 'n', 'n', 
  'o', 't', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '%', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'R', 'e', 's', 'p', 
  'o', 'n', 's', 'e', '\"', '\202', '\001', '\202', '\323', '\344', '\223', '\002', '`', '\"', 'E', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', 
  '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 
  's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'a', 'n', 
  'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', ':', '\001', '*', 'Z', '\024', '\"', '\017', '/', 'v', '2', '/', 'a', 'n', 'n', 'o', 't', 
  'a', 't', 'i', 'o', 'n', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\005', '\220', '\234', '\'', '%', '\220', '\234', '\'', '&', 
  '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\023', '\022', '\345', '\001', '\n', '\020', 'P', 'a', 't', 'c', 'h', 'A', 'n', 'n', 
  'o', 't', 'a', 't', 'i', 'o', 'n', 's', '\022', '%', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 
  'a', 't', 'c', 'h', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '%', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'A', 'n', 'n', 'o', 't', 'a', 't', 
  'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\202', '\001', '\202', '\323', '\344', '\223', '\002', '`', '2', 'E', '/', 'v', '2', 
  '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 
  'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', 
  '_', 'i', 'd', '}', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', ':', '\001', '*', 'Z', '\024', '2', '\017', '/', 'v', 
  '2', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\005', '\220', 
  '\234', '\'', '%', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\023', '\220', '\234', '\'', '\017', '\022', '\363', '\001', '\n', '\026', 'P', 
  'a', 't', 'c', 'h', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', 'S', 't', 'a', 't', 'u', 's', '\022', '+', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 
  'o', 'n', 's', 'S', 't', 'a', 't', 'u', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ',', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', 'S', 't', 
  'a', 't', 'u', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '~', '\202', '\323', '\344', '\223', '\002', '`', '2', '[', '/', 'v', '2', 
  '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 
  'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', 
  '_', 'i', 'd', '}', '/', 't', 'a', 's', 'k', '/', '{', 't', 'a', 's', 'k', '_', 'i', 'd', '}', '/', 'a', 'n', 'n', 'o', 't', 
  'a', 't', 'i', 'o', 'n', 's', '/', 's', 't', 'a', 't', 'u', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '%', '\220', 
  '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\023', '\220', '\234', '\'', '\017', '\022', '\234', '\002', '\n', '\020', 'D', 'e', 'l', 'e', 't', 
  'e', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '\022', '%', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', 
  '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 
  's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\275', '\001', '\202', '\323', '\344', '\223', '\002', '\236', '\001', '*', 'g', '/', 'v', '2', 
  '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 
  'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', 
  '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', '/', '{', 'i', 'n', 'p', 'u', 't', '_', 'i', 'd', '}', '/', 'a', 'n', 
  'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', '/', '{', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '_', 'i', 'd', '}', 
  'Z', '3', '*', '1', '/', 'v', '2', '/', 'i', 'n', 'p', 'u', 't', 's', '/', '{', 'i', 'n', 'p', 'u', 't', '_', 'i', 'd', '}', 
  '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', '/', '{', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '_', 
  'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '%', '\220', '\234', '\'', '(', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\023', '\220', '\234', 
  '\'', '\017', '\022', '\320', '\002', '\n', '\021', 'D', 'e', 'l', 'e', 't', 'e', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', '\022', 
  '&', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'A', 'n', 'n', 'o', 
  't', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 
  '\357', '\001', '\202', '\323', '\344', '\223', '\002', '\320', '\001', '*', 'L', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', 
  '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', ':', '\001', '*', 'Z', '\033', '*', '\026', '/', 'v', '2', '/', 'i', 'n', 
  'p', 'u', 't', 's', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', ':', '\001', '*', 'Z', 'J', '*', 'E', '/', 'v', 
  '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', 
  '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 
  'p', '_', 'i', 'd', '}', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', ':', '\001', '*', 'Z', '\024', '*', '\017', '/', 
  'v', '2', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '%', 
  '\220', '\234', '\'', '(', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\023', '\220', '\234', '\'', '\017', '\022', '\363', '\001', '\n', '\030', 'P', 'a', 't', 'c', 
  'h', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', '\022', '-', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 
  'n', 's', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'S', 'e', 'a', 'r', 'c', 'h', 'R', 'e', 's', 'p', 'o', 'n', 
  's', 'e', '\"', '\204', '\001', '\202', '\323', '\344', '\223', '\002', 'r', '2', 'N', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', 
  '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'a', 'n', 'n', 'o', 
  't', 'a', 't', 'i', 'o', 'n', 's', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', ':', '\001', '*', 'Z', '\035', '2', '\030', '/', 'v', 
  '2', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', ':', '\001', '*', 
  '\230', '\234', '\'', '\002', '\220', '\234', '\'', 's', '\220', '\234', '\'', 'r', '\022', '\201', '\002', '\n', '\027', 'P', 'o', 's', 't', 'A', 'n', 'n', 'o', 
  't', 'a', 't', 'i', 'o', 'n', 's', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', '\022', ',', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', 'S', 'e', 'a', 'r', 
  'c', 'h', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'M', 'u', 'l', 't', 'i', 'S', 'e', 'a', 'r', 'c', 'h', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\224', '\001', '\202', 
  '\323', '\344', '\223', '\002', 'r', '\"', 'N', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 
  's', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', ':', '\001', '*', 'Z', '\035', '\"', '\030', '/', 'v', '2', '/', 'a', 'n', 'n', 'o', 
  't', 'a', 't', 'i', 'o', 'n', 's', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', 
  '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\005', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\003', '\220', '\234', '\'', '\023', '\022', '\321', '\001', 
  '\n', '\r', 'G', 'e', 't', 'I', 'n', 'p', 'u', 't', 'C', 'o', 'u', 'n', 't', '\022', '\"', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'I', 'n', 'p', 'u', 't', 'C', 'o', 'u', 'n', 't', 'R', 'e', 'q', 'u', 'e', 's', 
  't', '\032', '&', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'I', 'n', 
  'p', 'u', 't', 'C', 'o', 'u', 'n', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 't', '\202', '\323', '\344', '\223', '\002', '^', '\022', 
  'G', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 
  's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', '/', 's', 't', 'a', 't', 'u', 's', 'Z', '\023', '\022', 
  '\021', '/', 'v', '2', '/', 'i', 'n', 'p', 'u', 't', 's', '/', 's', 't', 'a', 't', 'u', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 
  '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\005', '\022', '\311', '\001', '\n', '\014', 'S', 't', 'r', 'e', 'a', 'm', 'I', 'n', 'p', 'u', 't', 
  's', '\022', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 't', 'r', 'e', 'a', 'm', 'I', 'n', 
  'p', 'u', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ' ', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'M', 'u', 'l', 't', 'i', 'I', 'n', 'p', 'u', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 't', '\202', '\323', '\344', 
  '\223', '\002', '^', '\022', 'G', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', '/', 's', 't', 'r', 'e', 'a', 
  'm', 'Z', '\023', '\022', '\021', '/', 'v', '2', '/', 'i', 'n', 'p', 'u', 't', 's', '/', 's', 't', 'r', 'e', 'a', 'm', '\230', '\234', '\'', 
  '\002', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\005', '\022', '\375', '\001', '\n', '\017', 'G', 'e', 't', 'I', 'n', 'p', 'u', 
  't', 'S', 'a', 'm', 'p', 'l', 'e', 's', '\022', '$', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 
  'e', 't', 'I', 'n', 'p', 'u', 't', 'S', 'a', 'm', 'p', 'l', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '*', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'I', 'n', 'p', 'u', 't', 'A', 'n', 'n', 
  'o', 't', 'a', 't', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\227', '\001', '\202', '\323', '\344', '\223', '\002', '\200', '\001', 
  '\022', 'X', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 
  'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 't', 'a', 's', 'k', 's', '/', '{', 't', 'a', 's', 'k', '_', 'i', 'd', '}', 
  '/', 'i', 'n', 'p', 'u', 't', 's', '/', 's', 'a', 'm', 'p', 'l', 'e', 's', 'Z', '$', '\022', '\"', '/', 'v', '2', '/', 't', 'a', 
  's', 'k', 's', '/', '{', 't', 'a', 's', 'k', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', '/', 's', 'a', 'm', 'p', 
  'l', 'e', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\005', '\022', '\312', '\001', '\n', '\010', 'G', 
  'e', 't', 'I', 'n', 'p', 'u', 't', '\022', '\035', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 
  't', 'I', 'n', 'p', 'u', 't', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'I', 'n', 'p', 'u', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '|', 
  '\202', '\323', '\344', '\223', '\002', 'f', '\022', 'K', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 
  'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', '/', '{', 'i', 
  'n', 'p', 'u', 't', '_', 'i', 'd', '}', 'Z', '\027', '\022', '\025', '/', 'v', '2', '/', 'i', 'n', 'p', 'u', 't', 's', '/', '{', 'i', 
  'n', 'p', 'u', 't', '_', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\005', '\022', 
  '\267', '\001', '\n', '\n', 'L', 'i', 's', 't', 'I', 'n', 'p', 'u', 't', 's', '\022', '\037', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'I', 'n', 'p', 'u', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ' ', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'I', 'n', 'p', 'u', 't', 'R', 'e', 
  's', 'p', 'o', 'n', 's', 'e', '\"', 'f', '\202', '\323', '\344', '\223', '\002', 'P', '\022', '@', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', 
  '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 
  'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'i', 
  'n', 'p', 'u', 't', 's', 'Z', '\014', '\022', '\n', '/', 'v', '2', '/', 'i', 'n', 'p', 'u', 't', 's', '\230', '\234', '\'', '\002', '\220', '\234', 
  '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\005', '\022', '\322', '\001', '\n', '\n', 'P', 'o', 's', 't', 'I', 'n', 'p', 'u', 't', 's', 
  '\022', '\037', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'I', 'n', 'p', 'u', 't', 
  's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ' ', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 
  'u', 'l', 't', 'i', 'I', 'n', 'p', 'u', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\200', '\001', '\202', '\323', '\344', '\223', '\002', 
  'V', '\"', '@', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', ':', '\001', '*', 'Z', '\017', '\"', '\n', '/', 
  'v', '2', '/', 'i', 'n', 'p', 'u', 't', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '%', '\220', '\234', '\'', '&', '\220', 
  '\234', '\'', '\013', '\220', '\234', '\'', '\004', '\220', '\234', '\'', '\005', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\002', '\220', '\234', '\'', '\023', '\022', '\313', 
  '\001', '\n', '\013', 'P', 'a', 't', 'c', 'h', 'I', 'n', 'p', 'u', 't', 's', '\022', ' ', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'I', 'n', 'p', 'u', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ' ', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'I', 'n', 'p', 'u', 't', 'R', 
  'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'x', '\202', '\323', '\344', '\223', '\002', 'V', '2', '@', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 
  's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 
  'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 
  'i', 'n', 'p', 'u', 't', 's', ':', '\001', '*', 'Z', '\017', '2', '\n', '/', 'v', '2', '/', 'i', 'n', 'p', 'u', 't', 's', ':', '\001', 
  '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '%', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\004', '\220', '\234', '\'', '\005', 
  '\220', '\234', '\'', '\017', '\022', '\345', '\001', '\n', '\013', 'D', 'e', 'l', 'e', 't', 'e', 'I', 'n', 'p', 'u', 't', '\022', ' ', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'I', 'n', 'p', 'u', 't', 'R', 'e', 'q', 
  'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 
  's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\220', '\001', '\202', '\323', '\344', '\223', '\002', 'f', '*', 'K', 
  '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 
  'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 
  'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', '/', '{', 'i', 'n', 'p', 'u', 't', '_', 'i', 'd', '}', 
  'Z', '\027', '*', '\025', '/', 'v', '2', '/', 'i', 'n', 'p', 'u', 't', 's', '/', '{', 'i', 'n', 'p', 'u', 't', '_', 'i', 'd', '}', 
  '\230', '\234', '\'', '\002', '\220', '\234', '\'', '%', '\220', '\234', '\'', '(', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\004', '\220', '\234', '\'', '\010', '\220', 
  '\234', '\'', '\005', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\023', '\022', '\327', '\001', '\n', '\014', 'D', 'e', 'l', 'e', 't', 'e', 'I', 'n', 'p', 
  'u', 't', 's', '\022', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 
  'I', 'n', 'p', 'u', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\200', 
  '\001', '\202', '\323', '\344', '\223', '\002', 'V', '*', '@', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', ':', '\001', 
  '*', 'Z', '\017', '*', '\n', '/', 'v', '2', '/', 'i', 'n', 'p', 'u', 't', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 
  '%', '\220', '\234', '\'', '(', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\004', '\220', '\234', '\'', '\010', '\220', '\234', '\'', '\005', '\220', '\234', '\'', '\017', 
  '\220', '\234', '\'', '\023', '\022', '\336', '\001', '\n', '\023', 'P', 'a', 't', 'c', 'h', 'I', 'n', 'p', 'u', 't', 's', 'S', 'e', 'a', 'r', 'c', 
  'h', 'e', 's', '\022', '(', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'I', 
  'n', 'p', 'u', 't', 's', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'S', 'e', 'a', 'r', 'c', 'h', 'R', 'e', 's', 
  'p', 'o', 'n', 's', 'e', '\"', 'z', '\202', '\323', '\344', '\223', '\002', 'h', '2', 'I', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', 
  '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 
  's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'i', 'n', 
  'p', 'u', 't', 's', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', ':', '\001', '*', 'Z', '\030', '2', '\023', '/', 'v', '2', '/', 'i', 
  'n', 'p', 'u', 't', 's', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 's', 
  '\220', '\234', '\'', 'r', '\022', '\355', '\001', '\n', '\022', 'P', 'o', 's', 't', 'I', 'n', 'p', 'u', 't', 's', 'S', 'e', 'a', 'r', 'c', 'h', 
  'e', 's', '\022', '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'I', 'n', 'p', 
  'u', 't', 's', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'S', 'e', 'a', 'r', 'c', 'h', 'R', 'e', 's', 'p', 'o', 
  'n', 's', 'e', '\"', '\212', '\001', '\202', '\323', '\344', '\223', '\002', 'h', '\"', 'I', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 
  'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', 
  '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 
  'u', 't', 's', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', ':', '\001', '*', 'Z', '\030', '\"', '\023', '/', 'v', '2', '/', 'i', 'n', 
  'p', 'u', 't', 's', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '&', '\220', 
  '\234', '\'', '\013', '\220', '\234', '\'', '\005', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\003', '\220', '\234', '\'', '\023', '\022', '\234', '\003', '\n', '\020', 'P', 
  'o', 's', 't', 'M', 'o', 'd', 'e', 'l', 'O', 'u', 't', 'p', 'u', 't', 's', '\022', '%', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'M', 'o', 'd', 'e', 'l', 'O', 'u', 't', 'p', 'u', 't', 's', 'R', 'e', 'q', 
  'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 
  'O', 'u', 't', 'p', 'u', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\275', '\002', '\202', '\323', '\344', '\223', '\002', '\246', '\002', '\"', 
  'i', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 
  's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', 
  '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', '/', 'o', 
  'u', 't', 'p', 'u', 't', 's', ':', '\001', '*', 'Z', '8', '\"', '3', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 
  'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'v', 'e', 'r', 's', 'i', 
  'o', 'n', '_', 'i', 'd', '}', '/', 'o', 'u', 't', 'p', 'u', 't', 's', ':', '\001', '*', 'Z', 'X', '\"', 'S', '/', 'v', '2', '/', 
  'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 
  'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 
  'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'o', 'u', 't', 
  'p', 'u', 't', 's', ':', '\001', '*', 'Z', '\"', '\"', '\035', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 
  'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'o', 'u', 't', 'p', 'u', 't', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 
  '\013', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\002', '\022', '\275', '\001', '\n', '\014', 'L', 'i', 's', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 
  's', '\022', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'D', 'a', 't', 'a', 
  's', 'e', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\"', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'M', 'u', 'l', 't', 'i', 'D', 'a', 't', 'a', 's', 'e', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'f', '\202', 
  '\323', '\344', '\223', '\002', 'T', '\022', 'B', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', 'Z', '\016', 
  '\022', '\014', '/', 'v', '2', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'i', '\220', '\234', '\'', 
  'r', '\022', '\325', '\001', '\n', '\n', 'G', 'e', 't', 'D', 'a', 't', 'a', 's', 'e', 't', '\022', '\037', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', 
  '#', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'D', 'a', 't', 'a', 
  's', 'e', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\200', '\001', '\202', '\323', '\344', '\223', '\002', 'n', '\022', 'O', '/', 'v', '2', 
  '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 
  'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', 
  '_', 'i', 'd', '}', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', 
  '}', 'Z', '\033', '\022', '\031', '/', 'v', '2', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 
  't', '_', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'i', '\220', '\234', '\'', 'r', '\022', '\307', '\001', '\n', '\014', 'P', 'o', 's', 
  't', 'D', 'a', 't', 'a', 's', 'e', 't', 's', '\022', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'P', 'o', 's', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\"', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'D', 'a', 't', 'a', 's', 'e', 't', 'R', 'e', 's', 
  'p', 'o', 'n', 's', 'e', '\"', 'p', '\202', '\323', '\344', '\223', '\002', 'Z', '\"', 'B', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', 
  '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 
  's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'd', 'a', 
  't', 'a', 's', 'e', 't', 's', ':', '\001', '*', 'Z', '\021', '\"', '\014', '/', 'v', '2', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', 
  ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'i', '\220', '\234', '\'', 'j', '\220', '\234', '\'', 'r', '\022', '\311', '\001', '\n', '\r', 'P', 
  'a', 't', 'c', 'h', 'D', 'a', 't', 'a', 's', 'e', 't', 's', '\022', '\"', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'D', 'a', 't', 'a', 's', 'e', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\"', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'D', 'a', 't', 'a', 's', 'e', 
  't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'p', '\202', '\323', '\344', '\223', '\002', 'Z', '2', 'B', '/', 'v', '2', '/', 'u', 's', 
  'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', 
  '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', 
  '}', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', ':', '\001', '*', 'Z', '\021', '2', '\014', '/', 'v', '2', '/', 'd', 'a', 't', 'a', 
  's', 'e', 't', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'i', '\220', '\234', '\'', 'j', '\220', '\234', '\'', 'r', '\022', '\312', 
  '\001', '\n', '\016', 'D', 'e', 'l', 'e', 't', 'e', 'D', 'a', 't', 'a', 's', 'e', 't', 's', '\022', '#', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'D', 'a', 't', 'a', 's', 'e', 't', 's', 'R', 'e', 'q', 
  'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 
  's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'p', '\202', '\323', '\344', '\223', '\002', 'Z', '*', 'B', '/', 
  'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 
  'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 
  'p', 'p', '_', 'i', 'd', '}', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', ':', '\001', '*', 'Z', '\021', '*', '\014', '/', 'v', '2', 
  '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'i', '\220', '\234', '\'', 'j', '\220', 
  '\234', '\'', 'k', '\022', '\365', '\001', '\n', '\021', 'L', 'i', 's', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 't', 's', 
  '\022', '&', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'D', 'a', 't', 'a', 's', 
  'e', 't', 'I', 'n', 'p', 'u', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 't', 'R', 'e', 
  's', 'p', 'o', 'n', 's', 'e', '\"', '\216', '\001', '\202', '\323', '\344', '\223', '\002', '|', '\022', 'V', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 
  's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 
  'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 
  'd', 'a', 't', 'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 
  'u', 't', 's', 'Z', '\"', '\022', ' ', '/', 'v', '2', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 't', 'a', 
  's', 'e', 't', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'i', '\220', '\234', '\'', 
  '\005', '\022', '\211', '\002', '\n', '\017', 'G', 'e', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 't', '\022', '$', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 'n', 'p', 
  'u', 't', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '(', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'S', 'i', 'n', 'g', 'l', 'e', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 
  'e', '\"', '\245', '\001', '\202', '\323', '\344', '\223', '\002', '\222', '\001', '\022', 'a', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', 
  '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'd', 'a', 't', 'a', 
  's', 'e', 't', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', '/', 
  '{', 'i', 'n', 'p', 'u', 't', '_', 'i', 'd', '}', 'Z', '-', '\022', '+', '/', 'v', '2', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 
  's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', '/', '{', 'i', 'n', 
  'p', 'u', 't', '_', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'i', '\220', '\234', '\'', '\005', '\022', '\200', '\002', '\n', '\021', 'P', 
  'o', 's', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 't', 's', '\022', '&', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 't', 's', 'R', 
  'e', 'q', 'u', 'e', 's', 't', '\032', '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 
  't', 'i', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\231', '\001', 
  '\202', '\323', '\344', '\223', '\002', '\202', '\001', '\"', 'V', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', 
  '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', ':', '\001', '*', 'Z', '%', 
  '\"', ' ', '/', 'v', '2', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 
  'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'i', '\220', '\234', '\'', 'j', '\220', 
  '\234', '\'', '\005', '\022', '\202', '\002', '\n', '\023', 'D', 'e', 'l', 'e', 't', 'e', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 
  't', 's', '\022', '(', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'D', 
  'a', 't', 'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 
  'o', 'n', 's', 'e', '\"', '\235', '\001', '\202', '\323', '\344', '\223', '\002', '\202', '\001', '*', 'V', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', 
  '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 
  'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'd', 
  'a', 't', 'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 
  't', 's', ':', '\001', '*', 'Z', '%', '*', ' ', '/', 'v', '2', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 
  't', 'a', 's', 'e', 't', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', 
  '\'', 'i', '\220', '\234', '\'', 'j', '\220', '\234', '\'', 'k', '\220', '\234', '\'', '\005', '\022', '\200', '\002', '\n', '\023', 'L', 'i', 's', 't', 'D', 'a', 
  't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', '\022', '(', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 
  'q', 'u', 'e', 's', 't', '\032', ')', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 
  'i', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\223', 
  '\001', '\202', '\323', '\344', '\223', '\002', '\200', '\001', '\022', 'X', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 
  's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', 'Z', '$', 
  '\022', '\"', '/', 'v', '2', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 
  'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'i', '\220', '\234', '\'', 'r', '\022', '\247', 
  '\002', '\n', '\021', 'G', 'e', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', '\022', '&', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 
  'i', 'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '*', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'S', 'i', 'n', 'g', 'l', 'e', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 's', 'p', 
  'o', 'n', 's', 'e', '\"', '\275', '\001', '\202', '\323', '\344', '\223', '\002', '\252', '\001', '\022', 'm', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', 
  '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 
  'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'd', 
  'a', 't', 'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 
  'i', 'o', 'n', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', 
  'Z', '9', '\022', '7', '/', 'v', '2', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', 
  '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'v', 'e', 
  'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'i', '\220', '\234', '\'', 'r', '\022', '\346', '\002', '\n', 
  '\037', 'L', 'i', 's', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'M', 'e', 't', 'r', 'i', 'c', 
  's', 'G', 'r', 'o', 'u', 'p', 's', '\022', '4', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 
  's', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'M', 'e', 't', 'r', 'i', 'c', 's', 'G', 'r', 
  'o', 'u', 'p', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '5', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'M', 'u', 'l', 't', 'i', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'M', 'e', 't', 'r', 
  'i', 'c', 's', 'G', 'r', 'o', 'u', 'p', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\325', '\001', '\202', '\323', '\344', '\223', '\002', '\272', 
  '\001', '\022', 'u', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 't', 'a', 
  's', 'e', 't', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', 
  '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', '/', 'm', 'e', 't', 'r', 'i', 'c', 's', 'Z', 'A', '\022', '?', '/', 
  'v', '2', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', '}', '/', 
  'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', 
  '_', 'i', 'd', '}', '/', 'm', 'e', 't', 'r', 'i', 'c', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'i', '\220', '\234', '\'', '&', '\220', 
  '\234', '\'', '\013', '\220', '\234', '\'', '\005', '\022', '\216', '\002', '\n', '\023', 'P', 'o', 's', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 
  'r', 's', 'i', 'o', 'n', 's', '\022', '(', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 
  't', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ')', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'D', 'a', 't', 'a', 's', 'e', 
  't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\241', '\001', '\202', '\323', '\344', '\223', '\002', '\206', 
  '\001', '\"', 'X', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 't', 'a', 
  's', 'e', 't', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', ':', '\001', '*', 'Z', '\'', '\"', '\"', '/', 'v', 
  '2', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', '}', '/', 'v', 
  'e', 'r', 's', 'i', 'o', 'n', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'i', '\220', '\234', '\'', 'j', '\220', '\234', '\'', 
  '\017', '\220', '\234', '\'', '\023', '\022', '\210', '\002', '\n', '\024', 'P', 'a', 't', 'c', 'h', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 
  's', 'i', 'o', 'n', 's', '\022', ')', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 
  'h', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ')', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'D', 'a', 't', 'a', 's', 'e', 
  't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\231', '\001', '\202', '\323', '\344', '\223', '\002', '\206', 
  '\001', '2', 'X', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 't', 'a', 
  's', 'e', 't', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', ':', '\001', '*', 'Z', '\'', '2', '\"', '/', 'v', 
  '2', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', '}', '/', 'v', 
  'e', 'r', 's', 'i', 'o', 'n', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'i', '\220', '\234', '\'', 'j', '\022', '\206', '\002', 
  '\n', '\025', 'D', 'e', 'l', 'e', 't', 'e', 'D', 'a', 't', 'a', 's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', '\022', '*', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'D', 'a', 't', 'a', 's', 
  'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 
  's', 'e', '\"', '\235', '\001', '\202', '\323', '\344', '\223', '\002', '\206', '\001', '*', 'X', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 
  'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', 
  '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'd', 'a', 't', 
  'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 't', 'a', 's', 'e', 't', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 
  'n', 's', ':', '\001', '*', 'Z', '\'', '*', '\"', '/', 'v', '2', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', '/', '{', 'd', 'a', 
  't', 'a', 's', 'e', 't', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', 
  '\220', '\234', '\'', 'i', '\220', '\234', '\'', 'j', '\220', '\234', '\'', 'k', '\022', '\345', '\001', '\n', '\014', 'G', 'e', 't', 'M', 'o', 'd', 'e', 'l', 
  'T', 'y', 'p', 'e', '\022', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'M', 'o', 
  'd', 'e', 'l', 'T', 'y', 'p', 'e', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '%', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'M', 'o', 'd', 'e', 'l', 'T', 'y', 'p', 'e', 'R', 'e', 's', 'p', 'o', 
  'n', 's', 'e', '\"', '\212', '\001', '\202', '\323', '\344', '\223', '\002', '|', '\022', 'V', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 
  'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', 
  '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 
  'e', 'l', 's', '/', 't', 'y', 'p', 'e', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 't', 'y', 'p', 'e', '_', 'i', 'd', '}', 
  'Z', '\"', '\022', ' ', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', 't', 'y', 'p', 'e', 's', '/', '{', 'm', 'o', 'd', 
  'e', 'l', '_', 't', 'y', 'p', 'e', '_', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\017', '\022', '\231', '\001', '\n', '\026', 'L', 
  'i', 's', 't', 'O', 'p', 'e', 'n', 'S', 'o', 'u', 'r', 'c', 'e', 'L', 'i', 'c', 'e', 'n', 's', 'e', 's', '\022', '+', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'O', 'p', 'e', 'n', 'S', 'o', 'u', 'r', 'c', 
  'e', 'L', 'i', 'c', 'e', 'n', 's', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ',', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'O', 'p', 'e', 'n', 'S', 'o', 'u', 'r', 'c', 'e', 'L', 'i', 'c', 'e', 
  'n', 's', 'e', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '$', '\202', '\323', '\344', '\223', '\002', '\032', '\022', '\030', '/', 'v', '2', 
  '/', 'o', 'p', 'e', 'n', '_', 's', 'o', 'u', 'r', 'c', 'e', '_', 'l', 'i', 'c', 'e', 'n', 's', 'e', 's', '\230', '\234', '\'', '\001', 
  '\022', '\307', '\001', '\n', '\016', 'L', 'i', 's', 't', 'M', 'o', 'd', 'e', 'l', 'T', 'y', 'p', 'e', 's', '\022', '#', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'M', 'o', 'd', 'e', 'l', 'T', 'y', 'p', 'e', 's', 'R', 
  'e', 'q', 'u', 'e', 's', 't', '\032', '$', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 
  't', 'i', 'M', 'o', 'd', 'e', 'l', 'T', 'y', 'p', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'j', '\202', '\323', '\344', '\223', 
  '\002', '\\', '\022', 'F', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', 
  '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', 't', 'y', 'p', 'e', 's', 'Z', 
  '\022', '\022', '\020', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', 't', 'y', 'p', 'e', 's', '\230', '\234', '\'', '\002', '\220', '\234', 
  '\'', '\017', '\022', '\306', '\001', '\n', '\010', 'G', 'e', 't', 'M', 'o', 'd', 'e', 'l', '\022', '\035', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'M', 'o', 'd', 'e', 'l', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'M', 'o', 'd', 'e', 'l', 'R', 'e', 
  's', 'p', 'o', 'n', 's', 'e', '\"', 'x', '\202', '\323', '\344', '\223', '\002', 'f', '\022', 'K', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', 
  '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 
  'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 
  'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', 'Z', '\027', '\022', '\025', '/', 'v', '2', '/', 'm', 
  'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\013', '\220', 
  '\234', '\'', '\017', '\022', '\226', '\003', '\n', '\022', 'G', 'e', 't', 'M', 'o', 'd', 'e', 'l', 'O', 'u', 't', 'p', 'u', 't', 'I', 'n', 'f', 
  'o', '\022', '\035', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'M', 'o', 'd', 'e', 'l', 
  'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 
  'n', 'g', 'l', 'e', 'M', 'o', 'd', 'e', 'l', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\275', '\002', '\202', '\323', '\344', '\223', '\002', 
  '\252', '\002', '\022', 'W', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', 
  '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', 
  '_', 'i', 'd', '}', '/', 'o', 'u', 't', 'p', 'u', 't', '_', 'i', 'n', 'f', 'o', 'Z', '#', '\022', '!', '/', 'v', '2', '/', 'm', 
  'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'o', 'u', 't', 'p', 'u', 't', '_', 'i', 
  'n', 'f', 'o', 'Z', 'o', '\022', 'm', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 
  'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'v', 'e', 'r', 's', 'i', 'o', 'n', 
  '_', 'i', 'd', '}', '/', 'o', 'u', 't', 'p', 'u', 't', '_', 'i', 'n', 'f', 'o', 'Z', '9', '\022', '7', '/', 'v', '2', '/', 'm', 
  'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', 
  '/', '{', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', '/', 'o', 'u', 't', 'p', 'u', 't', '_', 'i', 'n', 'f', 'o', 
  '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\017', '\022', '\336', '\001', '\n', '\n', 'L', 'i', 's', 't', 'M', 'o', 'd', 'e', 
  'l', 's', '\022', '\037', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'M', 'o', 'd', 
  'e', 'l', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ' ', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 'e', 'l', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\214', '\001', '\202', '\323', '\344', 
  '\223', '\002', 'z', '\022', '@', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', 'Z', '(', '\022', '&', '/', 'v', 
  '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', 
  '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', 'Z', '\014', '\022', '\n', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', 
  '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\017', '\022', '\333', '\001', '\n', '\022', 'P', 'o', 's', 't', 'M', 'o', 'd', 'e', 
  'l', 's', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', '\022', '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'P', 'o', 's', 't', 'M', 'o', 'd', 'e', 'l', 's', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 
  't', '\032', ' ', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 
  'e', 'l', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'z', '\202', '\323', '\344', '\223', '\002', 'h', '\"', 'I', '/', 'v', '2', '/', 'u', 
  's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', 
  '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 
  'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', ':', '\001', '*', 'Z', '\030', '\"', '\023', 
  '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', ':', '\001', '*', '\230', '\234', '\'', 
  '\002', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\017', '\022', '\306', '\001', '\n', '\n', 'P', 'o', 's', 't', 'M', 'o', 'd', 'e', 'l', 's', '\022', 
  '\037', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'M', 'o', 'd', 'e', 'l', 's', 
  'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 
  'n', 'g', 'l', 'e', 'M', 'o', 'd', 'e', 'l', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 't', '\202', '\323', '\344', '\223', '\002', 'V', 
  '\"', '@', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 
  'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', ':', '\001', '*', 'Z', '\017', '\"', '\n', '/', 'v', 
  '2', '/', 'm', 'o', 'd', 'e', 'l', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\016', '\220', '\234', 
  '\'', '\017', '\220', '\234', '\'', '\032', '\220', '\234', '\'', '\023', '\022', '\303', '\001', '\n', '\013', 'P', 'a', 't', 'c', 'h', 'M', 'o', 'd', 'e', 'l', 
  's', '\022', ' ', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'M', 'o', 'd', 
  'e', 'l', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ' ', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 'e', 'l', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'p', '\202', '\323', '\344', '\223', 
  '\002', 'V', '2', '@', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', 
  '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', ':', '\001', '*', 'Z', '\017', '2', '\n', 
  '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\016', 
  '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\032', '\022', '\262', '\001', '\n', '\r', 'P', 'a', 't', 'c', 'h', 'M', 'o', 'd', 'e', 'l', 'I', 'd', 
  's', '\022', '\"', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'M', 'o', 'd', 
  'e', 'l', 'I', 'd', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ' ', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 'e', 'l', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '[', '\202', '\323', 
  '\344', '\223', '\002', 'I', '2', 'D', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', 
  '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 
  'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', 'i', 'd', 's', ':', 
  '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\016', '\220', '\234', '\'', '\017', '\022', '\331', '\001', '\n', '\013', 'D', 'e', 'l', 'e', 't', 'e', 
  'M', 'o', 'd', 'e', 'l', '\022', ' ', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 
  't', 'e', 'M', 'o', 'd', 'e', 'l', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 
  '\204', '\001', '\202', '\323', '\344', '\223', '\002', 'f', '*', 'K', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', 
  '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', 'Z', '\027', '*', '\025', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', 
  '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\016', '\220', '\234', '\'', 
  '\021', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\023', '\022', '\312', '\001', '\n', '\014', 'D', 'e', 'l', 'e', 't', 'e', 'M', 'o', 'd', 'e', 'l', 
  's', '\022', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'M', 'o', 
  'd', 'e', 'l', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 't', '\202', '\323', 
  '\344', '\223', '\002', 'V', '*', '@', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', 
  '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 
  'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', ':', '\001', '*', 'Z', '\017', 
  '*', '\n', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\013', '\220', '\234', 
  '\'', '\016', '\220', '\234', '\'', '\021', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\023', '\022', '\365', '\001', '\n', '\022', 'P', 'a', 't', 'c', 'h', 'M', 
  'o', 'd', 'e', 'l', 'T', 'o', 'o', 'l', 'k', 'i', 't', 's', '\022', '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'M', 'o', 'd', 'e', 'l', 'T', 'o', 'o', 'l', 'k', 'i', 't', 's', 'R', 'e', 'q', 'u', 
  'e', 's', 't', '\032', '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'M', 
  'o', 'd', 'e', 'l', 'T', 'o', 'o', 'l', 'k', 'i', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\214', '\001', '\202', '\323', '\344', 
  '\223', '\002', '~', '2', 'T', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 
  'l', '_', 'i', 'd', '}', '/', 't', 'o', 'o', 'l', 'k', 'i', 't', 's', ':', '\001', '*', 'Z', '#', '2', '\036', '/', 'v', '2', '/', 
  'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 't', 'o', 'o', 'l', 'k', 'i', 't', 
  's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\017', '\022', '\365', '\001', '\n', '\022', 'P', 'a', 't', 'c', 'h', 'M', 'o', 'd', 
  'e', 'l', 'U', 's', 'e', 'C', 'a', 's', 'e', 's', '\022', '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'P', 'a', 't', 'c', 'h', 'M', 'o', 'd', 'e', 'l', 'U', 's', 'e', 'C', 'a', 's', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 
  't', '\032', '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 
  'e', 'l', 'U', 's', 'e', 'C', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\214', '\001', '\202', '\323', '\344', '\223', '\002', 
  '~', '2', 'T', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 
  'i', 'd', '}', '/', 'u', 's', 'e', 'c', 'a', 's', 'e', 's', ':', '\001', '*', 'Z', '#', '2', '\036', '/', 'v', '2', '/', 'm', 'o', 
  'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'u', 's', 'e', 'c', 'a', 's', 'e', 's', ':', 
  '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\017', '\022', '\373', '\001', '\n', '\023', 'P', 'a', 't', 'c', 'h', 'M', 'o', 'd', 'e', 'l', 
  'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', '\022', '(', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'P', 'a', 't', 'c', 'h', 'M', 'o', 'd', 'e', 'l', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 
  't', '\032', '(', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 
  'e', 'l', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\217', '\001', '\202', '\323', '\344', '\223', 
  '\002', '\200', '\001', '2', 'U', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 
  'l', '_', 'i', 'd', '}', '/', 'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', ':', '\001', '*', 'Z', '$', '2', '\037', '/', 'v', '2', 
  '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'l', 'a', 'n', 'g', 'u', 'a', 
  'g', 'e', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\017', '\022', '\215', '\003', '\n', '\017', 'L', 'i', 's', 't', 'M', 'o', 
  'd', 'e', 'l', 'I', 'n', 'p', 'u', 't', 's', '\022', '$', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'L', 'i', 's', 't', 'M', 'o', 'd', 'e', 'l', 'I', 'n', 'p', 'u', 't', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ' ', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'I', 'n', 'p', 'u', 't', 'R', 'e', 
  's', 'p', 'o', 'n', 's', 'e', '\"', '\261', '\002', '\202', '\323', '\344', '\223', '\002', '\226', '\002', '\022', 'R', '/', 'v', '2', '/', 'u', 's', 'e', 
  'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 
  'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', 
  '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', 
  'Z', '\036', '\022', '\034', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', 
  '/', 'i', 'n', 'p', 'u', 't', 's', 'Z', 'j', '\022', 'h', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', 
  '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'v', 'e', 'r', 
  's', 'i', 'o', 'n', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', 'Z', '4', '\022', '2', '/', 'v', '2', '/', 'm', 'o', 
  'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', 
  '{', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', '\230', '\234', '\'', '\002', '\220', '\234', 
  '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\005', '\220', '\234', '\'', '\017', '\022', '\211', '\002', '\n', '\017', 'G', 'e', 't', 'M', 'o', 'd', 
  'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', '\022', '$', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'G', 'e', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '(', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'M', 'o', 'd', 'e', 'l', 'V', 
  'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\245', '\001', '\202', '\323', '\344', '\223', '\002', '\222', '\001', '\022', 
  'a', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 
  's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', 
  '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', 'Z', '-', 
  '\022', '+', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'v', 
  'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', 
  '\234', '\'', '\013', '\220', '\234', '\'', '\017', '\022', '\361', '\001', '\n', '\021', 'L', 'i', 's', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 
  'i', 'o', 'n', 's', '\022', '&', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'M', 
  'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\'', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 
  'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\212', '\001', '\202', '\323', '\344', '\223', '\002', 'x', '\022', 'T', '/', 'v', '2', '/', 
  'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 
  'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 
  'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 
  's', 'i', 'o', 'n', 's', 'Z', ' ', '\022', '\036', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 
  'l', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\013', '\220', '\234', '\'', 
  '\017', '\022', '\270', '\002', '\n', '\035', 'P', 'o', 's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 
  's', 'U', 'n', 'P', 'u', 'b', 'l', 'i', 's', 'h', '\022', '2', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'P', 'o', 's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'U', 'n', 'P', 'u', 
  'b', 'l', 'i', 's', 'h', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\277', '\001', 
  '\202', '\323', '\344', '\223', '\002', '\214', '\001', '\"', '[', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 
  's', '/', '{', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '}', '/', 'u', 'n', 'p', 'u', 'b', 'l', 'i', 's', 'h', 
  ':', '\001', '*', 'Z', '*', '\"', '%', '/', 'v', '2', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '/', '{', 'w', 'o', 'r', 
  'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '}', '/', 'u', 'n', 'p', 'u', 'b', 'l', 'i', 's', 'h', ':', '\001', '*', '\230', '\234', '\'', 
  '\002', '\220', '\234', '\'', 'x', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\005', '\220', '\234', '\'', '\016', '\220', '\234', '\'', '\017', 
  '\220', '\234', '\'', '\032', '\220', '\234', '\'', '\023', '\220', '\234', '\'', '5', '\220', '\234', '\'', '6', '\022', '\260', '\002', '\n', '\033', 'P', 'o', 's', 't', 
  'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'P', 'u', 'b', 'l', 'i', 's', 'h', '\022', '0', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 
  'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'P', 'u', 'b', 'l', 'i', 's', 'h', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 
  'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\273', '\001', '\202', '\323', '\344', '\223', '\002', '\210', '\001', '\"', 'Y', '/', 'v', '2', '/', 'u', 
  's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', 
  '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 
  'd', '}', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '/', '{', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', 
  '}', '/', 'p', 'u', 'b', 'l', 'i', 's', 'h', ':', '\001', '*', 'Z', '(', '\"', '#', '/', 'v', '2', '/', 'w', 'o', 'r', 'k', 'f', 
  'l', 'o', 'w', 's', '/', '{', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '}', '/', 'p', 'u', 'b', 'l', 'i', 's', 
  'h', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'w', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\005', '\220', 
  '\234', '\'', '\016', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\032', '\220', '\234', '\'', '\023', '\220', '\234', '\'', '5', '\220', '\234', '\'', '6', '\022', '\235', 
  '\002', '\n', '\030', 'P', 'o', 's', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'P', 'u', 'b', 'l', 'i', 
  's', 'h', '\022', '-', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'M', 'o', 'd', 
  'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'P', 'u', 'b', 'l', 'i', 's', 'h', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', 
  '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 
  'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\256', '\001', '\202', '\323', '\344', '\223', '\002', '|', '\"', 'S', '/', 'v', '2', '/', 'u', 
  's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', 
  '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 
  'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'p', 'u', 'b', 'l', 
  'i', 's', 'h', ':', '\001', '*', 'Z', '\"', '\"', '\035', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 
  'e', 'l', '_', 'i', 'd', '}', '/', 'p', 'u', 'b', 'l', 'i', 's', 'h', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'u', 
  '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\005', '\220', '\234', '\'', '\016', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\032', '\220', 
  '\234', '\'', '\023', '\220', '\234', '\'', '5', '\220', '\234', '\'', '6', '\022', '\246', '\002', '\n', '\032', 'P', 'o', 's', 't', 'M', 'o', 'd', 'e', 'l', 
  'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'U', 'n', 'P', 'u', 'b', 'l', 'i', 's', 'h', '\022', '/', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 
  'U', 'n', 'P', 'u', 'b', 'l', 'i', 's', 'h', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 
  'e', '\"', '\263', '\001', '\202', '\323', '\344', '\223', '\002', '\200', '\001', '\"', 'U', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', 
  '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 
  'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'u', 'n', 'p', 'u', 'b', 'l', 'i', 's', 'h', ':', '\001', 
  '*', 'Z', '$', '\"', '\037', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', 
  '}', '/', 'u', 'n', 'p', 'u', 'b', 'l', 'i', 's', 'h', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'v', '\220', '\234', '\'', 
  '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\005', '\220', '\234', '\'', '\016', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\032', '\220', '\234', '\'', '\023', 
  '\220', '\234', '\'', '5', '\220', '\234', '\'', '6', '\022', '\215', '\002', '\n', '\021', 'P', 'o', 's', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 
  's', 'i', 'o', 'n', 's', '\022', '&', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 
  'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'M', 'o', 'd', 'e', 'l', 'R', 'e', 's', 
  'p', 'o', 'n', 's', 'e', '\"', '\254', '\001', '\202', '\323', '\344', '\223', '\002', '~', '\"', 'T', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', 
  '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 
  'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 
  'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', 
  ':', '\001', '*', 'Z', '#', '\"', '\036', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 
  'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '&', '\220', '\234', 
  '\'', '\013', '\220', '\234', '\'', '\005', '\220', '\234', '\'', '\016', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\032', '\220', '\234', '\'', '\023', '\220', '\234', '\'', 
  '5', '\220', '\234', '\'', '6', '\022', '\333', '\001', '\n', '\022', 'P', 'a', 't', 'c', 'h', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 
  'o', 'n', 's', '\022', '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'M', 
  'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\'', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 
  'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 's', '\202', '\323', '\344', '\223', '\002', 'Y', '2', 'T', '/', 'v', '2', '/', 'u', 
  's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', 
  '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 
  'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 
  'i', 'o', 'n', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\016', '\220', '\234', 
  '\'', '\032', '\022', '\224', '\002', '\n', '\022', 'D', 'e', 'l', 'e', 't', 'e', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 
  '\022', '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'M', 'o', 'd', 
  'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 
  'e', '\"', '\261', '\001', '\202', '\323', '\344', '\223', '\002', '\222', '\001', '*', 'a', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', 
  '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 
  'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'v', 
  'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', 'Z', '-', '*', '+', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', 
  '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'v', 'e', 'r', 's', 
  'i', 'o', 'n', '_', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\016', '\220', '\234', '\'', '\021', '\220', '\234', 
  '\'', '\017', '\220', '\234', '\'', '\023', '\022', '\263', '\002', '\n', '\026', 'G', 'e', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 
  'n', 'M', 'e', 't', 'r', 'i', 'c', 's', '\022', '+', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 
  'e', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'M', 'e', 't', 'r', 'i', 'c', 's', 'R', 'e', 'q', 'u', 
  'e', 's', 't', '\032', '(', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 
  'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\301', '\001', '\202', '\323', 
  '\344', '\223', '\002', '\242', '\001', '\022', 'i', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 
  'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'v', 'e', 'r', 's', 'i', 'o', 'n', 
  '_', 'i', 'd', '}', '/', 'm', 'e', 't', 'r', 'i', 'c', 's', 'Z', '5', '\022', '3', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 
  's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'v', 'e', 
  'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', '/', 'm', 'e', 't', 'r', 'i', 'c', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '&', 
  '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\005', '\220', '\234', '\'', '5', '\022', '\317', '\002', '\n', '\027', 'P', 'o', 's', 't', 
  'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'M', 'e', 't', 'r', 'i', 'c', 's', '\022', ',', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 
  'n', 'M', 'e', 't', 'r', 'i', 'c', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '(', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 
  'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\333', '\001', '\202', '\323', '\344', '\223', '\002', '\250', '\001', '\"', 'i', '/', 'v', '2', '/', 'u', 's', 
  'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', 
  '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', 
  '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 
  'o', 'n', 's', '/', '{', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', '/', 'm', 'e', 't', 'r', 'i', 'c', 's', ':', 
  '\001', '*', 'Z', '8', '\"', '3', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 
  'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', '/', 
  'm', 'e', 't', 'r', 'i', 'c', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', 
  '\005', '\220', '\234', '\'', '\016', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\032', '\220', '\234', '\'', '\002', '\220', '\234', '\'', '\023', '\220', '\234', '\'', '5', 
  '\220', '\234', '\'', '6', '\022', '\367', '\001', '\n', '\023', 'L', 'i', 's', 't', 'M', 'o', 'd', 'e', 'l', 'R', 'e', 'f', 'e', 'r', 'e', 'n', 
  'c', 'e', 's', '\022', '(', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'M', 'o', 
  'd', 'e', 'l', 'R', 'e', 'f', 'e', 'r', 'e', 'n', 'c', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ')', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 'e', 'l', 'R', 'e', 'f', 'e', 
  'r', 'e', 'n', 'c', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\212', '\001', '\202', '\323', '\344', '\223', '\002', '|', '\022', 'V', '/', 
  'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 
  'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 
  'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 
  'r', 'e', 'f', 'e', 'r', 'e', 'n', 'c', 'e', 's', 'Z', '\"', '\022', ' ', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', 
  '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'r', 'e', 'f', 'e', 'r', 'e', 'n', 'c', 'e', 's', '\230', '\234', '\'', '\002', 
  '\220', '\234', '\'', '\017', '\022', '\356', '\002', '\n', '\033', 'G', 'e', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'I', 
  'n', 'p', 'u', 't', 'E', 'x', 'a', 'm', 'p', 'l', 'e', '\022', '0', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'G', 'e', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'I', 'n', 'p', 'u', 't', 'E', 'x', 'a', 
  'm', 'p', 'l', 'e', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '4', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'I', 'n', 'p', 'u', 't', 
  'E', 'x', 'a', 'm', 'p', 'l', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\346', '\001', '\202', '\323', '\344', '\223', '\002', '\327', '\001', 
  '\022', '\203', '\001', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 
  'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'v', 'e', 'r', 's', 'i', 
  'o', 'n', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', '_', 'e', 'x', 'a', 'm', 'p', 'l', 'e', 's', '/', '{', 'e', 'x', 
  'a', 'm', 'p', 'l', 'e', '_', 'i', 'd', '}', 'Z', 'O', '\022', 'M', '/', 'v', '2', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 
  'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', 
  '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', '_', 'e', 'x', 'a', 'm', 'p', 'l', 
  'e', 's', '/', '{', 'e', 'x', 'a', 'm', 'p', 'l', 'e', '_', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\017', '\022', '\326', 
  '\002', '\n', '\035', 'L', 'i', 's', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'I', 'n', 'p', 'u', 't', 'E', 
  'x', 'a', 'm', 'p', 'l', 'e', 's', '\022', '2', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 
  's', 't', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'I', 'n', 'p', 'u', 't', 'E', 'x', 'a', 'm', 'p', 'l', 
  'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '3', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'M', 'u', 'l', 't', 'i', 'M', 'o', 'd', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'I', 'n', 'p', 'u', 't', 'E', 'x', 'a', 
  'm', 'p', 'l', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\313', '\001', '\202', '\323', '\344', '\223', '\002', '\274', '\001', '\022', 'v', '/', 
  'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 
  'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 
  'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 
  'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 
  'd', '}', '/', 'i', 'n', 'p', 'u', 't', '_', 'e', 'x', 'a', 'm', 'p', 'l', 'e', 's', 'Z', 'B', '\022', '@', '/', 'v', '2', '/', 
  'm', 'o', 'd', 'e', 'l', 's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 
  's', '/', '{', 'm', 'o', 'd', 'e', 'l', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 
  't', '_', 'e', 'x', 'a', 'm', 'p', 'l', 'e', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\017', '\022', '\334', '\001', '\n', '\013', 'G', 'e', 
  't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '\022', ' ', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'G', 'e', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '$', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'R', 'e', 
  's', 'p', 'o', 'n', 's', 'e', '\"', '\204', '\001', '\202', '\323', '\344', '\223', '\002', 'r', '\022', 'Q', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 
  's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 
  'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 
  'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '/', '{', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '}', 'Z', '\035', 
  '\022', '\033', '/', 'v', '2', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '/', '{', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 
  '_', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\023', '\022', '\361', '\001', '\n', '\r', 'L', 'i', 's', 't', 
  'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '\022', '\"', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'L', 'i', 's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '#', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'R', 
  'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\226', '\001', '\202', '\323', '\344', '\223', '\002', '\203', '\001', '\022', 'C', '/', 'v', '2', '/', 'u', 's', 
  'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', 
  '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', 
  '}', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', 'Z', '+', '\022', ')', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', 
  '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'w', 'o', 'r', 
  'k', 'f', 'l', 'o', 'w', 's', 'Z', '\017', '\022', '\r', '/', 'v', '2', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '\230', '\234', 
  '\'', '\002', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\023', '\022', '\314', '\001', '\n', '\r', 'P', 'o', 's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 
  'o', 'w', 's', '\022', '\"', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'W', 'o', 
  'r', 'k', 'f', 'l', 'o', 'w', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '#', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'R', 'e', 's', 'p', 'o', 'n', 's', 
  'e', '\"', 'r', '\202', '\323', '\344', '\223', '\002', '\\', '\"', 'C', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'w', 'o', 'r', 'k', 'f', 'l', 
  'o', 'w', 's', ':', '\001', '*', 'Z', '\022', '\"', '\r', '/', 'v', '2', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', ':', '\001', 
  '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\022', '\220', '\234', '\'', '\023', '\022', '\316', '\001', '\n', '\016', 'P', 'a', 't', 
  'c', 'h', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '\022', '#', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'P', 'a', 't', 'c', 'h', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '#', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'W', 'o', 'r', 'k', 'f', 'l', 
  'o', 'w', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'r', '\202', '\323', '\344', '\223', '\002', '\\', '2', 'C', '/', 'v', '2', '/', 'u', 
  's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', 
  '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 
  'd', '}', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', ':', '\001', '*', 'Z', '\022', '2', '\r', '/', 'v', '2', '/', 'w', 'o', 
  'r', 'k', 'f', 'l', 'o', 'w', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\022', '\220', '\234', '\'', 
  '\023', '\022', '\343', '\001', '\n', '\016', 'D', 'e', 'l', 'e', 't', 'e', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '\022', '#', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 
  'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 
  'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\210', '\001', '\202', '\323', '\344', '\223', '\002', 
  'r', '*', 'Q', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '/', '{', 'w', 'o', 'r', 
  'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '}', 'Z', '\035', '*', '\033', '/', 'v', '2', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 
  's', '/', '{', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\022', '\220', '\234', 
  '\'', '\025', '\220', '\234', '\'', '\023', '\022', '\316', '\001', '\n', '\017', 'D', 'e', 'l', 'e', 't', 'e', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 
  's', '\022', '$', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'W', 'o', 
  'r', 'k', 'f', 'l', 'o', 'w', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 
  'r', '\202', '\323', '\344', '\223', '\002', '\\', '*', 'C', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 
  's', ':', '\001', '*', 'Z', '\022', '*', '\r', '/', 'v', '2', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', ':', '\001', '*', '\230', 
  '\234', '\'', '\002', '\220', '\234', '\'', '\022', '\220', '\234', '\'', '\025', '\220', '\234', '\'', '\023', '\022', '\206', '\003', '\n', '\023', 'P', 'o', 's', 't', 'W', 
  'o', 'r', 'k', 'f', 'l', 'o', 'w', 'R', 'e', 's', 'u', 'l', 't', 's', '\022', '(', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'R', 'e', 's', 'u', 'l', 't', 's', 'R', 
  'e', 'q', 'u', 'e', 's', 't', '\032', ')', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 
  't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'R', 'e', 's', 'u', 'l', 't', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 
  '\231', '\002', '\202', '\323', '\344', '\223', '\002', '\376', '\001', '\"', 'o', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'w', 'o', 'r', 'k', 'f', 'l', 
  'o', 'w', 's', '/', '{', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 
  's', '/', '{', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', '/', 'r', 'e', 's', 'u', 'l', 't', 's', ':', '\001', '*', 
  'Z', '^', '\"', 'Y', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', 
  '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '/', '{', 'w', 'o', 
  'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '}', '/', 'r', 'e', 's', 'u', 'l', 't', 's', ':', '\001', '*', 'Z', '(', '\"', '#', 
  '/', 'v', '2', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '/', '{', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 
  'd', '}', '/', 'r', 'e', 's', 'u', 'l', 't', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\013', 
  '\220', '\234', '\'', '\002', '\220', '\234', '\'', '\023', '\022', '\305', '\003', '\n', '\035', 'P', 'o', 's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 
  'R', 'e', 's', 'u', 'l', 't', 's', 'S', 'i', 'm', 'i', 'l', 'a', 'r', 'i', 't', 'y', '\022', '2', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'R', 'e', 's', 'u', 'l', 
  't', 's', 'S', 'i', 'm', 'i', 'l', 'a', 'r', 'i', 't', 'y', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '3', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'R', 'e', 's', 
  'u', 'l', 't', 's', 'S', 'i', 'm', 'i', 'l', 'a', 'r', 'i', 't', 'y', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\272', '\002', 
  '\202', '\323', '\344', '\223', '\002', '\237', '\002', '\"', 'z', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 
  's', '/', '{', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', 
  '{', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', '/', 'r', 'e', 's', 'u', 'l', 't', 's', '/', 's', 'i', 'm', 'i', 
  'l', 'a', 'r', 'i', 't', 'y', ':', '\001', '*', 'Z', 'i', '\"', 'd', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', 
  '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'w', 'o', 'r', 'k', 
  'f', 'l', 'o', 'w', 's', '/', '{', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '}', '/', 'r', 'e', 's', 'u', 'l', 
  't', 's', '/', 's', 'i', 'm', 'i', 'l', 'a', 'r', 'i', 't', 'y', ':', '\001', '*', 'Z', '3', '\"', '.', '/', 'v', '2', '/', 'w', 
  'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '/', '{', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '}', '/', 'r', 'e', 
  's', 'u', 'l', 't', 's', '/', 's', 'i', 'm', 'i', 'l', 'a', 'r', 'i', 't', 'y', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', 
  '\'', '\017', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\002', '\220', '\234', '\'', '\023', '\022', '\207', '\002', '\n', '\024', 'L', 'i', 's', 't', 'W', 'o', 
  'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', '\022', ')', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 
  'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '*', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 
  'l', 't', 'i', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 
  'e', '\"', '\227', '\001', '\202', '\323', '\344', '\223', '\002', '\204', '\001', '\022', 'Z', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', 
  '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'w', 'o', 'r', 'k', 
  'f', 'l', 'o', 'w', 's', '/', '{', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 
  'o', 'n', 's', 'Z', '&', '\022', '$', '/', 'v', '2', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '/', '{', 'w', 'o', 'r', 
  'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 
  '\017', '\220', '\234', '\'', '\023', '\022', '\260', '\002', '\n', '\022', 'G', 'e', 't', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 
  'i', 'o', 'n', '\022', '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'W', 'o', 'r', 
  'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '+', '.', 'c', 'l', 'a', 
  'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 
  'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\303', '\001', '\202', '\323', '\344', '\223', '\002', '\260', '\001', '\022', 
  'p', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 
  's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '/', '{', 'w', 'o', 'r', 'k', 'f', 
  'l', 'o', 'w', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', '/', '{', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 
  'w', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', 'Z', '<', '\022', ':', '/', 'v', '2', '/', 'w', 'o', 'r', 'k', 
  'f', 'l', 'o', 'w', 's', '/', '{', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 
  'o', 'n', 's', '/', '{', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'd', '}', 
  '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\023', '\022', '\214', '\002', '\n', '\026', 'D', 'e', 'l', 'e', 't', 'e', 'W', 'o', 
  'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', '\022', '+', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 
  'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\241', '\001', '\202', '\323', '\344', 
  '\223', '\002', '\212', '\001', '*', 'Z', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', 
  '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 
  'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '/', '{', 
  'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', ':', '\001', '*', 'Z', 
  ')', '*', '$', '/', 'v', '2', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '/', '{', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 
  'w', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\023', 
  '\220', '\234', '\'', '\022', '\220', '\234', '\'', '\025', '\022', '\223', '\002', '\n', '\025', 'P', 'a', 't', 'c', 'h', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 
  'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', '\022', '*', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'P', 'a', 't', 'c', 'h', 'W', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 
  'e', 's', 't', '\032', '*', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'W', 
  'o', 'r', 'k', 'f', 'l', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\241', '\001', 
  '\202', '\323', '\344', '\223', '\002', '\212', '\001', '2', 'Z', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 
  's', '/', '{', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', ':', 
  '\001', '*', 'Z', ')', '2', '$', '/', 'v', '2', '/', 'w', 'o', 'r', 'k', 'f', 'l', 'o', 'w', 's', '/', '{', 'w', 'o', 'r', 'k', 
  'f', 'l', 'o', 'w', '_', 'i', 'd', '}', '/', 'v', 'e', 'r', 's', 'i', 'o', 'n', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', 
  '\234', '\'', '\017', '\220', '\234', '\'', '\023', '\220', '\234', '\'', '\022', '\022', '\205', '\001', '\n', '\006', 'G', 'e', 't', 'K', 'e', 'y', '\022', '\033', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'K', 'e', 'y', 'R', 'e', 'q', 'u', 'e', 's', 
  't', '\032', '\037', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'K', 'e', 
  'y', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '=', '\202', '\323', '\344', '\223', '\002', '/', '\022', '-', '/', 'v', '2', '/', 'u', 's', 
  'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', 
  '/', 'k', 'e', 'y', 's', '/', '{', 'k', 'e', 'y', '_', 'i', 'd', '}', '\230', '\234', '\'', '\005', '\220', '\234', '\'', '0', '\022', '\177', '\n', 
  '\010', 'L', 'i', 's', 't', 'K', 'e', 'y', 's', '\022', '\035', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'L', 'i', 's', 't', 'K', 'e', 'y', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\036', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'K', 'e', 'y', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '4', '\202', 
  '\323', '\344', '\223', '\002', '&', '\022', '$', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'k', 'e', 'y', 's', '\230', '\234', '\'', '\005', '\220', '\234', '\'', 
  '0', '\022', '\237', '\001', '\n', '\013', 'L', 'i', 's', 't', 'A', 'p', 'p', 'K', 'e', 'y', 's', '\022', ' ', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'A', 'p', 'p', 'K', 'e', 'y', 's', 'R', 'e', 'q', 'u', 'e', 's', 
  't', '\032', '\036', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'K', 'e', 'y', 
  'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'N', '\202', '\323', '\344', '\223', '\002', '@', '\022', '>', '/', 'v', '2', '/', 'u', 's', 'e', 
  'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 
  'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', 
  '/', 'k', 'e', 'y', 's', '\230', '\234', '\'', '\005', '\220', '\234', '\'', '0', '\022', '\225', '\001', '\n', '\t', 'D', 'e', 'l', 'e', 't', 'e', 'K', 
  'e', 'y', '\022', '\036', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'K', 
  'e', 'y', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'E', '\202', '\323', '\344', '\223', 
  '\002', '/', '*', '-', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'k', 'e', 'y', 's', '/', '{', 'k', 'e', 'y', '_', 'i', 'd', '}', '\230', 
  '\234', '\'', '\005', '\220', '\234', '\'', '/', '\220', '\234', '\'', '1', '\220', '\234', '\'', '0', '\022', '\212', '\001', '\n', '\010', 'P', 'o', 's', 't', 'K', 
  'e', 'y', 's', '\022', '\035', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'K', 'e', 
  'y', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\036', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'M', 'u', 'l', 't', 'i', 'K', 'e', 'y', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '?', '\202', '\323', '\344', '\223', '\002', ')', '\"', 
  '$', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 
  's', 'e', 'r', '_', 'i', 'd', '}', '/', 'k', 'e', 'y', 's', ':', '\001', '*', '\230', '\234', '\'', '\005', '\220', '\234', '\'', '-', '\220', '\234', 
  '\'', '/', '\220', '\234', '\'', '0', '\022', '\210', '\001', '\n', '\t', 'P', 'a', 't', 'c', 'h', 'K', 'e', 'y', 's', '\022', '\036', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'K', 'e', 'y', 's', 'R', 'e', 'q', 'u', 'e', 
  's', 't', '\032', '\036', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'K', 'e', 
  'y', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', ';', '\202', '\323', '\344', '\223', '\002', ')', '2', '$', '/', 'v', '2', '/', 'u', 's', 
  'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', 
  '/', 'k', 'e', 'y', 's', ':', '\001', '*', '\230', '\234', '\'', '\005', '\220', '\234', '\'', '/', '\220', '\234', '\'', '0', '\022', '\274', '\001', '\n', '\010', 
  'M', 'y', 'S', 'c', 'o', 'p', 'e', 's', '\022', '\035', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 
  'y', 'S', 'c', 'o', 'p', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ' ', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'S', 'c', 'o', 'p', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'o', 
  '\202', '\323', '\344', '\223', '\002', 'e', '\022', 'B', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 
  'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'm', 'y', 's', 'c', 'o', 'p', 'e', 's', 'Z', 
  '\016', '\022', '\014', '/', 'v', '2', '/', 'm', 'y', 's', 'c', 'o', 'p', 'e', 's', 'Z', '\017', '\022', '\r', '/', 'v', '2', '/', 'm', 'y', 
  '_', 's', 'c', 'o', 'p', 'e', 's', '\230', '\234', '\'', '\002', '\022', '\215', '\001', '\n', '\014', 'M', 'y', 'S', 'c', 'o', 'p', 'e', 's', 'U', 
  's', 'e', 'r', '\022', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'y', 'S', 'c', 'o', 'p', 
  'e', 's', 'U', 's', 'e', 'r', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '$', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'S', 'c', 'o', 'p', 'e', 'U', 's', 'e', 'r', 'R', 'e', 's', 'p', 'o', 'n', 's', 
  'e', '\"', '4', '\202', '\323', '\344', '\223', '\002', '*', '\022', '(', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'm', 'y', 's', 'c', 'o', 'p', 'e', 
  's', '\230', '\234', '\'', '\005', '\022', 'u', '\n', '\014', 'M', 'y', 'S', 'c', 'o', 'p', 'e', 's', 'R', 'o', 'o', 't', '\022', '!', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'y', 'S', 'c', 'o', 'p', 'e', 's', 'R', 'o', 'o', 't', 'R', 
  'e', 'q', 'u', 'e', 's', 't', '\032', '$', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 
  't', 'i', 'S', 'c', 'o', 'p', 'e', 'R', 'o', 'o', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\034', '\202', '\323', '\344', '\223', 
  '\002', '\022', '\022', '\020', '/', 'v', '2', '/', 'm', 'y', 's', 'c', 'o', 'p', 'e', 's', 'r', 'o', 'o', 't', '\230', '\234', '\'', '\005', '\022', 
  '\207', '\001', '\n', '\n', 'L', 'i', 's', 't', 'S', 'c', 'o', 'p', 'e', 's', '\022', '\037', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'S', 'c', 'o', 'p', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '$', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'S', 'c', 'o', 'p', 'e', 'D', 'e', 
  'p', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '2', '\202', '\323', '\344', '\223', '\002', '(', '\022', '&', '/', 'v', '2', '/', 'u', 
  's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', 
  '}', '/', 's', 'c', 'o', 'p', 'e', 's', '\230', '\234', '\'', '\003', '\022', '\225', '\001', '\n', '\006', 'G', 'e', 't', 'A', 'p', 'p', '\022', '\033', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'A', 'p', 'p', 'R', 'e', 'q', 'u', 'e', 
  's', 't', '\032', '\037', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'A', 
  'p', 'p', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'M', '\202', '\323', '\344', '\223', '\002', ';', '\022', '9', '/', 'v', '2', '/', 'u', 
  's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', 
  '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 
  'd', '}', '\230', '\234', '\'', '\005', '\220', '\234', '\'', '-', '\220', '\234', '\'', '\023', '\022', '\217', '\001', '\n', '\010', 'L', 'i', 's', 't', 'A', 'p', 
  'p', 's', '\022', '\035', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'A', 'p', 'p', 
  's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\036', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 
  'u', 'l', 't', 'i', 'A', 'p', 'p', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'D', '\202', '\323', '\344', '\223', '\002', '2', '\022', '$', 
  '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 
  'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', 'Z', '\n', '\022', '\010', '/', 'v', '2', '/', 'a', 'p', 'p', 's', '\230', '\234', 
  '\'', '\005', '\220', '\234', '\'', '-', '\220', '\234', '\'', '\023', '\022', '\245', '\001', '\n', '\t', 'D', 'e', 'l', 'e', 't', 'e', 'A', 'p', 'p', '\022', 
  '\036', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'A', 'p', 'p', 'R', 
  'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 
  't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'U', '\202', '\323', '\344', '\223', '\002', ';', '*', 
  '9', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 
  's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '\230', '\234', '\'', '\005', '\220', '\234', '\'', ',', '\220', '\234', '\'', '.', '\220', '\234', '\'', '-', '\220', 
  '\234', '\'', '\023', '\022', '\222', '\001', '\n', '\010', 'P', 'o', 's', 't', 'A', 'p', 'p', 's', '\022', '\035', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'A', 'p', 'p', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\036', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'A', 'p', 'p', 'R', 'e', 's', 'p', 
  'o', 'n', 's', 'e', '\"', 'G', '\202', '\323', '\344', '\223', '\002', ')', '\"', '$', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 
  'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', 
  ':', '\001', '*', '\230', '\234', '\'', '\005', '\220', '\234', '\'', ',', '\220', '\234', '\'', '-', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\023', '\220', '\234', 
  '\'', '\022', '\022', '\210', '\001', '\n', '\t', 'P', 'a', 't', 'c', 'h', 'A', 'p', 'p', 's', '\022', '\036', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'A', 'p', 'p', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\036', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'A', 'p', 'p', 'R', 'e', 's', 
  'p', 'o', 'n', 's', 'e', '\"', ';', '\202', '\323', '\344', '\223', '\002', ')', '2', '$', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', 
  '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 
  's', ':', '\001', '*', '\230', '\234', '\'', '\005', '\220', '\234', '\'', ',', '\220', '\234', '\'', '-', '\022', '\234', '\001', '\n', '\010', 'P', 'a', 't', 'c', 
  'h', 'A', 'p', 'p', '\022', '\035', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 
  'A', 'p', 'p', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\037', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'S', 'i', 'n', 'g', 'l', 'e', 'A', 'p', 'p', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'P', '\202', '\323', '\344', '\223', '\002', 
  '>', '2', '9', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', ':', '\001', '*', '\230', '\234', '\'', '\005', '\220', '\234', '\'', ',', '\220', '\234', '\'', '-', 
  '\022', '\222', '\001', '\n', '\014', 'P', 'a', 't', 'c', 'h', 'A', 'p', 'p', 's', 'I', 'd', 's', '\022', '!', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'A', 'p', 'p', 's', 'I', 'd', 's', 'R', 'e', 'q', 'u', 'e', 
  's', 't', '\032', '\036', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'A', 'p', 
  'p', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '?', '\202', '\323', '\344', '\223', '\002', '-', '2', '(', '/', 'v', '2', '/', 'u', 's', 
  'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', 
  '/', 'a', 'p', 'p', 's', '/', 'i', 'd', 's', ':', '\001', '*', '\230', '\234', '\'', '\005', '\220', '\234', '\'', ',', '\220', '\234', '\'', '-', '\022', 
  '\237', '\001', '\n', '\020', 'P', 'o', 's', 't', 'A', 'p', 'p', 's', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', '\022', '%', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'A', 'p', 'p', 's', 'S', 'e', 'a', 'r', 'c', 'h', 
  'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\036', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'M', 'u', 'l', 't', 'i', 'A', 'p', 'p', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'D', '\202', '\323', '\344', '\223', '\002', '2', '\"', 
  '-', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 
  's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', ':', '\001', '*', '\230', 
  '\234', '\'', '\005', '\220', '\234', '\'', '-', '\220', '\234', '\'', '\023', '\022', '\317', '\001', '\n', '\024', 'P', 'o', 's', 't', 'V', 'a', 'l', 'i', 'd', 
  'a', 't', 'e', 'P', 'a', 's', 's', 'w', 'o', 'r', 'd', '\022', ')', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'P', 'o', 's', 't', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'e', 'P', 'a', 's', 's', 'w', 'o', 'r', 'd', 'R', 'e', 'q', 
  'u', 'e', 's', 't', '\032', '.', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 
  'e', 'P', 'a', 's', 's', 'w', 'o', 'r', 'd', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'i', 'o', 'n', 'R', 'e', 's', 'p', 'o', 'n', 
  's', 'e', '\"', '\\', '\202', '\323', '\344', '\223', '\002', 'R', '\"', '1', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'v', 'a', 'l', 'i', 'd', 'a', 
  't', 'e', '_', 'p', 'a', 's', 's', 'w', 'o', 'r', 'd', ':', '\001', '*', 'Z', '\032', '\"', '\025', '/', 'v', '2', '/', 'v', 'a', 'l', 
  'i', 'd', 'a', 't', 'e', '_', 'p', 'a', 's', 's', 'w', 'o', 'r', 'd', ':', '\001', '*', '\230', '\234', '\'', '\003', '\022', '\275', '\001', '\n', 
  '\t', 'G', 'e', 't', 'S', 'e', 'a', 'r', 'c', 'h', '\022', '\036', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'G', 'e', 't', 'S', 'e', 'a', 'r', 'c', 'h', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\"', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'S', 'e', 'a', 'r', 'c', 'h', 'R', 'e', 's', 'p', 'o', 
  'n', 's', 'e', '\"', 'l', '\202', '\323', '\344', '\223', '\002', '^', '\022', 'G', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', 
  '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 's', 'e', 'a', 'r', 
  'c', 'h', 'e', 's', '/', '{', 'i', 'd', '}', 'Z', '\023', '\022', '\021', '/', 'v', '2', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', 
  '/', '{', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'r', '\022', '\270', '\001', '\n', '\014', 'L', 'i', 's', 't', 'S', 'e', 'a', 
  'r', 'c', 'h', 'e', 's', '\022', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 
  'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'S', 'e', 'a', 'r', 'c', 'h', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', 
  '\"', 'b', '\202', '\323', '\344', '\223', '\002', 'T', '\022', 'B', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 
  'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 
  's', 'Z', '\016', '\022', '\014', '/', 'v', '2', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'r', 
  '\022', '\304', '\001', '\n', '\r', 'P', 'a', 't', 'c', 'h', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', '\022', '\"', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', 'R', 'e', 'q', 
  'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 
  'S', 'e', 'a', 'r', 'c', 'h', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'l', '\202', '\323', '\344', '\223', '\002', 'Z', '2', 'B', '/', 
  'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 
  'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 
  'p', 'p', '_', 'i', 'd', '}', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', ':', '\001', '*', 'Z', '\021', '2', '\014', '/', 'v', '2', 
  '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 's', '\220', '\234', '\'', 'r', '\022', 
  '\322', '\001', '\n', '\014', 'P', 'o', 's', 't', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', '\022', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 
  't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'S', 'e', 'a', 
  'r', 'c', 'h', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '|', '\202', '\323', '\344', '\223', '\002', 'Z', '\"', 'B', '/', 'v', '2', '/', 
  'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 
  'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 
  'i', 'd', '}', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', ':', '\001', '*', 'Z', '\021', '\"', '\014', '/', 'v', '2', '/', 's', 'e', 
  'a', 'r', 'c', 'h', 'e', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\005', 
  '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\003', '\220', '\234', '\'', '\023', '\022', '\324', '\001', '\n', '\020', 'P', 'o', 's', 't', 'S', 'e', 'a', 'r', 
  'c', 'h', 'e', 's', 'B', 'y', 'I', 'D', '\022', '%', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 
  'o', 's', 't', 'S', 'e', 'a', 'r', 'c', 'h', 'e', 's', 'B', 'y', 'I', 'D', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'S', 'e', 'a', 'r', 'c', 'h', 'R', 
  'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'v', '\202', '\323', '\344', '\223', '\002', 'd', '\"', 'G', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 
  's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 
  'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 
  's', 'e', 'a', 'r', 'c', 'h', 'e', 's', '/', '{', 'i', 'd', '}', ':', '\001', '*', 'Z', '\026', '\"', '\021', '/', 'v', '2', '/', 's', 
  'e', 'a', 'r', 'c', 'h', 'e', 's', '/', '{', 'i', 'd', '}', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'r', '\220', '\234', 
  '\'', '\003', '\022', '\257', '\002', '\n', '\033', 'P', 'o', 's', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'S', 'e', 'a', 'r', 
  'c', 'h', 'M', 'e', 't', 'r', 'i', 'c', 's', '\022', '0', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'P', 'o', 's', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'S', 'e', 'a', 'r', 'c', 'h', 'M', 'e', 't', 'r', 'i', 
  'c', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '2', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'M', 'u', 'l', 't', 'i', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'S', 'e', 'a', 'r', 'c', 'h', 'M', 'e', 't', 'r', 
  'i', 'c', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\251', '\001', '\202', '\323', '\344', '\223', '\002', '\202', '\001', '\"', 'V', '/', 'v', 
  '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', 
  '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 
  'p', '_', 'i', 'd', '}', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 
  's', '/', 'm', 'e', 't', 'r', 'i', 'c', 's', ':', '\001', '*', 'Z', '%', '\"', ' ', '/', 'v', '2', '/', 'a', 'n', 'n', 'o', 't', 
  'a', 't', 'i', 'o', 'n', 's', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', '/', 'm', 'e', 't', 'r', 'i', 'c', 's', ':', '\001', 
  '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\005', '\220', '\234', '\'', '5', '\220', '\234', '\'', '6', 
  '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\023', '\022', '\245', '\002', '\n', '\032', 'G', 'e', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 
  'n', 'S', 'e', 'a', 'r', 'c', 'h', 'M', 'e', 't', 'r', 'i', 'c', 's', '\022', '/', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'S', 'e', 'a', 'r', 'c', 'h', 'M', 
  'e', 't', 'r', 'i', 'c', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '2', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'S', 'e', 'a', 'r', 'c', 'h', 
  'M', 'e', 't', 'r', 'i', 'c', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\241', '\001', '\202', '\323', '\344', '\223', '\002', '\206', '\001', 
  '\022', '[', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 
  'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', '/', 's', 'e', 'a', 
  'r', 'c', 'h', 'e', 's', '/', 'm', 'e', 't', 'r', 'i', 'c', 's', '/', '{', 'i', 'd', '}', 'Z', '\'', '\022', '%', '/', 'v', '2', 
  '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', '/', 'm', 'e', 't', 
  'r', 'i', 'c', 's', '/', '{', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\005', 
  '\220', '\234', '\'', '5', '\022', '\234', '\002', '\n', '\033', 'L', 'i', 's', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'S', 'e', 
  'a', 'r', 'c', 'h', 'M', 'e', 't', 'r', 'i', 'c', 's', '\022', '0', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'L', 'i', 's', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'S', 'e', 'a', 'r', 'c', 'h', 'M', 'e', 't', 
  'r', 'i', 'c', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '2', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'M', 'u', 'l', 't', 'i', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'S', 'e', 'a', 'r', 'c', 'h', 'M', 'e', 
  't', 'r', 'i', 'c', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\226', '\001', '\202', '\323', '\344', '\223', '\002', '|', '\022', 'V', '/', 
  'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 
  'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 
  'p', 'p', '_', 'i', 'd', '}', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', '/', 's', 'e', 'a', 'r', 'c', 'h', 
  'e', 's', '/', 'm', 'e', 't', 'r', 'i', 'c', 's', 'Z', '\"', '\022', ' ', '/', 'v', '2', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 
  'i', 'o', 'n', 's', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', '/', 'm', 'e', 't', 'r', 'i', 'c', 's', '\230', '\234', '\'', '\002', 
  '\220', '\234', '\'', '&', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\005', '\220', '\234', '\'', '5', '\022', '\226', '\002', '\n', '\035', 'D', 'e', 'l', 'e', 
  't', 'e', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'S', 'e', 'a', 'r', 'c', 'h', 'M', 'e', 't', 'r', 'i', 'c', 's', 
  '\022', '2', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'A', 'n', 'n', 
  'o', 't', 'a', 't', 'i', 'o', 'n', 'S', 'e', 'a', 'r', 'c', 'h', 'M', 'e', 't', 'r', 'i', 'c', 's', 'R', 'e', 'q', 'u', 'e', 
  's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 
  'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\235', '\001', '\202', '\323', '\344', '\223', '\002', '\206', '\001', '*', '[', '/', 
  'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 
  'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 
  'p', 'p', '_', 'i', 'd', '}', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', '/', 's', 'e', 'a', 'r', 'c', 'h', 
  'e', 's', '/', 'm', 'e', 't', 'r', 'i', 'c', 's', '/', '{', 'i', 'd', '}', 'Z', '\'', '*', '%', '/', 'v', '2', '/', 'a', 'n', 
  'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', '/', 'm', 'e', 't', 'r', 'i', 'c', 
  's', '/', '{', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '5', '\220', '\234', '\'', '6', '\220', '\234', '\'', '?', '\022', '\312', '\001', 
  '\n', '\014', 'D', 'e', 'l', 'e', 't', 'e', 'S', 'e', 'a', 'r', 'c', 'h', '\022', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'S', 'e', 'a', 'r', 'c', 'h', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', 
  '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 
  'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 't', '\202', '\323', '\344', '\223', '\002', '^', '*', 'G', '/', 'v', '2', '/', 'u', 's', 
  'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', 
  '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', 
  '}', '/', 's', 'e', 'a', 'r', 'c', 'h', 'e', 's', '/', '{', 'i', 'd', '}', 'Z', '\023', '*', '\021', '/', 'v', '2', '/', 's', 'e', 
  'a', 'r', 'c', 'h', 'e', 's', '/', '{', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'r', '\220', '\234', '\'', 's', '\220', '\234', 
  '\'', 't', '\022', '\350', '\001', '\n', '\025', 'L', 'i', 's', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 
  'e', 'r', 's', '\022', '*', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'A', 'n', 
  'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '+', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'A', 'n', 'n', 'o', 't', 'a', 't', 
  'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'v', '\202', '\323', '\344', '\223', '\002', 'h', 
  '\022', 'L', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 
  'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '_', 'f', 'i', 'l', 't', 
  'e', 'r', 's', 'Z', '\030', '\022', '\026', '/', 'v', '2', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '_', 'f', 'i', 'l', 
  't', 'e', 'r', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'r', '\022', '\225', '\002', '\n', '\023', 'G', 'e', 't', 'A', 'n', 'n', 'o', 't', 
  'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', '\022', '(', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'G', 'e', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 'R', 'e', 'q', 'u', 
  'e', 's', 't', '\032', ',', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 
  'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 
  '\245', '\001', '\202', '\323', '\344', '\223', '\002', '\226', '\001', '\022', 'c', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'a', 'n', 'n', 'o', 't', 'a', 
  't', 'i', 'o', 'n', '_', 'f', 'i', 'l', 't', 'e', 'r', 's', '/', '{', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '_', 
  'f', 'i', 'l', 't', 'e', 'r', '_', 'i', 'd', '}', 'Z', '/', '\022', '-', '/', 'v', '2', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 
  'i', 'o', 'n', '_', 'f', 'i', 'l', 't', 'e', 'r', 's', '/', '{', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '_', 'f', 
  'i', 'l', 't', 'e', 'r', '_', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'r', '\022', '\363', '\001', '\n', '\025', 'P', 'o', 's', 
  't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 's', '\022', '*', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 
  'l', 't', 'e', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '+', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 'R', 
  'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\200', '\001', '\202', '\323', '\344', '\223', '\002', 'n', '\"', 'L', '/', 'v', '2', '/', 'u', 's', 'e', 
  'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 
  'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', 
  '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '_', 'f', 'i', 'l', 't', 'e', 'r', 's', ':', '\001', '*', 'Z', '\033', '\"', 
  '\026', '/', 'v', '2', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '_', 'f', 'i', 'l', 't', 'e', 'r', 's', ':', '\001', 
  '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'r', '\220', '\234', '\'', 's', '\022', '\365', '\001', '\n', '\026', 'P', 'a', 't', 'c', 'h', 'A', 'n', 
  'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 's', '\022', '+', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 
  'e', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '+', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 'M', 'u', 'l', 't', 'i', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 'R', 'e', 's', 
  'p', 'o', 'n', 's', 'e', '\"', '\200', '\001', '\202', '\323', '\344', '\223', '\002', 'n', '2', 'L', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', 
  '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 
  'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'a', 
  'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '_', 'f', 'i', 'l', 't', 'e', 'r', 's', ':', '\001', '*', 'Z', '\033', '2', '\026', '/', 
  'v', '2', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '_', 'f', 'i', 'l', 't', 'e', 'r', 's', ':', '\001', '*', '\230', 
  '\234', '\'', '\002', '\220', '\234', '\'', 'r', '\220', '\234', '\'', 's', '\022', '\355', '\001', '\n', '\027', 'D', 'e', 'l', 'e', 't', 'e', 'A', 'n', 'n', 
  'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 's', '\022', ',', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 
  'e', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', 
  '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\200', '\001', '\202', '\323', 
  '\344', '\223', '\002', 'n', '*', 'L', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', 
  '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 
  'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '_', 
  'f', 'i', 'l', 't', 'e', 'r', 's', ':', '\001', '*', 'Z', '\033', '*', '\026', '/', 'v', '2', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 
  'i', 'o', 'n', '_', 'f', 'i', 'l', 't', 'e', 'r', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'r', '\220', '\234', '\'', 
  's', '\022', '|', '\n', '\017', 'L', 'i', 's', 't', 'S', 't', 'a', 't', 'u', 's', 'C', 'o', 'd', 'e', 's', '\022', '$', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'S', 't', 'a', 't', 'u', 's', 'C', 'o', 'd', 'e', 
  's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '%', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 
  'u', 'l', 't', 'i', 'S', 't', 'a', 't', 'u', 's', 'C', 'o', 'd', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\034', '\202', 
  '\323', '\344', '\223', '\002', '\022', '\022', '\020', '/', 'v', '2', '/', 's', 't', 'a', 't', 'u', 's', '_', 'c', 'o', 'd', 'e', 's', '\230', '\234', 
  '\'', '\001', '\022', '\212', '\001', '\n', '\r', 'G', 'e', 't', 'S', 't', 'a', 't', 'u', 's', 'C', 'o', 'd', 'e', '\022', '\"', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'S', 't', 'a', 't', 'u', 's', 'C', 'o', 'd', 'e', 'R', 
  'e', 'q', 'u', 'e', 's', 't', '\032', '&', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 
  'g', 'l', 'e', 'S', 't', 'a', 't', 'u', 's', 'C', 'o', 'd', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '-', '\202', '\323', 
  '\344', '\223', '\002', '#', '\022', '!', '/', 'v', '2', '/', 's', 't', 'a', 't', 'u', 's', '_', 'c', 'o', 'd', 'e', 's', '/', '{', 's', 
  't', 'a', 't', 'u', 's', '_', 'c', 'o', 'd', 'e', '_', 'i', 'd', '}', '\230', '\234', '\'', '\001', '\022', '\276', '\001', '\n', '\021', 'L', 'i', 
  's', 't', 'C', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', 's', '\022', '&', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'C', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', 's', 'R', 'e', 
  'q', 'u', 'e', 's', 't', '\032', '(', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 
  'i', 'C', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'W', '\202', 
  '\323', '\344', '\223', '\002', 'I', '\022', 'G', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'c', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 
  'o', 'r', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '2', '\022', '\305', '\001', '\n', '\021', 'P', 'o', 's', 't', 'C', 'o', 'l', 'l', 'a', 
  'b', 'o', 'r', 'a', 't', 'o', 'r', 's', '\022', '&', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 
  'o', 's', 't', 'C', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '(', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'l', 'l', 'a', 'b', 
  'o', 'r', 'a', 't', 'o', 'r', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '^', '\202', '\323', '\344', '\223', '\002', 'L', '\"', 'G', 
  '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 
  'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 
  'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'c', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', 's', ':', '\001', '*', '\230', 
  '\234', '\'', '\002', '\220', '\234', '\'', '3', '\220', '\234', '\'', '2', '\022', '\313', '\001', '\n', '\022', 'P', 'a', 't', 'c', 'h', 'C', 'o', 'l', 'l', 
  'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', 's', '\022', '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'P', 'a', 't', 'c', 'h', 'C', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', 
  '\032', '(', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'l', 'l', 
  'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'b', '\202', '\323', '\344', '\223', '\002', 'L', 
  '2', 'G', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 
  'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'c', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', 's', ':', '\001', 
  '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '3', '\220', '\234', '\'', '2', '\220', '\234', '\'', '4', '\022', '\316', '\001', '\n', '\023', 'D', 'e', 'l', 
  'e', 't', 'e', 'C', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', 's', '\022', '(', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'C', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', 
  's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 
  't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'j', '\202', '\323', '\344', '\223', '\002', 
  'L', '*', 'G', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'c', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'o', 'r', 's', ':', 
  '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '3', '\220', '\234', '\'', '2', '\220', '\234', '\'', '4', '\220', '\234', '\'', '7', '\220', '\234', '\'', 
  '8', '\022', '\244', '\001', '\n', '\022', 'L', 'i', 's', 't', 'C', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'i', 'o', 'n', 's', '\022', 
  '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'C', 'o', 'l', 'l', 'a', 'b', 
  'o', 'r', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ')', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'i', 'o', 'n', 's', 
  'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', ':', '\202', '\323', '\344', '\223', '\002', '0', '\022', '.', '/', 'v', '2', '/', 'u', 's', 'e', 
  'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 
  'c', 'o', 'l', 'l', 'a', 'b', 'o', 'r', 'a', 't', 'i', 'o', 'n', 's', '\230', '\234', '\'', '\003', '\022', '\357', '\001', '\n', '\023', 'P', 'o', 
  's', 't', 'A', 'p', 'p', 'D', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 's', '\022', '(', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'A', 'p', 'p', 'D', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 
  'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '*', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'M', 'u', 'l', 't', 'i', 'A', 'p', 'p', 'D', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 's', 'p', 'o', 
  'n', 's', 'e', '\"', '\201', '\001', '\202', '\323', '\344', '\223', '\002', 'K', '\"', 'F', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 
  'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', 
  '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'd', 'u', 'p', 
  'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\016', '\220', '\234', '\'', '\017', '\220', 
  '\234', '\'', '\032', '\220', '\234', '\'', '\n', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\004', '\220', '\234', '\'', '\005', '\220', '\234', '\'', '%', '\220', '\234', 
  '\'', '&', '\220', '\234', '\'', '\022', '\220', '\234', '\'', '\023', '\022', '\245', '\001', '\n', '\023', 'L', 'i', 's', 't', 'A', 'p', 'p', 'D', 'u', 'p', 
  'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 's', '\022', '(', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'L', 'i', 's', 't', 'A', 'p', 'p', 'D', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 
  't', '\032', '*', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'A', 'p', 'p', 
  'D', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '8', '\202', '\323', '\344', 
  '\223', '\002', '.', '\022', ',', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'd', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 's', '\230', 
  '\234', '\'', '\003', '\022', '\266', '\001', '\n', '\021', 'G', 'e', 't', 'A', 'p', 'p', 'D', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 
  '\022', '&', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'A', 'p', 'p', 'D', 'u', 'p', 
  'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '*', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'A', 'p', 'p', 'D', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 
  'n', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'M', '\202', '\323', '\344', '\223', '\002', 'C', '\022', 'A', '/', 'v', '2', '/', 'u', 's', 
  'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', 
  '/', 'd', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 's', '/', '{', 'a', 'p', 'p', '_', 'd', 'u', 'p', 'l', 'i', 'c', 
  'a', 't', 'i', 'o', 'n', '_', 'i', 'd', '}', '\230', '\234', '\'', '\003', '\022', '\325', '\001', '\n', '\t', 'P', 'o', 's', 't', 'T', 'a', 's', 
  'k', 's', '\022', '\036', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'T', 'a', 's', 
  'k', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\037', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'M', 'u', 'l', 't', 'i', 'T', 'a', 's', 'k', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\206', '\001', '\202', '\323', '\344', '\223', '\002', 
  'T', '\"', '?', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 't', 'a', 's', 'k', 's', ':', '\001', '*', 'Z', '\016', '\"', '\t', '/', 'v', 
  '2', '/', 't', 'a', 's', 'k', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '7', '\220', '\234', '\'', '8', '\220', '\234', '\'', 
  '\005', '\220', '\234', '\'', '\003', '\220', '\234', '\'', 'r', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\023', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '%', 
  '\220', '\234', '\'', '&', '\022', '\372', '\001', '\n', '\026', 'G', 'e', 't', 'T', 'a', 's', 'k', 'A', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 
  'n', 'C', 'o', 'u', 'n', 't', '\022', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 
  'T', 'a', 's', 'k', 'C', 'o', 'u', 'n', 't', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '%', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'T', 'a', 's', 'k', 'C', 'o', 'u', 'n', 't', 'R', 'e', 's', 
  'p', 'o', 'n', 's', 'e', '\"', '\225', '\001', '\202', '\323', '\344', '\223', '\002', '\206', '\001', '\022', '[', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 
  's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 
  'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 
  't', 'a', 's', 'k', 's', '/', '{', 't', 'a', 's', 'k', '_', 'i', 'd', '}', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 
  'n', 's', '/', 'c', 'o', 'u', 'n', 't', 'Z', '\'', '\022', '%', '/', 'v', '2', '/', 't', 'a', 's', 'k', 's', '/', '{', 't', 'a', 
  's', 'k', '_', 'i', 'd', '}', '/', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's', '/', 'c', 'o', 'u', 'n', 't', '\230', 
  '\234', '\'', '\002', '\220', '\234', '\'', '8', '\022', '\352', '\001', '\n', '\021', 'G', 'e', 't', 'T', 'a', 's', 'k', 'I', 'n', 'p', 'u', 't', 'C', 
  'o', 'u', 'n', 't', '\022', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'T', 'a', 
  's', 'k', 'C', 'o', 'u', 'n', 't', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '%', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'T', 'a', 's', 'k', 'C', 'o', 'u', 'n', 't', 'R', 'e', 's', 'p', 'o', 
  'n', 's', 'e', '\"', '\212', '\001', '\202', '\323', '\344', '\223', '\002', '|', '\022', 'V', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 
  'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', 
  '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 't', 'a', 's', 
  'k', 's', '/', '{', 't', 'a', 's', 'k', '_', 'i', 'd', '}', '/', 'i', 'n', 'p', 'u', 't', 's', '/', 'c', 'o', 'u', 'n', 't', 
  'Z', '\"', '\022', ' ', '/', 'v', '2', '/', 't', 'a', 's', 'k', 's', '/', '{', 't', 'a', 's', 'k', '_', 'i', 'd', '}', '/', 'i', 
  'n', 'p', 'u', 't', 's', '/', 'c', 'o', 'u', 'n', 't', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '8', '\022', '\314', '\001', '\n', '\007', 'G', 
  'e', 't', 'T', 'a', 's', 'k', '\022', '\034', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 
  'T', 'a', 's', 'k', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ' ', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'T', 'a', 's', 'k', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\200', '\001', '\202', '\323', 
  '\344', '\223', '\002', 'b', '\022', 'I', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', 
  '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 
  'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 't', 'a', 's', 'k', 's', '/', '{', 't', 'a', 's', 'k', 
  '_', 'i', 'd', '}', 'Z', '\025', '\022', '\023', '/', 'v', '2', '/', 't', 'a', 's', 'k', 's', '/', '{', 't', 'a', 's', 'k', '_', 'i', 
  'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '8', '\220', '\234', '\'', 'r', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\023', '\220', '\234', '\'', 
  '\017', '\022', '\272', '\001', '\n', '\t', 'L', 'i', 's', 't', 'T', 'a', 's', 'k', 's', '\022', '\036', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'T', 'a', 's', 'k', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\037', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'T', 'a', 's', 'k', 'R', 'e', 's', 
  'p', 'o', 'n', 's', 'e', '\"', 'l', '\202', '\323', '\344', '\223', '\002', 'N', '\022', '?', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', 
  '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 
  's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 't', 'a', 
  's', 'k', 's', 'Z', '\013', '\022', '\t', '/', 'v', '2', '/', 't', 'a', 's', 'k', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '8', '\220', 
  '\234', '\'', 'r', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\023', '\220', '\234', '\'', '\017', '\022', '\323', '\001', '\n', '\n', 'P', 'a', 't', 'c', 'h', 
  'T', 'a', 's', 'k', 's', '\022', '\037', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 
  'h', 'T', 'a', 's', 'k', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '\037', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'T', 'a', 's', 'k', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\202', '\001', '\202', 
  '\323', '\344', '\223', '\002', 'T', '2', '?', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 't', 'a', 's', 'k', 's', ':', '\001', '*', 'Z', '\016', 
  '2', '\t', '/', 'v', '2', '/', 't', 'a', 's', 'k', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '7', '\220', '\234', '\'', 
  '8', '\220', '\234', '\'', '\005', '\220', '\234', '\'', 'r', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\023', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '%', 
  '\220', '\234', '\'', '&', '\022', '\276', '\001', '\n', '\013', 'D', 'e', 'l', 'e', 't', 'e', 'T', 'a', 's', 'k', 's', '\022', ' ', '.', 'c', 'l', 
  'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'T', 'a', 's', 'k', 's', 'R', 'e', 'q', 
  'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 
  's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'j', '\202', '\323', '\344', '\223', '\002', 'T', '*', '?', '/', 
  'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 
  'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 
  'p', 'p', '_', 'i', 'd', '}', '/', 't', 'a', 's', 'k', 's', ':', '\001', '*', 'Z', '\016', '*', '\t', '/', 'v', '2', '/', 't', 'a', 
  's', 'k', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '7', '\220', '\234', '\'', '8', '\220', '\234', '\'', 'F', '\022', '\365', '\001', 
  '\n', '\017', 'P', 'o', 's', 't', 'L', 'a', 'b', 'e', 'l', 'O', 'r', 'd', 'e', 'r', 's', '\022', '$', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'L', 'a', 'b', 'e', 'l', 'O', 'r', 'd', 'e', 'r', 's', 'R', 'e', 
  'q', 'u', 'e', 's', 't', '\032', '%', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 
  'i', 'L', 'a', 'b', 'e', 'l', 'O', 'r', 'd', 'e', 'r', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\224', '\001', '\202', '\323', '\344', 
  '\223', '\002', 'b', '\"', 'F', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'l', 'a', 'b', 'e', 'l', '_', 'o', 'r', 'd', 'e', 'r', 's', 
  ':', '\001', '*', 'Z', '\025', '\"', '\020', '/', 'v', '2', '/', 'l', 'a', 'b', 'e', 'l', '_', 'o', 'r', 'd', 'e', 'r', 's', ':', '\001', 
  '*', '\210', '\234', '\'', '\000', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'C', '\220', '\234', '\'', 'D', '\220', '\234', '\'', '7', '\220', '\234', '\'', '8', 
  '\220', '\234', '\'', '\005', '\220', '\234', '\'', 'r', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '\023', '\220', '\234', '\'', '\017', '\022', '\366', '\001', '\n', '\r', 
  'G', 'e', 't', 'L', 'a', 'b', 'e', 'l', 'O', 'r', 'd', 'e', 'r', '\022', '\"', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'G', 'e', 't', 'L', 'a', 'b', 'e', 'l', 'O', 'r', 'd', 'e', 'r', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', 
  '&', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'L', 'a', 'b', 'e', 
  'l', 'O', 'r', 'd', 'e', 'r', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\230', '\001', '\202', '\323', '\344', '\223', '\002', '~', '\022', 'W', 
  '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 
  'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 
  'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'l', 'a', 'b', 'e', 'l', '_', 'o', 'r', 'd', 'e', 'r', 's', '/', '{', 'l', 'a', 'b', 
  'e', 'l', '_', 'o', 'r', 'd', 'e', 'r', '_', 'i', 'd', '}', 'Z', '#', '\022', '!', '/', 'v', '2', '/', 'l', 'a', 'b', 'e', 'l', 
  '_', 'o', 'r', 'd', 'e', 'r', 's', '/', '{', 'l', 'a', 'b', 'e', 'l', '_', 'o', 'r', 'd', 'e', 'r', '_', 'i', 'd', '}', '\210', 
  '\234', '\'', '\000', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'C', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '8', '\022', '\326', '\001', '\n', '\017', 'L', 
  'i', 's', 't', 'L', 'a', 'b', 'e', 'l', 'O', 'r', 'd', 'e', 'r', 's', '\022', '$', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'L', 'a', 'b', 'e', 'l', 'O', 'r', 'd', 'e', 'r', 's', 'R', 'e', 'q', 'u', 'e', 
  's', 't', '\032', '%', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'L', 'a', 
  'b', 'e', 'l', 'O', 'r', 'd', 'e', 'r', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'v', '\202', '\323', '\344', '\223', '\002', '\\', '\022', 
  'F', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 
  's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', 
  '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'l', 'a', 'b', 'e', 'l', '_', 'o', 'r', 'd', 'e', 'r', 's', 'Z', '\022', '\022', '\020', 
  '/', 'v', '2', '/', 'l', 'a', 'b', 'e', 'l', '_', 'o', 'r', 'd', 'e', 'r', 's', '\210', '\234', '\'', '\000', '\230', '\234', '\'', '\002', '\220', 
  '\234', '\'', 'C', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '8', '\022', '\353', '\001', '\n', '\020', 'P', 'a', 't', 'c', 'h', 'L', 'a', 'b', 'e', 
  'l', 'O', 'r', 'd', 'e', 'r', 's', '\022', '%', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 
  't', 'c', 'h', 'L', 'a', 'b', 'e', 'l', 'O', 'r', 'd', 'e', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '%', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'L', 'a', 'b', 'e', 'l', 'O', 'r', 'd', 
  'e', 'r', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\210', '\001', '\202', '\323', '\344', '\223', '\002', 'b', '2', 'F', '/', 'v', '2', '/', 
  'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 
  'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 
  'i', 'd', '}', '/', 'l', 'a', 'b', 'e', 'l', '_', 'o', 'r', 'd', 'e', 'r', 's', ':', '\001', '*', 'Z', '\025', '2', '\020', '/', 'v', 
  '2', '/', 'l', 'a', 'b', 'e', 'l', '_', 'o', 'r', 'd', 'e', 'r', 's', ':', '\001', '*', '\210', '\234', '\'', '\000', '\230', '\234', '\'', '\002', 
  '\220', '\234', '\'', 'C', '\220', '\234', '\'', 'D', '\220', '\234', '\'', '\013', '\220', '\234', '\'', '7', '\220', '\234', '\'', '8', '\220', '\234', '\'', 'F', '\022', 
  '\345', '\001', '\n', '\021', 'D', 'e', 'l', 'e', 't', 'e', 'L', 'a', 'b', 'e', 'l', 'O', 'r', 'd', 'e', 'r', 's', '\022', '&', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'L', 'a', 'b', 'e', 'l', 'O', 'r', 
  'd', 'e', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 
  'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\204', '\001', '\202', 
  '\323', '\344', '\223', '\002', 'b', '*', 'F', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 
  'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'l', 'a', 'b', 'e', 'l', '_', 'o', 'r', 'd', 'e', 
  'r', 's', ':', '\001', '*', 'Z', '\025', '*', '\020', '/', 'v', '2', '/', 'l', 'a', 'b', 'e', 'l', '_', 'o', 'r', 'd', 'e', 'r', 's', 
  ':', '\001', '*', '\210', '\234', '\'', '\000', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'E', '\220', '\234', '\'', 'C', '\220', '\234', '\'', 'D', '\220', '\234', 
  '\'', '7', '\220', '\234', '\'', '8', '\022', '\356', '\001', '\n', '\016', 'P', 'o', 's', 't', 'C', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 's', 
  '\022', '#', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'C', 'o', 'l', 'l', 'e', 
  'c', 't', 'o', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '$', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', 
  '\"', '\220', '\001', '\202', '\323', '\344', '\223', '\002', '^', '\"', 'D', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'c', 'o', 'l', 'l', 'e', 'c', 
  't', 'o', 'r', 's', ':', '\001', '*', 'Z', '\023', '\"', '\016', '/', 'v', '2', '/', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 's', 
  ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '\004', '\220', '\234', '\'', '%', '\220', '\234', '\'', '&', '\220', '\234', '\'', ')', '\220', '\234', 
  '\'', '\013', '\220', '\234', '\'', '\004', '\220', '\234', '\'', '\005', '\220', '\234', '\'', '\017', '\220', '\234', '\'', '\002', '\220', '\234', '\'', '\023', '\022', '\337', '\001', 
  '\n', '\014', 'G', 'e', 't', 'C', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', '\022', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'C', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', 
  '%', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 'e', 'C', 'o', 'l', 'l', 
  'e', 'c', 't', 'o', 'r', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\204', '\001', '\202', '\323', '\344', '\223', '\002', 'v', '\022', 'S', '/', 
  'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 
  'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 
  'p', 'p', '_', 'i', 'd', '}', '/', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 's', '/', '{', 'c', 'o', 'l', 'l', 'e', 'c', 
  't', 'o', 'r', '_', 'i', 'd', '}', 'Z', '\037', '\022', '\035', '/', 'v', '2', '/', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 's', 
  '/', '{', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', '_', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '*', '\022', '\303', 
  '\001', '\n', '\016', 'L', 'i', 's', 't', 'C', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 's', '\022', '#', '.', 'c', 'l', 'a', 'r', 'i', 
  'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'C', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 's', 'R', 'e', 'q', 
  'u', 'e', 's', 't', '\032', '$', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 
  'C', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'f', '\202', '\323', '\344', '\223', '\002', 'X', 
  '\022', 'D', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 
  'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 's', 'Z', '\020', '\022', '\016', '/', 
  'v', '2', '/', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', '*', '\022', '\317', '\001', '\n', 
  '\017', 'P', 'a', 't', 'c', 'h', 'C', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 's', '\022', '$', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'a', 't', 'c', 'h', 'C', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 's', 'R', 'e', 'q', 
  'u', 'e', 's', 't', '\032', '$', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 
  'C', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'p', '\202', '\323', '\344', '\223', '\002', '^', 
  '2', 'D', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 
  'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 
  'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 's', ':', '\001', '*', 'Z', '\023', 
  '2', '\016', '/', 'v', '2', '/', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', 
  '\'', ')', '\220', '\234', '\'', '*', '\022', '\322', '\001', '\n', '\020', 'D', 'e', 'l', 'e', 't', 'e', 'C', 'o', 'l', 'l', 'e', 'c', 't', 'o', 
  'r', 's', '\022', '%', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 'e', 't', 'e', 'C', 
  'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 
  'e', '\"', 't', '\202', '\323', '\344', '\223', '\002', '^', '*', 'D', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 
  'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 
  's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'c', 'o', 'l', 'l', 'e', 'c', 
  't', 'o', 'r', 's', ':', '\001', '*', 'Z', '\023', '*', '\016', '/', 'v', '2', '/', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'o', 'r', 's', 
  ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', '\'', ')', '\220', '\234', '\'', '+', '\220', '\234', '\'', '*', '\022', '\311', '\001', '\n', '\016', 'P', 
  'o', 's', 't', 'S', 't', 'a', 't', 'V', 'a', 'l', 'u', 'e', 's', '\022', '#', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 
  'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'S', 't', 'a', 't', 'V', 'a', 'l', 'u', 'e', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', 
  '\032', '$', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'S', 't', 'a', 't', 
  'V', 'a', 'l', 'u', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'l', '\202', '\323', '\344', '\223', '\002', 'b', '\"', 'F', '/', 'v', 
  '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', 
  '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 
  'p', '_', 'i', 'd', '}', '/', 's', 't', 'a', 't', 's', '/', 'v', 'a', 'l', 'u', 'e', 's', ':', '\001', '*', 'Z', '\025', '\"', '\020', 
  '/', 'v', '2', '/', 's', 't', 'a', 't', 's', '/', 'v', 'a', 'l', 'u', 'e', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\022', '\371', 
  '\001', '\n', '\027', 'P', 'o', 's', 't', 'S', 't', 'a', 't', 'V', 'a', 'l', 'u', 'e', 's', 'A', 'g', 'g', 'r', 'e', 'g', 'a', 't', 
  'e', '\022', ',', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'S', 't', 'a', 't', 
  'V', 'a', 'l', 'u', 'e', 's', 'A', 'g', 'g', 'r', 'e', 'g', 'a', 't', 'e', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '-', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'S', 't', 'a', 't', 'V', 'a', 'l', 
  'u', 'e', 'A', 'g', 'g', 'r', 'e', 'g', 'a', 't', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\200', '\001', '\202', '\323', '\344', 
  '\223', '\002', 'v', '\"', 'P', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 
  'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 
  'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 's', 't', 'a', 't', 's', '/', 'v', 'a', 'l', 'u', 'e', 's', 
  '/', 'a', 'g', 'g', 'r', 'e', 'g', 'a', 't', 'e', ':', '\001', '*', 'Z', '\037', '\"', '\032', '/', 'v', '2', '/', 's', 't', 'a', 't', 
  's', '/', 'v', 'a', 'l', 'u', 'e', 's', '/', 'a', 'g', 'g', 'r', 'e', 'g', 'a', 't', 'e', ':', '\001', '*', '\230', '\234', '\'', '\002', 
  '\022', '\343', '\001', '\n', '\027', 'P', 'o', 's', 't', 'T', 'r', 'e', 'n', 'd', 'i', 'n', 'g', 'M', 'e', 't', 'r', 'i', 'c', 's', 'V', 
  'i', 'e', 'w', '\022', ',', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'T', 'r', 
  'e', 'n', 'd', 'i', 'n', 'g', 'M', 'e', 't', 'r', 'i', 'c', 's', 'V', 'i', 'e', 'w', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', 
  '!', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 
  'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'w', '\202', '\323', '\344', '\223', '\002', 'm', '\"', 'h', '/', 'v', '2', '/', 'u', 's', 
  'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', 
  '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', 
  '}', '/', 't', 'r', 'e', 'n', 'd', 'i', 'n', 'g', '_', 'm', 'e', 't', 'r', 'i', 'c', 's', '/', 'v', 'i', 'e', 'w', 's', '/', 
  '{', 'v', 'i', 'e', 'w', '_', 't', 'y', 'p', 'e', '}', '/', '{', 'o', 'b', 'j', 'e', 'c', 't', '_', 'i', 'd', '}', ':', '\001', 
  '*', '\230', '\234', '\'', '\002', '\022', '\217', '\002', '\n', '\030', 'L', 'i', 's', 't', 'T', 'r', 'e', 'n', 'd', 'i', 'n', 'g', 'M', 'e', 't', 
  'r', 'i', 'c', 's', 'V', 'i', 'e', 'w', 's', '\022', '-', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 
  'L', 'i', 's', 't', 'T', 'r', 'e', 'n', 'd', 'i', 'n', 'g', 'M', 'e', 't', 'r', 'i', 'c', 's', 'V', 'i', 'e', 'w', 's', 'R', 
  'e', 'q', 'u', 'e', 's', 't', '\032', '.', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 
  't', 'i', 'T', 'r', 'e', 'n', 'd', 'i', 'n', 'g', 'M', 'e', 't', 'r', 'i', 'c', 's', 'V', 'i', 'e', 'w', 'R', 'e', 's', 'p', 
  'o', 'n', 's', 'e', '\"', '\223', '\001', '\202', '\323', '\344', '\223', '\002', '\210', '\001', '\022', '\\', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', 
  '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 
  'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 't', 
  'r', 'e', 'n', 'd', 'i', 'n', 'g', '_', 'm', 'e', 't', 'r', 'i', 'c', 's', '/', 'v', 'i', 'e', 'w', 's', '/', '{', 'v', 'i', 
  'e', 'w', '_', 't', 'y', 'p', 'e', '}', 'Z', '(', '\022', '&', '/', 'v', '2', '/', 't', 'r', 'e', 'n', 'd', 'i', 'n', 'g', '_', 
  'm', 'e', 't', 'r', 'i', 'c', 's', '/', 'v', 'i', 'e', 'w', 's', '/', '{', 'v', 'i', 'e', 'w', '_', 't', 'y', 'p', 'e', '}', 
  '\230', '\234', '\'', '\002', '\022', '\361', '\001', '\n', '\022', 'P', 'o', 's', 't', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 
  'n', 's', '\022', '\'', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'P', 'o', 's', 't', 'B', 'u', 'l', 
  'k', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ')', '.', 'c', 'l', 'a', 'r', 
  'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 'a', 't', 'i', 
  'o', 'n', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\206', '\001', '\202', '\323', '\344', '\223', '\002', 'h', '\"', 'I', '/', 'v', '2', 
  '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 
  'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', 
  '_', 'i', 'd', '}', '/', 'b', 'u', 'l', 'k', '_', 'o', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', ':', '\001', '*', 'Z', '\030', 
  '\"', '\023', '/', 'v', '2', '/', 'b', 'u', 'l', 'k', '_', 'o', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', ':', '\001', '*', '\230', 
  '\234', '\'', '\002', '\220', '\234', '\'', 'z', '\220', '\234', '\'', 'y', '\220', '\234', '\'', '%', '\220', '\234', '\'', '&', '\220', '\234', '\'', '(', '\022', '\332', 
  '\001', '\n', '\022', 'L', 'i', 's', 't', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', '\022', '\'', '.', 'c', 
  'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'L', 'i', 's', 't', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 'a', 
  't', 'i', 'o', 'n', 's', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ')', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 
  'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 's', 
  'p', 'o', 'n', 's', 'e', '\"', 'p', '\202', '\323', '\344', '\223', '\002', 'b', '\022', 'I', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', 
  '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 
  's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'b', 'u', 
  'l', 'k', '_', 'o', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', 'Z', '\025', '\022', '\023', '/', 'v', '2', '/', 'b', 'u', 'l', 'k', 
  '_', 'o', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'z', '\022', '\341', '\001', '\n', '\020', 'G', 
  'e', 't', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', '\022', '%', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 
  'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 't', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 'R', 'e', 'q', 
  'u', 'e', 's', 't', '\032', '*', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 'i', 'n', 'g', 'l', 
  'e', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'z', 
  '\202', '\323', '\344', '\223', '\002', 'l', '\022', 'N', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 
  'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', 
  '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'b', 'u', 'l', 'k', '_', 'o', 'p', 'e', 'r', 
  'a', 't', 'i', 'o', 'n', 's', '/', '{', 'i', 'd', '}', 'Z', '\032', '\022', '\030', '/', 'v', '2', '/', 'b', 'u', 'l', 'k', '_', 'o', 
  'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', '/', '{', 'i', 'd', '}', '\230', '\234', '\'', '\002', '\220', '\234', '\'', 'z', '\022', '\347', '\001', 
  '\n', '\024', 'C', 'a', 'n', 'c', 'e', 'l', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', '\022', '(', '.', 
  'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'C', 'a', 'n', 'c', 'e', 'l', 'B', 'u', 'l', 'k', 'O', 'p', 
  'e', 'r', 'a', 't', 'i', 'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', ')', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', 
  '.', 'a', 'p', 'i', '.', 'M', 'u', 'l', 't', 'i', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', 'R', 
  'e', 's', 'p', 'o', 'n', 's', 'e', '\"', 'z', '\202', '\323', '\344', '\223', '\002', 'h', '2', 'I', '/', 'v', '2', '/', 'u', 's', 'e', 'r', 
  's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', '/', 'a', 
  'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', '}', '/', 
  'b', 'u', 'l', 'k', '_', 'o', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', ':', '\001', '*', 'Z', '\030', '2', '\023', '/', 'v', '2', 
  '/', 'b', 'u', 'l', 'k', '_', 'o', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', '\220', '\234', 
  '\'', 'y', '\220', '\234', '\'', 'z', '\022', '\360', '\001', '\n', '\024', 'D', 'e', 'l', 'e', 't', 'e', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 
  'a', 't', 'i', 'o', 'n', 's', '\022', '(', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'D', 'e', 'l', 
  'e', 't', 'e', 'B', 'u', 'l', 'k', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '!', 
  '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 's', 't', 'a', 't', 'u', 's', '.', 'B', 'a', 's', 'e', 
  'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\212', '\001', '\202', '\323', '\344', '\223', '\002', 'h', '*', 'I', '/', 'v', '2', '/', 'u', 's', 
  'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 'e', 'r', '_', 'i', 'd', '}', 
  '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'a', 'p', 'p', '_', 'i', 'd', 
  '}', '/', 'b', 'u', 'l', 'k', '_', 'o', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', ':', '\001', '*', 'Z', '\030', '*', '\023', '/', 
  'v', '2', '/', 'b', 'u', 'l', 'k', '_', 'o', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', ':', '\001', '*', '\230', '\234', '\'', '\002', 
  '\220', '\234', '\'', '&', '\220', '\234', '\'', '%', '\220', '\234', '\'', '(', '\220', '\234', '\'', 'y', '\220', '\234', '\'', 'z', '\220', '\234', '\'', '{', '\022', 
  '\256', '\002', '\n', '\034', 'G', 'e', 't', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 't', 's', 'S', 'e', 'a', 'r', 'c', 
  'h', 'A', 'd', 'd', 'J', 'o', 'b', '\022', '1', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'G', 'e', 
  't', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 't', 's', 'S', 'e', 'a', 'r', 'c', 'h', 'A', 'd', 'd', 'J', 'o', 
  'b', 'R', 'e', 'q', 'u', 'e', 's', 't', '\032', '5', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'a', 'p', 'i', '.', 'S', 
  'i', 'n', 'g', 'l', 'e', 'D', 'a', 't', 'a', 's', 'e', 't', 'I', 'n', 'p', 'u', 't', 's', 'S', 'e', 'a', 'r', 'c', 'h', 'A', 
  'd', 'd', 'J', 'o', 'b', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', '\"', '\243', '\001', '\202', '\323', '\344', '\223', '\002', '\224', '\001', '\022', 'b', 
  '/', 'v', '2', '/', 'u', 's', 'e', 'r', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 'u', 's', 
  'e', 'r', '_', 'i', 'd', '}', '/', 'a', 'p', 'p', 's', '/', '{', 'u', 's', 'e', 'r', '_', 'a', 'p', 'p', '_', 'i', 'd', '.', 
  'a', 'p', 'p', '_', 'i', 'd', '}', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', '/', 'i', 'n', 'p', 'u', 't', 's', '/', 's', 
  'e', 'a', 'r', 'c', 'h', '_', 'a', 'd', 'd', '/', 'j', 'o', 'b', 's', '/', '{', 'j', 'o', 'b', '_', 'i', 'd', '}', 'Z', '.', 
  '\022', ',', '/', 'v', '2', '/', 'd', 'a', 't', 'a', 's', 'e', 't', 's', '/', 'i', 'n', 'p', 'u', 't', 's', '/', 's', 'e', 'a', 
  'r', 'c', 'h', '_', 'a', 'd', 'd', '/', 'j', 'o', 'b', 's', '/', '{', 'j', 'o', 'b', '_', 'i', 'd', '}', '\230', '\234', '\'', '\002', 
  '\220', '\234', '\'', 'i', 'B', 'Y', '\n', '\025', 'c', 'o', 'm', '.', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '.', 'g', 'r', 'p', 'c', 
  '.', 'a', 'p', 'i', 'P', '\001', 'Z', '7', 'g', 'i', 't', 'h', 'u', 'b', '.', 'c', 'o', 'm', '/', 'C', 'l', 'a', 'r', 'i', 'f', 
  'a', 'i', '/', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '-', 'g', 'o', '-', 'g', 'r', 'p', 'c', '/', 'p', 'r', 'o', 't', 'o', 
  '/', 'c', 'l', 'a', 'r', 'i', 'f', 'a', 'i', '/', 'a', 'p', 'i', '\242', '\002', '\004', 'C', 'A', 'I', 'P', 'b', '\006', 'p', 'r', 'o', 
  't', 'o', '3', 
  '\0' };
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_deps[10] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_proto_2fclarifai_2fapi_2fresources_2eproto,
  &::descriptor_table_proto_2fclarifai_2fapi_2fstatus_2fstatus_2eproto,
  &::descriptor_table_proto_2fclarifai_2fapi_2fstatus_2fstatus_5fcode_2eproto,
  &::descriptor_table_proto_2fclarifai_2fapi_2futils_2fextensions_2eproto,
  &::descriptor_table_proto_2fclarifai_2fauth_2fscope_2fscope_2eproto,
  &::descriptor_table_proto_2fclarifai_2fauth_2futil_2fextension_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto = {
  false, false, 71328, descriptor_table_protodef_proto_2fclarifai_2fapi_2fservice_2eproto, "proto/clarifai/api/service.proto", 
  &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once, descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_deps, 10, 244,
  schemas, file_default_instances, TableStruct_proto_2fclarifai_2fapi_2fservice_2eproto::offsets,
  file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto, file_level_enum_descriptors_proto_2fclarifai_2fapi_2fservice_2eproto, file_level_service_descriptors_proto_2fclarifai_2fapi_2fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter() {
  return &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_proto_2fclarifai_2fapi_2fservice_2eproto(&descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
namespace clarifai {
namespace api {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrganizationInvitationStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto);
  return file_level_enum_descriptors_proto_2fclarifai_2fapi_2fservice_2eproto[0];
}
bool OrganizationInvitationStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Pagination::_Internal {
 public:
};

Pagination::Pagination(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.Pagination)
}
Pagination::Pagination(const Pagination& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.Pagination)
}

inline void Pagination::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&page_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
}

Pagination::~Pagination() {
  // @@protoc_insertion_point(destructor:clarifai.api.Pagination)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Pagination::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Pagination::ArenaDtor(void* object) {
  Pagination* _this = reinterpret_cast< Pagination* >(object);
  (void)_this;
}
void Pagination::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pagination::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Pagination::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.Pagination)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pagination::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pagination::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.Pagination)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 page = 1;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_page(), target);
  }

  // uint32 per_page = 2;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.Pagination)
  return target;
}

size_t Pagination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.Pagination)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 page = 1;
  if (this->_internal_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 2;
  if (this->_internal_per_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pagination::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Pagination::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pagination::GetClassData() const { return &_class_data_; }

void Pagination::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Pagination *>(to)->MergeFrom(
      static_cast<const Pagination &>(from));
}


void Pagination::MergeFrom(const Pagination& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.Pagination)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pagination::CopyFrom(const Pagination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.Pagination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pagination::IsInitialized() const {
  return true;
}

void Pagination::InternalSwap(Pagination* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pagination, per_page_)
      + sizeof(Pagination::per_page_)
      - PROTOBUF_FIELD_OFFSET(Pagination, page_)>(
          reinterpret_cast<char*>(&page_),
          reinterpret_cast<char*>(&other->page_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pagination::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[0]);
}

// ===================================================================

class GetAnnotationRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetAnnotationRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetAnnotationRequest::_Internal::user_app_id(const GetAnnotationRequest* msg) {
  return *msg->user_app_id_;
}
void GetAnnotationRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetAnnotationRequest::GetAnnotationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetAnnotationRequest)
}
GetAnnotationRequest::GetAnnotationRequest(const GetAnnotationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  annotation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    annotation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_annotation_id().empty()) {
    annotation_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_annotation_id(), 
      GetArenaForAllocation());
  }
  input_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    input_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_input_id().empty()) {
    input_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_input_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetAnnotationRequest)
}

inline void GetAnnotationRequest::SharedCtor() {
annotation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  annotation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
input_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  input_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

GetAnnotationRequest::~GetAnnotationRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetAnnotationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetAnnotationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  annotation_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetAnnotationRequest::ArenaDtor(void* object) {
  GetAnnotationRequest* _this = reinterpret_cast< GetAnnotationRequest* >(object);
  (void)_this;
}
void GetAnnotationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAnnotationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAnnotationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetAnnotationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotation_id_.ClearToEmpty();
  input_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAnnotationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string annotation_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_annotation_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetAnnotationRequest.annotation_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string input_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_input_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetAnnotationRequest.input_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAnnotationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetAnnotationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string annotation_id = 2;
  if (!this->_internal_annotation_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_annotation_id().data(), static_cast<int>(this->_internal_annotation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetAnnotationRequest.annotation_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_annotation_id(), target);
  }

  // string input_id = 3;
  if (!this->_internal_input_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input_id().data(), static_cast<int>(this->_internal_input_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetAnnotationRequest.input_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_input_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetAnnotationRequest)
  return target;
}

size_t GetAnnotationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetAnnotationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string annotation_id = 2;
  if (!this->_internal_annotation_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_annotation_id());
  }

  // string input_id = 3;
  if (!this->_internal_input_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_input_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAnnotationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetAnnotationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAnnotationRequest::GetClassData() const { return &_class_data_; }

void GetAnnotationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetAnnotationRequest *>(to)->MergeFrom(
      static_cast<const GetAnnotationRequest &>(from));
}


void GetAnnotationRequest::MergeFrom(const GetAnnotationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetAnnotationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_annotation_id().empty()) {
    _internal_set_annotation_id(from._internal_annotation_id());
  }
  if (!from._internal_input_id().empty()) {
    _internal_set_input_id(from._internal_input_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAnnotationRequest::CopyFrom(const GetAnnotationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetAnnotationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAnnotationRequest::IsInitialized() const {
  return true;
}

void GetAnnotationRequest::InternalSwap(GetAnnotationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &annotation_id_, lhs_arena,
      &other->annotation_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &input_id_, lhs_arena,
      &other->input_id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAnnotationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[1]);
}

// ===================================================================

class ListAnnotationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListAnnotationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListAnnotationsRequest::_Internal::user_app_id(const ListAnnotationsRequest* msg) {
  return *msg->user_app_id_;
}
void ListAnnotationsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void ListAnnotationsRequest::clear_statuses() {
  statuses_.Clear();
}
ListAnnotationsRequest::ListAnnotationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ids_(arena),
  input_ids_(arena),
  statuses_(arena),
  user_ids_(arena),
  model_version_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListAnnotationsRequest)
}
ListAnnotationsRequest::ListAnnotationsRequest(const ListAnnotationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_),
      input_ids_(from.input_ids_),
      statuses_(from.statuses_),
      user_ids_(from.user_ids_),
      model_version_ids_(from.model_version_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task_id().empty()) {
    task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_task_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&return_model_output_) -
    reinterpret_cast<char*>(&page_)) + sizeof(return_model_output_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListAnnotationsRequest)
}

inline void ListAnnotationsRequest::SharedCtor() {
task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&return_model_output_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(return_model_output_));
}

ListAnnotationsRequest::~ListAnnotationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListAnnotationsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListAnnotationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListAnnotationsRequest::ArenaDtor(void* object) {
  ListAnnotationsRequest* _this = reinterpret_cast< ListAnnotationsRequest* >(object);
  (void)_this;
}
void ListAnnotationsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListAnnotationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListAnnotationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListAnnotationsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  input_ids_.Clear();
  statuses_.Clear();
  user_ids_.Clear();
  model_version_ids_.Clear();
  task_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&return_model_output_) -
      reinterpret_cast<char*>(&page_)) + sizeof(return_model_output_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListAnnotationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListAnnotationsRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string input_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListAnnotationsRequest.input_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.status.Status statuses = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_statuses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool list_all_annotations = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          list_all_annotations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string user_ids = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListAnnotationsRequest.user_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string model_version_ids = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_model_version_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListAnnotationsRequest.model_version_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string task_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_task_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListAnnotationsRequest.task_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool return_model_output = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          return_model_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListAnnotationsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListAnnotationsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListAnnotationsRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  // repeated string input_ids = 3;
  for (int i = 0, n = this->_internal_input_ids_size(); i < n; i++) {
    const auto& s = this->_internal_input_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListAnnotationsRequest.input_ids");
    target = stream->WriteString(3, s, target);
  }

  // repeated .clarifai.api.status.Status statuses = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_statuses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_statuses(i), target, stream);
  }

  // bool list_all_annotations = 6;
  if (this->_internal_list_all_annotations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_list_all_annotations(), target);
  }

  // uint32 page = 7;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_page(), target);
  }

  // uint32 per_page = 8;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_per_page(), target);
  }

  // repeated string user_ids = 9;
  for (int i = 0, n = this->_internal_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListAnnotationsRequest.user_ids");
    target = stream->WriteString(9, s, target);
  }

  // repeated string model_version_ids = 10;
  for (int i = 0, n = this->_internal_model_version_ids_size(); i < n; i++) {
    const auto& s = this->_internal_model_version_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListAnnotationsRequest.model_version_ids");
    target = stream->WriteString(10, s, target);
  }

  // string task_id = 11;
  if (!this->_internal_task_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListAnnotationsRequest.task_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_task_id(), target);
  }

  // bool return_model_output = 12;
  if (this->_internal_return_model_output() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_return_model_output(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListAnnotationsRequest)
  return target;
}

size_t ListAnnotationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListAnnotationsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // repeated string input_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(input_ids_.size());
  for (int i = 0, n = input_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      input_ids_.Get(i));
  }

  // repeated .clarifai.api.status.Status statuses = 5;
  total_size += 1UL * this->_internal_statuses_size();
  for (const auto& msg : this->statuses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string user_ids = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(user_ids_.size());
  for (int i = 0, n = user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      user_ids_.Get(i));
  }

  // repeated string model_version_ids = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(model_version_ids_.size());
  for (int i = 0, n = model_version_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      model_version_ids_.Get(i));
  }

  // string task_id = 11;
  if (!this->_internal_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 7;
  if (this->_internal_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 8;
  if (this->_internal_per_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  // bool list_all_annotations = 6;
  if (this->_internal_list_all_annotations() != 0) {
    total_size += 1 + 1;
  }

  // bool return_model_output = 12;
  if (this->_internal_return_model_output() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListAnnotationsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListAnnotationsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListAnnotationsRequest::GetClassData() const { return &_class_data_; }

void ListAnnotationsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListAnnotationsRequest *>(to)->MergeFrom(
      static_cast<const ListAnnotationsRequest &>(from));
}


void ListAnnotationsRequest::MergeFrom(const ListAnnotationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListAnnotationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  input_ids_.MergeFrom(from.input_ids_);
  statuses_.MergeFrom(from.statuses_);
  user_ids_.MergeFrom(from.user_ids_);
  model_version_ids_.MergeFrom(from.model_version_ids_);
  if (!from._internal_task_id().empty()) {
    _internal_set_task_id(from._internal_task_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
  if (from._internal_list_all_annotations() != 0) {
    _internal_set_list_all_annotations(from._internal_list_all_annotations());
  }
  if (from._internal_return_model_output() != 0) {
    _internal_set_return_model_output(from._internal_return_model_output());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListAnnotationsRequest::CopyFrom(const ListAnnotationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListAnnotationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAnnotationsRequest::IsInitialized() const {
  return true;
}

void ListAnnotationsRequest::InternalSwap(ListAnnotationsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  input_ids_.InternalSwap(&other->input_ids_);
  statuses_.InternalSwap(&other->statuses_);
  user_ids_.InternalSwap(&other->user_ids_);
  model_version_ids_.InternalSwap(&other->model_version_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &task_id_, lhs_arena,
      &other->task_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListAnnotationsRequest, return_model_output_)
      + sizeof(ListAnnotationsRequest::return_model_output_)
      - PROTOBUF_FIELD_OFFSET(ListAnnotationsRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAnnotationsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[2]);
}

// ===================================================================

class PostAnnotationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostAnnotationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostAnnotationsRequest::_Internal::user_app_id(const PostAnnotationsRequest* msg) {
  return *msg->user_app_id_;
}
void PostAnnotationsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostAnnotationsRequest::clear_annotations() {
  annotations_.Clear();
}
PostAnnotationsRequest::PostAnnotationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  annotations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostAnnotationsRequest)
}
PostAnnotationsRequest::PostAnnotationsRequest(const PostAnnotationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      annotations_(from.annotations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostAnnotationsRequest)
}

inline void PostAnnotationsRequest::SharedCtor() {
user_app_id_ = nullptr;
}

PostAnnotationsRequest::~PostAnnotationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostAnnotationsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostAnnotationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostAnnotationsRequest::ArenaDtor(void* object) {
  PostAnnotationsRequest* _this = reinterpret_cast< PostAnnotationsRequest* >(object);
  (void)_this;
}
void PostAnnotationsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostAnnotationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostAnnotationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostAnnotationsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotations_.Clear();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostAnnotationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Annotation annotations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostAnnotationsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostAnnotationsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Annotation annotations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_annotations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_annotations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostAnnotationsRequest)
  return target;
}

size_t PostAnnotationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostAnnotationsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Annotation annotations = 2;
  total_size += 1UL * this->_internal_annotations_size();
  for (const auto& msg : this->annotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostAnnotationsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostAnnotationsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostAnnotationsRequest::GetClassData() const { return &_class_data_; }

void PostAnnotationsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostAnnotationsRequest *>(to)->MergeFrom(
      static_cast<const PostAnnotationsRequest &>(from));
}


void PostAnnotationsRequest::MergeFrom(const PostAnnotationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostAnnotationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  annotations_.MergeFrom(from.annotations_);
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostAnnotationsRequest::CopyFrom(const PostAnnotationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostAnnotationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostAnnotationsRequest::IsInitialized() const {
  return true;
}

void PostAnnotationsRequest::InternalSwap(PostAnnotationsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  annotations_.InternalSwap(&other->annotations_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostAnnotationsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[3]);
}

// ===================================================================

class PatchAnnotationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchAnnotationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchAnnotationsRequest::_Internal::user_app_id(const PatchAnnotationsRequest* msg) {
  return *msg->user_app_id_;
}
void PatchAnnotationsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchAnnotationsRequest::clear_annotations() {
  annotations_.Clear();
}
PatchAnnotationsRequest::PatchAnnotationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  annotations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchAnnotationsRequest)
}
PatchAnnotationsRequest::PatchAnnotationsRequest(const PatchAnnotationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      annotations_(from.annotations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchAnnotationsRequest)
}

inline void PatchAnnotationsRequest::SharedCtor() {
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

PatchAnnotationsRequest::~PatchAnnotationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchAnnotationsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PatchAnnotationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchAnnotationsRequest::ArenaDtor(void* object) {
  PatchAnnotationsRequest* _this = reinterpret_cast< PatchAnnotationsRequest* >(object);
  (void)_this;
}
void PatchAnnotationsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatchAnnotationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PatchAnnotationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchAnnotationsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotations_.Clear();
  action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchAnnotationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Annotation annotations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchAnnotationsRequest.action"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchAnnotationsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchAnnotationsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Annotation annotations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_annotations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_annotations(i), target, stream);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchAnnotationsRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchAnnotationsRequest)
  return target;
}

size_t PatchAnnotationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchAnnotationsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Annotation annotations = 2;
  total_size += 1UL * this->_internal_annotations_size();
  for (const auto& msg : this->annotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchAnnotationsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PatchAnnotationsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchAnnotationsRequest::GetClassData() const { return &_class_data_; }

void PatchAnnotationsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PatchAnnotationsRequest *>(to)->MergeFrom(
      static_cast<const PatchAnnotationsRequest &>(from));
}


void PatchAnnotationsRequest::MergeFrom(const PatchAnnotationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchAnnotationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  annotations_.MergeFrom(from.annotations_);
  if (!from._internal_action().empty()) {
    _internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchAnnotationsRequest::CopyFrom(const PatchAnnotationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchAnnotationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchAnnotationsRequest::IsInitialized() const {
  return true;
}

void PatchAnnotationsRequest::InternalSwap(PatchAnnotationsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  annotations_.InternalSwap(&other->annotations_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_, lhs_arena,
      &other->action_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchAnnotationsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[4]);
}

// ===================================================================

class PatchAnnotationsStatusRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchAnnotationsStatusRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchAnnotationsStatusRequest::_Internal::user_app_id(const PatchAnnotationsStatusRequest* msg) {
  return *msg->user_app_id_;
}
void PatchAnnotationsStatusRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
PatchAnnotationsStatusRequest::PatchAnnotationsStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  user_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchAnnotationsStatusRequest)
}
PatchAnnotationsStatusRequest::PatchAnnotationsStatusRequest(const PatchAnnotationsStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      user_ids_(from.user_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task_id().empty()) {
    task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_task_id(), 
      GetArenaForAllocation());
  }
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  status_code_ = from.status_code_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchAnnotationsStatusRequest)
}

inline void PatchAnnotationsStatusRequest::SharedCtor() {
task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_code_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(status_code_));
}

PatchAnnotationsStatusRequest::~PatchAnnotationsStatusRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchAnnotationsStatusRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PatchAnnotationsStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchAnnotationsStatusRequest::ArenaDtor(void* object) {
  PatchAnnotationsStatusRequest* _this = reinterpret_cast< PatchAnnotationsStatusRequest* >(object);
  (void)_this;
}
void PatchAnnotationsStatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatchAnnotationsStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PatchAnnotationsStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchAnnotationsStatusRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_ids_.Clear();
  task_id_.ClearToEmpty();
  action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  status_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchAnnotationsStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.status.StatusCode status_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status_code(static_cast<::clarifai::api::status::StatusCode>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string user_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchAnnotationsStatusRequest.user_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string task_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_task_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchAnnotationsStatusRequest.task_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchAnnotationsStatusRequest.action"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchAnnotationsStatusRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchAnnotationsStatusRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // .clarifai.api.status.StatusCode status_code = 2;
  if (this->_internal_status_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status_code(), target);
  }

  // repeated string user_ids = 3;
  for (int i = 0, n = this->_internal_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchAnnotationsStatusRequest.user_ids");
    target = stream->WriteString(3, s, target);
  }

  // string task_id = 4;
  if (!this->_internal_task_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchAnnotationsStatusRequest.task_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_task_id(), target);
  }

  // string action = 5;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchAnnotationsStatusRequest.action");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchAnnotationsStatusRequest)
  return target;
}

size_t PatchAnnotationsStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchAnnotationsStatusRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string user_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(user_ids_.size());
  for (int i = 0, n = user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      user_ids_.Get(i));
  }

  // string task_id = 4;
  if (!this->_internal_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // string action = 5;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.status.StatusCode status_code = 2;
  if (this->_internal_status_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchAnnotationsStatusRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PatchAnnotationsStatusRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchAnnotationsStatusRequest::GetClassData() const { return &_class_data_; }

void PatchAnnotationsStatusRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PatchAnnotationsStatusRequest *>(to)->MergeFrom(
      static_cast<const PatchAnnotationsStatusRequest &>(from));
}


void PatchAnnotationsStatusRequest::MergeFrom(const PatchAnnotationsStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchAnnotationsStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  user_ids_.MergeFrom(from.user_ids_);
  if (!from._internal_task_id().empty()) {
    _internal_set_task_id(from._internal_task_id());
  }
  if (!from._internal_action().empty()) {
    _internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_status_code() != 0) {
    _internal_set_status_code(from._internal_status_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchAnnotationsStatusRequest::CopyFrom(const PatchAnnotationsStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchAnnotationsStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchAnnotationsStatusRequest::IsInitialized() const {
  return true;
}

void PatchAnnotationsStatusRequest::InternalSwap(PatchAnnotationsStatusRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  user_ids_.InternalSwap(&other->user_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &task_id_, lhs_arena,
      &other->task_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_, lhs_arena,
      &other->action_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PatchAnnotationsStatusRequest, status_code_)
      + sizeof(PatchAnnotationsStatusRequest::status_code_)
      - PROTOBUF_FIELD_OFFSET(PatchAnnotationsStatusRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchAnnotationsStatusRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[5]);
}

// ===================================================================

class PatchAnnotationsStatusResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const PatchAnnotationsStatusResponse* msg);
};

const ::clarifai::api::status::Status&
PatchAnnotationsStatusResponse::_Internal::status(const PatchAnnotationsStatusResponse* msg) {
  return *msg->status_;
}
void PatchAnnotationsStatusResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
PatchAnnotationsStatusResponse::PatchAnnotationsStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  user_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchAnnotationsStatusResponse)
}
PatchAnnotationsStatusResponse::PatchAnnotationsStatusResponse(const PatchAnnotationsStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      user_ids_(from.user_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  updated_count_ = from.updated_count_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchAnnotationsStatusResponse)
}

inline void PatchAnnotationsStatusResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&updated_count_) -
    reinterpret_cast<char*>(&status_)) + sizeof(updated_count_));
}

PatchAnnotationsStatusResponse::~PatchAnnotationsStatusResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchAnnotationsStatusResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PatchAnnotationsStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void PatchAnnotationsStatusResponse::ArenaDtor(void* object) {
  PatchAnnotationsStatusResponse* _this = reinterpret_cast< PatchAnnotationsStatusResponse* >(object);
  (void)_this;
}
void PatchAnnotationsStatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatchAnnotationsStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PatchAnnotationsStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchAnnotationsStatusResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_ids_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  updated_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchAnnotationsStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string user_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchAnnotationsStatusResponse.user_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 updated_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          updated_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchAnnotationsStatusResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchAnnotationsStatusResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated string user_ids = 2;
  for (int i = 0, n = this->_internal_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchAnnotationsStatusResponse.user_ids");
    target = stream->WriteString(2, s, target);
  }

  // uint32 updated_count = 3;
  if (this->_internal_updated_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_updated_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchAnnotationsStatusResponse)
  return target;
}

size_t PatchAnnotationsStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchAnnotationsStatusResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string user_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(user_ids_.size());
  for (int i = 0, n = user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      user_ids_.Get(i));
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // uint32 updated_count = 3;
  if (this->_internal_updated_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_updated_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchAnnotationsStatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PatchAnnotationsStatusResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchAnnotationsStatusResponse::GetClassData() const { return &_class_data_; }

void PatchAnnotationsStatusResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PatchAnnotationsStatusResponse *>(to)->MergeFrom(
      static_cast<const PatchAnnotationsStatusResponse &>(from));
}


void PatchAnnotationsStatusResponse::MergeFrom(const PatchAnnotationsStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchAnnotationsStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  user_ids_.MergeFrom(from.user_ids_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_updated_count() != 0) {
    _internal_set_updated_count(from._internal_updated_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchAnnotationsStatusResponse::CopyFrom(const PatchAnnotationsStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchAnnotationsStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchAnnotationsStatusResponse::IsInitialized() const {
  return true;
}

void PatchAnnotationsStatusResponse::InternalSwap(PatchAnnotationsStatusResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  user_ids_.InternalSwap(&other->user_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PatchAnnotationsStatusResponse, updated_count_)
      + sizeof(PatchAnnotationsStatusResponse::updated_count_)
      - PROTOBUF_FIELD_OFFSET(PatchAnnotationsStatusResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchAnnotationsStatusResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[6]);
}

// ===================================================================

class DeleteAnnotationRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteAnnotationRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteAnnotationRequest::_Internal::user_app_id(const DeleteAnnotationRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteAnnotationRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteAnnotationRequest::DeleteAnnotationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteAnnotationRequest)
}
DeleteAnnotationRequest::DeleteAnnotationRequest(const DeleteAnnotationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  input_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    input_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_input_id().empty()) {
    input_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_input_id(), 
      GetArenaForAllocation());
  }
  annotation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    annotation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_annotation_id().empty()) {
    annotation_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_annotation_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteAnnotationRequest)
}

inline void DeleteAnnotationRequest::SharedCtor() {
input_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  input_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
annotation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  annotation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

DeleteAnnotationRequest::~DeleteAnnotationRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteAnnotationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteAnnotationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  input_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  annotation_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteAnnotationRequest::ArenaDtor(void* object) {
  DeleteAnnotationRequest* _this = reinterpret_cast< DeleteAnnotationRequest* >(object);
  (void)_this;
}
void DeleteAnnotationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteAnnotationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteAnnotationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteAnnotationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_id_.ClearToEmpty();
  annotation_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteAnnotationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string input_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_input_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteAnnotationRequest.input_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string annotation_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_annotation_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteAnnotationRequest.annotation_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteAnnotationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteAnnotationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string input_id = 2;
  if (!this->_internal_input_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input_id().data(), static_cast<int>(this->_internal_input_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteAnnotationRequest.input_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_input_id(), target);
  }

  // string annotation_id = 3;
  if (!this->_internal_annotation_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_annotation_id().data(), static_cast<int>(this->_internal_annotation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteAnnotationRequest.annotation_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_annotation_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteAnnotationRequest)
  return target;
}

size_t DeleteAnnotationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteAnnotationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string input_id = 2;
  if (!this->_internal_input_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_input_id());
  }

  // string annotation_id = 3;
  if (!this->_internal_annotation_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_annotation_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteAnnotationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteAnnotationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteAnnotationRequest::GetClassData() const { return &_class_data_; }

void DeleteAnnotationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteAnnotationRequest *>(to)->MergeFrom(
      static_cast<const DeleteAnnotationRequest &>(from));
}


void DeleteAnnotationRequest::MergeFrom(const DeleteAnnotationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteAnnotationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_input_id().empty()) {
    _internal_set_input_id(from._internal_input_id());
  }
  if (!from._internal_annotation_id().empty()) {
    _internal_set_annotation_id(from._internal_annotation_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteAnnotationRequest::CopyFrom(const DeleteAnnotationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteAnnotationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAnnotationRequest::IsInitialized() const {
  return true;
}

void DeleteAnnotationRequest::InternalSwap(DeleteAnnotationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &input_id_, lhs_arena,
      &other->input_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &annotation_id_, lhs_arena,
      &other->annotation_id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteAnnotationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[7]);
}

// ===================================================================

class DeleteAnnotationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteAnnotationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteAnnotationsRequest::_Internal::user_app_id(const DeleteAnnotationsRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteAnnotationsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteAnnotationsRequest::DeleteAnnotationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ids_(arena),
  input_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteAnnotationsRequest)
}
DeleteAnnotationsRequest::DeleteAnnotationsRequest(const DeleteAnnotationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_),
      input_ids_(from.input_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteAnnotationsRequest)
}

inline void DeleteAnnotationsRequest::SharedCtor() {
user_app_id_ = nullptr;
}

DeleteAnnotationsRequest::~DeleteAnnotationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteAnnotationsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteAnnotationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteAnnotationsRequest::ArenaDtor(void* object) {
  DeleteAnnotationsRequest* _this = reinterpret_cast< DeleteAnnotationsRequest* >(object);
  (void)_this;
}
void DeleteAnnotationsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteAnnotationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteAnnotationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteAnnotationsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  input_ids_.Clear();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteAnnotationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteAnnotationsRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string input_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteAnnotationsRequest.input_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteAnnotationsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteAnnotationsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteAnnotationsRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  // repeated string input_ids = 3;
  for (int i = 0, n = this->_internal_input_ids_size(); i < n; i++) {
    const auto& s = this->_internal_input_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteAnnotationsRequest.input_ids");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteAnnotationsRequest)
  return target;
}

size_t DeleteAnnotationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteAnnotationsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // repeated string input_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(input_ids_.size());
  for (int i = 0, n = input_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      input_ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteAnnotationsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteAnnotationsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteAnnotationsRequest::GetClassData() const { return &_class_data_; }

void DeleteAnnotationsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteAnnotationsRequest *>(to)->MergeFrom(
      static_cast<const DeleteAnnotationsRequest &>(from));
}


void DeleteAnnotationsRequest::MergeFrom(const DeleteAnnotationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteAnnotationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  input_ids_.MergeFrom(from.input_ids_);
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteAnnotationsRequest::CopyFrom(const DeleteAnnotationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteAnnotationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAnnotationsRequest::IsInitialized() const {
  return true;
}

void DeleteAnnotationsRequest::InternalSwap(DeleteAnnotationsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  input_ids_.InternalSwap(&other->input_ids_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteAnnotationsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[8]);
}

// ===================================================================

class SingleAnnotationResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleAnnotationResponse* msg);
  static const ::clarifai::api::Annotation& annotation(const SingleAnnotationResponse* msg);
};

const ::clarifai::api::status::Status&
SingleAnnotationResponse::_Internal::status(const SingleAnnotationResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::Annotation&
SingleAnnotationResponse::_Internal::annotation(const SingleAnnotationResponse* msg) {
  return *msg->annotation_;
}
void SingleAnnotationResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleAnnotationResponse::clear_annotation() {
  if (GetArenaForAllocation() == nullptr && annotation_ != nullptr) {
    delete annotation_;
  }
  annotation_ = nullptr;
}
SingleAnnotationResponse::SingleAnnotationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleAnnotationResponse)
}
SingleAnnotationResponse::SingleAnnotationResponse(const SingleAnnotationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_annotation()) {
    annotation_ = new ::clarifai::api::Annotation(*from.annotation_);
  } else {
    annotation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleAnnotationResponse)
}

inline void SingleAnnotationResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&annotation_) -
    reinterpret_cast<char*>(&status_)) + sizeof(annotation_));
}

SingleAnnotationResponse::~SingleAnnotationResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleAnnotationResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SingleAnnotationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete annotation_;
}

void SingleAnnotationResponse::ArenaDtor(void* object) {
  SingleAnnotationResponse* _this = reinterpret_cast< SingleAnnotationResponse* >(object);
  (void)_this;
}
void SingleAnnotationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleAnnotationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleAnnotationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleAnnotationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && annotation_ != nullptr) {
    delete annotation_;
  }
  annotation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleAnnotationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Annotation annotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleAnnotationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleAnnotationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.Annotation annotation = 2;
  if (this->_internal_has_annotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::annotation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleAnnotationResponse)
  return target;
}

size_t SingleAnnotationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleAnnotationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.Annotation annotation = 2;
  if (this->_internal_has_annotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *annotation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleAnnotationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SingleAnnotationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleAnnotationResponse::GetClassData() const { return &_class_data_; }

void SingleAnnotationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SingleAnnotationResponse *>(to)->MergeFrom(
      static_cast<const SingleAnnotationResponse &>(from));
}


void SingleAnnotationResponse::MergeFrom(const SingleAnnotationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleAnnotationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_annotation()) {
    _internal_mutable_annotation()->::clarifai::api::Annotation::MergeFrom(from._internal_annotation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleAnnotationResponse::CopyFrom(const SingleAnnotationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleAnnotationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleAnnotationResponse::IsInitialized() const {
  return true;
}

void SingleAnnotationResponse::InternalSwap(SingleAnnotationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleAnnotationResponse, annotation_)
      + sizeof(SingleAnnotationResponse::annotation_)
      - PROTOBUF_FIELD_OFFSET(SingleAnnotationResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleAnnotationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[9]);
}

// ===================================================================

class MultiAnnotationResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiAnnotationResponse* msg);
};

const ::clarifai::api::status::Status&
MultiAnnotationResponse::_Internal::status(const MultiAnnotationResponse* msg) {
  return *msg->status_;
}
void MultiAnnotationResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiAnnotationResponse::clear_annotations() {
  annotations_.Clear();
}
MultiAnnotationResponse::MultiAnnotationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  annotations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiAnnotationResponse)
}
MultiAnnotationResponse::MultiAnnotationResponse(const MultiAnnotationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      annotations_(from.annotations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiAnnotationResponse)
}

inline void MultiAnnotationResponse::SharedCtor() {
status_ = nullptr;
}

MultiAnnotationResponse::~MultiAnnotationResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiAnnotationResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiAnnotationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiAnnotationResponse::ArenaDtor(void* object) {
  MultiAnnotationResponse* _this = reinterpret_cast< MultiAnnotationResponse* >(object);
  (void)_this;
}
void MultiAnnotationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiAnnotationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiAnnotationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiAnnotationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotations_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiAnnotationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Annotation annotations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiAnnotationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiAnnotationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.Annotation annotations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_annotations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_annotations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiAnnotationResponse)
  return target;
}

size_t MultiAnnotationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiAnnotationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Annotation annotations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_annotations_size();
  for (const auto& msg : this->annotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiAnnotationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiAnnotationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiAnnotationResponse::GetClassData() const { return &_class_data_; }

void MultiAnnotationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiAnnotationResponse *>(to)->MergeFrom(
      static_cast<const MultiAnnotationResponse &>(from));
}


void MultiAnnotationResponse::MergeFrom(const MultiAnnotationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiAnnotationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  annotations_.MergeFrom(from.annotations_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiAnnotationResponse::CopyFrom(const MultiAnnotationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiAnnotationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiAnnotationResponse::IsInitialized() const {
  return true;
}

void MultiAnnotationResponse::InternalSwap(MultiAnnotationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  annotations_.InternalSwap(&other->annotations_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiAnnotationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[10]);
}

// ===================================================================

class GetAppRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetAppRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetAppRequest::_Internal::user_app_id(const GetAppRequest* msg) {
  return *msg->user_app_id_;
}
void GetAppRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetAppRequest::GetAppRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  additional_fields_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetAppRequest)
}
GetAppRequest::GetAppRequest(const GetAppRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      additional_fields_(from.additional_fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetAppRequest)
}

inline void GetAppRequest::SharedCtor() {
user_app_id_ = nullptr;
}

GetAppRequest::~GetAppRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetAppRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetAppRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetAppRequest::ArenaDtor(void* object) {
  GetAppRequest* _this = reinterpret_cast< GetAppRequest* >(object);
  (void)_this;
}
void GetAppRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAppRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAppRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetAppRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_fields_.Clear();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAppRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string additional_fields = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_additional_fields();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetAppRequest.additional_fields"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAppRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetAppRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated string additional_fields = 2;
  for (int i = 0, n = this->_internal_additional_fields_size(); i < n; i++) {
    const auto& s = this->_internal_additional_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetAppRequest.additional_fields");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetAppRequest)
  return target;
}

size_t GetAppRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetAppRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string additional_fields = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(additional_fields_.size());
  for (int i = 0, n = additional_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      additional_fields_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAppRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetAppRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAppRequest::GetClassData() const { return &_class_data_; }

void GetAppRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetAppRequest *>(to)->MergeFrom(
      static_cast<const GetAppRequest &>(from));
}


void GetAppRequest::MergeFrom(const GetAppRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetAppRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  additional_fields_.MergeFrom(from.additional_fields_);
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAppRequest::CopyFrom(const GetAppRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetAppRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppRequest::IsInitialized() const {
  return true;
}

void GetAppRequest::InternalSwap(GetAppRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  additional_fields_.InternalSwap(&other->additional_fields_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAppRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[11]);
}

// ===================================================================

class ListAppsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListAppsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListAppsRequest::_Internal::user_app_id(const ListAppsRequest* msg) {
  return *msg->user_app_id_;
}
void ListAppsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListAppsRequest::ListAppsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  additional_fields_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListAppsRequest)
}
ListAppsRequest::ListAppsRequest(const ListAppsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      additional_fields_(from.additional_fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_query().empty()) {
    query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_query(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&starred_only_) -
    reinterpret_cast<char*>(&page_)) + sizeof(starred_only_));
  clear_has_sort_by();
  switch (from.sort_by_case()) {
    case kSortByName: {
      _internal_set_sort_by_name(from._internal_sort_by_name());
      break;
    }
    case kSortByModifiedAt: {
      _internal_set_sort_by_modified_at(from._internal_sort_by_modified_at());
      break;
    }
    case SORT_BY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListAppsRequest)
}

inline void ListAppsRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&starred_only_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(starred_only_));
clear_has_sort_by();
}

ListAppsRequest::~ListAppsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListAppsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListAppsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
  if (has_sort_by()) {
    clear_sort_by();
  }
}

void ListAppsRequest::ArenaDtor(void* object) {
  ListAppsRequest* _this = reinterpret_cast< ListAppsRequest* >(object);
  (void)_this;
}
void ListAppsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListAppsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListAppsRequest::clear_sort_by() {
// @@protoc_insertion_point(one_of_clear_start:clarifai.api.ListAppsRequest)
  switch (sort_by_case()) {
    case kSortByName: {
      // No need to clear
      break;
    }
    case kSortByModifiedAt: {
      // No need to clear
      break;
    }
    case SORT_BY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SORT_BY_NOT_SET;
}


void ListAppsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListAppsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_fields_.Clear();
  name_.ClearToEmpty();
  query_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&starred_only_) -
      reinterpret_cast<char*>(&page_)) + sizeof(starred_only_));
  clear_sort_by();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListAppsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListAppsRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool sort_ascending = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          sort_ascending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool sort_by_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _internal_set_sort_by_name(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool sort_by_modified_at = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _internal_set_sort_by_modified_at(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string query = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListAppsRequest.query"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool featured_only = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          featured_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string additional_fields = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_additional_fields();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListAppsRequest.additional_fields"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool starred_only = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          starred_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListAppsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListAppsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  // string name = 4 [deprecated = true];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListAppsRequest.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // bool sort_ascending = 5;
  if (this->_internal_sort_ascending() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_sort_ascending(), target);
  }

  // bool sort_by_name = 6;
  if (_internal_has_sort_by_name()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_sort_by_name(), target);
  }

  // bool sort_by_modified_at = 7;
  if (_internal_has_sort_by_modified_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_sort_by_modified_at(), target);
  }

  // string query = 8;
  if (!this->_internal_query().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListAppsRequest.query");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_query(), target);
  }

  // bool featured_only = 9;
  if (this->_internal_featured_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_featured_only(), target);
  }

  // repeated string additional_fields = 10;
  for (int i = 0, n = this->_internal_additional_fields_size(); i < n; i++) {
    const auto& s = this->_internal_additional_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListAppsRequest.additional_fields");
    target = stream->WriteString(10, s, target);
  }

  // bool starred_only = 11;
  if (this->_internal_starred_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_starred_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListAppsRequest)
  return target;
}

size_t ListAppsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListAppsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string additional_fields = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(additional_fields_.size());
  for (int i = 0, n = additional_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      additional_fields_.Get(i));
  }

  // string name = 4 [deprecated = true];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string query = 8;
  if (!this->_internal_query().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  // bool sort_ascending = 5;
  if (this->_internal_sort_ascending() != 0) {
    total_size += 1 + 1;
  }

  // bool featured_only = 9;
  if (this->_internal_featured_only() != 0) {
    total_size += 1 + 1;
  }

  // bool starred_only = 11;
  if (this->_internal_starred_only() != 0) {
    total_size += 1 + 1;
  }

  switch (sort_by_case()) {
    // bool sort_by_name = 6;
    case kSortByName: {
      total_size += 1 + 1;
      break;
    }
    // bool sort_by_modified_at = 7;
    case kSortByModifiedAt: {
      total_size += 1 + 1;
      break;
    }
    case SORT_BY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListAppsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListAppsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListAppsRequest::GetClassData() const { return &_class_data_; }

void ListAppsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListAppsRequest *>(to)->MergeFrom(
      static_cast<const ListAppsRequest &>(from));
}


void ListAppsRequest::MergeFrom(const ListAppsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListAppsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  additional_fields_.MergeFrom(from.additional_fields_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_query().empty()) {
    _internal_set_query(from._internal_query());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
  if (from._internal_sort_ascending() != 0) {
    _internal_set_sort_ascending(from._internal_sort_ascending());
  }
  if (from._internal_featured_only() != 0) {
    _internal_set_featured_only(from._internal_featured_only());
  }
  if (from._internal_starred_only() != 0) {
    _internal_set_starred_only(from._internal_starred_only());
  }
  switch (from.sort_by_case()) {
    case kSortByName: {
      _internal_set_sort_by_name(from._internal_sort_by_name());
      break;
    }
    case kSortByModifiedAt: {
      _internal_set_sort_by_modified_at(from._internal_sort_by_modified_at());
      break;
    }
    case SORT_BY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListAppsRequest::CopyFrom(const ListAppsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListAppsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAppsRequest::IsInitialized() const {
  return true;
}

void ListAppsRequest::InternalSwap(ListAppsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  additional_fields_.InternalSwap(&other->additional_fields_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &query_, lhs_arena,
      &other->query_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListAppsRequest, starred_only_)
      + sizeof(ListAppsRequest::starred_only_)
      - PROTOBUF_FIELD_OFFSET(ListAppsRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
  swap(sort_by_, other->sort_by_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAppsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[12]);
}

// ===================================================================

class PostAppsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostAppsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostAppsRequest::_Internal::user_app_id(const PostAppsRequest* msg) {
  return *msg->user_app_id_;
}
void PostAppsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostAppsRequest::clear_apps() {
  apps_.Clear();
}
PostAppsRequest::PostAppsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  apps_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostAppsRequest)
}
PostAppsRequest::PostAppsRequest(const PostAppsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      apps_(from.apps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostAppsRequest)
}

inline void PostAppsRequest::SharedCtor() {
user_app_id_ = nullptr;
}

PostAppsRequest::~PostAppsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostAppsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostAppsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostAppsRequest::ArenaDtor(void* object) {
  PostAppsRequest* _this = reinterpret_cast< PostAppsRequest* >(object);
  (void)_this;
}
void PostAppsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostAppsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostAppsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostAppsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apps_.Clear();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostAppsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.App apps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_apps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostAppsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostAppsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.App apps = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_apps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_apps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostAppsRequest)
  return target;
}

size_t PostAppsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostAppsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.App apps = 2;
  total_size += 1UL * this->_internal_apps_size();
  for (const auto& msg : this->apps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostAppsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostAppsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostAppsRequest::GetClassData() const { return &_class_data_; }

void PostAppsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostAppsRequest *>(to)->MergeFrom(
      static_cast<const PostAppsRequest &>(from));
}


void PostAppsRequest::MergeFrom(const PostAppsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostAppsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  apps_.MergeFrom(from.apps_);
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostAppsRequest::CopyFrom(const PostAppsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostAppsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostAppsRequest::IsInitialized() const {
  return true;
}

void PostAppsRequest::InternalSwap(PostAppsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  apps_.InternalSwap(&other->apps_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostAppsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[13]);
}

// ===================================================================

class DeleteAppRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteAppRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteAppRequest::_Internal::user_app_id(const DeleteAppRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteAppRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteAppRequest::DeleteAppRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteAppRequest)
}
DeleteAppRequest::DeleteAppRequest(const DeleteAppRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteAppRequest)
}

inline void DeleteAppRequest::SharedCtor() {
user_app_id_ = nullptr;
}

DeleteAppRequest::~DeleteAppRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteAppRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteAppRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteAppRequest::ArenaDtor(void* object) {
  DeleteAppRequest* _this = reinterpret_cast< DeleteAppRequest* >(object);
  (void)_this;
}
void DeleteAppRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteAppRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteAppRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteAppRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteAppRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteAppRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteAppRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteAppRequest)
  return target;
}

size_t DeleteAppRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteAppRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteAppRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteAppRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteAppRequest::GetClassData() const { return &_class_data_; }

void DeleteAppRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteAppRequest *>(to)->MergeFrom(
      static_cast<const DeleteAppRequest &>(from));
}


void DeleteAppRequest::MergeFrom(const DeleteAppRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteAppRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteAppRequest::CopyFrom(const DeleteAppRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteAppRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAppRequest::IsInitialized() const {
  return true;
}

void DeleteAppRequest::InternalSwap(DeleteAppRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteAppRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[14]);
}

// ===================================================================

class PatchAppsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchAppsRequest* msg);
  static const ::clarifai::api::PatchAction& metadata_action(const PatchAppsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchAppsRequest::_Internal::user_app_id(const PatchAppsRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::PatchAction&
PatchAppsRequest::_Internal::metadata_action(const PatchAppsRequest* msg) {
  return *msg->metadata_action_;
}
void PatchAppsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchAppsRequest::clear_apps() {
  apps_.Clear();
}
void PatchAppsRequest::clear_metadata_action() {
  if (GetArenaForAllocation() == nullptr && metadata_action_ != nullptr) {
    delete metadata_action_;
  }
  metadata_action_ = nullptr;
}
PatchAppsRequest::PatchAppsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  apps_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchAppsRequest)
}
PatchAppsRequest::PatchAppsRequest(const PatchAppsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      apps_(from.apps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_metadata_action()) {
    metadata_action_ = new ::clarifai::api::PatchAction(*from.metadata_action_);
  } else {
    metadata_action_ = nullptr;
  }
  reindex_ = from.reindex_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchAppsRequest)
}

inline void PatchAppsRequest::SharedCtor() {
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reindex_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(reindex_));
}

PatchAppsRequest::~PatchAppsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchAppsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PatchAppsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete metadata_action_;
}

void PatchAppsRequest::ArenaDtor(void* object) {
  PatchAppsRequest* _this = reinterpret_cast< PatchAppsRequest* >(object);
  (void)_this;
}
void PatchAppsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatchAppsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PatchAppsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchAppsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apps_.Clear();
  action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && metadata_action_ != nullptr) {
    delete metadata_action_;
  }
  metadata_action_ = nullptr;
  reindex_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchAppsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.App apps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_apps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchAppsRequest.action"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.PatchAction metadata_action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool reindex = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          reindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchAppsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchAppsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.App apps = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_apps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_apps(i), target, stream);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchAppsRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  // .clarifai.api.PatchAction metadata_action = 4;
  if (this->_internal_has_metadata_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::metadata_action(this), target, stream);
  }

  // bool reindex = 5;
  if (this->_internal_reindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_reindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchAppsRequest)
  return target;
}

size_t PatchAppsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchAppsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.App apps = 2;
  total_size += 1UL * this->_internal_apps_size();
  for (const auto& msg : this->apps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.PatchAction metadata_action = 4;
  if (this->_internal_has_metadata_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_action_);
  }

  // bool reindex = 5;
  if (this->_internal_reindex() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchAppsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PatchAppsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchAppsRequest::GetClassData() const { return &_class_data_; }

void PatchAppsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PatchAppsRequest *>(to)->MergeFrom(
      static_cast<const PatchAppsRequest &>(from));
}


void PatchAppsRequest::MergeFrom(const PatchAppsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchAppsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  apps_.MergeFrom(from.apps_);
  if (!from._internal_action().empty()) {
    _internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_has_metadata_action()) {
    _internal_mutable_metadata_action()->::clarifai::api::PatchAction::MergeFrom(from._internal_metadata_action());
  }
  if (from._internal_reindex() != 0) {
    _internal_set_reindex(from._internal_reindex());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchAppsRequest::CopyFrom(const PatchAppsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchAppsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchAppsRequest::IsInitialized() const {
  return true;
}

void PatchAppsRequest::InternalSwap(PatchAppsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  apps_.InternalSwap(&other->apps_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_, lhs_arena,
      &other->action_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PatchAppsRequest, reindex_)
      + sizeof(PatchAppsRequest::reindex_)
      - PROTOBUF_FIELD_OFFSET(PatchAppsRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchAppsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[15]);
}

// ===================================================================

class PatchAppRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchAppRequest* msg);
  static const ::clarifai::api::App& app(const PatchAppRequest* msg);
  static const ::clarifai::api::PatchAction& metadata_action(const PatchAppRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchAppRequest::_Internal::user_app_id(const PatchAppRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::App&
PatchAppRequest::_Internal::app(const PatchAppRequest* msg) {
  return *msg->app_;
}
const ::clarifai::api::PatchAction&
PatchAppRequest::_Internal::metadata_action(const PatchAppRequest* msg) {
  return *msg->metadata_action_;
}
void PatchAppRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchAppRequest::clear_app() {
  if (GetArenaForAllocation() == nullptr && app_ != nullptr) {
    delete app_;
  }
  app_ = nullptr;
}
void PatchAppRequest::clear_metadata_action() {
  if (GetArenaForAllocation() == nullptr && metadata_action_ != nullptr) {
    delete metadata_action_;
  }
  metadata_action_ = nullptr;
}
PatchAppRequest::PatchAppRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchAppRequest)
}
PatchAppRequest::PatchAppRequest(const PatchAppRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_app()) {
    app_ = new ::clarifai::api::App(*from.app_);
  } else {
    app_ = nullptr;
  }
  if (from._internal_has_metadata_action()) {
    metadata_action_ = new ::clarifai::api::PatchAction(*from.metadata_action_);
  } else {
    metadata_action_ = nullptr;
  }
  reindex_ = from.reindex_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchAppRequest)
}

inline void PatchAppRequest::SharedCtor() {
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reindex_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(reindex_));
}

PatchAppRequest::~PatchAppRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchAppRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PatchAppRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete app_;
  if (this != internal_default_instance()) delete metadata_action_;
}

void PatchAppRequest::ArenaDtor(void* object) {
  PatchAppRequest* _this = reinterpret_cast< PatchAppRequest* >(object);
  (void)_this;
}
void PatchAppRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatchAppRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PatchAppRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchAppRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && app_ != nullptr) {
    delete app_;
  }
  app_ = nullptr;
  if (GetArenaForAllocation() == nullptr && metadata_action_ != nullptr) {
    delete metadata_action_;
  }
  metadata_action_ = nullptr;
  reindex_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchAppRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.App app = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_app(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchAppRequest.action"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.PatchAction metadata_action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool reindex = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          reindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchAppRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchAppRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // .clarifai.api.App app = 2;
  if (this->_internal_has_app()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::app(this), target, stream);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchAppRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  // .clarifai.api.PatchAction metadata_action = 4;
  if (this->_internal_has_metadata_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::metadata_action(this), target, stream);
  }

  // bool reindex = 5;
  if (this->_internal_reindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_reindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchAppRequest)
  return target;
}

size_t PatchAppRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchAppRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string action = 3;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.App app = 2;
  if (this->_internal_has_app()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_);
  }

  // .clarifai.api.PatchAction metadata_action = 4;
  if (this->_internal_has_metadata_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_action_);
  }

  // bool reindex = 5;
  if (this->_internal_reindex() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchAppRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PatchAppRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchAppRequest::GetClassData() const { return &_class_data_; }

void PatchAppRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PatchAppRequest *>(to)->MergeFrom(
      static_cast<const PatchAppRequest &>(from));
}


void PatchAppRequest::MergeFrom(const PatchAppRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchAppRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_action().empty()) {
    _internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_has_app()) {
    _internal_mutable_app()->::clarifai::api::App::MergeFrom(from._internal_app());
  }
  if (from._internal_has_metadata_action()) {
    _internal_mutable_metadata_action()->::clarifai::api::PatchAction::MergeFrom(from._internal_metadata_action());
  }
  if (from._internal_reindex() != 0) {
    _internal_set_reindex(from._internal_reindex());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchAppRequest::CopyFrom(const PatchAppRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchAppRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchAppRequest::IsInitialized() const {
  return true;
}

void PatchAppRequest::InternalSwap(PatchAppRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_, lhs_arena,
      &other->action_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PatchAppRequest, reindex_)
      + sizeof(PatchAppRequest::reindex_)
      - PROTOBUF_FIELD_OFFSET(PatchAppRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchAppRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[16]);
}

// ===================================================================

class PatchAppsIdsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchAppsIdsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchAppsIdsRequest::_Internal::user_app_id(const PatchAppsIdsRequest* msg) {
  return *msg->user_app_id_;
}
void PatchAppsIdsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
PatchAppsIdsRequest::PatchAppsIdsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchAppsIdsRequest)
}
PatchAppsIdsRequest::PatchAppsIdsRequest(const PatchAppsIdsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchAppsIdsRequest)
}

inline void PatchAppsIdsRequest::SharedCtor() {
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

PatchAppsIdsRequest::~PatchAppsIdsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchAppsIdsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PatchAppsIdsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchAppsIdsRequest::ArenaDtor(void* object) {
  PatchAppsIdsRequest* _this = reinterpret_cast< PatchAppsIdsRequest* >(object);
  (void)_this;
}
void PatchAppsIdsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatchAppsIdsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PatchAppsIdsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchAppsIdsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchAppsIdsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.IdUpdateSource ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchAppsIdsRequest.action"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchAppsIdsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchAppsIdsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.IdUpdateSource ids = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_ids(i), target, stream);
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchAppsIdsRequest.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchAppsIdsRequest)
  return target;
}

size_t PatchAppsIdsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchAppsIdsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.IdUpdateSource ids = 3;
  total_size += 1UL * this->_internal_ids_size();
  for (const auto& msg : this->ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchAppsIdsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PatchAppsIdsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchAppsIdsRequest::GetClassData() const { return &_class_data_; }

void PatchAppsIdsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PatchAppsIdsRequest *>(to)->MergeFrom(
      static_cast<const PatchAppsIdsRequest &>(from));
}


void PatchAppsIdsRequest::MergeFrom(const PatchAppsIdsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchAppsIdsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (!from._internal_action().empty()) {
    _internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchAppsIdsRequest::CopyFrom(const PatchAppsIdsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchAppsIdsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchAppsIdsRequest::IsInitialized() const {
  return true;
}

void PatchAppsIdsRequest::InternalSwap(PatchAppsIdsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_, lhs_arena,
      &other->action_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchAppsIdsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[17]);
}

// ===================================================================

class PostAppsSearchesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostAppsSearchesRequest* msg);
  static const ::clarifai::api::AppQuery& app_query(const PostAppsSearchesRequest* msg);
  static const ::clarifai::api::Pagination& pagination(const PostAppsSearchesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostAppsSearchesRequest::_Internal::user_app_id(const PostAppsSearchesRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::AppQuery&
PostAppsSearchesRequest::_Internal::app_query(const PostAppsSearchesRequest* msg) {
  return *msg->app_query_;
}
const ::clarifai::api::Pagination&
PostAppsSearchesRequest::_Internal::pagination(const PostAppsSearchesRequest* msg) {
  return *msg->pagination_;
}
void PostAppsSearchesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostAppsSearchesRequest::clear_app_query() {
  if (GetArenaForAllocation() == nullptr && app_query_ != nullptr) {
    delete app_query_;
  }
  app_query_ = nullptr;
}
PostAppsSearchesRequest::PostAppsSearchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostAppsSearchesRequest)
}
PostAppsSearchesRequest::PostAppsSearchesRequest(const PostAppsSearchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_app_query()) {
    app_query_ = new ::clarifai::api::AppQuery(*from.app_query_);
  } else {
    app_query_ = nullptr;
  }
  if (from._internal_has_pagination()) {
    pagination_ = new ::clarifai::api::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostAppsSearchesRequest)
}

inline void PostAppsSearchesRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pagination_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(pagination_));
}

PostAppsSearchesRequest::~PostAppsSearchesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostAppsSearchesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostAppsSearchesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete app_query_;
  if (this != internal_default_instance()) delete pagination_;
}

void PostAppsSearchesRequest::ArenaDtor(void* object) {
  PostAppsSearchesRequest* _this = reinterpret_cast< PostAppsSearchesRequest* >(object);
  (void)_this;
}
void PostAppsSearchesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostAppsSearchesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostAppsSearchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostAppsSearchesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && app_query_ != nullptr) {
    delete app_query_;
  }
  app_query_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostAppsSearchesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.AppQuery app_query = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_query(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Pagination pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostAppsSearchesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostAppsSearchesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // .clarifai.api.AppQuery app_query = 2;
  if (this->_internal_has_app_query()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::app_query(this), target, stream);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->_internal_has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pagination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostAppsSearchesRequest)
  return target;
}

size_t PostAppsSearchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostAppsSearchesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.AppQuery app_query = 2;
  if (this->_internal_has_app_query()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_query_);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostAppsSearchesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostAppsSearchesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostAppsSearchesRequest::GetClassData() const { return &_class_data_; }

void PostAppsSearchesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostAppsSearchesRequest *>(to)->MergeFrom(
      static_cast<const PostAppsSearchesRequest &>(from));
}


void PostAppsSearchesRequest::MergeFrom(const PostAppsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostAppsSearchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_has_app_query()) {
    _internal_mutable_app_query()->::clarifai::api::AppQuery::MergeFrom(from._internal_app_query());
  }
  if (from._internal_has_pagination()) {
    _internal_mutable_pagination()->::clarifai::api::Pagination::MergeFrom(from._internal_pagination());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostAppsSearchesRequest::CopyFrom(const PostAppsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostAppsSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostAppsSearchesRequest::IsInitialized() const {
  return true;
}

void PostAppsSearchesRequest::InternalSwap(PostAppsSearchesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostAppsSearchesRequest, pagination_)
      + sizeof(PostAppsSearchesRequest::pagination_)
      - PROTOBUF_FIELD_OFFSET(PostAppsSearchesRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostAppsSearchesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[18]);
}

// ===================================================================

class SingleAppResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleAppResponse* msg);
  static const ::clarifai::api::App& app(const SingleAppResponse* msg);
};

const ::clarifai::api::status::Status&
SingleAppResponse::_Internal::status(const SingleAppResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::App&
SingleAppResponse::_Internal::app(const SingleAppResponse* msg) {
  return *msg->app_;
}
void SingleAppResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleAppResponse::clear_app() {
  if (GetArenaForAllocation() == nullptr && app_ != nullptr) {
    delete app_;
  }
  app_ = nullptr;
}
SingleAppResponse::SingleAppResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleAppResponse)
}
SingleAppResponse::SingleAppResponse(const SingleAppResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_app()) {
    app_ = new ::clarifai::api::App(*from.app_);
  } else {
    app_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleAppResponse)
}

inline void SingleAppResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&app_) -
    reinterpret_cast<char*>(&status_)) + sizeof(app_));
}

SingleAppResponse::~SingleAppResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleAppResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SingleAppResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete app_;
}

void SingleAppResponse::ArenaDtor(void* object) {
  SingleAppResponse* _this = reinterpret_cast< SingleAppResponse* >(object);
  (void)_this;
}
void SingleAppResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleAppResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleAppResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleAppResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && app_ != nullptr) {
    delete app_;
  }
  app_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleAppResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.App app = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_app(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleAppResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleAppResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.App app = 2;
  if (this->_internal_has_app()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::app(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleAppResponse)
  return target;
}

size_t SingleAppResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleAppResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.App app = 2;
  if (this->_internal_has_app()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleAppResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SingleAppResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleAppResponse::GetClassData() const { return &_class_data_; }

void SingleAppResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SingleAppResponse *>(to)->MergeFrom(
      static_cast<const SingleAppResponse &>(from));
}


void SingleAppResponse::MergeFrom(const SingleAppResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_app()) {
    _internal_mutable_app()->::clarifai::api::App::MergeFrom(from._internal_app());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleAppResponse::CopyFrom(const SingleAppResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleAppResponse::IsInitialized() const {
  return true;
}

void SingleAppResponse::InternalSwap(SingleAppResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleAppResponse, app_)
      + sizeof(SingleAppResponse::app_)
      - PROTOBUF_FIELD_OFFSET(SingleAppResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleAppResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[19]);
}

// ===================================================================

class MultiAppResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiAppResponse* msg);
};

const ::clarifai::api::status::Status&
MultiAppResponse::_Internal::status(const MultiAppResponse* msg) {
  return *msg->status_;
}
void MultiAppResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiAppResponse::clear_apps() {
  apps_.Clear();
}
MultiAppResponse::MultiAppResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  apps_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiAppResponse)
}
MultiAppResponse::MultiAppResponse(const MultiAppResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      apps_(from.apps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiAppResponse)
}

inline void MultiAppResponse::SharedCtor() {
status_ = nullptr;
}

MultiAppResponse::~MultiAppResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiAppResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiAppResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiAppResponse::ArenaDtor(void* object) {
  MultiAppResponse* _this = reinterpret_cast< MultiAppResponse* >(object);
  (void)_this;
}
void MultiAppResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiAppResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiAppResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiAppResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apps_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiAppResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.App apps = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_apps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiAppResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiAppResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.App apps = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_apps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_apps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiAppResponse)
  return target;
}

size_t MultiAppResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiAppResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.App apps = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_apps_size();
  for (const auto& msg : this->apps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiAppResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiAppResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiAppResponse::GetClassData() const { return &_class_data_; }

void MultiAppResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiAppResponse *>(to)->MergeFrom(
      static_cast<const MultiAppResponse &>(from));
}


void MultiAppResponse::MergeFrom(const MultiAppResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  apps_.MergeFrom(from.apps_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiAppResponse::CopyFrom(const MultiAppResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiAppResponse::IsInitialized() const {
  return true;
}

void MultiAppResponse::InternalSwap(MultiAppResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  apps_.InternalSwap(&other->apps_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiAppResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[20]);
}

// ===================================================================

class ListCollaboratorsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListCollaboratorsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListCollaboratorsRequest::_Internal::user_app_id(const ListCollaboratorsRequest* msg) {
  return *msg->user_app_id_;
}
void ListCollaboratorsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListCollaboratorsRequest::ListCollaboratorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListCollaboratorsRequest)
}
ListCollaboratorsRequest::ListCollaboratorsRequest(const ListCollaboratorsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  list_all_collaborators_ = from.list_all_collaborators_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListCollaboratorsRequest)
}

inline void ListCollaboratorsRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&list_all_collaborators_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(list_all_collaborators_));
}

ListCollaboratorsRequest::~ListCollaboratorsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListCollaboratorsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListCollaboratorsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListCollaboratorsRequest::ArenaDtor(void* object) {
  ListCollaboratorsRequest* _this = reinterpret_cast< ListCollaboratorsRequest* >(object);
  (void)_this;
}
void ListCollaboratorsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListCollaboratorsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListCollaboratorsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListCollaboratorsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  list_all_collaborators_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListCollaboratorsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool list_all_collaborators = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          list_all_collaborators_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListCollaboratorsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListCollaboratorsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // bool list_all_collaborators = 2;
  if (this->_internal_list_all_collaborators() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_list_all_collaborators(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListCollaboratorsRequest)
  return target;
}

size_t ListCollaboratorsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListCollaboratorsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // bool list_all_collaborators = 2;
  if (this->_internal_list_all_collaborators() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListCollaboratorsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListCollaboratorsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListCollaboratorsRequest::GetClassData() const { return &_class_data_; }

void ListCollaboratorsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListCollaboratorsRequest *>(to)->MergeFrom(
      static_cast<const ListCollaboratorsRequest &>(from));
}


void ListCollaboratorsRequest::MergeFrom(const ListCollaboratorsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListCollaboratorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_list_all_collaborators() != 0) {
    _internal_set_list_all_collaborators(from._internal_list_all_collaborators());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListCollaboratorsRequest::CopyFrom(const ListCollaboratorsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListCollaboratorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCollaboratorsRequest::IsInitialized() const {
  return true;
}

void ListCollaboratorsRequest::InternalSwap(ListCollaboratorsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListCollaboratorsRequest, list_all_collaborators_)
      + sizeof(ListCollaboratorsRequest::list_all_collaborators_)
      - PROTOBUF_FIELD_OFFSET(ListCollaboratorsRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCollaboratorsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[21]);
}

// ===================================================================

class PostCollaboratorsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostCollaboratorsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostCollaboratorsRequest::_Internal::user_app_id(const PostCollaboratorsRequest* msg) {
  return *msg->user_app_id_;
}
void PostCollaboratorsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostCollaboratorsRequest::clear_collaborators() {
  collaborators_.Clear();
}
PostCollaboratorsRequest::PostCollaboratorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  collaborators_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostCollaboratorsRequest)
}
PostCollaboratorsRequest::PostCollaboratorsRequest(const PostCollaboratorsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      collaborators_(from.collaborators_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostCollaboratorsRequest)
}

inline void PostCollaboratorsRequest::SharedCtor() {
user_app_id_ = nullptr;
}

PostCollaboratorsRequest::~PostCollaboratorsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostCollaboratorsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostCollaboratorsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostCollaboratorsRequest::ArenaDtor(void* object) {
  PostCollaboratorsRequest* _this = reinterpret_cast< PostCollaboratorsRequest* >(object);
  (void)_this;
}
void PostCollaboratorsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostCollaboratorsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostCollaboratorsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostCollaboratorsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collaborators_.Clear();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostCollaboratorsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Collaborator collaborators = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collaborators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostCollaboratorsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostCollaboratorsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Collaborator collaborators = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_collaborators_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_collaborators(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostCollaboratorsRequest)
  return target;
}

size_t PostCollaboratorsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostCollaboratorsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Collaborator collaborators = 2;
  total_size += 1UL * this->_internal_collaborators_size();
  for (const auto& msg : this->collaborators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostCollaboratorsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostCollaboratorsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostCollaboratorsRequest::GetClassData() const { return &_class_data_; }

void PostCollaboratorsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostCollaboratorsRequest *>(to)->MergeFrom(
      static_cast<const PostCollaboratorsRequest &>(from));
}


void PostCollaboratorsRequest::MergeFrom(const PostCollaboratorsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostCollaboratorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  collaborators_.MergeFrom(from.collaborators_);
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostCollaboratorsRequest::CopyFrom(const PostCollaboratorsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostCollaboratorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostCollaboratorsRequest::IsInitialized() const {
  return true;
}

void PostCollaboratorsRequest::InternalSwap(PostCollaboratorsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  collaborators_.InternalSwap(&other->collaborators_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostCollaboratorsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[22]);
}

// ===================================================================

class PatchCollaboratorsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchCollaboratorsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchCollaboratorsRequest::_Internal::user_app_id(const PatchCollaboratorsRequest* msg) {
  return *msg->user_app_id_;
}
void PatchCollaboratorsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchCollaboratorsRequest::clear_collaborators() {
  collaborators_.Clear();
}
PatchCollaboratorsRequest::PatchCollaboratorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  collaborators_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchCollaboratorsRequest)
}
PatchCollaboratorsRequest::PatchCollaboratorsRequest(const PatchCollaboratorsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      collaborators_(from.collaborators_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchCollaboratorsRequest)
}

inline void PatchCollaboratorsRequest::SharedCtor() {
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

PatchCollaboratorsRequest::~PatchCollaboratorsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchCollaboratorsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PatchCollaboratorsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchCollaboratorsRequest::ArenaDtor(void* object) {
  PatchCollaboratorsRequest* _this = reinterpret_cast< PatchCollaboratorsRequest* >(object);
  (void)_this;
}
void PatchCollaboratorsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatchCollaboratorsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PatchCollaboratorsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchCollaboratorsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collaborators_.Clear();
  action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchCollaboratorsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Collaborator collaborators = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collaborators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchCollaboratorsRequest.action"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchCollaboratorsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchCollaboratorsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Collaborator collaborators = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_collaborators_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_collaborators(i), target, stream);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchCollaboratorsRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchCollaboratorsRequest)
  return target;
}

size_t PatchCollaboratorsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchCollaboratorsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Collaborator collaborators = 2;
  total_size += 1UL * this->_internal_collaborators_size();
  for (const auto& msg : this->collaborators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchCollaboratorsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PatchCollaboratorsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchCollaboratorsRequest::GetClassData() const { return &_class_data_; }

void PatchCollaboratorsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PatchCollaboratorsRequest *>(to)->MergeFrom(
      static_cast<const PatchCollaboratorsRequest &>(from));
}


void PatchCollaboratorsRequest::MergeFrom(const PatchCollaboratorsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchCollaboratorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  collaborators_.MergeFrom(from.collaborators_);
  if (!from._internal_action().empty()) {
    _internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchCollaboratorsRequest::CopyFrom(const PatchCollaboratorsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchCollaboratorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchCollaboratorsRequest::IsInitialized() const {
  return true;
}

void PatchCollaboratorsRequest::InternalSwap(PatchCollaboratorsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  collaborators_.InternalSwap(&other->collaborators_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_, lhs_arena,
      &other->action_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchCollaboratorsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[23]);
}

// ===================================================================

class DeleteCollaboratorsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteCollaboratorsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteCollaboratorsRequest::_Internal::user_app_id(const DeleteCollaboratorsRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteCollaboratorsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteCollaboratorsRequest::DeleteCollaboratorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  collaborator_ids_(arena),
  user_emails_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteCollaboratorsRequest)
}
DeleteCollaboratorsRequest::DeleteCollaboratorsRequest(const DeleteCollaboratorsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      collaborator_ids_(from.collaborator_ids_),
      user_emails_(from.user_emails_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteCollaboratorsRequest)
}

inline void DeleteCollaboratorsRequest::SharedCtor() {
user_app_id_ = nullptr;
}

DeleteCollaboratorsRequest::~DeleteCollaboratorsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteCollaboratorsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteCollaboratorsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteCollaboratorsRequest::ArenaDtor(void* object) {
  DeleteCollaboratorsRequest* _this = reinterpret_cast< DeleteCollaboratorsRequest* >(object);
  (void)_this;
}
void DeleteCollaboratorsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteCollaboratorsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteCollaboratorsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteCollaboratorsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collaborator_ids_.Clear();
  user_emails_.Clear();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteCollaboratorsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string collaborator_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_collaborator_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteCollaboratorsRequest.collaborator_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string user_emails = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_emails();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteCollaboratorsRequest.user_emails"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteCollaboratorsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteCollaboratorsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated string collaborator_ids = 2;
  for (int i = 0, n = this->_internal_collaborator_ids_size(); i < n; i++) {
    const auto& s = this->_internal_collaborator_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteCollaboratorsRequest.collaborator_ids");
    target = stream->WriteString(2, s, target);
  }

  // repeated string user_emails = 3;
  for (int i = 0, n = this->_internal_user_emails_size(); i < n; i++) {
    const auto& s = this->_internal_user_emails(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteCollaboratorsRequest.user_emails");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteCollaboratorsRequest)
  return target;
}

size_t DeleteCollaboratorsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteCollaboratorsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string collaborator_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(collaborator_ids_.size());
  for (int i = 0, n = collaborator_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      collaborator_ids_.Get(i));
  }

  // repeated string user_emails = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(user_emails_.size());
  for (int i = 0, n = user_emails_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      user_emails_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteCollaboratorsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteCollaboratorsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteCollaboratorsRequest::GetClassData() const { return &_class_data_; }

void DeleteCollaboratorsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteCollaboratorsRequest *>(to)->MergeFrom(
      static_cast<const DeleteCollaboratorsRequest &>(from));
}


void DeleteCollaboratorsRequest::MergeFrom(const DeleteCollaboratorsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteCollaboratorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  collaborator_ids_.MergeFrom(from.collaborator_ids_);
  user_emails_.MergeFrom(from.user_emails_);
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteCollaboratorsRequest::CopyFrom(const DeleteCollaboratorsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteCollaboratorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCollaboratorsRequest::IsInitialized() const {
  return true;
}

void DeleteCollaboratorsRequest::InternalSwap(DeleteCollaboratorsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  collaborator_ids_.InternalSwap(&other->collaborator_ids_);
  user_emails_.InternalSwap(&other->user_emails_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteCollaboratorsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[24]);
}

// ===================================================================

class MultiCollaboratorsResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiCollaboratorsResponse* msg);
};

const ::clarifai::api::status::Status&
MultiCollaboratorsResponse::_Internal::status(const MultiCollaboratorsResponse* msg) {
  return *msg->status_;
}
void MultiCollaboratorsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiCollaboratorsResponse::clear_collaborators() {
  collaborators_.Clear();
}
MultiCollaboratorsResponse::MultiCollaboratorsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  collaborators_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiCollaboratorsResponse)
}
MultiCollaboratorsResponse::MultiCollaboratorsResponse(const MultiCollaboratorsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      collaborators_(from.collaborators_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiCollaboratorsResponse)
}

inline void MultiCollaboratorsResponse::SharedCtor() {
status_ = nullptr;
}

MultiCollaboratorsResponse::~MultiCollaboratorsResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiCollaboratorsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiCollaboratorsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiCollaboratorsResponse::ArenaDtor(void* object) {
  MultiCollaboratorsResponse* _this = reinterpret_cast< MultiCollaboratorsResponse* >(object);
  (void)_this;
}
void MultiCollaboratorsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiCollaboratorsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiCollaboratorsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiCollaboratorsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collaborators_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiCollaboratorsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Collaborator collaborators = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collaborators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiCollaboratorsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiCollaboratorsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.Collaborator collaborators = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_collaborators_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_collaborators(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiCollaboratorsResponse)
  return target;
}

size_t MultiCollaboratorsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiCollaboratorsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Collaborator collaborators = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_collaborators_size();
  for (const auto& msg : this->collaborators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiCollaboratorsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiCollaboratorsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiCollaboratorsResponse::GetClassData() const { return &_class_data_; }

void MultiCollaboratorsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiCollaboratorsResponse *>(to)->MergeFrom(
      static_cast<const MultiCollaboratorsResponse &>(from));
}


void MultiCollaboratorsResponse::MergeFrom(const MultiCollaboratorsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiCollaboratorsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  collaborators_.MergeFrom(from.collaborators_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiCollaboratorsResponse::CopyFrom(const MultiCollaboratorsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiCollaboratorsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiCollaboratorsResponse::IsInitialized() const {
  return true;
}

void MultiCollaboratorsResponse::InternalSwap(MultiCollaboratorsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  collaborators_.InternalSwap(&other->collaborators_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiCollaboratorsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[25]);
}

// ===================================================================

class ListCollaborationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListCollaborationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListCollaborationsRequest::_Internal::user_app_id(const ListCollaborationsRequest* msg) {
  return *msg->user_app_id_;
}
void ListCollaborationsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListCollaborationsRequest::ListCollaborationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListCollaborationsRequest)
}
ListCollaborationsRequest::ListCollaborationsRequest(const ListCollaborationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListCollaborationsRequest)
}

inline void ListCollaborationsRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListCollaborationsRequest::~ListCollaborationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListCollaborationsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListCollaborationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListCollaborationsRequest::ArenaDtor(void* object) {
  ListCollaborationsRequest* _this = reinterpret_cast< ListCollaborationsRequest* >(object);
  (void)_this;
}
void ListCollaborationsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListCollaborationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListCollaborationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListCollaborationsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListCollaborationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListCollaborationsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListCollaborationsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListCollaborationsRequest)
  return target;
}

size_t ListCollaborationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListCollaborationsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListCollaborationsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListCollaborationsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListCollaborationsRequest::GetClassData() const { return &_class_data_; }

void ListCollaborationsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListCollaborationsRequest *>(to)->MergeFrom(
      static_cast<const ListCollaborationsRequest &>(from));
}


void ListCollaborationsRequest::MergeFrom(const ListCollaborationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListCollaborationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListCollaborationsRequest::CopyFrom(const ListCollaborationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListCollaborationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCollaborationsRequest::IsInitialized() const {
  return true;
}

void ListCollaborationsRequest::InternalSwap(ListCollaborationsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListCollaborationsRequest, per_page_)
      + sizeof(ListCollaborationsRequest::per_page_)
      - PROTOBUF_FIELD_OFFSET(ListCollaborationsRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCollaborationsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[26]);
}

// ===================================================================

class MultiCollaborationsResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiCollaborationsResponse* msg);
};

const ::clarifai::api::status::Status&
MultiCollaborationsResponse::_Internal::status(const MultiCollaborationsResponse* msg) {
  return *msg->status_;
}
void MultiCollaborationsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiCollaborationsResponse::clear_collaborations() {
  collaborations_.Clear();
}
MultiCollaborationsResponse::MultiCollaborationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  collaborations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiCollaborationsResponse)
}
MultiCollaborationsResponse::MultiCollaborationsResponse(const MultiCollaborationsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      collaborations_(from.collaborations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiCollaborationsResponse)
}

inline void MultiCollaborationsResponse::SharedCtor() {
status_ = nullptr;
}

MultiCollaborationsResponse::~MultiCollaborationsResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiCollaborationsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiCollaborationsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiCollaborationsResponse::ArenaDtor(void* object) {
  MultiCollaborationsResponse* _this = reinterpret_cast< MultiCollaborationsResponse* >(object);
  (void)_this;
}
void MultiCollaborationsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiCollaborationsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiCollaborationsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiCollaborationsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collaborations_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiCollaborationsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Collaboration collaborations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collaborations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiCollaborationsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiCollaborationsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.Collaboration collaborations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_collaborations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_collaborations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiCollaborationsResponse)
  return target;
}

size_t MultiCollaborationsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiCollaborationsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Collaboration collaborations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_collaborations_size();
  for (const auto& msg : this->collaborations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiCollaborationsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiCollaborationsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiCollaborationsResponse::GetClassData() const { return &_class_data_; }

void MultiCollaborationsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiCollaborationsResponse *>(to)->MergeFrom(
      static_cast<const MultiCollaborationsResponse &>(from));
}


void MultiCollaborationsResponse::MergeFrom(const MultiCollaborationsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiCollaborationsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  collaborations_.MergeFrom(from.collaborations_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiCollaborationsResponse::CopyFrom(const MultiCollaborationsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiCollaborationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiCollaborationsResponse::IsInitialized() const {
  return true;
}

void MultiCollaborationsResponse::InternalSwap(MultiCollaborationsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  collaborations_.InternalSwap(&other->collaborations_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiCollaborationsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[27]);
}

// ===================================================================

class GetStatusCodeRequest::_Internal {
 public:
};

GetStatusCodeRequest::GetStatusCodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetStatusCodeRequest)
}
GetStatusCodeRequest::GetStatusCodeRequest(const GetStatusCodeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_code_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    status_code_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status_code_id().empty()) {
    status_code_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status_code_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetStatusCodeRequest)
}

inline void GetStatusCodeRequest::SharedCtor() {
status_code_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  status_code_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetStatusCodeRequest::~GetStatusCodeRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetStatusCodeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetStatusCodeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_code_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetStatusCodeRequest::ArenaDtor(void* object) {
  GetStatusCodeRequest* _this = reinterpret_cast< GetStatusCodeRequest* >(object);
  (void)_this;
}
void GetStatusCodeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetStatusCodeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetStatusCodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetStatusCodeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_code_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStatusCodeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string status_code_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_status_code_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetStatusCodeRequest.status_code_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetStatusCodeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetStatusCodeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string status_code_id = 1;
  if (!this->_internal_status_code_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status_code_id().data(), static_cast<int>(this->_internal_status_code_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetStatusCodeRequest.status_code_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status_code_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetStatusCodeRequest)
  return target;
}

size_t GetStatusCodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetStatusCodeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status_code_id = 1;
  if (!this->_internal_status_code_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status_code_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetStatusCodeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetStatusCodeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetStatusCodeRequest::GetClassData() const { return &_class_data_; }

void GetStatusCodeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetStatusCodeRequest *>(to)->MergeFrom(
      static_cast<const GetStatusCodeRequest &>(from));
}


void GetStatusCodeRequest::MergeFrom(const GetStatusCodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetStatusCodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status_code_id().empty()) {
    _internal_set_status_code_id(from._internal_status_code_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetStatusCodeRequest::CopyFrom(const GetStatusCodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetStatusCodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStatusCodeRequest::IsInitialized() const {
  return true;
}

void GetStatusCodeRequest::InternalSwap(GetStatusCodeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_code_id_, lhs_arena,
      &other->status_code_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStatusCodeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[28]);
}

// ===================================================================

class ListStatusCodesRequest::_Internal {
 public:
};

ListStatusCodesRequest::ListStatusCodesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListStatusCodesRequest)
}
ListStatusCodesRequest::ListStatusCodesRequest(const ListStatusCodesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListStatusCodesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListStatusCodesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListStatusCodesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ListStatusCodesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[29]);
}

// ===================================================================

class SingleStatusCodeResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleStatusCodeResponse* msg);
};

const ::clarifai::api::status::Status&
SingleStatusCodeResponse::_Internal::status(const SingleStatusCodeResponse* msg) {
  return *msg->status_;
}
void SingleStatusCodeResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
SingleStatusCodeResponse::SingleStatusCodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleStatusCodeResponse)
}
SingleStatusCodeResponse::SingleStatusCodeResponse(const SingleStatusCodeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleStatusCodeResponse)
}

inline void SingleStatusCodeResponse::SharedCtor() {
status_ = nullptr;
}

SingleStatusCodeResponse::~SingleStatusCodeResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleStatusCodeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SingleStatusCodeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void SingleStatusCodeResponse::ArenaDtor(void* object) {
  SingleStatusCodeResponse* _this = reinterpret_cast< SingleStatusCodeResponse* >(object);
  (void)_this;
}
void SingleStatusCodeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleStatusCodeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleStatusCodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleStatusCodeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleStatusCodeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleStatusCodeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleStatusCodeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleStatusCodeResponse)
  return target;
}

size_t SingleStatusCodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleStatusCodeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleStatusCodeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SingleStatusCodeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleStatusCodeResponse::GetClassData() const { return &_class_data_; }

void SingleStatusCodeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SingleStatusCodeResponse *>(to)->MergeFrom(
      static_cast<const SingleStatusCodeResponse &>(from));
}


void SingleStatusCodeResponse::MergeFrom(const SingleStatusCodeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleStatusCodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleStatusCodeResponse::CopyFrom(const SingleStatusCodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleStatusCodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleStatusCodeResponse::IsInitialized() const {
  return true;
}

void SingleStatusCodeResponse::InternalSwap(SingleStatusCodeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleStatusCodeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[30]);
}

// ===================================================================

class MultiStatusCodeResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiStatusCodeResponse* msg);
};

const ::clarifai::api::status::Status&
MultiStatusCodeResponse::_Internal::status(const MultiStatusCodeResponse* msg) {
  return *msg->status_;
}
void MultiStatusCodeResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiStatusCodeResponse::clear_statuses() {
  statuses_.Clear();
}
MultiStatusCodeResponse::MultiStatusCodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  statuses_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiStatusCodeResponse)
}
MultiStatusCodeResponse::MultiStatusCodeResponse(const MultiStatusCodeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      statuses_(from.statuses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiStatusCodeResponse)
}

inline void MultiStatusCodeResponse::SharedCtor() {
status_ = nullptr;
}

MultiStatusCodeResponse::~MultiStatusCodeResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiStatusCodeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiStatusCodeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiStatusCodeResponse::ArenaDtor(void* object) {
  MultiStatusCodeResponse* _this = reinterpret_cast< MultiStatusCodeResponse* >(object);
  (void)_this;
}
void MultiStatusCodeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiStatusCodeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiStatusCodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiStatusCodeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  statuses_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiStatusCodeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.status.Status statuses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_statuses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiStatusCodeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiStatusCodeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.status.Status statuses = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_statuses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_statuses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiStatusCodeResponse)
  return target;
}

size_t MultiStatusCodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiStatusCodeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.status.Status statuses = 2;
  total_size += 1UL * this->_internal_statuses_size();
  for (const auto& msg : this->statuses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiStatusCodeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiStatusCodeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiStatusCodeResponse::GetClassData() const { return &_class_data_; }

void MultiStatusCodeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiStatusCodeResponse *>(to)->MergeFrom(
      static_cast<const MultiStatusCodeResponse &>(from));
}


void MultiStatusCodeResponse::MergeFrom(const MultiStatusCodeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiStatusCodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  statuses_.MergeFrom(from.statuses_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiStatusCodeResponse::CopyFrom(const MultiStatusCodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiStatusCodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiStatusCodeResponse::IsInitialized() const {
  return true;
}

void MultiStatusCodeResponse::InternalSwap(MultiStatusCodeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  statuses_.InternalSwap(&other->statuses_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiStatusCodeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[31]);
}

// ===================================================================

class GetConceptRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetConceptRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetConceptRequest::_Internal::user_app_id(const GetConceptRequest* msg) {
  return *msg->user_app_id_;
}
void GetConceptRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetConceptRequest::GetConceptRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetConceptRequest)
}
GetConceptRequest::GetConceptRequest(const GetConceptRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    concept_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_concept_id().empty()) {
    concept_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_concept_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetConceptRequest)
}

inline void GetConceptRequest::SharedCtor() {
concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  concept_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

GetConceptRequest::~GetConceptRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetConceptRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetConceptRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  concept_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetConceptRequest::ArenaDtor(void* object) {
  GetConceptRequest* _this = reinterpret_cast< GetConceptRequest* >(object);
  (void)_this;
}
void GetConceptRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetConceptRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetConceptRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetConceptRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetConceptRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string concept_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_concept_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetConceptRequest.concept_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetConceptRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetConceptRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string concept_id = 2;
  if (!this->_internal_concept_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concept_id().data(), static_cast<int>(this->_internal_concept_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetConceptRequest.concept_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_concept_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetConceptRequest)
  return target;
}

size_t GetConceptRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetConceptRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string concept_id = 2;
  if (!this->_internal_concept_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concept_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetConceptRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetConceptRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetConceptRequest::GetClassData() const { return &_class_data_; }

void GetConceptRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetConceptRequest *>(to)->MergeFrom(
      static_cast<const GetConceptRequest &>(from));
}


void GetConceptRequest::MergeFrom(const GetConceptRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetConceptRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_concept_id().empty()) {
    _internal_set_concept_id(from._internal_concept_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetConceptRequest::CopyFrom(const GetConceptRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetConceptRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConceptRequest::IsInitialized() const {
  return true;
}

void GetConceptRequest::InternalSwap(GetConceptRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &concept_id_, lhs_arena,
      &other->concept_id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConceptRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[32]);
}

// ===================================================================

class ListConceptsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListConceptsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListConceptsRequest::_Internal::user_app_id(const ListConceptsRequest* msg) {
  return *msg->user_app_id_;
}
void ListConceptsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListConceptsRequest::ListConceptsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListConceptsRequest)
}
ListConceptsRequest::ListConceptsRequest(const ListConceptsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListConceptsRequest)
}

inline void ListConceptsRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListConceptsRequest::~ListConceptsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListConceptsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListConceptsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListConceptsRequest::ArenaDtor(void* object) {
  ListConceptsRequest* _this = reinterpret_cast< ListConceptsRequest* >(object);
  (void)_this;
}
void ListConceptsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListConceptsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListConceptsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListConceptsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListConceptsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListConceptsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListConceptsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListConceptsRequest)
  return target;
}

size_t ListConceptsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListConceptsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListConceptsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListConceptsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListConceptsRequest::GetClassData() const { return &_class_data_; }

void ListConceptsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListConceptsRequest *>(to)->MergeFrom(
      static_cast<const ListConceptsRequest &>(from));
}


void ListConceptsRequest::MergeFrom(const ListConceptsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListConceptsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListConceptsRequest::CopyFrom(const ListConceptsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListConceptsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListConceptsRequest::IsInitialized() const {
  return true;
}

void ListConceptsRequest::InternalSwap(ListConceptsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListConceptsRequest, per_page_)
      + sizeof(ListConceptsRequest::per_page_)
      - PROTOBUF_FIELD_OFFSET(ListConceptsRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListConceptsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[33]);
}

// ===================================================================

class PostConceptsSearchesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostConceptsSearchesRequest* msg);
  static const ::clarifai::api::ConceptQuery& concept_query(const PostConceptsSearchesRequest* msg);
  static const ::clarifai::api::Pagination& pagination(const PostConceptsSearchesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostConceptsSearchesRequest::_Internal::user_app_id(const PostConceptsSearchesRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::ConceptQuery&
PostConceptsSearchesRequest::_Internal::concept_query(const PostConceptsSearchesRequest* msg) {
  return *msg->concept_query_;
}
const ::clarifai::api::Pagination&
PostConceptsSearchesRequest::_Internal::pagination(const PostConceptsSearchesRequest* msg) {
  return *msg->pagination_;
}
void PostConceptsSearchesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostConceptsSearchesRequest::clear_concept_query() {
  if (GetArenaForAllocation() == nullptr && concept_query_ != nullptr) {
    delete concept_query_;
  }
  concept_query_ = nullptr;
}
PostConceptsSearchesRequest::PostConceptsSearchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostConceptsSearchesRequest)
}
PostConceptsSearchesRequest::PostConceptsSearchesRequest(const PostConceptsSearchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_concept_query()) {
    concept_query_ = new ::clarifai::api::ConceptQuery(*from.concept_query_);
  } else {
    concept_query_ = nullptr;
  }
  if (from._internal_has_pagination()) {
    pagination_ = new ::clarifai::api::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostConceptsSearchesRequest)
}

inline void PostConceptsSearchesRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pagination_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(pagination_));
}

PostConceptsSearchesRequest::~PostConceptsSearchesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostConceptsSearchesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostConceptsSearchesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete concept_query_;
  if (this != internal_default_instance()) delete pagination_;
}

void PostConceptsSearchesRequest::ArenaDtor(void* object) {
  PostConceptsSearchesRequest* _this = reinterpret_cast< PostConceptsSearchesRequest* >(object);
  (void)_this;
}
void PostConceptsSearchesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostConceptsSearchesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostConceptsSearchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostConceptsSearchesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && concept_query_ != nullptr) {
    delete concept_query_;
  }
  concept_query_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostConceptsSearchesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ConceptQuery concept_query = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_concept_query(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Pagination pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostConceptsSearchesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostConceptsSearchesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // .clarifai.api.ConceptQuery concept_query = 2;
  if (this->_internal_has_concept_query()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::concept_query(this), target, stream);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->_internal_has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pagination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostConceptsSearchesRequest)
  return target;
}

size_t PostConceptsSearchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostConceptsSearchesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.ConceptQuery concept_query = 2;
  if (this->_internal_has_concept_query()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *concept_query_);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostConceptsSearchesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostConceptsSearchesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostConceptsSearchesRequest::GetClassData() const { return &_class_data_; }

void PostConceptsSearchesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostConceptsSearchesRequest *>(to)->MergeFrom(
      static_cast<const PostConceptsSearchesRequest &>(from));
}


void PostConceptsSearchesRequest::MergeFrom(const PostConceptsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostConceptsSearchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_has_concept_query()) {
    _internal_mutable_concept_query()->::clarifai::api::ConceptQuery::MergeFrom(from._internal_concept_query());
  }
  if (from._internal_has_pagination()) {
    _internal_mutable_pagination()->::clarifai::api::Pagination::MergeFrom(from._internal_pagination());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostConceptsSearchesRequest::CopyFrom(const PostConceptsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostConceptsSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostConceptsSearchesRequest::IsInitialized() const {
  return true;
}

void PostConceptsSearchesRequest::InternalSwap(PostConceptsSearchesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostConceptsSearchesRequest, pagination_)
      + sizeof(PostConceptsSearchesRequest::pagination_)
      - PROTOBUF_FIELD_OFFSET(PostConceptsSearchesRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostConceptsSearchesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[34]);
}

// ===================================================================

class PostConceptsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostConceptsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostConceptsRequest::_Internal::user_app_id(const PostConceptsRequest* msg) {
  return *msg->user_app_id_;
}
void PostConceptsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostConceptsRequest::clear_concepts() {
  concepts_.Clear();
}
PostConceptsRequest::PostConceptsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  concepts_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostConceptsRequest)
}
PostConceptsRequest::PostConceptsRequest(const PostConceptsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      concepts_(from.concepts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostConceptsRequest)
}

inline void PostConceptsRequest::SharedCtor() {
user_app_id_ = nullptr;
}

PostConceptsRequest::~PostConceptsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostConceptsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostConceptsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostConceptsRequest::ArenaDtor(void* object) {
  PostConceptsRequest* _this = reinterpret_cast< PostConceptsRequest* >(object);
  (void)_this;
}
void PostConceptsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostConceptsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostConceptsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostConceptsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concepts_.Clear();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostConceptsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Concept concepts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concepts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostConceptsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostConceptsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Concept concepts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_concepts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_concepts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostConceptsRequest)
  return target;
}

size_t PostConceptsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostConceptsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Concept concepts = 2;
  total_size += 1UL * this->_internal_concepts_size();
  for (const auto& msg : this->concepts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostConceptsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostConceptsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostConceptsRequest::GetClassData() const { return &_class_data_; }

void PostConceptsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostConceptsRequest *>(to)->MergeFrom(
      static_cast<const PostConceptsRequest &>(from));
}


void PostConceptsRequest::MergeFrom(const PostConceptsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostConceptsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  concepts_.MergeFrom(from.concepts_);
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostConceptsRequest::CopyFrom(const PostConceptsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostConceptsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostConceptsRequest::IsInitialized() const {
  return true;
}

void PostConceptsRequest::InternalSwap(PostConceptsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  concepts_.InternalSwap(&other->concepts_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostConceptsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[35]);
}

// ===================================================================

class PatchConceptsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchConceptsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchConceptsRequest::_Internal::user_app_id(const PatchConceptsRequest* msg) {
  return *msg->user_app_id_;
}
void PatchConceptsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchConceptsRequest::clear_concepts() {
  concepts_.Clear();
}
PatchConceptsRequest::PatchConceptsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  concepts_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchConceptsRequest)
}
PatchConceptsRequest::PatchConceptsRequest(const PatchConceptsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      concepts_(from.concepts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchConceptsRequest)
}

inline void PatchConceptsRequest::SharedCtor() {
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

PatchConceptsRequest::~PatchConceptsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchConceptsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PatchConceptsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchConceptsRequest::ArenaDtor(void* object) {
  PatchConceptsRequest* _this = reinterpret_cast< PatchConceptsRequest* >(object);
  (void)_this;
}
void PatchConceptsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatchConceptsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PatchConceptsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchConceptsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concepts_.Clear();
  action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchConceptsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Concept concepts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concepts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchConceptsRequest.action"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchConceptsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchConceptsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Concept concepts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_concepts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_concepts(i), target, stream);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchConceptsRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchConceptsRequest)
  return target;
}

size_t PatchConceptsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchConceptsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Concept concepts = 2;
  total_size += 1UL * this->_internal_concepts_size();
  for (const auto& msg : this->concepts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchConceptsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PatchConceptsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchConceptsRequest::GetClassData() const { return &_class_data_; }

void PatchConceptsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PatchConceptsRequest *>(to)->MergeFrom(
      static_cast<const PatchConceptsRequest &>(from));
}


void PatchConceptsRequest::MergeFrom(const PatchConceptsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchConceptsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  concepts_.MergeFrom(from.concepts_);
  if (!from._internal_action().empty()) {
    _internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchConceptsRequest::CopyFrom(const PatchConceptsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchConceptsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchConceptsRequest::IsInitialized() const {
  return true;
}

void PatchConceptsRequest::InternalSwap(PatchConceptsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  concepts_.InternalSwap(&other->concepts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_, lhs_arena,
      &other->action_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchConceptsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[36]);
}

// ===================================================================

class GetConceptCountsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetConceptCountsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetConceptCountsRequest::_Internal::user_app_id(const GetConceptCountsRequest* msg) {
  return *msg->user_app_id_;
}
void GetConceptCountsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetConceptCountsRequest::GetConceptCountsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetConceptCountsRequest)
}
GetConceptCountsRequest::GetConceptCountsRequest(const GetConceptCountsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetConceptCountsRequest)
}

inline void GetConceptCountsRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

GetConceptCountsRequest::~GetConceptCountsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetConceptCountsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetConceptCountsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetConceptCountsRequest::ArenaDtor(void* object) {
  GetConceptCountsRequest* _this = reinterpret_cast< GetConceptCountsRequest* >(object);
  (void)_this;
}
void GetConceptCountsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetConceptCountsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetConceptCountsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetConceptCountsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetConceptCountsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetConceptCountsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetConceptCountsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetConceptCountsRequest)
  return target;
}

size_t GetConceptCountsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetConceptCountsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetConceptCountsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetConceptCountsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetConceptCountsRequest::GetClassData() const { return &_class_data_; }

void GetConceptCountsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetConceptCountsRequest *>(to)->MergeFrom(
      static_cast<const GetConceptCountsRequest &>(from));
}


void GetConceptCountsRequest::MergeFrom(const GetConceptCountsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetConceptCountsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetConceptCountsRequest::CopyFrom(const GetConceptCountsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetConceptCountsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConceptCountsRequest::IsInitialized() const {
  return true;
}

void GetConceptCountsRequest::InternalSwap(GetConceptCountsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetConceptCountsRequest, per_page_)
      + sizeof(GetConceptCountsRequest::per_page_)
      - PROTOBUF_FIELD_OFFSET(GetConceptCountsRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConceptCountsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[37]);
}

// ===================================================================

class SingleConceptResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleConceptResponse* msg);
  static const ::clarifai::api::Concept& concept(const SingleConceptResponse* msg);
};

const ::clarifai::api::status::Status&
SingleConceptResponse::_Internal::status(const SingleConceptResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::Concept&
SingleConceptResponse::_Internal::concept(const SingleConceptResponse* msg) {
  return *msg->concept_;
}
void SingleConceptResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleConceptResponse::clear_concept() {
  if (GetArenaForAllocation() == nullptr && concept_ != nullptr) {
    delete concept_;
  }
  concept_ = nullptr;
}
SingleConceptResponse::SingleConceptResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleConceptResponse)
}
SingleConceptResponse::SingleConceptResponse(const SingleConceptResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_concept()) {
    concept_ = new ::clarifai::api::Concept(*from.concept_);
  } else {
    concept_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleConceptResponse)
}

inline void SingleConceptResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&concept_) -
    reinterpret_cast<char*>(&status_)) + sizeof(concept_));
}

SingleConceptResponse::~SingleConceptResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleConceptResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SingleConceptResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete concept_;
}

void SingleConceptResponse::ArenaDtor(void* object) {
  SingleConceptResponse* _this = reinterpret_cast< SingleConceptResponse* >(object);
  (void)_this;
}
void SingleConceptResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleConceptResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleConceptResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleConceptResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && concept_ != nullptr) {
    delete concept_;
  }
  concept_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleConceptResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Concept concept = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_concept(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleConceptResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleConceptResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.Concept concept = 2;
  if (this->_internal_has_concept()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::concept(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleConceptResponse)
  return target;
}

size_t SingleConceptResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleConceptResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.Concept concept = 2;
  if (this->_internal_has_concept()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *concept_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleConceptResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SingleConceptResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleConceptResponse::GetClassData() const { return &_class_data_; }

void SingleConceptResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SingleConceptResponse *>(to)->MergeFrom(
      static_cast<const SingleConceptResponse &>(from));
}


void SingleConceptResponse::MergeFrom(const SingleConceptResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleConceptResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_concept()) {
    _internal_mutable_concept()->::clarifai::api::Concept::MergeFrom(from._internal_concept());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleConceptResponse::CopyFrom(const SingleConceptResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleConceptResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleConceptResponse::IsInitialized() const {
  return true;
}

void SingleConceptResponse::InternalSwap(SingleConceptResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleConceptResponse, concept_)
      + sizeof(SingleConceptResponse::concept_)
      - PROTOBUF_FIELD_OFFSET(SingleConceptResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleConceptResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[38]);
}

// ===================================================================

class MultiConceptResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiConceptResponse* msg);
};

const ::clarifai::api::status::Status&
MultiConceptResponse::_Internal::status(const MultiConceptResponse* msg) {
  return *msg->status_;
}
void MultiConceptResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiConceptResponse::clear_concepts() {
  concepts_.Clear();
}
MultiConceptResponse::MultiConceptResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  concepts_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiConceptResponse)
}
MultiConceptResponse::MultiConceptResponse(const MultiConceptResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      concepts_(from.concepts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiConceptResponse)
}

inline void MultiConceptResponse::SharedCtor() {
status_ = nullptr;
}

MultiConceptResponse::~MultiConceptResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiConceptResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiConceptResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiConceptResponse::ArenaDtor(void* object) {
  MultiConceptResponse* _this = reinterpret_cast< MultiConceptResponse* >(object);
  (void)_this;
}
void MultiConceptResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiConceptResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiConceptResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiConceptResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concepts_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiConceptResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Concept concepts = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concepts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiConceptResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiConceptResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.Concept concepts = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_concepts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_concepts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiConceptResponse)
  return target;
}

size_t MultiConceptResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiConceptResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Concept concepts = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_concepts_size();
  for (const auto& msg : this->concepts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiConceptResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiConceptResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiConceptResponse::GetClassData() const { return &_class_data_; }

void MultiConceptResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiConceptResponse *>(to)->MergeFrom(
      static_cast<const MultiConceptResponse &>(from));
}


void MultiConceptResponse::MergeFrom(const MultiConceptResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiConceptResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  concepts_.MergeFrom(from.concepts_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiConceptResponse::CopyFrom(const MultiConceptResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiConceptResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiConceptResponse::IsInitialized() const {
  return true;
}

void MultiConceptResponse::InternalSwap(MultiConceptResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  concepts_.InternalSwap(&other->concepts_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiConceptResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[39]);
}

// ===================================================================

class MultiConceptCountResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiConceptCountResponse* msg);
};

const ::clarifai::api::status::Status&
MultiConceptCountResponse::_Internal::status(const MultiConceptCountResponse* msg) {
  return *msg->status_;
}
void MultiConceptCountResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiConceptCountResponse::clear_concept_counts() {
  concept_counts_.Clear();
}
MultiConceptCountResponse::MultiConceptCountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  concept_counts_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiConceptCountResponse)
}
MultiConceptCountResponse::MultiConceptCountResponse(const MultiConceptCountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      concept_counts_(from.concept_counts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiConceptCountResponse)
}

inline void MultiConceptCountResponse::SharedCtor() {
status_ = nullptr;
}

MultiConceptCountResponse::~MultiConceptCountResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiConceptCountResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiConceptCountResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiConceptCountResponse::ArenaDtor(void* object) {
  MultiConceptCountResponse* _this = reinterpret_cast< MultiConceptCountResponse* >(object);
  (void)_this;
}
void MultiConceptCountResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiConceptCountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiConceptCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiConceptCountResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_counts_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiConceptCountResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ConceptCount concept_counts = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concept_counts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiConceptCountResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiConceptCountResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.ConceptCount concept_counts = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_concept_counts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_concept_counts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiConceptCountResponse)
  return target;
}

size_t MultiConceptCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiConceptCountResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ConceptCount concept_counts = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_concept_counts_size();
  for (const auto& msg : this->concept_counts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiConceptCountResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiConceptCountResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiConceptCountResponse::GetClassData() const { return &_class_data_; }

void MultiConceptCountResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiConceptCountResponse *>(to)->MergeFrom(
      static_cast<const MultiConceptCountResponse &>(from));
}


void MultiConceptCountResponse::MergeFrom(const MultiConceptCountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiConceptCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  concept_counts_.MergeFrom(from.concept_counts_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiConceptCountResponse::CopyFrom(const MultiConceptCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiConceptCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiConceptCountResponse::IsInitialized() const {
  return true;
}

void MultiConceptCountResponse::InternalSwap(MultiConceptCountResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  concept_counts_.InternalSwap(&other->concept_counts_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiConceptCountResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[40]);
}

// ===================================================================

class ListConceptRelationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListConceptRelationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListConceptRelationsRequest::_Internal::user_app_id(const ListConceptRelationsRequest* msg) {
  return *msg->user_app_id_;
}
void ListConceptRelationsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListConceptRelationsRequest::ListConceptRelationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListConceptRelationsRequest)
}
ListConceptRelationsRequest::ListConceptRelationsRequest(const ListConceptRelationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    concept_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_concept_id().empty()) {
    concept_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_concept_id(), 
      GetArenaForAllocation());
  }
  predicate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    predicate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_predicate().empty()) {
    predicate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_predicate(), 
      GetArenaForAllocation());
  }
  knowledge_graph_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    knowledge_graph_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_knowledge_graph_id().empty()) {
    knowledge_graph_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_knowledge_graph_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListConceptRelationsRequest)
}

inline void ListConceptRelationsRequest::SharedCtor() {
concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  concept_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
predicate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  predicate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
knowledge_graph_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  knowledge_graph_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListConceptRelationsRequest::~ListConceptRelationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListConceptRelationsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListConceptRelationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  concept_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  predicate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  knowledge_graph_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListConceptRelationsRequest::ArenaDtor(void* object) {
  ListConceptRelationsRequest* _this = reinterpret_cast< ListConceptRelationsRequest* >(object);
  (void)_this;
}
void ListConceptRelationsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListConceptRelationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListConceptRelationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListConceptRelationsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_id_.ClearToEmpty();
  predicate_.ClearToEmpty();
  knowledge_graph_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListConceptRelationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string concept_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_concept_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListConceptRelationsRequest.concept_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string predicate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_predicate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListConceptRelationsRequest.predicate"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string knowledge_graph_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_knowledge_graph_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListConceptRelationsRequest.knowledge_graph_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListConceptRelationsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListConceptRelationsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string concept_id = 2;
  if (!this->_internal_concept_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concept_id().data(), static_cast<int>(this->_internal_concept_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListConceptRelationsRequest.concept_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_concept_id(), target);
  }

  // string predicate = 3;
  if (!this->_internal_predicate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_predicate().data(), static_cast<int>(this->_internal_predicate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListConceptRelationsRequest.predicate");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_predicate(), target);
  }

  // string knowledge_graph_id = 4;
  if (!this->_internal_knowledge_graph_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_knowledge_graph_id().data(), static_cast<int>(this->_internal_knowledge_graph_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListConceptRelationsRequest.knowledge_graph_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_knowledge_graph_id(), target);
  }

  // uint32 page = 5;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_page(), target);
  }

  // uint32 per_page = 6;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListConceptRelationsRequest)
  return target;
}

size_t ListConceptRelationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListConceptRelationsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string concept_id = 2;
  if (!this->_internal_concept_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concept_id());
  }

  // string predicate = 3;
  if (!this->_internal_predicate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_predicate());
  }

  // string knowledge_graph_id = 4;
  if (!this->_internal_knowledge_graph_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_knowledge_graph_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 5;
  if (this->_internal_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 6;
  if (this->_internal_per_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListConceptRelationsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListConceptRelationsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListConceptRelationsRequest::GetClassData() const { return &_class_data_; }

void ListConceptRelationsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListConceptRelationsRequest *>(to)->MergeFrom(
      static_cast<const ListConceptRelationsRequest &>(from));
}


void ListConceptRelationsRequest::MergeFrom(const ListConceptRelationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListConceptRelationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_concept_id().empty()) {
    _internal_set_concept_id(from._internal_concept_id());
  }
  if (!from._internal_predicate().empty()) {
    _internal_set_predicate(from._internal_predicate());
  }
  if (!from._internal_knowledge_graph_id().empty()) {
    _internal_set_knowledge_graph_id(from._internal_knowledge_graph_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListConceptRelationsRequest::CopyFrom(const ListConceptRelationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListConceptRelationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListConceptRelationsRequest::IsInitialized() const {
  return true;
}

void ListConceptRelationsRequest::InternalSwap(ListConceptRelationsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &concept_id_, lhs_arena,
      &other->concept_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &predicate_, lhs_arena,
      &other->predicate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &knowledge_graph_id_, lhs_arena,
      &other->knowledge_graph_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListConceptRelationsRequest, per_page_)
      + sizeof(ListConceptRelationsRequest::per_page_)
      - PROTOBUF_FIELD_OFFSET(ListConceptRelationsRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListConceptRelationsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[41]);
}

// ===================================================================

class PostConceptRelationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostConceptRelationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostConceptRelationsRequest::_Internal::user_app_id(const PostConceptRelationsRequest* msg) {
  return *msg->user_app_id_;
}
void PostConceptRelationsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostConceptRelationsRequest::clear_concept_relations() {
  concept_relations_.Clear();
}
PostConceptRelationsRequest::PostConceptRelationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  concept_relations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostConceptRelationsRequest)
}
PostConceptRelationsRequest::PostConceptRelationsRequest(const PostConceptRelationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      concept_relations_(from.concept_relations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    concept_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_concept_id().empty()) {
    concept_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_concept_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostConceptRelationsRequest)
}

inline void PostConceptRelationsRequest::SharedCtor() {
concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  concept_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

PostConceptRelationsRequest::~PostConceptRelationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostConceptRelationsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostConceptRelationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  concept_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostConceptRelationsRequest::ArenaDtor(void* object) {
  PostConceptRelationsRequest* _this = reinterpret_cast< PostConceptRelationsRequest* >(object);
  (void)_this;
}
void PostConceptRelationsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostConceptRelationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostConceptRelationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostConceptRelationsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_relations_.Clear();
  concept_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostConceptRelationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string concept_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_concept_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostConceptRelationsRequest.concept_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ConceptRelation concept_relations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concept_relations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostConceptRelationsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostConceptRelationsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string concept_id = 2;
  if (!this->_internal_concept_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concept_id().data(), static_cast<int>(this->_internal_concept_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostConceptRelationsRequest.concept_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_concept_id(), target);
  }

  // repeated .clarifai.api.ConceptRelation concept_relations = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_concept_relations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_concept_relations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostConceptRelationsRequest)
  return target;
}

size_t PostConceptRelationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostConceptRelationsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ConceptRelation concept_relations = 3;
  total_size += 1UL * this->_internal_concept_relations_size();
  for (const auto& msg : this->concept_relations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string concept_id = 2;
  if (!this->_internal_concept_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concept_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostConceptRelationsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostConceptRelationsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostConceptRelationsRequest::GetClassData() const { return &_class_data_; }

void PostConceptRelationsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostConceptRelationsRequest *>(to)->MergeFrom(
      static_cast<const PostConceptRelationsRequest &>(from));
}


void PostConceptRelationsRequest::MergeFrom(const PostConceptRelationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostConceptRelationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  concept_relations_.MergeFrom(from.concept_relations_);
  if (!from._internal_concept_id().empty()) {
    _internal_set_concept_id(from._internal_concept_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostConceptRelationsRequest::CopyFrom(const PostConceptRelationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostConceptRelationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostConceptRelationsRequest::IsInitialized() const {
  return true;
}

void PostConceptRelationsRequest::InternalSwap(PostConceptRelationsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  concept_relations_.InternalSwap(&other->concept_relations_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &concept_id_, lhs_arena,
      &other->concept_id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostConceptRelationsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[42]);
}

// ===================================================================

class DeleteConceptRelationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteConceptRelationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteConceptRelationsRequest::_Internal::user_app_id(const DeleteConceptRelationsRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteConceptRelationsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteConceptRelationsRequest::DeleteConceptRelationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteConceptRelationsRequest)
}
DeleteConceptRelationsRequest::DeleteConceptRelationsRequest(const DeleteConceptRelationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    concept_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_concept_id().empty()) {
    concept_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_concept_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteConceptRelationsRequest)
}

inline void DeleteConceptRelationsRequest::SharedCtor() {
concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  concept_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

DeleteConceptRelationsRequest::~DeleteConceptRelationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteConceptRelationsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteConceptRelationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  concept_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteConceptRelationsRequest::ArenaDtor(void* object) {
  DeleteConceptRelationsRequest* _this = reinterpret_cast< DeleteConceptRelationsRequest* >(object);
  (void)_this;
}
void DeleteConceptRelationsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteConceptRelationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteConceptRelationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteConceptRelationsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  concept_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteConceptRelationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string concept_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_concept_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteConceptRelationsRequest.concept_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteConceptRelationsRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteConceptRelationsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteConceptRelationsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string concept_id = 2;
  if (!this->_internal_concept_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concept_id().data(), static_cast<int>(this->_internal_concept_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteConceptRelationsRequest.concept_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_concept_id(), target);
  }

  // repeated string ids = 3;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteConceptRelationsRequest.ids");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteConceptRelationsRequest)
  return target;
}

size_t DeleteConceptRelationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteConceptRelationsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // string concept_id = 2;
  if (!this->_internal_concept_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concept_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteConceptRelationsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteConceptRelationsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteConceptRelationsRequest::GetClassData() const { return &_class_data_; }

void DeleteConceptRelationsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteConceptRelationsRequest *>(to)->MergeFrom(
      static_cast<const DeleteConceptRelationsRequest &>(from));
}


void DeleteConceptRelationsRequest::MergeFrom(const DeleteConceptRelationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteConceptRelationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (!from._internal_concept_id().empty()) {
    _internal_set_concept_id(from._internal_concept_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteConceptRelationsRequest::CopyFrom(const DeleteConceptRelationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteConceptRelationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteConceptRelationsRequest::IsInitialized() const {
  return true;
}

void DeleteConceptRelationsRequest::InternalSwap(DeleteConceptRelationsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &concept_id_, lhs_arena,
      &other->concept_id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteConceptRelationsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[43]);
}

// ===================================================================

class ListKnowledgeGraphsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListKnowledgeGraphsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListKnowledgeGraphsRequest::_Internal::user_app_id(const ListKnowledgeGraphsRequest* msg) {
  return *msg->user_app_id_;
}
void ListKnowledgeGraphsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListKnowledgeGraphsRequest::ListKnowledgeGraphsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListKnowledgeGraphsRequest)
}
ListKnowledgeGraphsRequest::ListKnowledgeGraphsRequest(const ListKnowledgeGraphsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListKnowledgeGraphsRequest)
}

inline void ListKnowledgeGraphsRequest::SharedCtor() {
user_app_id_ = nullptr;
}

ListKnowledgeGraphsRequest::~ListKnowledgeGraphsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListKnowledgeGraphsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListKnowledgeGraphsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListKnowledgeGraphsRequest::ArenaDtor(void* object) {
  ListKnowledgeGraphsRequest* _this = reinterpret_cast< ListKnowledgeGraphsRequest* >(object);
  (void)_this;
}
void ListKnowledgeGraphsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListKnowledgeGraphsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListKnowledgeGraphsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListKnowledgeGraphsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListKnowledgeGraphsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListKnowledgeGraphsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListKnowledgeGraphsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListKnowledgeGraphsRequest)
  return target;
}

size_t ListKnowledgeGraphsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListKnowledgeGraphsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListKnowledgeGraphsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListKnowledgeGraphsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListKnowledgeGraphsRequest::GetClassData() const { return &_class_data_; }

void ListKnowledgeGraphsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListKnowledgeGraphsRequest *>(to)->MergeFrom(
      static_cast<const ListKnowledgeGraphsRequest &>(from));
}


void ListKnowledgeGraphsRequest::MergeFrom(const ListKnowledgeGraphsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListKnowledgeGraphsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListKnowledgeGraphsRequest::CopyFrom(const ListKnowledgeGraphsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListKnowledgeGraphsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListKnowledgeGraphsRequest::IsInitialized() const {
  return true;
}

void ListKnowledgeGraphsRequest::InternalSwap(ListKnowledgeGraphsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListKnowledgeGraphsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[44]);
}

// ===================================================================

class PostKnowledgeGraphsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostKnowledgeGraphsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostKnowledgeGraphsRequest::_Internal::user_app_id(const PostKnowledgeGraphsRequest* msg) {
  return *msg->user_app_id_;
}
void PostKnowledgeGraphsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostKnowledgeGraphsRequest::clear_knowledge_graphs() {
  knowledge_graphs_.Clear();
}
PostKnowledgeGraphsRequest::PostKnowledgeGraphsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  knowledge_graphs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostKnowledgeGraphsRequest)
}
PostKnowledgeGraphsRequest::PostKnowledgeGraphsRequest(const PostKnowledgeGraphsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      knowledge_graphs_(from.knowledge_graphs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostKnowledgeGraphsRequest)
}

inline void PostKnowledgeGraphsRequest::SharedCtor() {
user_app_id_ = nullptr;
}

PostKnowledgeGraphsRequest::~PostKnowledgeGraphsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostKnowledgeGraphsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostKnowledgeGraphsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostKnowledgeGraphsRequest::ArenaDtor(void* object) {
  PostKnowledgeGraphsRequest* _this = reinterpret_cast< PostKnowledgeGraphsRequest* >(object);
  (void)_this;
}
void PostKnowledgeGraphsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostKnowledgeGraphsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostKnowledgeGraphsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostKnowledgeGraphsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  knowledge_graphs_.Clear();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostKnowledgeGraphsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.KnowledgeGraph knowledge_graphs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_knowledge_graphs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostKnowledgeGraphsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostKnowledgeGraphsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.KnowledgeGraph knowledge_graphs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_knowledge_graphs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_knowledge_graphs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostKnowledgeGraphsRequest)
  return target;
}

size_t PostKnowledgeGraphsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostKnowledgeGraphsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.KnowledgeGraph knowledge_graphs = 2;
  total_size += 1UL * this->_internal_knowledge_graphs_size();
  for (const auto& msg : this->knowledge_graphs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostKnowledgeGraphsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostKnowledgeGraphsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostKnowledgeGraphsRequest::GetClassData() const { return &_class_data_; }

void PostKnowledgeGraphsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostKnowledgeGraphsRequest *>(to)->MergeFrom(
      static_cast<const PostKnowledgeGraphsRequest &>(from));
}


void PostKnowledgeGraphsRequest::MergeFrom(const PostKnowledgeGraphsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostKnowledgeGraphsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  knowledge_graphs_.MergeFrom(from.knowledge_graphs_);
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostKnowledgeGraphsRequest::CopyFrom(const PostKnowledgeGraphsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostKnowledgeGraphsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostKnowledgeGraphsRequest::IsInitialized() const {
  return true;
}

void PostKnowledgeGraphsRequest::InternalSwap(PostKnowledgeGraphsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  knowledge_graphs_.InternalSwap(&other->knowledge_graphs_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostKnowledgeGraphsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[45]);
}

// ===================================================================

class PostConceptMappingJobsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostConceptMappingJobsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostConceptMappingJobsRequest::_Internal::user_app_id(const PostConceptMappingJobsRequest* msg) {
  return *msg->user_app_id_;
}
void PostConceptMappingJobsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostConceptMappingJobsRequest::clear_concept_mapping_jobs() {
  concept_mapping_jobs_.Clear();
}
PostConceptMappingJobsRequest::PostConceptMappingJobsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  concept_mapping_jobs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostConceptMappingJobsRequest)
}
PostConceptMappingJobsRequest::PostConceptMappingJobsRequest(const PostConceptMappingJobsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      concept_mapping_jobs_(from.concept_mapping_jobs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostConceptMappingJobsRequest)
}

inline void PostConceptMappingJobsRequest::SharedCtor() {
user_app_id_ = nullptr;
}

PostConceptMappingJobsRequest::~PostConceptMappingJobsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostConceptMappingJobsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostConceptMappingJobsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostConceptMappingJobsRequest::ArenaDtor(void* object) {
  PostConceptMappingJobsRequest* _this = reinterpret_cast< PostConceptMappingJobsRequest* >(object);
  (void)_this;
}
void PostConceptMappingJobsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostConceptMappingJobsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostConceptMappingJobsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostConceptMappingJobsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_mapping_jobs_.Clear();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostConceptMappingJobsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ConceptMappingJob concept_mapping_jobs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concept_mapping_jobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostConceptMappingJobsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostConceptMappingJobsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.ConceptMappingJob concept_mapping_jobs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_concept_mapping_jobs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_concept_mapping_jobs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostConceptMappingJobsRequest)
  return target;
}

size_t PostConceptMappingJobsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostConceptMappingJobsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ConceptMappingJob concept_mapping_jobs = 2;
  total_size += 1UL * this->_internal_concept_mapping_jobs_size();
  for (const auto& msg : this->concept_mapping_jobs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostConceptMappingJobsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostConceptMappingJobsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostConceptMappingJobsRequest::GetClassData() const { return &_class_data_; }

void PostConceptMappingJobsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostConceptMappingJobsRequest *>(to)->MergeFrom(
      static_cast<const PostConceptMappingJobsRequest &>(from));
}


void PostConceptMappingJobsRequest::MergeFrom(const PostConceptMappingJobsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostConceptMappingJobsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  concept_mapping_jobs_.MergeFrom(from.concept_mapping_jobs_);
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostConceptMappingJobsRequest::CopyFrom(const PostConceptMappingJobsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostConceptMappingJobsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostConceptMappingJobsRequest::IsInitialized() const {
  return true;
}

void PostConceptMappingJobsRequest::InternalSwap(PostConceptMappingJobsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  concept_mapping_jobs_.InternalSwap(&other->concept_mapping_jobs_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostConceptMappingJobsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[46]);
}

// ===================================================================

class MultiConceptRelationResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiConceptRelationResponse* msg);
};

const ::clarifai::api::status::Status&
MultiConceptRelationResponse::_Internal::status(const MultiConceptRelationResponse* msg) {
  return *msg->status_;
}
void MultiConceptRelationResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiConceptRelationResponse::clear_concept_relations() {
  concept_relations_.Clear();
}
MultiConceptRelationResponse::MultiConceptRelationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  concept_relations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiConceptRelationResponse)
}
MultiConceptRelationResponse::MultiConceptRelationResponse(const MultiConceptRelationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      concept_relations_(from.concept_relations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiConceptRelationResponse)
}

inline void MultiConceptRelationResponse::SharedCtor() {
status_ = nullptr;
}

MultiConceptRelationResponse::~MultiConceptRelationResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiConceptRelationResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiConceptRelationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiConceptRelationResponse::ArenaDtor(void* object) {
  MultiConceptRelationResponse* _this = reinterpret_cast< MultiConceptRelationResponse* >(object);
  (void)_this;
}
void MultiConceptRelationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiConceptRelationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiConceptRelationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiConceptRelationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_relations_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiConceptRelationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ConceptRelation concept_relations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concept_relations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiConceptRelationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiConceptRelationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.ConceptRelation concept_relations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_concept_relations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_concept_relations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiConceptRelationResponse)
  return target;
}

size_t MultiConceptRelationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiConceptRelationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ConceptRelation concept_relations = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_concept_relations_size();
  for (const auto& msg : this->concept_relations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiConceptRelationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiConceptRelationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiConceptRelationResponse::GetClassData() const { return &_class_data_; }

void MultiConceptRelationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiConceptRelationResponse *>(to)->MergeFrom(
      static_cast<const MultiConceptRelationResponse &>(from));
}


void MultiConceptRelationResponse::MergeFrom(const MultiConceptRelationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiConceptRelationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  concept_relations_.MergeFrom(from.concept_relations_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiConceptRelationResponse::CopyFrom(const MultiConceptRelationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiConceptRelationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiConceptRelationResponse::IsInitialized() const {
  return true;
}

void MultiConceptRelationResponse::InternalSwap(MultiConceptRelationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  concept_relations_.InternalSwap(&other->concept_relations_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiConceptRelationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[47]);
}

// ===================================================================

class MultiKnowledgeGraphResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiKnowledgeGraphResponse* msg);
};

const ::clarifai::api::status::Status&
MultiKnowledgeGraphResponse::_Internal::status(const MultiKnowledgeGraphResponse* msg) {
  return *msg->status_;
}
void MultiKnowledgeGraphResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiKnowledgeGraphResponse::clear_knowledge_graphs() {
  knowledge_graphs_.Clear();
}
MultiKnowledgeGraphResponse::MultiKnowledgeGraphResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  knowledge_graphs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiKnowledgeGraphResponse)
}
MultiKnowledgeGraphResponse::MultiKnowledgeGraphResponse(const MultiKnowledgeGraphResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      knowledge_graphs_(from.knowledge_graphs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiKnowledgeGraphResponse)
}

inline void MultiKnowledgeGraphResponse::SharedCtor() {
status_ = nullptr;
}

MultiKnowledgeGraphResponse::~MultiKnowledgeGraphResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiKnowledgeGraphResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiKnowledgeGraphResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiKnowledgeGraphResponse::ArenaDtor(void* object) {
  MultiKnowledgeGraphResponse* _this = reinterpret_cast< MultiKnowledgeGraphResponse* >(object);
  (void)_this;
}
void MultiKnowledgeGraphResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiKnowledgeGraphResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiKnowledgeGraphResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiKnowledgeGraphResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  knowledge_graphs_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiKnowledgeGraphResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.KnowledgeGraph knowledge_graphs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_knowledge_graphs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiKnowledgeGraphResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiKnowledgeGraphResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.KnowledgeGraph knowledge_graphs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_knowledge_graphs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_knowledge_graphs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiKnowledgeGraphResponse)
  return target;
}

size_t MultiKnowledgeGraphResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiKnowledgeGraphResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.KnowledgeGraph knowledge_graphs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_knowledge_graphs_size();
  for (const auto& msg : this->knowledge_graphs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiKnowledgeGraphResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiKnowledgeGraphResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiKnowledgeGraphResponse::GetClassData() const { return &_class_data_; }

void MultiKnowledgeGraphResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiKnowledgeGraphResponse *>(to)->MergeFrom(
      static_cast<const MultiKnowledgeGraphResponse &>(from));
}


void MultiKnowledgeGraphResponse::MergeFrom(const MultiKnowledgeGraphResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiKnowledgeGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  knowledge_graphs_.MergeFrom(from.knowledge_graphs_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiKnowledgeGraphResponse::CopyFrom(const MultiKnowledgeGraphResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiKnowledgeGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiKnowledgeGraphResponse::IsInitialized() const {
  return true;
}

void MultiKnowledgeGraphResponse::InternalSwap(MultiKnowledgeGraphResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  knowledge_graphs_.InternalSwap(&other->knowledge_graphs_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiKnowledgeGraphResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[48]);
}

// ===================================================================

class MultiConceptMappingJobResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiConceptMappingJobResponse* msg);
};

const ::clarifai::api::status::Status&
MultiConceptMappingJobResponse::_Internal::status(const MultiConceptMappingJobResponse* msg) {
  return *msg->status_;
}
void MultiConceptMappingJobResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
MultiConceptMappingJobResponse::MultiConceptMappingJobResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiConceptMappingJobResponse)
}
MultiConceptMappingJobResponse::MultiConceptMappingJobResponse(const MultiConceptMappingJobResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiConceptMappingJobResponse)
}

inline void MultiConceptMappingJobResponse::SharedCtor() {
status_ = nullptr;
}

MultiConceptMappingJobResponse::~MultiConceptMappingJobResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiConceptMappingJobResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiConceptMappingJobResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiConceptMappingJobResponse::ArenaDtor(void* object) {
  MultiConceptMappingJobResponse* _this = reinterpret_cast< MultiConceptMappingJobResponse* >(object);
  (void)_this;
}
void MultiConceptMappingJobResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiConceptMappingJobResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiConceptMappingJobResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiConceptMappingJobResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiConceptMappingJobResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.MultiConceptMappingJobResponse.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiConceptMappingJobResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiConceptMappingJobResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.MultiConceptMappingJobResponse.ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiConceptMappingJobResponse)
  return target;
}

size_t MultiConceptMappingJobResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiConceptMappingJobResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiConceptMappingJobResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiConceptMappingJobResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiConceptMappingJobResponse::GetClassData() const { return &_class_data_; }

void MultiConceptMappingJobResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiConceptMappingJobResponse *>(to)->MergeFrom(
      static_cast<const MultiConceptMappingJobResponse &>(from));
}


void MultiConceptMappingJobResponse::MergeFrom(const MultiConceptMappingJobResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiConceptMappingJobResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiConceptMappingJobResponse::CopyFrom(const MultiConceptMappingJobResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiConceptMappingJobResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiConceptMappingJobResponse::IsInitialized() const {
  return true;
}

void MultiConceptMappingJobResponse::InternalSwap(MultiConceptMappingJobResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiConceptMappingJobResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[49]);
}

// ===================================================================

class GetConceptLanguageRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetConceptLanguageRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetConceptLanguageRequest::_Internal::user_app_id(const GetConceptLanguageRequest* msg) {
  return *msg->user_app_id_;
}
void GetConceptLanguageRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetConceptLanguageRequest::GetConceptLanguageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetConceptLanguageRequest)
}
GetConceptLanguageRequest::GetConceptLanguageRequest(const GetConceptLanguageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    concept_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_concept_id().empty()) {
    concept_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_concept_id(), 
      GetArenaForAllocation());
  }
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_language().empty()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetConceptLanguageRequest)
}

inline void GetConceptLanguageRequest::SharedCtor() {
concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  concept_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

GetConceptLanguageRequest::~GetConceptLanguageRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetConceptLanguageRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetConceptLanguageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  concept_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetConceptLanguageRequest::ArenaDtor(void* object) {
  GetConceptLanguageRequest* _this = reinterpret_cast< GetConceptLanguageRequest* >(object);
  (void)_this;
}
void GetConceptLanguageRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetConceptLanguageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetConceptLanguageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetConceptLanguageRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_id_.ClearToEmpty();
  language_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetConceptLanguageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string concept_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_concept_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetConceptLanguageRequest.concept_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string language = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetConceptLanguageRequest.language"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetConceptLanguageRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetConceptLanguageRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string concept_id = 2;
  if (!this->_internal_concept_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concept_id().data(), static_cast<int>(this->_internal_concept_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetConceptLanguageRequest.concept_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_concept_id(), target);
  }

  // string language = 3;
  if (!this->_internal_language().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetConceptLanguageRequest.language");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetConceptLanguageRequest)
  return target;
}

size_t GetConceptLanguageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetConceptLanguageRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string concept_id = 2;
  if (!this->_internal_concept_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concept_id());
  }

  // string language = 3;
  if (!this->_internal_language().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetConceptLanguageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetConceptLanguageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetConceptLanguageRequest::GetClassData() const { return &_class_data_; }

void GetConceptLanguageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetConceptLanguageRequest *>(to)->MergeFrom(
      static_cast<const GetConceptLanguageRequest &>(from));
}


void GetConceptLanguageRequest::MergeFrom(const GetConceptLanguageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetConceptLanguageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_concept_id().empty()) {
    _internal_set_concept_id(from._internal_concept_id());
  }
  if (!from._internal_language().empty()) {
    _internal_set_language(from._internal_language());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetConceptLanguageRequest::CopyFrom(const GetConceptLanguageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetConceptLanguageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConceptLanguageRequest::IsInitialized() const {
  return true;
}

void GetConceptLanguageRequest::InternalSwap(GetConceptLanguageRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &concept_id_, lhs_arena,
      &other->concept_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &language_, lhs_arena,
      &other->language_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConceptLanguageRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[50]);
}

// ===================================================================

class ListConceptLanguagesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListConceptLanguagesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListConceptLanguagesRequest::_Internal::user_app_id(const ListConceptLanguagesRequest* msg) {
  return *msg->user_app_id_;
}
void ListConceptLanguagesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListConceptLanguagesRequest::ListConceptLanguagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListConceptLanguagesRequest)
}
ListConceptLanguagesRequest::ListConceptLanguagesRequest(const ListConceptLanguagesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    concept_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_concept_id().empty()) {
    concept_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_concept_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListConceptLanguagesRequest)
}

inline void ListConceptLanguagesRequest::SharedCtor() {
concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  concept_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListConceptLanguagesRequest::~ListConceptLanguagesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListConceptLanguagesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListConceptLanguagesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  concept_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListConceptLanguagesRequest::ArenaDtor(void* object) {
  ListConceptLanguagesRequest* _this = reinterpret_cast< ListConceptLanguagesRequest* >(object);
  (void)_this;
}
void ListConceptLanguagesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListConceptLanguagesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListConceptLanguagesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListConceptLanguagesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListConceptLanguagesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string concept_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_concept_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListConceptLanguagesRequest.concept_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListConceptLanguagesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListConceptLanguagesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string concept_id = 2;
  if (!this->_internal_concept_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concept_id().data(), static_cast<int>(this->_internal_concept_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListConceptLanguagesRequest.concept_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_concept_id(), target);
  }

  // uint32 page = 3;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_page(), target);
  }

  // uint32 per_page = 4;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListConceptLanguagesRequest)
  return target;
}

size_t ListConceptLanguagesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListConceptLanguagesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string concept_id = 2;
  if (!this->_internal_concept_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concept_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 3;
  if (this->_internal_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 4;
  if (this->_internal_per_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListConceptLanguagesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListConceptLanguagesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListConceptLanguagesRequest::GetClassData() const { return &_class_data_; }

void ListConceptLanguagesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListConceptLanguagesRequest *>(to)->MergeFrom(
      static_cast<const ListConceptLanguagesRequest &>(from));
}


void ListConceptLanguagesRequest::MergeFrom(const ListConceptLanguagesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListConceptLanguagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_concept_id().empty()) {
    _internal_set_concept_id(from._internal_concept_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListConceptLanguagesRequest::CopyFrom(const ListConceptLanguagesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListConceptLanguagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListConceptLanguagesRequest::IsInitialized() const {
  return true;
}

void ListConceptLanguagesRequest::InternalSwap(ListConceptLanguagesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &concept_id_, lhs_arena,
      &other->concept_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListConceptLanguagesRequest, per_page_)
      + sizeof(ListConceptLanguagesRequest::per_page_)
      - PROTOBUF_FIELD_OFFSET(ListConceptLanguagesRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListConceptLanguagesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[51]);
}

// ===================================================================

class PatchConceptLanguagesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchConceptLanguagesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchConceptLanguagesRequest::_Internal::user_app_id(const PatchConceptLanguagesRequest* msg) {
  return *msg->user_app_id_;
}
void PatchConceptLanguagesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchConceptLanguagesRequest::clear_concept_languages() {
  concept_languages_.Clear();
}
PatchConceptLanguagesRequest::PatchConceptLanguagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  concept_languages_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchConceptLanguagesRequest)
}
PatchConceptLanguagesRequest::PatchConceptLanguagesRequest(const PatchConceptLanguagesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      concept_languages_(from.concept_languages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    concept_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_concept_id().empty()) {
    concept_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_concept_id(), 
      GetArenaForAllocation());
  }
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchConceptLanguagesRequest)
}

inline void PatchConceptLanguagesRequest::SharedCtor() {
concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  concept_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

PatchConceptLanguagesRequest::~PatchConceptLanguagesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchConceptLanguagesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PatchConceptLanguagesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  concept_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchConceptLanguagesRequest::ArenaDtor(void* object) {
  PatchConceptLanguagesRequest* _this = reinterpret_cast< PatchConceptLanguagesRequest* >(object);
  (void)_this;
}
void PatchConceptLanguagesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatchConceptLanguagesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PatchConceptLanguagesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchConceptLanguagesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_languages_.Clear();
  concept_id_.ClearToEmpty();
  action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchConceptLanguagesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string concept_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_concept_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchConceptLanguagesRequest.concept_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ConceptLanguage concept_languages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concept_languages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchConceptLanguagesRequest.action"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchConceptLanguagesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchConceptLanguagesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string concept_id = 2;
  if (!this->_internal_concept_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concept_id().data(), static_cast<int>(this->_internal_concept_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchConceptLanguagesRequest.concept_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_concept_id(), target);
  }

  // repeated .clarifai.api.ConceptLanguage concept_languages = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_concept_languages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_concept_languages(i), target, stream);
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchConceptLanguagesRequest.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchConceptLanguagesRequest)
  return target;
}

size_t PatchConceptLanguagesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchConceptLanguagesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ConceptLanguage concept_languages = 3;
  total_size += 1UL * this->_internal_concept_languages_size();
  for (const auto& msg : this->concept_languages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string concept_id = 2;
  if (!this->_internal_concept_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concept_id());
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchConceptLanguagesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PatchConceptLanguagesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchConceptLanguagesRequest::GetClassData() const { return &_class_data_; }

void PatchConceptLanguagesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PatchConceptLanguagesRequest *>(to)->MergeFrom(
      static_cast<const PatchConceptLanguagesRequest &>(from));
}


void PatchConceptLanguagesRequest::MergeFrom(const PatchConceptLanguagesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchConceptLanguagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  concept_languages_.MergeFrom(from.concept_languages_);
  if (!from._internal_concept_id().empty()) {
    _internal_set_concept_id(from._internal_concept_id());
  }
  if (!from._internal_action().empty()) {
    _internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchConceptLanguagesRequest::CopyFrom(const PatchConceptLanguagesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchConceptLanguagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchConceptLanguagesRequest::IsInitialized() const {
  return true;
}

void PatchConceptLanguagesRequest::InternalSwap(PatchConceptLanguagesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  concept_languages_.InternalSwap(&other->concept_languages_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &concept_id_, lhs_arena,
      &other->concept_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_, lhs_arena,
      &other->action_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchConceptLanguagesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[52]);
}

// ===================================================================

class PostConceptLanguagesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostConceptLanguagesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostConceptLanguagesRequest::_Internal::user_app_id(const PostConceptLanguagesRequest* msg) {
  return *msg->user_app_id_;
}
void PostConceptLanguagesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostConceptLanguagesRequest::clear_concept_languages() {
  concept_languages_.Clear();
}
PostConceptLanguagesRequest::PostConceptLanguagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  concept_languages_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostConceptLanguagesRequest)
}
PostConceptLanguagesRequest::PostConceptLanguagesRequest(const PostConceptLanguagesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      concept_languages_(from.concept_languages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    concept_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_concept_id().empty()) {
    concept_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_concept_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostConceptLanguagesRequest)
}

inline void PostConceptLanguagesRequest::SharedCtor() {
concept_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  concept_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

PostConceptLanguagesRequest::~PostConceptLanguagesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostConceptLanguagesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostConceptLanguagesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  concept_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostConceptLanguagesRequest::ArenaDtor(void* object) {
  PostConceptLanguagesRequest* _this = reinterpret_cast< PostConceptLanguagesRequest* >(object);
  (void)_this;
}
void PostConceptLanguagesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostConceptLanguagesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostConceptLanguagesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostConceptLanguagesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_languages_.Clear();
  concept_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostConceptLanguagesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string concept_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_concept_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostConceptLanguagesRequest.concept_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ConceptLanguage concept_languages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concept_languages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostConceptLanguagesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostConceptLanguagesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string concept_id = 2;
  if (!this->_internal_concept_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concept_id().data(), static_cast<int>(this->_internal_concept_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostConceptLanguagesRequest.concept_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_concept_id(), target);
  }

  // repeated .clarifai.api.ConceptLanguage concept_languages = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_concept_languages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_concept_languages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostConceptLanguagesRequest)
  return target;
}

size_t PostConceptLanguagesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostConceptLanguagesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ConceptLanguage concept_languages = 3;
  total_size += 1UL * this->_internal_concept_languages_size();
  for (const auto& msg : this->concept_languages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string concept_id = 2;
  if (!this->_internal_concept_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concept_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostConceptLanguagesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostConceptLanguagesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostConceptLanguagesRequest::GetClassData() const { return &_class_data_; }

void PostConceptLanguagesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostConceptLanguagesRequest *>(to)->MergeFrom(
      static_cast<const PostConceptLanguagesRequest &>(from));
}


void PostConceptLanguagesRequest::MergeFrom(const PostConceptLanguagesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostConceptLanguagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  concept_languages_.MergeFrom(from.concept_languages_);
  if (!from._internal_concept_id().empty()) {
    _internal_set_concept_id(from._internal_concept_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostConceptLanguagesRequest::CopyFrom(const PostConceptLanguagesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostConceptLanguagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostConceptLanguagesRequest::IsInitialized() const {
  return true;
}

void PostConceptLanguagesRequest::InternalSwap(PostConceptLanguagesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  concept_languages_.InternalSwap(&other->concept_languages_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &concept_id_, lhs_arena,
      &other->concept_id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostConceptLanguagesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[53]);
}

// ===================================================================

class SingleConceptLanguageResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleConceptLanguageResponse* msg);
  static const ::clarifai::api::ConceptLanguage& concept_language(const SingleConceptLanguageResponse* msg);
};

const ::clarifai::api::status::Status&
SingleConceptLanguageResponse::_Internal::status(const SingleConceptLanguageResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::ConceptLanguage&
SingleConceptLanguageResponse::_Internal::concept_language(const SingleConceptLanguageResponse* msg) {
  return *msg->concept_language_;
}
void SingleConceptLanguageResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleConceptLanguageResponse::clear_concept_language() {
  if (GetArenaForAllocation() == nullptr && concept_language_ != nullptr) {
    delete concept_language_;
  }
  concept_language_ = nullptr;
}
SingleConceptLanguageResponse::SingleConceptLanguageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleConceptLanguageResponse)
}
SingleConceptLanguageResponse::SingleConceptLanguageResponse(const SingleConceptLanguageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_concept_language()) {
    concept_language_ = new ::clarifai::api::ConceptLanguage(*from.concept_language_);
  } else {
    concept_language_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleConceptLanguageResponse)
}

inline void SingleConceptLanguageResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&concept_language_) -
    reinterpret_cast<char*>(&status_)) + sizeof(concept_language_));
}

SingleConceptLanguageResponse::~SingleConceptLanguageResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleConceptLanguageResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SingleConceptLanguageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete concept_language_;
}

void SingleConceptLanguageResponse::ArenaDtor(void* object) {
  SingleConceptLanguageResponse* _this = reinterpret_cast< SingleConceptLanguageResponse* >(object);
  (void)_this;
}
void SingleConceptLanguageResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleConceptLanguageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleConceptLanguageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleConceptLanguageResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && concept_language_ != nullptr) {
    delete concept_language_;
  }
  concept_language_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleConceptLanguageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ConceptLanguage concept_language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_concept_language(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleConceptLanguageResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleConceptLanguageResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.ConceptLanguage concept_language = 2;
  if (this->_internal_has_concept_language()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::concept_language(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleConceptLanguageResponse)
  return target;
}

size_t SingleConceptLanguageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleConceptLanguageResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.ConceptLanguage concept_language = 2;
  if (this->_internal_has_concept_language()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *concept_language_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleConceptLanguageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SingleConceptLanguageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleConceptLanguageResponse::GetClassData() const { return &_class_data_; }

void SingleConceptLanguageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SingleConceptLanguageResponse *>(to)->MergeFrom(
      static_cast<const SingleConceptLanguageResponse &>(from));
}


void SingleConceptLanguageResponse::MergeFrom(const SingleConceptLanguageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleConceptLanguageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_concept_language()) {
    _internal_mutable_concept_language()->::clarifai::api::ConceptLanguage::MergeFrom(from._internal_concept_language());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleConceptLanguageResponse::CopyFrom(const SingleConceptLanguageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleConceptLanguageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleConceptLanguageResponse::IsInitialized() const {
  return true;
}

void SingleConceptLanguageResponse::InternalSwap(SingleConceptLanguageResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleConceptLanguageResponse, concept_language_)
      + sizeof(SingleConceptLanguageResponse::concept_language_)
      - PROTOBUF_FIELD_OFFSET(SingleConceptLanguageResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleConceptLanguageResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[54]);
}

// ===================================================================

class MultiConceptLanguageResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiConceptLanguageResponse* msg);
};

const ::clarifai::api::status::Status&
MultiConceptLanguageResponse::_Internal::status(const MultiConceptLanguageResponse* msg) {
  return *msg->status_;
}
void MultiConceptLanguageResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiConceptLanguageResponse::clear_concept_languages() {
  concept_languages_.Clear();
}
MultiConceptLanguageResponse::MultiConceptLanguageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  concept_languages_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiConceptLanguageResponse)
}
MultiConceptLanguageResponse::MultiConceptLanguageResponse(const MultiConceptLanguageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      concept_languages_(from.concept_languages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiConceptLanguageResponse)
}

inline void MultiConceptLanguageResponse::SharedCtor() {
status_ = nullptr;
}

MultiConceptLanguageResponse::~MultiConceptLanguageResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiConceptLanguageResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiConceptLanguageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiConceptLanguageResponse::ArenaDtor(void* object) {
  MultiConceptLanguageResponse* _this = reinterpret_cast< MultiConceptLanguageResponse* >(object);
  (void)_this;
}
void MultiConceptLanguageResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiConceptLanguageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiConceptLanguageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiConceptLanguageResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_languages_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiConceptLanguageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ConceptLanguage concept_languages = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_concept_languages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiConceptLanguageResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiConceptLanguageResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.ConceptLanguage concept_languages = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_concept_languages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_concept_languages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiConceptLanguageResponse)
  return target;
}

size_t MultiConceptLanguageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiConceptLanguageResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ConceptLanguage concept_languages = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_concept_languages_size();
  for (const auto& msg : this->concept_languages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiConceptLanguageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiConceptLanguageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiConceptLanguageResponse::GetClassData() const { return &_class_data_; }

void MultiConceptLanguageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiConceptLanguageResponse *>(to)->MergeFrom(
      static_cast<const MultiConceptLanguageResponse &>(from));
}


void MultiConceptLanguageResponse::MergeFrom(const MultiConceptLanguageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiConceptLanguageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  concept_languages_.MergeFrom(from.concept_languages_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiConceptLanguageResponse::CopyFrom(const MultiConceptLanguageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiConceptLanguageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiConceptLanguageResponse::IsInitialized() const {
  return true;
}

void MultiConceptLanguageResponse::InternalSwap(MultiConceptLanguageResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  concept_languages_.InternalSwap(&other->concept_languages_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiConceptLanguageResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[55]);
}

// ===================================================================

class GetInputRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetInputRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetInputRequest::_Internal::user_app_id(const GetInputRequest* msg) {
  return *msg->user_app_id_;
}
void GetInputRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetInputRequest::GetInputRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetInputRequest)
}
GetInputRequest::GetInputRequest(const GetInputRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  input_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    input_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_input_id().empty()) {
    input_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_input_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetInputRequest)
}

inline void GetInputRequest::SharedCtor() {
input_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  input_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

GetInputRequest::~GetInputRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetInputRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetInputRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  input_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetInputRequest::ArenaDtor(void* object) {
  GetInputRequest* _this = reinterpret_cast< GetInputRequest* >(object);
  (void)_this;
}
void GetInputRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetInputRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetInputRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetInputRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetInputRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string input_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_input_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetInputRequest.input_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetInputRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetInputRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string input_id = 2;
  if (!this->_internal_input_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input_id().data(), static_cast<int>(this->_internal_input_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetInputRequest.input_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_input_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetInputRequest)
  return target;
}

size_t GetInputRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetInputRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string input_id = 2;
  if (!this->_internal_input_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_input_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetInputRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetInputRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetInputRequest::GetClassData() const { return &_class_data_; }

void GetInputRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetInputRequest *>(to)->MergeFrom(
      static_cast<const GetInputRequest &>(from));
}


void GetInputRequest::MergeFrom(const GetInputRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetInputRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_input_id().empty()) {
    _internal_set_input_id(from._internal_input_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetInputRequest::CopyFrom(const GetInputRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetInputRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInputRequest::IsInitialized() const {
  return true;
}

void GetInputRequest::InternalSwap(GetInputRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &input_id_, lhs_arena,
      &other->input_id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInputRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[56]);
}

// ===================================================================

class GetInputSamplesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetInputSamplesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetInputSamplesRequest::_Internal::user_app_id(const GetInputSamplesRequest* msg) {
  return *msg->user_app_id_;
}
void GetInputSamplesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetInputSamplesRequest::GetInputSamplesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  user_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetInputSamplesRequest)
}
GetInputSamplesRequest::GetInputSamplesRequest(const GetInputSamplesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      user_ids_(from.user_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task_id().empty()) {
    task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_task_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetInputSamplesRequest)
}

inline void GetInputSamplesRequest::SharedCtor() {
task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

GetInputSamplesRequest::~GetInputSamplesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetInputSamplesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetInputSamplesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetInputSamplesRequest::ArenaDtor(void* object) {
  GetInputSamplesRequest* _this = reinterpret_cast< GetInputSamplesRequest* >(object);
  (void)_this;
}
void GetInputSamplesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetInputSamplesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetInputSamplesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetInputSamplesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_ids_.Clear();
  task_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetInputSamplesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string task_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_task_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetInputSamplesRequest.task_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string user_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetInputSamplesRequest.user_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetInputSamplesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetInputSamplesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string task_id = 2;
  if (!this->_internal_task_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetInputSamplesRequest.task_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_task_id(), target);
  }

  // repeated string user_ids = 3;
  for (int i = 0, n = this->_internal_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetInputSamplesRequest.user_ids");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetInputSamplesRequest)
  return target;
}

size_t GetInputSamplesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetInputSamplesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string user_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(user_ids_.size());
  for (int i = 0, n = user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      user_ids_.Get(i));
  }

  // string task_id = 2;
  if (!this->_internal_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetInputSamplesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetInputSamplesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetInputSamplesRequest::GetClassData() const { return &_class_data_; }

void GetInputSamplesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetInputSamplesRequest *>(to)->MergeFrom(
      static_cast<const GetInputSamplesRequest &>(from));
}


void GetInputSamplesRequest::MergeFrom(const GetInputSamplesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetInputSamplesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  user_ids_.MergeFrom(from.user_ids_);
  if (!from._internal_task_id().empty()) {
    _internal_set_task_id(from._internal_task_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetInputSamplesRequest::CopyFrom(const GetInputSamplesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetInputSamplesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInputSamplesRequest::IsInitialized() const {
  return true;
}

void GetInputSamplesRequest::InternalSwap(GetInputSamplesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  user_ids_.InternalSwap(&other->user_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &task_id_, lhs_arena,
      &other->task_id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInputSamplesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[57]);
}

// ===================================================================

class ListInputsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListInputsRequest* msg);
  static const ::clarifai::api::status::Status& status(const ListInputsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListInputsRequest::_Internal::user_app_id(const ListInputsRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::status::Status&
ListInputsRequest::_Internal::status(const ListInputsRequest* msg) {
  return *msg->status_;
}
void ListInputsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void ListInputsRequest::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
ListInputsRequest::ListInputsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListInputsRequest)
}
ListInputsRequest::ListInputsRequest(const ListInputsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListInputsRequest)
}

inline void ListInputsRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListInputsRequest::~ListInputsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListInputsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListInputsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete status_;
}

void ListInputsRequest::ArenaDtor(void* object) {
  ListInputsRequest* _this = reinterpret_cast< ListInputsRequest* >(object);
  (void)_this;
}
void ListInputsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListInputsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListInputsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListInputsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListInputsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListInputsRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.status.Status status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListInputsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListInputsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  // repeated string ids = 4;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListInputsRequest.ids");
    target = stream->WriteString(4, s, target);
  }

  // .clarifai.api.status.Status status = 5;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListInputsRequest)
  return target;
}

size_t ListInputsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListInputsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.status.Status status = 5;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListInputsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListInputsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListInputsRequest::GetClassData() const { return &_class_data_; }

void ListInputsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListInputsRequest *>(to)->MergeFrom(
      static_cast<const ListInputsRequest &>(from));
}


void ListInputsRequest::MergeFrom(const ListInputsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListInputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListInputsRequest::CopyFrom(const ListInputsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListInputsRequest::IsInitialized() const {
  return true;
}

void ListInputsRequest::InternalSwap(ListInputsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListInputsRequest, per_page_)
      + sizeof(ListInputsRequest::per_page_)
      - PROTOBUF_FIELD_OFFSET(ListInputsRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListInputsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[58]);
}

// ===================================================================

class StreamInputsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const StreamInputsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
StreamInputsRequest::_Internal::user_app_id(const StreamInputsRequest* msg) {
  return *msg->user_app_id_;
}
void StreamInputsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
StreamInputsRequest::StreamInputsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.StreamInputsRequest)
}
StreamInputsRequest::StreamInputsRequest(const StreamInputsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  last_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    last_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_last_id().empty()) {
    last_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_last_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&per_page_, &from.per_page_,
    static_cast<size_t>(reinterpret_cast<char*>(&descending_) -
    reinterpret_cast<char*>(&per_page_)) + sizeof(descending_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.StreamInputsRequest)
}

inline void StreamInputsRequest::SharedCtor() {
last_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  last_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&descending_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(descending_));
}

StreamInputsRequest::~StreamInputsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.StreamInputsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamInputsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  last_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void StreamInputsRequest::ArenaDtor(void* object) {
  StreamInputsRequest* _this = reinterpret_cast< StreamInputsRequest* >(object);
  (void)_this;
}
void StreamInputsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamInputsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamInputsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.StreamInputsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  last_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&per_page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&descending_) -
      reinterpret_cast<char*>(&per_page_)) + sizeof(descending_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamInputsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string last_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_last_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.StreamInputsRequest.last_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool descending = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          descending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool order_by_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          order_by_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamInputsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.StreamInputsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 per_page = 2;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_per_page(), target);
  }

  // string last_id = 3;
  if (!this->_internal_last_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_id().data(), static_cast<int>(this->_internal_last_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.StreamInputsRequest.last_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_last_id(), target);
  }

  // bool descending = 4;
  if (this->_internal_descending() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_descending(), target);
  }

  // bool order_by_id = 5;
  if (this->_internal_order_by_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_order_by_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.StreamInputsRequest)
  return target;
}

size_t StreamInputsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.StreamInputsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string last_id = 3;
  if (!this->_internal_last_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 per_page = 2;
  if (this->_internal_per_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  // bool order_by_id = 5;
  if (this->_internal_order_by_id() != 0) {
    total_size += 1 + 1;
  }

  // bool descending = 4;
  if (this->_internal_descending() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamInputsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamInputsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamInputsRequest::GetClassData() const { return &_class_data_; }

void StreamInputsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StreamInputsRequest *>(to)->MergeFrom(
      static_cast<const StreamInputsRequest &>(from));
}


void StreamInputsRequest::MergeFrom(const StreamInputsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.StreamInputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_last_id().empty()) {
    _internal_set_last_id(from._internal_last_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
  if (from._internal_order_by_id() != 0) {
    _internal_set_order_by_id(from._internal_order_by_id());
  }
  if (from._internal_descending() != 0) {
    _internal_set_descending(from._internal_descending());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamInputsRequest::CopyFrom(const StreamInputsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.StreamInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamInputsRequest::IsInitialized() const {
  return true;
}

void StreamInputsRequest::InternalSwap(StreamInputsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &last_id_, lhs_arena,
      &other->last_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamInputsRequest, descending_)
      + sizeof(StreamInputsRequest::descending_)
      - PROTOBUF_FIELD_OFFSET(StreamInputsRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamInputsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[59]);
}

// ===================================================================

class PostInputsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostInputsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostInputsRequest::_Internal::user_app_id(const PostInputsRequest* msg) {
  return *msg->user_app_id_;
}
void PostInputsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostInputsRequest::clear_inputs() {
  inputs_.Clear();
}
PostInputsRequest::PostInputsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  inputs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostInputsRequest)
}
PostInputsRequest::PostInputsRequest(const PostInputsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      inputs_(from.inputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostInputsRequest)
}

inline void PostInputsRequest::SharedCtor() {
user_app_id_ = nullptr;
}

PostInputsRequest::~PostInputsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostInputsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostInputsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostInputsRequest::ArenaDtor(void* object) {
  PostInputsRequest* _this = reinterpret_cast< PostInputsRequest* >(object);
  (void)_this;
}
void PostInputsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostInputsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostInputsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostInputsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostInputsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Input inputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostInputsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostInputsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Input inputs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_inputs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostInputsRequest)
  return target;
}

size_t PostInputsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostInputsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Input inputs = 2;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostInputsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostInputsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostInputsRequest::GetClassData() const { return &_class_data_; }

void PostInputsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostInputsRequest *>(to)->MergeFrom(
      static_cast<const PostInputsRequest &>(from));
}


void PostInputsRequest::MergeFrom(const PostInputsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostInputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostInputsRequest::CopyFrom(const PostInputsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostInputsRequest::IsInitialized() const {
  return true;
}

void PostInputsRequest::InternalSwap(PostInputsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  inputs_.InternalSwap(&other->inputs_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostInputsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[60]);
}

// ===================================================================

class PatchInputsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchInputsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchInputsRequest::_Internal::user_app_id(const PatchInputsRequest* msg) {
  return *msg->user_app_id_;
}
void PatchInputsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchInputsRequest::clear_inputs() {
  inputs_.Clear();
}
PatchInputsRequest::PatchInputsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  inputs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchInputsRequest)
}
PatchInputsRequest::PatchInputsRequest(const PatchInputsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      inputs_(from.inputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchInputsRequest)
}

inline void PatchInputsRequest::SharedCtor() {
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

PatchInputsRequest::~PatchInputsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchInputsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PatchInputsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchInputsRequest::ArenaDtor(void* object) {
  PatchInputsRequest* _this = reinterpret_cast< PatchInputsRequest* >(object);
  (void)_this;
}
void PatchInputsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatchInputsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PatchInputsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchInputsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchInputsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Input inputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchInputsRequest.action"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchInputsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchInputsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Input inputs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_inputs(i), target, stream);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchInputsRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchInputsRequest)
  return target;
}

size_t PatchInputsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchInputsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Input inputs = 2;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchInputsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PatchInputsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchInputsRequest::GetClassData() const { return &_class_data_; }

void PatchInputsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PatchInputsRequest *>(to)->MergeFrom(
      static_cast<const PatchInputsRequest &>(from));
}


void PatchInputsRequest::MergeFrom(const PatchInputsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchInputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  if (!from._internal_action().empty()) {
    _internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchInputsRequest::CopyFrom(const PatchInputsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchInputsRequest::IsInitialized() const {
  return true;
}

void PatchInputsRequest::InternalSwap(PatchInputsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  inputs_.InternalSwap(&other->inputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_, lhs_arena,
      &other->action_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchInputsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[61]);
}

// ===================================================================

class DeleteInputRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteInputRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteInputRequest::_Internal::user_app_id(const DeleteInputRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteInputRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteInputRequest::DeleteInputRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteInputRequest)
}
DeleteInputRequest::DeleteInputRequest(const DeleteInputRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  input_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    input_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_input_id().empty()) {
    input_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_input_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteInputRequest)
}

inline void DeleteInputRequest::SharedCtor() {
input_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  input_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

DeleteInputRequest::~DeleteInputRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteInputRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteInputRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  input_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteInputRequest::ArenaDtor(void* object) {
  DeleteInputRequest* _this = reinterpret_cast< DeleteInputRequest* >(object);
  (void)_this;
}
void DeleteInputRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteInputRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteInputRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteInputRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteInputRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string input_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_input_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteInputRequest.input_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteInputRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteInputRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string input_id = 2;
  if (!this->_internal_input_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input_id().data(), static_cast<int>(this->_internal_input_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteInputRequest.input_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_input_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteInputRequest)
  return target;
}

size_t DeleteInputRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteInputRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string input_id = 2;
  if (!this->_internal_input_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_input_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteInputRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteInputRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteInputRequest::GetClassData() const { return &_class_data_; }

void DeleteInputRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteInputRequest *>(to)->MergeFrom(
      static_cast<const DeleteInputRequest &>(from));
}


void DeleteInputRequest::MergeFrom(const DeleteInputRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteInputRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_input_id().empty()) {
    _internal_set_input_id(from._internal_input_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteInputRequest::CopyFrom(const DeleteInputRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteInputRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteInputRequest::IsInitialized() const {
  return true;
}

void DeleteInputRequest::InternalSwap(DeleteInputRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &input_id_, lhs_arena,
      &other->input_id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteInputRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[62]);
}

// ===================================================================

class DeleteInputsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteInputsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteInputsRequest::_Internal::user_app_id(const DeleteInputsRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteInputsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteInputsRequest::DeleteInputsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteInputsRequest)
}
DeleteInputsRequest::DeleteInputsRequest(const DeleteInputsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteInputsRequest)
}

inline void DeleteInputsRequest::SharedCtor() {
user_app_id_ = nullptr;
}

DeleteInputsRequest::~DeleteInputsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteInputsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteInputsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteInputsRequest::ArenaDtor(void* object) {
  DeleteInputsRequest* _this = reinterpret_cast< DeleteInputsRequest* >(object);
  (void)_this;
}
void DeleteInputsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteInputsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteInputsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteInputsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteInputsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteInputsRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteInputsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteInputsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteInputsRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteInputsRequest)
  return target;
}

size_t DeleteInputsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteInputsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteInputsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteInputsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteInputsRequest::GetClassData() const { return &_class_data_; }

void DeleteInputsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteInputsRequest *>(to)->MergeFrom(
      static_cast<const DeleteInputsRequest &>(from));
}


void DeleteInputsRequest::MergeFrom(const DeleteInputsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteInputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteInputsRequest::CopyFrom(const DeleteInputsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteInputsRequest::IsInitialized() const {
  return true;
}

void DeleteInputsRequest::InternalSwap(DeleteInputsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteInputsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[63]);
}

// ===================================================================

class SingleInputResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleInputResponse* msg);
  static const ::clarifai::api::Input& input(const SingleInputResponse* msg);
};

const ::clarifai::api::status::Status&
SingleInputResponse::_Internal::status(const SingleInputResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::Input&
SingleInputResponse::_Internal::input(const SingleInputResponse* msg) {
  return *msg->input_;
}
void SingleInputResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleInputResponse::clear_input() {
  if (GetArenaForAllocation() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
SingleInputResponse::SingleInputResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleInputResponse)
}
SingleInputResponse::SingleInputResponse(const SingleInputResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_input()) {
    input_ = new ::clarifai::api::Input(*from.input_);
  } else {
    input_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleInputResponse)
}

inline void SingleInputResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&input_) -
    reinterpret_cast<char*>(&status_)) + sizeof(input_));
}

SingleInputResponse::~SingleInputResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleInputResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SingleInputResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete input_;
}

void SingleInputResponse::ArenaDtor(void* object) {
  SingleInputResponse* _this = reinterpret_cast< SingleInputResponse* >(object);
  (void)_this;
}
void SingleInputResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleInputResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleInputResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleInputResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleInputResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Input input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleInputResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleInputResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.Input input = 2;
  if (this->_internal_has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::input(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleInputResponse)
  return target;
}

size_t SingleInputResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleInputResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.Input input = 2;
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleInputResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SingleInputResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleInputResponse::GetClassData() const { return &_class_data_; }

void SingleInputResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SingleInputResponse *>(to)->MergeFrom(
      static_cast<const SingleInputResponse &>(from));
}


void SingleInputResponse::MergeFrom(const SingleInputResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleInputResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_input()) {
    _internal_mutable_input()->::clarifai::api::Input::MergeFrom(from._internal_input());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleInputResponse::CopyFrom(const SingleInputResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleInputResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleInputResponse::IsInitialized() const {
  return true;
}

void SingleInputResponse::InternalSwap(SingleInputResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleInputResponse, input_)
      + sizeof(SingleInputResponse::input_)
      - PROTOBUF_FIELD_OFFSET(SingleInputResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleInputResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[64]);
}

// ===================================================================

class MultiInputResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiInputResponse* msg);
};

const ::clarifai::api::status::Status&
MultiInputResponse::_Internal::status(const MultiInputResponse* msg) {
  return *msg->status_;
}
void MultiInputResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiInputResponse::clear_inputs() {
  inputs_.Clear();
}
MultiInputResponse::MultiInputResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  inputs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiInputResponse)
}
MultiInputResponse::MultiInputResponse(const MultiInputResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      inputs_(from.inputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiInputResponse)
}

inline void MultiInputResponse::SharedCtor() {
status_ = nullptr;
}

MultiInputResponse::~MultiInputResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiInputResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiInputResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiInputResponse::ArenaDtor(void* object) {
  MultiInputResponse* _this = reinterpret_cast< MultiInputResponse* >(object);
  (void)_this;
}
void MultiInputResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiInputResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiInputResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiInputResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiInputResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Input inputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiInputResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiInputResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.Input inputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_inputs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiInputResponse)
  return target;
}

size_t MultiInputResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiInputResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Input inputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiInputResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiInputResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiInputResponse::GetClassData() const { return &_class_data_; }

void MultiInputResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiInputResponse *>(to)->MergeFrom(
      static_cast<const MultiInputResponse &>(from));
}


void MultiInputResponse::MergeFrom(const MultiInputResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiInputResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiInputResponse::CopyFrom(const MultiInputResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiInputResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiInputResponse::IsInitialized() const {
  return true;
}

void MultiInputResponse::InternalSwap(MultiInputResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  inputs_.InternalSwap(&other->inputs_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiInputResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[65]);
}

// ===================================================================

class MultiInputAnnotationResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiInputAnnotationResponse* msg);
};

const ::clarifai::api::status::Status&
MultiInputAnnotationResponse::_Internal::status(const MultiInputAnnotationResponse* msg) {
  return *msg->status_;
}
void MultiInputAnnotationResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiInputAnnotationResponse::clear_hits() {
  hits_.Clear();
}
MultiInputAnnotationResponse::MultiInputAnnotationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  hits_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiInputAnnotationResponse)
}
MultiInputAnnotationResponse::MultiInputAnnotationResponse(const MultiInputAnnotationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hits_(from.hits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiInputAnnotationResponse)
}

inline void MultiInputAnnotationResponse::SharedCtor() {
status_ = nullptr;
}

MultiInputAnnotationResponse::~MultiInputAnnotationResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiInputAnnotationResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiInputAnnotationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiInputAnnotationResponse::ArenaDtor(void* object) {
  MultiInputAnnotationResponse* _this = reinterpret_cast< MultiInputAnnotationResponse* >(object);
  (void)_this;
}
void MultiInputAnnotationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiInputAnnotationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiInputAnnotationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiInputAnnotationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hits_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiInputAnnotationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Hit hits = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiInputAnnotationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiInputAnnotationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.Hit hits = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hits_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_hits(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiInputAnnotationResponse)
  return target;
}

size_t MultiInputAnnotationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiInputAnnotationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Hit hits = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_hits_size();
  for (const auto& msg : this->hits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiInputAnnotationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiInputAnnotationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiInputAnnotationResponse::GetClassData() const { return &_class_data_; }

void MultiInputAnnotationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiInputAnnotationResponse *>(to)->MergeFrom(
      static_cast<const MultiInputAnnotationResponse &>(from));
}


void MultiInputAnnotationResponse::MergeFrom(const MultiInputAnnotationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiInputAnnotationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  hits_.MergeFrom(from.hits_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiInputAnnotationResponse::CopyFrom(const MultiInputAnnotationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiInputAnnotationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiInputAnnotationResponse::IsInitialized() const {
  return true;
}

void MultiInputAnnotationResponse::InternalSwap(MultiInputAnnotationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  hits_.InternalSwap(&other->hits_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiInputAnnotationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[66]);
}

// ===================================================================

class SingleInputCountResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleInputCountResponse* msg);
  static const ::clarifai::api::InputCount& counts(const SingleInputCountResponse* msg);
};

const ::clarifai::api::status::Status&
SingleInputCountResponse::_Internal::status(const SingleInputCountResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::InputCount&
SingleInputCountResponse::_Internal::counts(const SingleInputCountResponse* msg) {
  return *msg->counts_;
}
void SingleInputCountResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleInputCountResponse::clear_counts() {
  if (GetArenaForAllocation() == nullptr && counts_ != nullptr) {
    delete counts_;
  }
  counts_ = nullptr;
}
SingleInputCountResponse::SingleInputCountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleInputCountResponse)
}
SingleInputCountResponse::SingleInputCountResponse(const SingleInputCountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_counts()) {
    counts_ = new ::clarifai::api::InputCount(*from.counts_);
  } else {
    counts_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleInputCountResponse)
}

inline void SingleInputCountResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&counts_) -
    reinterpret_cast<char*>(&status_)) + sizeof(counts_));
}

SingleInputCountResponse::~SingleInputCountResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleInputCountResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SingleInputCountResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete counts_;
}

void SingleInputCountResponse::ArenaDtor(void* object) {
  SingleInputCountResponse* _this = reinterpret_cast< SingleInputCountResponse* >(object);
  (void)_this;
}
void SingleInputCountResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleInputCountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleInputCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleInputCountResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && counts_ != nullptr) {
    delete counts_;
  }
  counts_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleInputCountResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.InputCount counts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_counts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleInputCountResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleInputCountResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.InputCount counts = 2;
  if (this->_internal_has_counts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::counts(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleInputCountResponse)
  return target;
}

size_t SingleInputCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleInputCountResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.InputCount counts = 2;
  if (this->_internal_has_counts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *counts_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleInputCountResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SingleInputCountResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleInputCountResponse::GetClassData() const { return &_class_data_; }

void SingleInputCountResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SingleInputCountResponse *>(to)->MergeFrom(
      static_cast<const SingleInputCountResponse &>(from));
}


void SingleInputCountResponse::MergeFrom(const SingleInputCountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleInputCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_counts()) {
    _internal_mutable_counts()->::clarifai::api::InputCount::MergeFrom(from._internal_counts());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleInputCountResponse::CopyFrom(const SingleInputCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleInputCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleInputCountResponse::IsInitialized() const {
  return true;
}

void SingleInputCountResponse::InternalSwap(SingleInputCountResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleInputCountResponse, counts_)
      + sizeof(SingleInputCountResponse::counts_)
      - PROTOBUF_FIELD_OFFSET(SingleInputCountResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleInputCountResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[67]);
}

// ===================================================================

class GetInputCountRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetInputCountRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetInputCountRequest::_Internal::user_app_id(const GetInputCountRequest* msg) {
  return *msg->user_app_id_;
}
void GetInputCountRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetInputCountRequest::GetInputCountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetInputCountRequest)
}
GetInputCountRequest::GetInputCountRequest(const GetInputCountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetInputCountRequest)
}

inline void GetInputCountRequest::SharedCtor() {
user_app_id_ = nullptr;
}

GetInputCountRequest::~GetInputCountRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetInputCountRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetInputCountRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetInputCountRequest::ArenaDtor(void* object) {
  GetInputCountRequest* _this = reinterpret_cast< GetInputCountRequest* >(object);
  (void)_this;
}
void GetInputCountRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetInputCountRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetInputCountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetInputCountRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetInputCountRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetInputCountRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetInputCountRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetInputCountRequest)
  return target;
}

size_t GetInputCountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetInputCountRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetInputCountRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetInputCountRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetInputCountRequest::GetClassData() const { return &_class_data_; }

void GetInputCountRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetInputCountRequest *>(to)->MergeFrom(
      static_cast<const GetInputCountRequest &>(from));
}


void GetInputCountRequest::MergeFrom(const GetInputCountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetInputCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetInputCountRequest::CopyFrom(const GetInputCountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetInputCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInputCountRequest::IsInitialized() const {
  return true;
}

void GetInputCountRequest::InternalSwap(GetInputCountRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInputCountRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[68]);
}

// ===================================================================

class ListDatasetsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListDatasetsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListDatasetsRequest::_Internal::user_app_id(const ListDatasetsRequest* msg) {
  return *msg->user_app_id_;
}
void ListDatasetsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListDatasetsRequest::ListDatasetsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListDatasetsRequest)
}
ListDatasetsRequest::ListDatasetsRequest(const ListDatasetsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListDatasetsRequest)
}

inline void ListDatasetsRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListDatasetsRequest::~ListDatasetsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListDatasetsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListDatasetsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListDatasetsRequest::ArenaDtor(void* object) {
  ListDatasetsRequest* _this = reinterpret_cast< ListDatasetsRequest* >(object);
  (void)_this;
}
void ListDatasetsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListDatasetsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListDatasetsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListDatasetsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDatasetsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListDatasetsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListDatasetsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListDatasetsRequest)
  return target;
}

size_t ListDatasetsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListDatasetsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListDatasetsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListDatasetsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListDatasetsRequest::GetClassData() const { return &_class_data_; }

void ListDatasetsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListDatasetsRequest *>(to)->MergeFrom(
      static_cast<const ListDatasetsRequest &>(from));
}


void ListDatasetsRequest::MergeFrom(const ListDatasetsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListDatasetsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListDatasetsRequest::CopyFrom(const ListDatasetsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListDatasetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDatasetsRequest::IsInitialized() const {
  return true;
}

void ListDatasetsRequest::InternalSwap(ListDatasetsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListDatasetsRequest, per_page_)
      + sizeof(ListDatasetsRequest::per_page_)
      - PROTOBUF_FIELD_OFFSET(ListDatasetsRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDatasetsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[69]);
}

// ===================================================================

class GetDatasetRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetDatasetRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetDatasetRequest::_Internal::user_app_id(const GetDatasetRequest* msg) {
  return *msg->user_app_id_;
}
void GetDatasetRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetDatasetRequest::GetDatasetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetDatasetRequest)
}
GetDatasetRequest::GetDatasetRequest(const GetDatasetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dataset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dataset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dataset_id().empty()) {
    dataset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dataset_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetDatasetRequest)
}

inline void GetDatasetRequest::SharedCtor() {
dataset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dataset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

GetDatasetRequest::~GetDatasetRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetDatasetRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetDatasetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  dataset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetDatasetRequest::ArenaDtor(void* object) {
  GetDatasetRequest* _this = reinterpret_cast< GetDatasetRequest* >(object);
  (void)_this;
}
void GetDatasetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDatasetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetDatasetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetDatasetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dataset_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDatasetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dataset_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dataset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetDatasetRequest.dataset_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDatasetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetDatasetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_id().data(), static_cast<int>(this->_internal_dataset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetDatasetRequest.dataset_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dataset_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetDatasetRequest)
  return target;
}

size_t GetDatasetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetDatasetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDatasetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetDatasetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDatasetRequest::GetClassData() const { return &_class_data_; }

void GetDatasetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetDatasetRequest *>(to)->MergeFrom(
      static_cast<const GetDatasetRequest &>(from));
}


void GetDatasetRequest::MergeFrom(const GetDatasetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetDatasetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dataset_id().empty()) {
    _internal_set_dataset_id(from._internal_dataset_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDatasetRequest::CopyFrom(const GetDatasetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetDatasetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDatasetRequest::IsInitialized() const {
  return true;
}

void GetDatasetRequest::InternalSwap(GetDatasetRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dataset_id_, lhs_arena,
      &other->dataset_id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDatasetRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[70]);
}

// ===================================================================

class PostDatasetsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostDatasetsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostDatasetsRequest::_Internal::user_app_id(const PostDatasetsRequest* msg) {
  return *msg->user_app_id_;
}
void PostDatasetsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostDatasetsRequest::clear_datasets() {
  datasets_.Clear();
}
PostDatasetsRequest::PostDatasetsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  datasets_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostDatasetsRequest)
}
PostDatasetsRequest::PostDatasetsRequest(const PostDatasetsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      datasets_(from.datasets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostDatasetsRequest)
}

inline void PostDatasetsRequest::SharedCtor() {
user_app_id_ = nullptr;
}

PostDatasetsRequest::~PostDatasetsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostDatasetsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostDatasetsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostDatasetsRequest::ArenaDtor(void* object) {
  PostDatasetsRequest* _this = reinterpret_cast< PostDatasetsRequest* >(object);
  (void)_this;
}
void PostDatasetsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostDatasetsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostDatasetsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostDatasetsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datasets_.Clear();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostDatasetsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Dataset datasets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datasets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostDatasetsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostDatasetsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Dataset datasets = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datasets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_datasets(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostDatasetsRequest)
  return target;
}

size_t PostDatasetsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostDatasetsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Dataset datasets = 2;
  total_size += 1UL * this->_internal_datasets_size();
  for (const auto& msg : this->datasets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostDatasetsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostDatasetsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostDatasetsRequest::GetClassData() const { return &_class_data_; }

void PostDatasetsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostDatasetsRequest *>(to)->MergeFrom(
      static_cast<const PostDatasetsRequest &>(from));
}


void PostDatasetsRequest::MergeFrom(const PostDatasetsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostDatasetsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  datasets_.MergeFrom(from.datasets_);
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostDatasetsRequest::CopyFrom(const PostDatasetsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostDatasetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostDatasetsRequest::IsInitialized() const {
  return true;
}

void PostDatasetsRequest::InternalSwap(PostDatasetsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  datasets_.InternalSwap(&other->datasets_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostDatasetsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[71]);
}

// ===================================================================

class PatchDatasetsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchDatasetsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchDatasetsRequest::_Internal::user_app_id(const PatchDatasetsRequest* msg) {
  return *msg->user_app_id_;
}
void PatchDatasetsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchDatasetsRequest::clear_datasets() {
  datasets_.Clear();
}
PatchDatasetsRequest::PatchDatasetsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  datasets_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchDatasetsRequest)
}
PatchDatasetsRequest::PatchDatasetsRequest(const PatchDatasetsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      datasets_(from.datasets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchDatasetsRequest)
}

inline void PatchDatasetsRequest::SharedCtor() {
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

PatchDatasetsRequest::~PatchDatasetsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchDatasetsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PatchDatasetsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchDatasetsRequest::ArenaDtor(void* object) {
  PatchDatasetsRequest* _this = reinterpret_cast< PatchDatasetsRequest* >(object);
  (void)_this;
}
void PatchDatasetsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatchDatasetsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PatchDatasetsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchDatasetsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datasets_.Clear();
  action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchDatasetsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Dataset datasets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datasets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchDatasetsRequest.action"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchDatasetsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchDatasetsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Dataset datasets = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datasets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_datasets(i), target, stream);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchDatasetsRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchDatasetsRequest)
  return target;
}

size_t PatchDatasetsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchDatasetsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Dataset datasets = 2;
  total_size += 1UL * this->_internal_datasets_size();
  for (const auto& msg : this->datasets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchDatasetsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PatchDatasetsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchDatasetsRequest::GetClassData() const { return &_class_data_; }

void PatchDatasetsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PatchDatasetsRequest *>(to)->MergeFrom(
      static_cast<const PatchDatasetsRequest &>(from));
}


void PatchDatasetsRequest::MergeFrom(const PatchDatasetsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchDatasetsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  datasets_.MergeFrom(from.datasets_);
  if (!from._internal_action().empty()) {
    _internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchDatasetsRequest::CopyFrom(const PatchDatasetsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchDatasetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchDatasetsRequest::IsInitialized() const {
  return true;
}

void PatchDatasetsRequest::InternalSwap(PatchDatasetsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  datasets_.InternalSwap(&other->datasets_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_, lhs_arena,
      &other->action_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchDatasetsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[72]);
}

// ===================================================================

class DeleteDatasetsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteDatasetsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteDatasetsRequest::_Internal::user_app_id(const DeleteDatasetsRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteDatasetsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteDatasetsRequest::DeleteDatasetsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  dataset_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteDatasetsRequest)
}
DeleteDatasetsRequest::DeleteDatasetsRequest(const DeleteDatasetsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dataset_ids_(from.dataset_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteDatasetsRequest)
}

inline void DeleteDatasetsRequest::SharedCtor() {
user_app_id_ = nullptr;
}

DeleteDatasetsRequest::~DeleteDatasetsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteDatasetsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteDatasetsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteDatasetsRequest::ArenaDtor(void* object) {
  DeleteDatasetsRequest* _this = reinterpret_cast< DeleteDatasetsRequest* >(object);
  (void)_this;
}
void DeleteDatasetsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteDatasetsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteDatasetsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteDatasetsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dataset_ids_.Clear();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteDatasetsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string dataset_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dataset_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteDatasetsRequest.dataset_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteDatasetsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteDatasetsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated string dataset_ids = 2;
  for (int i = 0, n = this->_internal_dataset_ids_size(); i < n; i++) {
    const auto& s = this->_internal_dataset_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteDatasetsRequest.dataset_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteDatasetsRequest)
  return target;
}

size_t DeleteDatasetsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteDatasetsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dataset_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(dataset_ids_.size());
  for (int i = 0, n = dataset_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      dataset_ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteDatasetsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteDatasetsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteDatasetsRequest::GetClassData() const { return &_class_data_; }

void DeleteDatasetsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteDatasetsRequest *>(to)->MergeFrom(
      static_cast<const DeleteDatasetsRequest &>(from));
}


void DeleteDatasetsRequest::MergeFrom(const DeleteDatasetsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteDatasetsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  dataset_ids_.MergeFrom(from.dataset_ids_);
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteDatasetsRequest::CopyFrom(const DeleteDatasetsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteDatasetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDatasetsRequest::IsInitialized() const {
  return true;
}

void DeleteDatasetsRequest::InternalSwap(DeleteDatasetsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  dataset_ids_.InternalSwap(&other->dataset_ids_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteDatasetsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[73]);
}

// ===================================================================

class MultiDatasetResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiDatasetResponse* msg);
};

const ::clarifai::api::status::Status&
MultiDatasetResponse::_Internal::status(const MultiDatasetResponse* msg) {
  return *msg->status_;
}
void MultiDatasetResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiDatasetResponse::clear_datasets() {
  datasets_.Clear();
}
MultiDatasetResponse::MultiDatasetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  datasets_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiDatasetResponse)
}
MultiDatasetResponse::MultiDatasetResponse(const MultiDatasetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      datasets_(from.datasets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiDatasetResponse)
}

inline void MultiDatasetResponse::SharedCtor() {
status_ = nullptr;
}

MultiDatasetResponse::~MultiDatasetResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiDatasetResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiDatasetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiDatasetResponse::ArenaDtor(void* object) {
  MultiDatasetResponse* _this = reinterpret_cast< MultiDatasetResponse* >(object);
  (void)_this;
}
void MultiDatasetResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiDatasetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiDatasetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiDatasetResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datasets_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiDatasetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Dataset datasets = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datasets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiDatasetResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiDatasetResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.Dataset datasets = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datasets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_datasets(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiDatasetResponse)
  return target;
}

size_t MultiDatasetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiDatasetResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Dataset datasets = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_datasets_size();
  for (const auto& msg : this->datasets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiDatasetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiDatasetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiDatasetResponse::GetClassData() const { return &_class_data_; }

void MultiDatasetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiDatasetResponse *>(to)->MergeFrom(
      static_cast<const MultiDatasetResponse &>(from));
}


void MultiDatasetResponse::MergeFrom(const MultiDatasetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiDatasetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  datasets_.MergeFrom(from.datasets_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiDatasetResponse::CopyFrom(const MultiDatasetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiDatasetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiDatasetResponse::IsInitialized() const {
  return true;
}

void MultiDatasetResponse::InternalSwap(MultiDatasetResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  datasets_.InternalSwap(&other->datasets_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiDatasetResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[74]);
}

// ===================================================================

class SingleDatasetResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleDatasetResponse* msg);
  static const ::clarifai::api::Dataset& dataset(const SingleDatasetResponse* msg);
};

const ::clarifai::api::status::Status&
SingleDatasetResponse::_Internal::status(const SingleDatasetResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::Dataset&
SingleDatasetResponse::_Internal::dataset(const SingleDatasetResponse* msg) {
  return *msg->dataset_;
}
void SingleDatasetResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleDatasetResponse::clear_dataset() {
  if (GetArenaForAllocation() == nullptr && dataset_ != nullptr) {
    delete dataset_;
  }
  dataset_ = nullptr;
}
SingleDatasetResponse::SingleDatasetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleDatasetResponse)
}
SingleDatasetResponse::SingleDatasetResponse(const SingleDatasetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_dataset()) {
    dataset_ = new ::clarifai::api::Dataset(*from.dataset_);
  } else {
    dataset_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleDatasetResponse)
}

inline void SingleDatasetResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dataset_) -
    reinterpret_cast<char*>(&status_)) + sizeof(dataset_));
}

SingleDatasetResponse::~SingleDatasetResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleDatasetResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SingleDatasetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete dataset_;
}

void SingleDatasetResponse::ArenaDtor(void* object) {
  SingleDatasetResponse* _this = reinterpret_cast< SingleDatasetResponse* >(object);
  (void)_this;
}
void SingleDatasetResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleDatasetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleDatasetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleDatasetResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && dataset_ != nullptr) {
    delete dataset_;
  }
  dataset_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleDatasetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Dataset dataset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dataset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleDatasetResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleDatasetResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.Dataset dataset = 2;
  if (this->_internal_has_dataset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dataset(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleDatasetResponse)
  return target;
}

size_t SingleDatasetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleDatasetResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.Dataset dataset = 2;
  if (this->_internal_has_dataset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dataset_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleDatasetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SingleDatasetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleDatasetResponse::GetClassData() const { return &_class_data_; }

void SingleDatasetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SingleDatasetResponse *>(to)->MergeFrom(
      static_cast<const SingleDatasetResponse &>(from));
}


void SingleDatasetResponse::MergeFrom(const SingleDatasetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleDatasetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_dataset()) {
    _internal_mutable_dataset()->::clarifai::api::Dataset::MergeFrom(from._internal_dataset());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleDatasetResponse::CopyFrom(const SingleDatasetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleDatasetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleDatasetResponse::IsInitialized() const {
  return true;
}

void SingleDatasetResponse::InternalSwap(SingleDatasetResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleDatasetResponse, dataset_)
      + sizeof(SingleDatasetResponse::dataset_)
      - PROTOBUF_FIELD_OFFSET(SingleDatasetResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleDatasetResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[75]);
}

// ===================================================================

class ListDatasetInputsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListDatasetInputsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListDatasetInputsRequest::_Internal::user_app_id(const ListDatasetInputsRequest* msg) {
  return *msg->user_app_id_;
}
void ListDatasetInputsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListDatasetInputsRequest::ListDatasetInputsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListDatasetInputsRequest)
}
ListDatasetInputsRequest::ListDatasetInputsRequest(const ListDatasetInputsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dataset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dataset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dataset_id().empty()) {
    dataset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dataset_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListDatasetInputsRequest)
}

inline void ListDatasetInputsRequest::SharedCtor() {
dataset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dataset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListDatasetInputsRequest::~ListDatasetInputsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListDatasetInputsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListDatasetInputsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  dataset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListDatasetInputsRequest::ArenaDtor(void* object) {
  ListDatasetInputsRequest* _this = reinterpret_cast< ListDatasetInputsRequest* >(object);
  (void)_this;
}
void ListDatasetInputsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListDatasetInputsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListDatasetInputsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListDatasetInputsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dataset_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDatasetInputsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dataset_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dataset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListDatasetInputsRequest.dataset_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListDatasetInputsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListDatasetInputsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_id().data(), static_cast<int>(this->_internal_dataset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListDatasetInputsRequest.dataset_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dataset_id(), target);
  }

  // uint32 page = 3;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_page(), target);
  }

  // uint32 per_page = 4;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListDatasetInputsRequest)
  return target;
}

size_t ListDatasetInputsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListDatasetInputsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 3;
  if (this->_internal_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 4;
  if (this->_internal_per_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListDatasetInputsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListDatasetInputsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListDatasetInputsRequest::GetClassData() const { return &_class_data_; }

void ListDatasetInputsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListDatasetInputsRequest *>(to)->MergeFrom(
      static_cast<const ListDatasetInputsRequest &>(from));
}


void ListDatasetInputsRequest::MergeFrom(const ListDatasetInputsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListDatasetInputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dataset_id().empty()) {
    _internal_set_dataset_id(from._internal_dataset_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListDatasetInputsRequest::CopyFrom(const ListDatasetInputsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListDatasetInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDatasetInputsRequest::IsInitialized() const {
  return true;
}

void ListDatasetInputsRequest::InternalSwap(ListDatasetInputsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dataset_id_, lhs_arena,
      &other->dataset_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListDatasetInputsRequest, per_page_)
      + sizeof(ListDatasetInputsRequest::per_page_)
      - PROTOBUF_FIELD_OFFSET(ListDatasetInputsRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDatasetInputsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[76]);
}

// ===================================================================

class GetDatasetInputRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetDatasetInputRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetDatasetInputRequest::_Internal::user_app_id(const GetDatasetInputRequest* msg) {
  return *msg->user_app_id_;
}
void GetDatasetInputRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetDatasetInputRequest::GetDatasetInputRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetDatasetInputRequest)
}
GetDatasetInputRequest::GetDatasetInputRequest(const GetDatasetInputRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dataset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dataset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dataset_id().empty()) {
    dataset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dataset_id(), 
      GetArenaForAllocation());
  }
  input_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    input_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_input_id().empty()) {
    input_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_input_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetDatasetInputRequest)
}

inline void GetDatasetInputRequest::SharedCtor() {
dataset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dataset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
input_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  input_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

GetDatasetInputRequest::~GetDatasetInputRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetDatasetInputRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetDatasetInputRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  dataset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetDatasetInputRequest::ArenaDtor(void* object) {
  GetDatasetInputRequest* _this = reinterpret_cast< GetDatasetInputRequest* >(object);
  (void)_this;
}
void GetDatasetInputRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDatasetInputRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetDatasetInputRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetDatasetInputRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dataset_id_.ClearToEmpty();
  input_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDatasetInputRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dataset_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dataset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetDatasetInputRequest.dataset_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string input_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_input_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetDatasetInputRequest.input_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDatasetInputRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetDatasetInputRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_id().data(), static_cast<int>(this->_internal_dataset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetDatasetInputRequest.dataset_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dataset_id(), target);
  }

  // string input_id = 3;
  if (!this->_internal_input_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input_id().data(), static_cast<int>(this->_internal_input_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetDatasetInputRequest.input_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_input_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetDatasetInputRequest)
  return target;
}

size_t GetDatasetInputRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetDatasetInputRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_id());
  }

  // string input_id = 3;
  if (!this->_internal_input_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_input_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDatasetInputRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetDatasetInputRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDatasetInputRequest::GetClassData() const { return &_class_data_; }

void GetDatasetInputRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetDatasetInputRequest *>(to)->MergeFrom(
      static_cast<const GetDatasetInputRequest &>(from));
}


void GetDatasetInputRequest::MergeFrom(const GetDatasetInputRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetDatasetInputRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dataset_id().empty()) {
    _internal_set_dataset_id(from._internal_dataset_id());
  }
  if (!from._internal_input_id().empty()) {
    _internal_set_input_id(from._internal_input_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDatasetInputRequest::CopyFrom(const GetDatasetInputRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetDatasetInputRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDatasetInputRequest::IsInitialized() const {
  return true;
}

void GetDatasetInputRequest::InternalSwap(GetDatasetInputRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dataset_id_, lhs_arena,
      &other->dataset_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &input_id_, lhs_arena,
      &other->input_id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDatasetInputRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[77]);
}

// ===================================================================

class PostDatasetInputsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostDatasetInputsRequest* msg);
  static const ::clarifai::api::Search& search(const PostDatasetInputsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostDatasetInputsRequest::_Internal::user_app_id(const PostDatasetInputsRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::Search&
PostDatasetInputsRequest::_Internal::search(const PostDatasetInputsRequest* msg) {
  return *msg->search_;
}
void PostDatasetInputsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostDatasetInputsRequest::clear_dataset_inputs() {
  dataset_inputs_.Clear();
}
void PostDatasetInputsRequest::clear_search() {
  if (GetArenaForAllocation() == nullptr && search_ != nullptr) {
    delete search_;
  }
  search_ = nullptr;
}
PostDatasetInputsRequest::PostDatasetInputsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  dataset_inputs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostDatasetInputsRequest)
}
PostDatasetInputsRequest::PostDatasetInputsRequest(const PostDatasetInputsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dataset_inputs_(from.dataset_inputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dataset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dataset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dataset_id().empty()) {
    dataset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dataset_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_search()) {
    search_ = new ::clarifai::api::Search(*from.search_);
  } else {
    search_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostDatasetInputsRequest)
}

inline void PostDatasetInputsRequest::SharedCtor() {
dataset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dataset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&search_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(search_));
}

PostDatasetInputsRequest::~PostDatasetInputsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostDatasetInputsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostDatasetInputsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  dataset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete search_;
}

void PostDatasetInputsRequest::ArenaDtor(void* object) {
  PostDatasetInputsRequest* _this = reinterpret_cast< PostDatasetInputsRequest* >(object);
  (void)_this;
}
void PostDatasetInputsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostDatasetInputsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostDatasetInputsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostDatasetInputsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dataset_inputs_.Clear();
  dataset_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && search_ != nullptr) {
    delete search_;
  }
  search_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostDatasetInputsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dataset_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dataset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostDatasetInputsRequest.dataset_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.DatasetInput dataset_inputs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dataset_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Search search = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_search(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostDatasetInputsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostDatasetInputsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_id().data(), static_cast<int>(this->_internal_dataset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostDatasetInputsRequest.dataset_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dataset_id(), target);
  }

  // repeated .clarifai.api.DatasetInput dataset_inputs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dataset_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_dataset_inputs(i), target, stream);
  }

  // .clarifai.api.Search search = 4;
  if (this->_internal_has_search()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::search(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostDatasetInputsRequest)
  return target;
}

size_t PostDatasetInputsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostDatasetInputsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.DatasetInput dataset_inputs = 3;
  total_size += 1UL * this->_internal_dataset_inputs_size();
  for (const auto& msg : this->dataset_inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.Search search = 4;
  if (this->_internal_has_search()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *search_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostDatasetInputsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostDatasetInputsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostDatasetInputsRequest::GetClassData() const { return &_class_data_; }

void PostDatasetInputsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostDatasetInputsRequest *>(to)->MergeFrom(
      static_cast<const PostDatasetInputsRequest &>(from));
}


void PostDatasetInputsRequest::MergeFrom(const PostDatasetInputsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostDatasetInputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  dataset_inputs_.MergeFrom(from.dataset_inputs_);
  if (!from._internal_dataset_id().empty()) {
    _internal_set_dataset_id(from._internal_dataset_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_has_search()) {
    _internal_mutable_search()->::clarifai::api::Search::MergeFrom(from._internal_search());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostDatasetInputsRequest::CopyFrom(const PostDatasetInputsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostDatasetInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostDatasetInputsRequest::IsInitialized() const {
  return true;
}

void PostDatasetInputsRequest::InternalSwap(PostDatasetInputsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  dataset_inputs_.InternalSwap(&other->dataset_inputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dataset_id_, lhs_arena,
      &other->dataset_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostDatasetInputsRequest, search_)
      + sizeof(PostDatasetInputsRequest::search_)
      - PROTOBUF_FIELD_OFFSET(PostDatasetInputsRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostDatasetInputsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[78]);
}

// ===================================================================

class DeleteDatasetInputsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteDatasetInputsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteDatasetInputsRequest::_Internal::user_app_id(const DeleteDatasetInputsRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteDatasetInputsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteDatasetInputsRequest::DeleteDatasetInputsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  input_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteDatasetInputsRequest)
}
DeleteDatasetInputsRequest::DeleteDatasetInputsRequest(const DeleteDatasetInputsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      input_ids_(from.input_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dataset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dataset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dataset_id().empty()) {
    dataset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dataset_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteDatasetInputsRequest)
}

inline void DeleteDatasetInputsRequest::SharedCtor() {
dataset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dataset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

DeleteDatasetInputsRequest::~DeleteDatasetInputsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteDatasetInputsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteDatasetInputsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  dataset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteDatasetInputsRequest::ArenaDtor(void* object) {
  DeleteDatasetInputsRequest* _this = reinterpret_cast< DeleteDatasetInputsRequest* >(object);
  (void)_this;
}
void DeleteDatasetInputsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteDatasetInputsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteDatasetInputsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteDatasetInputsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_ids_.Clear();
  dataset_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteDatasetInputsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dataset_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dataset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteDatasetInputsRequest.dataset_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string input_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteDatasetInputsRequest.input_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteDatasetInputsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteDatasetInputsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_id().data(), static_cast<int>(this->_internal_dataset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteDatasetInputsRequest.dataset_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dataset_id(), target);
  }

  // repeated string input_ids = 3;
  for (int i = 0, n = this->_internal_input_ids_size(); i < n; i++) {
    const auto& s = this->_internal_input_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteDatasetInputsRequest.input_ids");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteDatasetInputsRequest)
  return target;
}

size_t DeleteDatasetInputsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteDatasetInputsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string input_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(input_ids_.size());
  for (int i = 0, n = input_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      input_ids_.Get(i));
  }

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteDatasetInputsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteDatasetInputsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteDatasetInputsRequest::GetClassData() const { return &_class_data_; }

void DeleteDatasetInputsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteDatasetInputsRequest *>(to)->MergeFrom(
      static_cast<const DeleteDatasetInputsRequest &>(from));
}


void DeleteDatasetInputsRequest::MergeFrom(const DeleteDatasetInputsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteDatasetInputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  input_ids_.MergeFrom(from.input_ids_);
  if (!from._internal_dataset_id().empty()) {
    _internal_set_dataset_id(from._internal_dataset_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteDatasetInputsRequest::CopyFrom(const DeleteDatasetInputsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteDatasetInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDatasetInputsRequest::IsInitialized() const {
  return true;
}

void DeleteDatasetInputsRequest::InternalSwap(DeleteDatasetInputsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  input_ids_.InternalSwap(&other->input_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dataset_id_, lhs_arena,
      &other->dataset_id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteDatasetInputsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[79]);
}

// ===================================================================

class MultiDatasetInputResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiDatasetInputResponse* msg);
  static const ::clarifai::api::DatasetInputsSearchAddJob& dataset_inputs_search_add_job(const MultiDatasetInputResponse* msg);
};

const ::clarifai::api::status::Status&
MultiDatasetInputResponse::_Internal::status(const MultiDatasetInputResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::DatasetInputsSearchAddJob&
MultiDatasetInputResponse::_Internal::dataset_inputs_search_add_job(const MultiDatasetInputResponse* msg) {
  return *msg->dataset_inputs_search_add_job_;
}
void MultiDatasetInputResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiDatasetInputResponse::clear_dataset_inputs() {
  dataset_inputs_.Clear();
}
void MultiDatasetInputResponse::clear_dataset_inputs_search_add_job() {
  if (GetArenaForAllocation() == nullptr && dataset_inputs_search_add_job_ != nullptr) {
    delete dataset_inputs_search_add_job_;
  }
  dataset_inputs_search_add_job_ = nullptr;
}
MultiDatasetInputResponse::MultiDatasetInputResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  dataset_inputs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiDatasetInputResponse)
}
MultiDatasetInputResponse::MultiDatasetInputResponse(const MultiDatasetInputResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dataset_inputs_(from.dataset_inputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_dataset_inputs_search_add_job()) {
    dataset_inputs_search_add_job_ = new ::clarifai::api::DatasetInputsSearchAddJob(*from.dataset_inputs_search_add_job_);
  } else {
    dataset_inputs_search_add_job_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiDatasetInputResponse)
}

inline void MultiDatasetInputResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dataset_inputs_search_add_job_) -
    reinterpret_cast<char*>(&status_)) + sizeof(dataset_inputs_search_add_job_));
}

MultiDatasetInputResponse::~MultiDatasetInputResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiDatasetInputResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiDatasetInputResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete dataset_inputs_search_add_job_;
}

void MultiDatasetInputResponse::ArenaDtor(void* object) {
  MultiDatasetInputResponse* _this = reinterpret_cast< MultiDatasetInputResponse* >(object);
  (void)_this;
}
void MultiDatasetInputResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiDatasetInputResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiDatasetInputResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiDatasetInputResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dataset_inputs_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && dataset_inputs_search_add_job_ != nullptr) {
    delete dataset_inputs_search_add_job_;
  }
  dataset_inputs_search_add_job_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiDatasetInputResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.DatasetInput dataset_inputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dataset_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.DatasetInputsSearchAddJob dataset_inputs_search_add_job = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dataset_inputs_search_add_job(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiDatasetInputResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiDatasetInputResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.DatasetInput dataset_inputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dataset_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_dataset_inputs(i), target, stream);
  }

  // .clarifai.api.DatasetInputsSearchAddJob dataset_inputs_search_add_job = 3;
  if (this->_internal_has_dataset_inputs_search_add_job()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::dataset_inputs_search_add_job(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiDatasetInputResponse)
  return target;
}

size_t MultiDatasetInputResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiDatasetInputResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.DatasetInput dataset_inputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_dataset_inputs_size();
  for (const auto& msg : this->dataset_inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.DatasetInputsSearchAddJob dataset_inputs_search_add_job = 3;
  if (this->_internal_has_dataset_inputs_search_add_job()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dataset_inputs_search_add_job_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiDatasetInputResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiDatasetInputResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiDatasetInputResponse::GetClassData() const { return &_class_data_; }

void MultiDatasetInputResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiDatasetInputResponse *>(to)->MergeFrom(
      static_cast<const MultiDatasetInputResponse &>(from));
}


void MultiDatasetInputResponse::MergeFrom(const MultiDatasetInputResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiDatasetInputResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  dataset_inputs_.MergeFrom(from.dataset_inputs_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_dataset_inputs_search_add_job()) {
    _internal_mutable_dataset_inputs_search_add_job()->::clarifai::api::DatasetInputsSearchAddJob::MergeFrom(from._internal_dataset_inputs_search_add_job());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiDatasetInputResponse::CopyFrom(const MultiDatasetInputResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiDatasetInputResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiDatasetInputResponse::IsInitialized() const {
  return true;
}

void MultiDatasetInputResponse::InternalSwap(MultiDatasetInputResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  dataset_inputs_.InternalSwap(&other->dataset_inputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MultiDatasetInputResponse, dataset_inputs_search_add_job_)
      + sizeof(MultiDatasetInputResponse::dataset_inputs_search_add_job_)
      - PROTOBUF_FIELD_OFFSET(MultiDatasetInputResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiDatasetInputResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[80]);
}

// ===================================================================

class SingleDatasetInputResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleDatasetInputResponse* msg);
  static const ::clarifai::api::DatasetInput& dataset_input(const SingleDatasetInputResponse* msg);
};

const ::clarifai::api::status::Status&
SingleDatasetInputResponse::_Internal::status(const SingleDatasetInputResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::DatasetInput&
SingleDatasetInputResponse::_Internal::dataset_input(const SingleDatasetInputResponse* msg) {
  return *msg->dataset_input_;
}
void SingleDatasetInputResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleDatasetInputResponse::clear_dataset_input() {
  if (GetArenaForAllocation() == nullptr && dataset_input_ != nullptr) {
    delete dataset_input_;
  }
  dataset_input_ = nullptr;
}
SingleDatasetInputResponse::SingleDatasetInputResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleDatasetInputResponse)
}
SingleDatasetInputResponse::SingleDatasetInputResponse(const SingleDatasetInputResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_dataset_input()) {
    dataset_input_ = new ::clarifai::api::DatasetInput(*from.dataset_input_);
  } else {
    dataset_input_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleDatasetInputResponse)
}

inline void SingleDatasetInputResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dataset_input_) -
    reinterpret_cast<char*>(&status_)) + sizeof(dataset_input_));
}

SingleDatasetInputResponse::~SingleDatasetInputResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleDatasetInputResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SingleDatasetInputResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete dataset_input_;
}

void SingleDatasetInputResponse::ArenaDtor(void* object) {
  SingleDatasetInputResponse* _this = reinterpret_cast< SingleDatasetInputResponse* >(object);
  (void)_this;
}
void SingleDatasetInputResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleDatasetInputResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleDatasetInputResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleDatasetInputResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && dataset_input_ != nullptr) {
    delete dataset_input_;
  }
  dataset_input_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleDatasetInputResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.DatasetInput dataset_input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dataset_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleDatasetInputResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleDatasetInputResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.DatasetInput dataset_input = 2;
  if (this->_internal_has_dataset_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dataset_input(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleDatasetInputResponse)
  return target;
}

size_t SingleDatasetInputResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleDatasetInputResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.DatasetInput dataset_input = 2;
  if (this->_internal_has_dataset_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dataset_input_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleDatasetInputResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SingleDatasetInputResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleDatasetInputResponse::GetClassData() const { return &_class_data_; }

void SingleDatasetInputResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SingleDatasetInputResponse *>(to)->MergeFrom(
      static_cast<const SingleDatasetInputResponse &>(from));
}


void SingleDatasetInputResponse::MergeFrom(const SingleDatasetInputResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleDatasetInputResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_dataset_input()) {
    _internal_mutable_dataset_input()->::clarifai::api::DatasetInput::MergeFrom(from._internal_dataset_input());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleDatasetInputResponse::CopyFrom(const SingleDatasetInputResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleDatasetInputResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleDatasetInputResponse::IsInitialized() const {
  return true;
}

void SingleDatasetInputResponse::InternalSwap(SingleDatasetInputResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleDatasetInputResponse, dataset_input_)
      + sizeof(SingleDatasetInputResponse::dataset_input_)
      - PROTOBUF_FIELD_OFFSET(SingleDatasetInputResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleDatasetInputResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[81]);
}

// ===================================================================

class ListDatasetVersionsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListDatasetVersionsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListDatasetVersionsRequest::_Internal::user_app_id(const ListDatasetVersionsRequest* msg) {
  return *msg->user_app_id_;
}
void ListDatasetVersionsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListDatasetVersionsRequest::ListDatasetVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListDatasetVersionsRequest)
}
ListDatasetVersionsRequest::ListDatasetVersionsRequest(const ListDatasetVersionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dataset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dataset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dataset_id().empty()) {
    dataset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dataset_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListDatasetVersionsRequest)
}

inline void ListDatasetVersionsRequest::SharedCtor() {
dataset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dataset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListDatasetVersionsRequest::~ListDatasetVersionsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListDatasetVersionsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListDatasetVersionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  dataset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListDatasetVersionsRequest::ArenaDtor(void* object) {
  ListDatasetVersionsRequest* _this = reinterpret_cast< ListDatasetVersionsRequest* >(object);
  (void)_this;
}
void ListDatasetVersionsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListDatasetVersionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListDatasetVersionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListDatasetVersionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dataset_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDatasetVersionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dataset_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dataset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListDatasetVersionsRequest.dataset_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListDatasetVersionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListDatasetVersionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_id().data(), static_cast<int>(this->_internal_dataset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListDatasetVersionsRequest.dataset_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dataset_id(), target);
  }

  // uint32 page = 3;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_page(), target);
  }

  // uint32 per_page = 4;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListDatasetVersionsRequest)
  return target;
}

size_t ListDatasetVersionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListDatasetVersionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 3;
  if (this->_internal_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 4;
  if (this->_internal_per_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListDatasetVersionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListDatasetVersionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListDatasetVersionsRequest::GetClassData() const { return &_class_data_; }

void ListDatasetVersionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListDatasetVersionsRequest *>(to)->MergeFrom(
      static_cast<const ListDatasetVersionsRequest &>(from));
}


void ListDatasetVersionsRequest::MergeFrom(const ListDatasetVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListDatasetVersionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dataset_id().empty()) {
    _internal_set_dataset_id(from._internal_dataset_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListDatasetVersionsRequest::CopyFrom(const ListDatasetVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListDatasetVersionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDatasetVersionsRequest::IsInitialized() const {
  return true;
}

void ListDatasetVersionsRequest::InternalSwap(ListDatasetVersionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dataset_id_, lhs_arena,
      &other->dataset_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListDatasetVersionsRequest, per_page_)
      + sizeof(ListDatasetVersionsRequest::per_page_)
      - PROTOBUF_FIELD_OFFSET(ListDatasetVersionsRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDatasetVersionsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[82]);
}

// ===================================================================

class GetDatasetVersionRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetDatasetVersionRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetDatasetVersionRequest::_Internal::user_app_id(const GetDatasetVersionRequest* msg) {
  return *msg->user_app_id_;
}
void GetDatasetVersionRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetDatasetVersionRequest::GetDatasetVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetDatasetVersionRequest)
}
GetDatasetVersionRequest::GetDatasetVersionRequest(const GetDatasetVersionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dataset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dataset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dataset_id().empty()) {
    dataset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dataset_id(), 
      GetArenaForAllocation());
  }
  dataset_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dataset_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dataset_version_id().empty()) {
    dataset_version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dataset_version_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetDatasetVersionRequest)
}

inline void GetDatasetVersionRequest::SharedCtor() {
dataset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dataset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
dataset_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dataset_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

GetDatasetVersionRequest::~GetDatasetVersionRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetDatasetVersionRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetDatasetVersionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  dataset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dataset_version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetDatasetVersionRequest::ArenaDtor(void* object) {
  GetDatasetVersionRequest* _this = reinterpret_cast< GetDatasetVersionRequest* >(object);
  (void)_this;
}
void GetDatasetVersionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDatasetVersionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetDatasetVersionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetDatasetVersionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dataset_id_.ClearToEmpty();
  dataset_version_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDatasetVersionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dataset_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dataset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetDatasetVersionRequest.dataset_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dataset_version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_dataset_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetDatasetVersionRequest.dataset_version_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDatasetVersionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetDatasetVersionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_id().data(), static_cast<int>(this->_internal_dataset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetDatasetVersionRequest.dataset_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dataset_id(), target);
  }

  // string dataset_version_id = 3;
  if (!this->_internal_dataset_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_version_id().data(), static_cast<int>(this->_internal_dataset_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetDatasetVersionRequest.dataset_version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_dataset_version_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetDatasetVersionRequest)
  return target;
}

size_t GetDatasetVersionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetDatasetVersionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_id());
  }

  // string dataset_version_id = 3;
  if (!this->_internal_dataset_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDatasetVersionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetDatasetVersionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDatasetVersionRequest::GetClassData() const { return &_class_data_; }

void GetDatasetVersionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetDatasetVersionRequest *>(to)->MergeFrom(
      static_cast<const GetDatasetVersionRequest &>(from));
}


void GetDatasetVersionRequest::MergeFrom(const GetDatasetVersionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetDatasetVersionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dataset_id().empty()) {
    _internal_set_dataset_id(from._internal_dataset_id());
  }
  if (!from._internal_dataset_version_id().empty()) {
    _internal_set_dataset_version_id(from._internal_dataset_version_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDatasetVersionRequest::CopyFrom(const GetDatasetVersionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetDatasetVersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDatasetVersionRequest::IsInitialized() const {
  return true;
}

void GetDatasetVersionRequest::InternalSwap(GetDatasetVersionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dataset_id_, lhs_arena,
      &other->dataset_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dataset_version_id_, lhs_arena,
      &other->dataset_version_id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDatasetVersionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[83]);
}

// ===================================================================

class ListDatasetVersionMetricsGroupsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListDatasetVersionMetricsGroupsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListDatasetVersionMetricsGroupsRequest::_Internal::user_app_id(const ListDatasetVersionMetricsGroupsRequest* msg) {
  return *msg->user_app_id_;
}
void ListDatasetVersionMetricsGroupsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void ListDatasetVersionMetricsGroupsRequest::clear_values() {
  values_.Clear();
}
ListDatasetVersionMetricsGroupsRequest::ListDatasetVersionMetricsGroupsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  parent_paths_(arena),
  types_(arena),
  values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListDatasetVersionMetricsGroupsRequest)
}
ListDatasetVersionMetricsGroupsRequest::ListDatasetVersionMetricsGroupsRequest(const ListDatasetVersionMetricsGroupsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      parent_paths_(from.parent_paths_),
      types_(from.types_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dataset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dataset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dataset_id().empty()) {
    dataset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dataset_id(), 
      GetArenaForAllocation());
  }
  dataset_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dataset_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dataset_version_id().empty()) {
    dataset_version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dataset_version_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListDatasetVersionMetricsGroupsRequest)
}

inline void ListDatasetVersionMetricsGroupsRequest::SharedCtor() {
dataset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dataset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
dataset_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dataset_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListDatasetVersionMetricsGroupsRequest::~ListDatasetVersionMetricsGroupsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListDatasetVersionMetricsGroupsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListDatasetVersionMetricsGroupsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  dataset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dataset_version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListDatasetVersionMetricsGroupsRequest::ArenaDtor(void* object) {
  ListDatasetVersionMetricsGroupsRequest* _this = reinterpret_cast< ListDatasetVersionMetricsGroupsRequest* >(object);
  (void)_this;
}
void ListDatasetVersionMetricsGroupsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListDatasetVersionMetricsGroupsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListDatasetVersionMetricsGroupsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListDatasetVersionMetricsGroupsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_paths_.Clear();
  types_.Clear();
  values_.Clear();
  dataset_id_.ClearToEmpty();
  dataset_version_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDatasetVersionMetricsGroupsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dataset_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dataset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListDatasetVersionMetricsGroupsRequest.dataset_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dataset_version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_dataset_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListDatasetVersionMetricsGroupsRequest.dataset_version_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string parent_paths = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_parent_paths();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListDatasetVersionMetricsGroupsRequest.parent_paths"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.DatasetVersionMetricsGroupType types = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_types(static_cast<::clarifai::api::DatasetVersionMetricsGroupType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .google.protobuf.Value values = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListDatasetVersionMetricsGroupsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListDatasetVersionMetricsGroupsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_id().data(), static_cast<int>(this->_internal_dataset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListDatasetVersionMetricsGroupsRequest.dataset_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dataset_id(), target);
  }

  // string dataset_version_id = 3;
  if (!this->_internal_dataset_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_version_id().data(), static_cast<int>(this->_internal_dataset_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListDatasetVersionMetricsGroupsRequest.dataset_version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_dataset_version_id(), target);
  }

  // uint32 page = 4;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_page(), target);
  }

  // uint32 per_page = 5;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_per_page(), target);
  }

  // repeated string parent_paths = 6;
  for (int i = 0, n = this->_internal_parent_paths_size(); i < n; i++) {
    const auto& s = this->_internal_parent_paths(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListDatasetVersionMetricsGroupsRequest.parent_paths");
    target = stream->WriteString(6, s, target);
  }

  // repeated .clarifai.api.DatasetVersionMetricsGroupType types = 7;
  {
    int byte_size = _types_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          7, types_, byte_size, target);
    }
  }

  // repeated .google.protobuf.Value values = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListDatasetVersionMetricsGroupsRequest)
  return target;
}

size_t ListDatasetVersionMetricsGroupsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListDatasetVersionMetricsGroupsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string parent_paths = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(parent_paths_.size());
  for (int i = 0, n = parent_paths_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      parent_paths_.Get(i));
  }

  // repeated .clarifai.api.DatasetVersionMetricsGroupType types = 7;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .google.protobuf.Value values = 8;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_id());
  }

  // string dataset_version_id = 3;
  if (!this->_internal_dataset_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 4;
  if (this->_internal_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 5;
  if (this->_internal_per_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListDatasetVersionMetricsGroupsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListDatasetVersionMetricsGroupsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListDatasetVersionMetricsGroupsRequest::GetClassData() const { return &_class_data_; }

void ListDatasetVersionMetricsGroupsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListDatasetVersionMetricsGroupsRequest *>(to)->MergeFrom(
      static_cast<const ListDatasetVersionMetricsGroupsRequest &>(from));
}


void ListDatasetVersionMetricsGroupsRequest::MergeFrom(const ListDatasetVersionMetricsGroupsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListDatasetVersionMetricsGroupsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  parent_paths_.MergeFrom(from.parent_paths_);
  types_.MergeFrom(from.types_);
  values_.MergeFrom(from.values_);
  if (!from._internal_dataset_id().empty()) {
    _internal_set_dataset_id(from._internal_dataset_id());
  }
  if (!from._internal_dataset_version_id().empty()) {
    _internal_set_dataset_version_id(from._internal_dataset_version_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListDatasetVersionMetricsGroupsRequest::CopyFrom(const ListDatasetVersionMetricsGroupsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListDatasetVersionMetricsGroupsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDatasetVersionMetricsGroupsRequest::IsInitialized() const {
  return true;
}

void ListDatasetVersionMetricsGroupsRequest::InternalSwap(ListDatasetVersionMetricsGroupsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  parent_paths_.InternalSwap(&other->parent_paths_);
  types_.InternalSwap(&other->types_);
  values_.InternalSwap(&other->values_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dataset_id_, lhs_arena,
      &other->dataset_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dataset_version_id_, lhs_arena,
      &other->dataset_version_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListDatasetVersionMetricsGroupsRequest, per_page_)
      + sizeof(ListDatasetVersionMetricsGroupsRequest::per_page_)
      - PROTOBUF_FIELD_OFFSET(ListDatasetVersionMetricsGroupsRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDatasetVersionMetricsGroupsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[84]);
}

// ===================================================================

class PostDatasetVersionsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostDatasetVersionsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostDatasetVersionsRequest::_Internal::user_app_id(const PostDatasetVersionsRequest* msg) {
  return *msg->user_app_id_;
}
void PostDatasetVersionsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostDatasetVersionsRequest::clear_dataset_versions() {
  dataset_versions_.Clear();
}
PostDatasetVersionsRequest::PostDatasetVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  dataset_versions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostDatasetVersionsRequest)
}
PostDatasetVersionsRequest::PostDatasetVersionsRequest(const PostDatasetVersionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dataset_versions_(from.dataset_versions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dataset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dataset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dataset_id().empty()) {
    dataset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dataset_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostDatasetVersionsRequest)
}

inline void PostDatasetVersionsRequest::SharedCtor() {
dataset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dataset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

PostDatasetVersionsRequest::~PostDatasetVersionsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostDatasetVersionsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostDatasetVersionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  dataset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostDatasetVersionsRequest::ArenaDtor(void* object) {
  PostDatasetVersionsRequest* _this = reinterpret_cast< PostDatasetVersionsRequest* >(object);
  (void)_this;
}
void PostDatasetVersionsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostDatasetVersionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostDatasetVersionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostDatasetVersionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dataset_versions_.Clear();
  dataset_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostDatasetVersionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dataset_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dataset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostDatasetVersionsRequest.dataset_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.DatasetVersion dataset_versions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dataset_versions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostDatasetVersionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostDatasetVersionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_id().data(), static_cast<int>(this->_internal_dataset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostDatasetVersionsRequest.dataset_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dataset_id(), target);
  }

  // repeated .clarifai.api.DatasetVersion dataset_versions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dataset_versions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_dataset_versions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostDatasetVersionsRequest)
  return target;
}

size_t PostDatasetVersionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostDatasetVersionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.DatasetVersion dataset_versions = 3;
  total_size += 1UL * this->_internal_dataset_versions_size();
  for (const auto& msg : this->dataset_versions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostDatasetVersionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostDatasetVersionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostDatasetVersionsRequest::GetClassData() const { return &_class_data_; }

void PostDatasetVersionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostDatasetVersionsRequest *>(to)->MergeFrom(
      static_cast<const PostDatasetVersionsRequest &>(from));
}


void PostDatasetVersionsRequest::MergeFrom(const PostDatasetVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostDatasetVersionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  dataset_versions_.MergeFrom(from.dataset_versions_);
  if (!from._internal_dataset_id().empty()) {
    _internal_set_dataset_id(from._internal_dataset_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostDatasetVersionsRequest::CopyFrom(const PostDatasetVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostDatasetVersionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostDatasetVersionsRequest::IsInitialized() const {
  return true;
}

void PostDatasetVersionsRequest::InternalSwap(PostDatasetVersionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  dataset_versions_.InternalSwap(&other->dataset_versions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dataset_id_, lhs_arena,
      &other->dataset_id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostDatasetVersionsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[85]);
}

// ===================================================================

class PatchDatasetVersionsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchDatasetVersionsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchDatasetVersionsRequest::_Internal::user_app_id(const PatchDatasetVersionsRequest* msg) {
  return *msg->user_app_id_;
}
void PatchDatasetVersionsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchDatasetVersionsRequest::clear_dataset_versions() {
  dataset_versions_.Clear();
}
PatchDatasetVersionsRequest::PatchDatasetVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  dataset_versions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchDatasetVersionsRequest)
}
PatchDatasetVersionsRequest::PatchDatasetVersionsRequest(const PatchDatasetVersionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dataset_versions_(from.dataset_versions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dataset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dataset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dataset_id().empty()) {
    dataset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dataset_id(), 
      GetArenaForAllocation());
  }
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchDatasetVersionsRequest)
}

inline void PatchDatasetVersionsRequest::SharedCtor() {
dataset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dataset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

PatchDatasetVersionsRequest::~PatchDatasetVersionsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchDatasetVersionsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PatchDatasetVersionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  dataset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchDatasetVersionsRequest::ArenaDtor(void* object) {
  PatchDatasetVersionsRequest* _this = reinterpret_cast< PatchDatasetVersionsRequest* >(object);
  (void)_this;
}
void PatchDatasetVersionsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatchDatasetVersionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PatchDatasetVersionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchDatasetVersionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dataset_versions_.Clear();
  dataset_id_.ClearToEmpty();
  action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchDatasetVersionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dataset_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dataset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchDatasetVersionsRequest.dataset_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.DatasetVersion dataset_versions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dataset_versions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchDatasetVersionsRequest.action"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchDatasetVersionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchDatasetVersionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_id().data(), static_cast<int>(this->_internal_dataset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchDatasetVersionsRequest.dataset_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dataset_id(), target);
  }

  // repeated .clarifai.api.DatasetVersion dataset_versions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dataset_versions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_dataset_versions(i), target, stream);
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchDatasetVersionsRequest.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchDatasetVersionsRequest)
  return target;
}

size_t PatchDatasetVersionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchDatasetVersionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.DatasetVersion dataset_versions = 3;
  total_size += 1UL * this->_internal_dataset_versions_size();
  for (const auto& msg : this->dataset_versions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_id());
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchDatasetVersionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PatchDatasetVersionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchDatasetVersionsRequest::GetClassData() const { return &_class_data_; }

void PatchDatasetVersionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PatchDatasetVersionsRequest *>(to)->MergeFrom(
      static_cast<const PatchDatasetVersionsRequest &>(from));
}


void PatchDatasetVersionsRequest::MergeFrom(const PatchDatasetVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchDatasetVersionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  dataset_versions_.MergeFrom(from.dataset_versions_);
  if (!from._internal_dataset_id().empty()) {
    _internal_set_dataset_id(from._internal_dataset_id());
  }
  if (!from._internal_action().empty()) {
    _internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchDatasetVersionsRequest::CopyFrom(const PatchDatasetVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchDatasetVersionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchDatasetVersionsRequest::IsInitialized() const {
  return true;
}

void PatchDatasetVersionsRequest::InternalSwap(PatchDatasetVersionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  dataset_versions_.InternalSwap(&other->dataset_versions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dataset_id_, lhs_arena,
      &other->dataset_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_, lhs_arena,
      &other->action_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchDatasetVersionsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[86]);
}

// ===================================================================

class DeleteDatasetVersionsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteDatasetVersionsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteDatasetVersionsRequest::_Internal::user_app_id(const DeleteDatasetVersionsRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteDatasetVersionsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteDatasetVersionsRequest::DeleteDatasetVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  dataset_version_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteDatasetVersionsRequest)
}
DeleteDatasetVersionsRequest::DeleteDatasetVersionsRequest(const DeleteDatasetVersionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dataset_version_ids_(from.dataset_version_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dataset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dataset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dataset_id().empty()) {
    dataset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dataset_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteDatasetVersionsRequest)
}

inline void DeleteDatasetVersionsRequest::SharedCtor() {
dataset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dataset_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

DeleteDatasetVersionsRequest::~DeleteDatasetVersionsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteDatasetVersionsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteDatasetVersionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  dataset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteDatasetVersionsRequest::ArenaDtor(void* object) {
  DeleteDatasetVersionsRequest* _this = reinterpret_cast< DeleteDatasetVersionsRequest* >(object);
  (void)_this;
}
void DeleteDatasetVersionsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteDatasetVersionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteDatasetVersionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteDatasetVersionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dataset_version_ids_.Clear();
  dataset_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteDatasetVersionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dataset_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dataset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteDatasetVersionsRequest.dataset_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string dataset_version_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dataset_version_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteDatasetVersionsRequest.dataset_version_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteDatasetVersionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteDatasetVersionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_id().data(), static_cast<int>(this->_internal_dataset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteDatasetVersionsRequest.dataset_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dataset_id(), target);
  }

  // repeated string dataset_version_ids = 3;
  for (int i = 0, n = this->_internal_dataset_version_ids_size(); i < n; i++) {
    const auto& s = this->_internal_dataset_version_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteDatasetVersionsRequest.dataset_version_ids");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteDatasetVersionsRequest)
  return target;
}

size_t DeleteDatasetVersionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteDatasetVersionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dataset_version_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(dataset_version_ids_.size());
  for (int i = 0, n = dataset_version_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      dataset_version_ids_.Get(i));
  }

  // string dataset_id = 2;
  if (!this->_internal_dataset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteDatasetVersionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteDatasetVersionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteDatasetVersionsRequest::GetClassData() const { return &_class_data_; }

void DeleteDatasetVersionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteDatasetVersionsRequest *>(to)->MergeFrom(
      static_cast<const DeleteDatasetVersionsRequest &>(from));
}


void DeleteDatasetVersionsRequest::MergeFrom(const DeleteDatasetVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteDatasetVersionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  dataset_version_ids_.MergeFrom(from.dataset_version_ids_);
  if (!from._internal_dataset_id().empty()) {
    _internal_set_dataset_id(from._internal_dataset_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteDatasetVersionsRequest::CopyFrom(const DeleteDatasetVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteDatasetVersionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDatasetVersionsRequest::IsInitialized() const {
  return true;
}

void DeleteDatasetVersionsRequest::InternalSwap(DeleteDatasetVersionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  dataset_version_ids_.InternalSwap(&other->dataset_version_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dataset_id_, lhs_arena,
      &other->dataset_id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteDatasetVersionsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[87]);
}

// ===================================================================

class MultiDatasetVersionResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiDatasetVersionResponse* msg);
};

const ::clarifai::api::status::Status&
MultiDatasetVersionResponse::_Internal::status(const MultiDatasetVersionResponse* msg) {
  return *msg->status_;
}
void MultiDatasetVersionResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiDatasetVersionResponse::clear_dataset_versions() {
  dataset_versions_.Clear();
}
MultiDatasetVersionResponse::MultiDatasetVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  dataset_versions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiDatasetVersionResponse)
}
MultiDatasetVersionResponse::MultiDatasetVersionResponse(const MultiDatasetVersionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dataset_versions_(from.dataset_versions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiDatasetVersionResponse)
}

inline void MultiDatasetVersionResponse::SharedCtor() {
status_ = nullptr;
}

MultiDatasetVersionResponse::~MultiDatasetVersionResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiDatasetVersionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiDatasetVersionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiDatasetVersionResponse::ArenaDtor(void* object) {
  MultiDatasetVersionResponse* _this = reinterpret_cast< MultiDatasetVersionResponse* >(object);
  (void)_this;
}
void MultiDatasetVersionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiDatasetVersionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiDatasetVersionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiDatasetVersionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dataset_versions_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiDatasetVersionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.DatasetVersion dataset_versions = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dataset_versions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiDatasetVersionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiDatasetVersionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.DatasetVersion dataset_versions = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dataset_versions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_dataset_versions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiDatasetVersionResponse)
  return target;
}

size_t MultiDatasetVersionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiDatasetVersionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.DatasetVersion dataset_versions = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_dataset_versions_size();
  for (const auto& msg : this->dataset_versions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiDatasetVersionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiDatasetVersionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiDatasetVersionResponse::GetClassData() const { return &_class_data_; }

void MultiDatasetVersionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiDatasetVersionResponse *>(to)->MergeFrom(
      static_cast<const MultiDatasetVersionResponse &>(from));
}


void MultiDatasetVersionResponse::MergeFrom(const MultiDatasetVersionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiDatasetVersionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  dataset_versions_.MergeFrom(from.dataset_versions_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiDatasetVersionResponse::CopyFrom(const MultiDatasetVersionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiDatasetVersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiDatasetVersionResponse::IsInitialized() const {
  return true;
}

void MultiDatasetVersionResponse::InternalSwap(MultiDatasetVersionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  dataset_versions_.InternalSwap(&other->dataset_versions_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiDatasetVersionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[88]);
}

// ===================================================================

class MultiDatasetVersionMetricsGroupResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiDatasetVersionMetricsGroupResponse* msg);
};

const ::clarifai::api::status::Status&
MultiDatasetVersionMetricsGroupResponse::_Internal::status(const MultiDatasetVersionMetricsGroupResponse* msg) {
  return *msg->status_;
}
void MultiDatasetVersionMetricsGroupResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiDatasetVersionMetricsGroupResponse::clear_dataset_version_metrics_groups() {
  dataset_version_metrics_groups_.Clear();
}
MultiDatasetVersionMetricsGroupResponse::MultiDatasetVersionMetricsGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  dataset_version_metrics_groups_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiDatasetVersionMetricsGroupResponse)
}
MultiDatasetVersionMetricsGroupResponse::MultiDatasetVersionMetricsGroupResponse(const MultiDatasetVersionMetricsGroupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dataset_version_metrics_groups_(from.dataset_version_metrics_groups_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiDatasetVersionMetricsGroupResponse)
}

inline void MultiDatasetVersionMetricsGroupResponse::SharedCtor() {
status_ = nullptr;
}

MultiDatasetVersionMetricsGroupResponse::~MultiDatasetVersionMetricsGroupResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiDatasetVersionMetricsGroupResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiDatasetVersionMetricsGroupResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiDatasetVersionMetricsGroupResponse::ArenaDtor(void* object) {
  MultiDatasetVersionMetricsGroupResponse* _this = reinterpret_cast< MultiDatasetVersionMetricsGroupResponse* >(object);
  (void)_this;
}
void MultiDatasetVersionMetricsGroupResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiDatasetVersionMetricsGroupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiDatasetVersionMetricsGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiDatasetVersionMetricsGroupResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dataset_version_metrics_groups_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiDatasetVersionMetricsGroupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.DatasetVersionMetricsGroup dataset_version_metrics_groups = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dataset_version_metrics_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiDatasetVersionMetricsGroupResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiDatasetVersionMetricsGroupResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.DatasetVersionMetricsGroup dataset_version_metrics_groups = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dataset_version_metrics_groups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_dataset_version_metrics_groups(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiDatasetVersionMetricsGroupResponse)
  return target;
}

size_t MultiDatasetVersionMetricsGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiDatasetVersionMetricsGroupResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.DatasetVersionMetricsGroup dataset_version_metrics_groups = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_dataset_version_metrics_groups_size();
  for (const auto& msg : this->dataset_version_metrics_groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiDatasetVersionMetricsGroupResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiDatasetVersionMetricsGroupResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiDatasetVersionMetricsGroupResponse::GetClassData() const { return &_class_data_; }

void MultiDatasetVersionMetricsGroupResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiDatasetVersionMetricsGroupResponse *>(to)->MergeFrom(
      static_cast<const MultiDatasetVersionMetricsGroupResponse &>(from));
}


void MultiDatasetVersionMetricsGroupResponse::MergeFrom(const MultiDatasetVersionMetricsGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiDatasetVersionMetricsGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  dataset_version_metrics_groups_.MergeFrom(from.dataset_version_metrics_groups_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiDatasetVersionMetricsGroupResponse::CopyFrom(const MultiDatasetVersionMetricsGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiDatasetVersionMetricsGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiDatasetVersionMetricsGroupResponse::IsInitialized() const {
  return true;
}

void MultiDatasetVersionMetricsGroupResponse::InternalSwap(MultiDatasetVersionMetricsGroupResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  dataset_version_metrics_groups_.InternalSwap(&other->dataset_version_metrics_groups_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiDatasetVersionMetricsGroupResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[89]);
}

// ===================================================================

class SingleDatasetVersionResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleDatasetVersionResponse* msg);
  static const ::clarifai::api::DatasetVersion& dataset_version(const SingleDatasetVersionResponse* msg);
};

const ::clarifai::api::status::Status&
SingleDatasetVersionResponse::_Internal::status(const SingleDatasetVersionResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::DatasetVersion&
SingleDatasetVersionResponse::_Internal::dataset_version(const SingleDatasetVersionResponse* msg) {
  return *msg->dataset_version_;
}
void SingleDatasetVersionResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleDatasetVersionResponse::clear_dataset_version() {
  if (GetArenaForAllocation() == nullptr && dataset_version_ != nullptr) {
    delete dataset_version_;
  }
  dataset_version_ = nullptr;
}
SingleDatasetVersionResponse::SingleDatasetVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleDatasetVersionResponse)
}
SingleDatasetVersionResponse::SingleDatasetVersionResponse(const SingleDatasetVersionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_dataset_version()) {
    dataset_version_ = new ::clarifai::api::DatasetVersion(*from.dataset_version_);
  } else {
    dataset_version_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleDatasetVersionResponse)
}

inline void SingleDatasetVersionResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dataset_version_) -
    reinterpret_cast<char*>(&status_)) + sizeof(dataset_version_));
}

SingleDatasetVersionResponse::~SingleDatasetVersionResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleDatasetVersionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SingleDatasetVersionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete dataset_version_;
}

void SingleDatasetVersionResponse::ArenaDtor(void* object) {
  SingleDatasetVersionResponse* _this = reinterpret_cast< SingleDatasetVersionResponse* >(object);
  (void)_this;
}
void SingleDatasetVersionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleDatasetVersionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleDatasetVersionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleDatasetVersionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && dataset_version_ != nullptr) {
    delete dataset_version_;
  }
  dataset_version_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleDatasetVersionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.DatasetVersion dataset_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dataset_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleDatasetVersionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleDatasetVersionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.DatasetVersion dataset_version = 2;
  if (this->_internal_has_dataset_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dataset_version(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleDatasetVersionResponse)
  return target;
}

size_t SingleDatasetVersionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleDatasetVersionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.DatasetVersion dataset_version = 2;
  if (this->_internal_has_dataset_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dataset_version_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleDatasetVersionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SingleDatasetVersionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleDatasetVersionResponse::GetClassData() const { return &_class_data_; }

void SingleDatasetVersionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SingleDatasetVersionResponse *>(to)->MergeFrom(
      static_cast<const SingleDatasetVersionResponse &>(from));
}


void SingleDatasetVersionResponse::MergeFrom(const SingleDatasetVersionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleDatasetVersionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_dataset_version()) {
    _internal_mutable_dataset_version()->::clarifai::api::DatasetVersion::MergeFrom(from._internal_dataset_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleDatasetVersionResponse::CopyFrom(const SingleDatasetVersionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleDatasetVersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleDatasetVersionResponse::IsInitialized() const {
  return true;
}

void SingleDatasetVersionResponse::InternalSwap(SingleDatasetVersionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleDatasetVersionResponse, dataset_version_)
      + sizeof(SingleDatasetVersionResponse::dataset_version_)
      - PROTOBUF_FIELD_OFFSET(SingleDatasetVersionResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleDatasetVersionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[90]);
}

// ===================================================================

class GetDatasetInputsSearchAddJobRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetDatasetInputsSearchAddJobRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetDatasetInputsSearchAddJobRequest::_Internal::user_app_id(const GetDatasetInputsSearchAddJobRequest* msg) {
  return *msg->user_app_id_;
}
void GetDatasetInputsSearchAddJobRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetDatasetInputsSearchAddJobRequest::GetDatasetInputsSearchAddJobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetDatasetInputsSearchAddJobRequest)
}
GetDatasetInputsSearchAddJobRequest::GetDatasetInputsSearchAddJobRequest(const GetDatasetInputsSearchAddJobRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    job_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_job_id().empty()) {
    job_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_job_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetDatasetInputsSearchAddJobRequest)
}

inline void GetDatasetInputsSearchAddJobRequest::SharedCtor() {
job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  job_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

GetDatasetInputsSearchAddJobRequest::~GetDatasetInputsSearchAddJobRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetDatasetInputsSearchAddJobRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetDatasetInputsSearchAddJobRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  job_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetDatasetInputsSearchAddJobRequest::ArenaDtor(void* object) {
  GetDatasetInputsSearchAddJobRequest* _this = reinterpret_cast< GetDatasetInputsSearchAddJobRequest* >(object);
  (void)_this;
}
void GetDatasetInputsSearchAddJobRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDatasetInputsSearchAddJobRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetDatasetInputsSearchAddJobRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetDatasetInputsSearchAddJobRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  job_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDatasetInputsSearchAddJobRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string job_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_job_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetDatasetInputsSearchAddJobRequest.job_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDatasetInputsSearchAddJobRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetDatasetInputsSearchAddJobRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string job_id = 2;
  if (!this->_internal_job_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_job_id().data(), static_cast<int>(this->_internal_job_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetDatasetInputsSearchAddJobRequest.job_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_job_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetDatasetInputsSearchAddJobRequest)
  return target;
}

size_t GetDatasetInputsSearchAddJobRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetDatasetInputsSearchAddJobRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string job_id = 2;
  if (!this->_internal_job_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_job_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDatasetInputsSearchAddJobRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetDatasetInputsSearchAddJobRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDatasetInputsSearchAddJobRequest::GetClassData() const { return &_class_data_; }

void GetDatasetInputsSearchAddJobRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetDatasetInputsSearchAddJobRequest *>(to)->MergeFrom(
      static_cast<const GetDatasetInputsSearchAddJobRequest &>(from));
}


void GetDatasetInputsSearchAddJobRequest::MergeFrom(const GetDatasetInputsSearchAddJobRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetDatasetInputsSearchAddJobRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_job_id().empty()) {
    _internal_set_job_id(from._internal_job_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDatasetInputsSearchAddJobRequest::CopyFrom(const GetDatasetInputsSearchAddJobRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetDatasetInputsSearchAddJobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDatasetInputsSearchAddJobRequest::IsInitialized() const {
  return true;
}

void GetDatasetInputsSearchAddJobRequest::InternalSwap(GetDatasetInputsSearchAddJobRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &job_id_, lhs_arena,
      &other->job_id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDatasetInputsSearchAddJobRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[91]);
}

// ===================================================================

class SingleDatasetInputsSearchAddJobResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleDatasetInputsSearchAddJobResponse* msg);
  static const ::clarifai::api::DatasetInputsSearchAddJob& job(const SingleDatasetInputsSearchAddJobResponse* msg);
};

const ::clarifai::api::status::Status&
SingleDatasetInputsSearchAddJobResponse::_Internal::status(const SingleDatasetInputsSearchAddJobResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::DatasetInputsSearchAddJob&
SingleDatasetInputsSearchAddJobResponse::_Internal::job(const SingleDatasetInputsSearchAddJobResponse* msg) {
  return *msg->job_;
}
void SingleDatasetInputsSearchAddJobResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleDatasetInputsSearchAddJobResponse::clear_job() {
  if (GetArenaForAllocation() == nullptr && job_ != nullptr) {
    delete job_;
  }
  job_ = nullptr;
}
SingleDatasetInputsSearchAddJobResponse::SingleDatasetInputsSearchAddJobResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleDatasetInputsSearchAddJobResponse)
}
SingleDatasetInputsSearchAddJobResponse::SingleDatasetInputsSearchAddJobResponse(const SingleDatasetInputsSearchAddJobResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_job()) {
    job_ = new ::clarifai::api::DatasetInputsSearchAddJob(*from.job_);
  } else {
    job_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleDatasetInputsSearchAddJobResponse)
}

inline void SingleDatasetInputsSearchAddJobResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&job_) -
    reinterpret_cast<char*>(&status_)) + sizeof(job_));
}

SingleDatasetInputsSearchAddJobResponse::~SingleDatasetInputsSearchAddJobResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleDatasetInputsSearchAddJobResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SingleDatasetInputsSearchAddJobResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete job_;
}

void SingleDatasetInputsSearchAddJobResponse::ArenaDtor(void* object) {
  SingleDatasetInputsSearchAddJobResponse* _this = reinterpret_cast< SingleDatasetInputsSearchAddJobResponse* >(object);
  (void)_this;
}
void SingleDatasetInputsSearchAddJobResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleDatasetInputsSearchAddJobResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleDatasetInputsSearchAddJobResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleDatasetInputsSearchAddJobResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && job_ != nullptr) {
    delete job_;
  }
  job_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleDatasetInputsSearchAddJobResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.DatasetInputsSearchAddJob job = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_job(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleDatasetInputsSearchAddJobResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleDatasetInputsSearchAddJobResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.DatasetInputsSearchAddJob job = 2;
  if (this->_internal_has_job()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::job(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleDatasetInputsSearchAddJobResponse)
  return target;
}

size_t SingleDatasetInputsSearchAddJobResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleDatasetInputsSearchAddJobResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.DatasetInputsSearchAddJob job = 2;
  if (this->_internal_has_job()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *job_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleDatasetInputsSearchAddJobResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SingleDatasetInputsSearchAddJobResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleDatasetInputsSearchAddJobResponse::GetClassData() const { return &_class_data_; }

void SingleDatasetInputsSearchAddJobResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SingleDatasetInputsSearchAddJobResponse *>(to)->MergeFrom(
      static_cast<const SingleDatasetInputsSearchAddJobResponse &>(from));
}


void SingleDatasetInputsSearchAddJobResponse::MergeFrom(const SingleDatasetInputsSearchAddJobResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleDatasetInputsSearchAddJobResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_job()) {
    _internal_mutable_job()->::clarifai::api::DatasetInputsSearchAddJob::MergeFrom(from._internal_job());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleDatasetInputsSearchAddJobResponse::CopyFrom(const SingleDatasetInputsSearchAddJobResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleDatasetInputsSearchAddJobResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleDatasetInputsSearchAddJobResponse::IsInitialized() const {
  return true;
}

void SingleDatasetInputsSearchAddJobResponse::InternalSwap(SingleDatasetInputsSearchAddJobResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleDatasetInputsSearchAddJobResponse, job_)
      + sizeof(SingleDatasetInputsSearchAddJobResponse::job_)
      - PROTOBUF_FIELD_OFFSET(SingleDatasetInputsSearchAddJobResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleDatasetInputsSearchAddJobResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[92]);
}

// ===================================================================

class PostModelOutputsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostModelOutputsRequest* msg);
  static const ::clarifai::api::Model& model(const PostModelOutputsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostModelOutputsRequest::_Internal::user_app_id(const PostModelOutputsRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::Model&
PostModelOutputsRequest::_Internal::model(const PostModelOutputsRequest* msg) {
  return *msg->model_;
}
void PostModelOutputsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostModelOutputsRequest::clear_inputs() {
  inputs_.Clear();
}
void PostModelOutputsRequest::clear_model() {
  if (GetArenaForAllocation() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
}
PostModelOutputsRequest::PostModelOutputsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  inputs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostModelOutputsRequest)
}
PostModelOutputsRequest::PostModelOutputsRequest(const PostModelOutputsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      inputs_(from.inputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_id(), 
      GetArenaForAllocation());
  }
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version_id().empty()) {
    version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_model()) {
    model_ = new ::clarifai::api::Model(*from.model_);
  } else {
    model_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostModelOutputsRequest)
}

inline void PostModelOutputsRequest::SharedCtor() {
model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&model_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(model_));
}

PostModelOutputsRequest::~PostModelOutputsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostModelOutputsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostModelOutputsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete model_;
}

void PostModelOutputsRequest::ArenaDtor(void* object) {
  PostModelOutputsRequest* _this = reinterpret_cast< PostModelOutputsRequest* >(object);
  (void)_this;
}
void PostModelOutputsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostModelOutputsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostModelOutputsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostModelOutputsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  model_id_.ClearToEmpty();
  version_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostModelOutputsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostModelOutputsRequest.model_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostModelOutputsRequest.version_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Input inputs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Model model = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostModelOutputsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostModelOutputsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostModelOutputsRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string version_id = 3;
  if (!this->_internal_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostModelOutputsRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version_id(), target);
  }

  // repeated .clarifai.api.Input inputs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_inputs(i), target, stream);
  }

  // .clarifai.api.Model model = 5;
  if (this->_internal_has_model()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::model(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostModelOutputsRequest)
  return target;
}

size_t PostModelOutputsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostModelOutputsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Input inputs = 4;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string version_id = 3;
  if (!this->_internal_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.Model model = 5;
  if (this->_internal_has_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostModelOutputsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostModelOutputsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostModelOutputsRequest::GetClassData() const { return &_class_data_; }

void PostModelOutputsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostModelOutputsRequest *>(to)->MergeFrom(
      static_cast<const PostModelOutputsRequest &>(from));
}


void PostModelOutputsRequest::MergeFrom(const PostModelOutputsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostModelOutputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  if (!from._internal_model_id().empty()) {
    _internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_version_id().empty()) {
    _internal_set_version_id(from._internal_version_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_has_model()) {
    _internal_mutable_model()->::clarifai::api::Model::MergeFrom(from._internal_model());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostModelOutputsRequest::CopyFrom(const PostModelOutputsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostModelOutputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostModelOutputsRequest::IsInitialized() const {
  return true;
}

void PostModelOutputsRequest::InternalSwap(PostModelOutputsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  inputs_.InternalSwap(&other->inputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_id_, lhs_arena,
      &other->model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_id_, lhs_arena,
      &other->version_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostModelOutputsRequest, model_)
      + sizeof(PostModelOutputsRequest::model_)
      - PROTOBUF_FIELD_OFFSET(PostModelOutputsRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostModelOutputsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[93]);
}

// ===================================================================

class ListModelInputsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListModelInputsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListModelInputsRequest::_Internal::user_app_id(const ListModelInputsRequest* msg) {
  return *msg->user_app_id_;
}
void ListModelInputsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListModelInputsRequest::ListModelInputsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListModelInputsRequest)
}
ListModelInputsRequest::ListModelInputsRequest(const ListModelInputsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_id(), 
      GetArenaForAllocation());
  }
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version_id().empty()) {
    version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListModelInputsRequest)
}

inline void ListModelInputsRequest::SharedCtor() {
model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListModelInputsRequest::~ListModelInputsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListModelInputsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListModelInputsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListModelInputsRequest::ArenaDtor(void* object) {
  ListModelInputsRequest* _this = reinterpret_cast< ListModelInputsRequest* >(object);
  (void)_this;
}
void ListModelInputsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListModelInputsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListModelInputsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListModelInputsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_id_.ClearToEmpty();
  version_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListModelInputsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListModelInputsRequest.model_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListModelInputsRequest.version_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListModelInputsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListModelInputsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelInputsRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string version_id = 3;
  if (!this->_internal_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelInputsRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version_id(), target);
  }

  // uint32 page = 4;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_page(), target);
  }

  // uint32 per_page = 5;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListModelInputsRequest)
  return target;
}

size_t ListModelInputsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListModelInputsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string version_id = 3;
  if (!this->_internal_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 4;
  if (this->_internal_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 5;
  if (this->_internal_per_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListModelInputsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListModelInputsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListModelInputsRequest::GetClassData() const { return &_class_data_; }

void ListModelInputsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListModelInputsRequest *>(to)->MergeFrom(
      static_cast<const ListModelInputsRequest &>(from));
}


void ListModelInputsRequest::MergeFrom(const ListModelInputsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListModelInputsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_model_id().empty()) {
    _internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_version_id().empty()) {
    _internal_set_version_id(from._internal_version_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListModelInputsRequest::CopyFrom(const ListModelInputsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListModelInputsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListModelInputsRequest::IsInitialized() const {
  return true;
}

void ListModelInputsRequest::InternalSwap(ListModelInputsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_id_, lhs_arena,
      &other->model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_id_, lhs_arena,
      &other->version_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListModelInputsRequest, per_page_)
      + sizeof(ListModelInputsRequest::per_page_)
      - PROTOBUF_FIELD_OFFSET(ListModelInputsRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListModelInputsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[94]);
}

// ===================================================================

class GetKeyRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetKeyRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetKeyRequest::_Internal::user_app_id(const GetKeyRequest* msg) {
  return *msg->user_app_id_;
}
void GetKeyRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetKeyRequest::GetKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetKeyRequest)
}
GetKeyRequest::GetKeyRequest(const GetKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key_id().empty()) {
    key_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetKeyRequest)
}

inline void GetKeyRequest::SharedCtor() {
key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

GetKeyRequest::~GetKeyRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetKeyRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetKeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetKeyRequest::ArenaDtor(void* object) {
  GetKeyRequest* _this = reinterpret_cast< GetKeyRequest* >(object);
  (void)_this;
}
void GetKeyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetKeyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetKeyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetKeyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string key_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetKeyRequest.key_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetKeyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetKeyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string key_id = 2;
  if (!this->_internal_key_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key_id().data(), static_cast<int>(this->_internal_key_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetKeyRequest.key_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetKeyRequest)
  return target;
}

size_t GetKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetKeyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key_id = 2;
  if (!this->_internal_key_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetKeyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetKeyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetKeyRequest::GetClassData() const { return &_class_data_; }

void GetKeyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetKeyRequest *>(to)->MergeFrom(
      static_cast<const GetKeyRequest &>(from));
}


void GetKeyRequest::MergeFrom(const GetKeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key_id().empty()) {
    _internal_set_key_id(from._internal_key_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetKeyRequest::CopyFrom(const GetKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetKeyRequest::IsInitialized() const {
  return true;
}

void GetKeyRequest::InternalSwap(GetKeyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_id_, lhs_arena,
      &other->key_id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetKeyRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[95]);
}

// ===================================================================

class ListKeysRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListKeysRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListKeysRequest::_Internal::user_app_id(const ListKeysRequest* msg) {
  return *msg->user_app_id_;
}
void ListKeysRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListKeysRequest::ListKeysRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListKeysRequest)
}
ListKeysRequest::ListKeysRequest(const ListKeysRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListKeysRequest)
}

inline void ListKeysRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListKeysRequest::~ListKeysRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListKeysRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListKeysRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListKeysRequest::ArenaDtor(void* object) {
  ListKeysRequest* _this = reinterpret_cast< ListKeysRequest* >(object);
  (void)_this;
}
void ListKeysRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListKeysRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListKeysRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListKeysRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListKeysRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListKeysRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListKeysRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListKeysRequest)
  return target;
}

size_t ListKeysRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListKeysRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListKeysRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListKeysRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListKeysRequest::GetClassData() const { return &_class_data_; }

void ListKeysRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListKeysRequest *>(to)->MergeFrom(
      static_cast<const ListKeysRequest &>(from));
}


void ListKeysRequest::MergeFrom(const ListKeysRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListKeysRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListKeysRequest::CopyFrom(const ListKeysRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListKeysRequest::IsInitialized() const {
  return true;
}

void ListKeysRequest::InternalSwap(ListKeysRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListKeysRequest, per_page_)
      + sizeof(ListKeysRequest::per_page_)
      - PROTOBUF_FIELD_OFFSET(ListKeysRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListKeysRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[96]);
}

// ===================================================================

class ListAppKeysRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListAppKeysRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListAppKeysRequest::_Internal::user_app_id(const ListAppKeysRequest* msg) {
  return *msg->user_app_id_;
}
void ListAppKeysRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListAppKeysRequest::ListAppKeysRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListAppKeysRequest)
}
ListAppKeysRequest::ListAppKeysRequest(const ListAppKeysRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListAppKeysRequest)
}

inline void ListAppKeysRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListAppKeysRequest::~ListAppKeysRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListAppKeysRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListAppKeysRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListAppKeysRequest::ArenaDtor(void* object) {
  ListAppKeysRequest* _this = reinterpret_cast< ListAppKeysRequest* >(object);
  (void)_this;
}
void ListAppKeysRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListAppKeysRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListAppKeysRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListAppKeysRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListAppKeysRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListAppKeysRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListAppKeysRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListAppKeysRequest)
  return target;
}

size_t ListAppKeysRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListAppKeysRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListAppKeysRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListAppKeysRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListAppKeysRequest::GetClassData() const { return &_class_data_; }

void ListAppKeysRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListAppKeysRequest *>(to)->MergeFrom(
      static_cast<const ListAppKeysRequest &>(from));
}


void ListAppKeysRequest::MergeFrom(const ListAppKeysRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListAppKeysRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListAppKeysRequest::CopyFrom(const ListAppKeysRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListAppKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAppKeysRequest::IsInitialized() const {
  return true;
}

void ListAppKeysRequest::InternalSwap(ListAppKeysRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListAppKeysRequest, per_page_)
      + sizeof(ListAppKeysRequest::per_page_)
      - PROTOBUF_FIELD_OFFSET(ListAppKeysRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAppKeysRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[97]);
}

// ===================================================================

class PostKeysRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostKeysRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostKeysRequest::_Internal::user_app_id(const PostKeysRequest* msg) {
  return *msg->user_app_id_;
}
void PostKeysRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostKeysRequest::clear_keys() {
  keys_.Clear();
}
PostKeysRequest::PostKeysRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  keys_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostKeysRequest)
}
PostKeysRequest::PostKeysRequest(const PostKeysRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostKeysRequest)
}

inline void PostKeysRequest::SharedCtor() {
user_app_id_ = nullptr;
}

PostKeysRequest::~PostKeysRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostKeysRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostKeysRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostKeysRequest::ArenaDtor(void* object) {
  PostKeysRequest* _this = reinterpret_cast< PostKeysRequest* >(object);
  (void)_this;
}
void PostKeysRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostKeysRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostKeysRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostKeysRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostKeysRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Key keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostKeysRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostKeysRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Key keys = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_keys(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostKeysRequest)
  return target;
}

size_t PostKeysRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostKeysRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Key keys = 2;
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostKeysRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostKeysRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostKeysRequest::GetClassData() const { return &_class_data_; }

void PostKeysRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostKeysRequest *>(to)->MergeFrom(
      static_cast<const PostKeysRequest &>(from));
}


void PostKeysRequest::MergeFrom(const PostKeysRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostKeysRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostKeysRequest::CopyFrom(const PostKeysRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostKeysRequest::IsInitialized() const {
  return true;
}

void PostKeysRequest::InternalSwap(PostKeysRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  keys_.InternalSwap(&other->keys_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostKeysRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[98]);
}

// ===================================================================

class DeleteKeyRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteKeyRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteKeyRequest::_Internal::user_app_id(const DeleteKeyRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteKeyRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteKeyRequest::DeleteKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteKeyRequest)
}
DeleteKeyRequest::DeleteKeyRequest(const DeleteKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key_id().empty()) {
    key_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteKeyRequest)
}

inline void DeleteKeyRequest::SharedCtor() {
key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

DeleteKeyRequest::~DeleteKeyRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteKeyRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteKeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteKeyRequest::ArenaDtor(void* object) {
  DeleteKeyRequest* _this = reinterpret_cast< DeleteKeyRequest* >(object);
  (void)_this;
}
void DeleteKeyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteKeyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteKeyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteKeyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string key_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteKeyRequest.key_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteKeyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteKeyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string key_id = 2;
  if (!this->_internal_key_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key_id().data(), static_cast<int>(this->_internal_key_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteKeyRequest.key_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteKeyRequest)
  return target;
}

size_t DeleteKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteKeyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key_id = 2;
  if (!this->_internal_key_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteKeyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteKeyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteKeyRequest::GetClassData() const { return &_class_data_; }

void DeleteKeyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteKeyRequest *>(to)->MergeFrom(
      static_cast<const DeleteKeyRequest &>(from));
}


void DeleteKeyRequest::MergeFrom(const DeleteKeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key_id().empty()) {
    _internal_set_key_id(from._internal_key_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteKeyRequest::CopyFrom(const DeleteKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteKeyRequest::IsInitialized() const {
  return true;
}

void DeleteKeyRequest::InternalSwap(DeleteKeyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_id_, lhs_arena,
      &other->key_id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteKeyRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[99]);
}

// ===================================================================

class PatchKeysRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchKeysRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchKeysRequest::_Internal::user_app_id(const PatchKeysRequest* msg) {
  return *msg->user_app_id_;
}
void PatchKeysRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchKeysRequest::clear_keys() {
  keys_.Clear();
}
PatchKeysRequest::PatchKeysRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  keys_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchKeysRequest)
}
PatchKeysRequest::PatchKeysRequest(const PatchKeysRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchKeysRequest)
}

inline void PatchKeysRequest::SharedCtor() {
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

PatchKeysRequest::~PatchKeysRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchKeysRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PatchKeysRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchKeysRequest::ArenaDtor(void* object) {
  PatchKeysRequest* _this = reinterpret_cast< PatchKeysRequest* >(object);
  (void)_this;
}
void PatchKeysRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatchKeysRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PatchKeysRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchKeysRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchKeysRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Key keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchKeysRequest.action"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchKeysRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchKeysRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Key keys = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_keys(i), target, stream);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchKeysRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchKeysRequest)
  return target;
}

size_t PatchKeysRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchKeysRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Key keys = 2;
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchKeysRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PatchKeysRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchKeysRequest::GetClassData() const { return &_class_data_; }

void PatchKeysRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PatchKeysRequest *>(to)->MergeFrom(
      static_cast<const PatchKeysRequest &>(from));
}


void PatchKeysRequest::MergeFrom(const PatchKeysRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchKeysRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (!from._internal_action().empty()) {
    _internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchKeysRequest::CopyFrom(const PatchKeysRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchKeysRequest::IsInitialized() const {
  return true;
}

void PatchKeysRequest::InternalSwap(PatchKeysRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  keys_.InternalSwap(&other->keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_, lhs_arena,
      &other->action_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchKeysRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[100]);
}

// ===================================================================

class SingleKeyResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleKeyResponse* msg);
  static const ::clarifai::api::Key& key(const SingleKeyResponse* msg);
};

const ::clarifai::api::status::Status&
SingleKeyResponse::_Internal::status(const SingleKeyResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::Key&
SingleKeyResponse::_Internal::key(const SingleKeyResponse* msg) {
  return *msg->key_;
}
void SingleKeyResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleKeyResponse::clear_key() {
  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
}
SingleKeyResponse::SingleKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleKeyResponse)
}
SingleKeyResponse::SingleKeyResponse(const SingleKeyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_key()) {
    key_ = new ::clarifai::api::Key(*from.key_);
  } else {
    key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleKeyResponse)
}

inline void SingleKeyResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&key_) -
    reinterpret_cast<char*>(&status_)) + sizeof(key_));
}

SingleKeyResponse::~SingleKeyResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleKeyResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SingleKeyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete key_;
}

void SingleKeyResponse::ArenaDtor(void* object) {
  SingleKeyResponse* _this = reinterpret_cast< SingleKeyResponse* >(object);
  (void)_this;
}
void SingleKeyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleKeyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleKeyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleKeyResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleKeyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Key key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleKeyResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleKeyResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.Key key = 2;
  if (this->_internal_has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::key(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleKeyResponse)
  return target;
}

size_t SingleKeyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleKeyResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.Key key = 2;
  if (this->_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleKeyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SingleKeyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleKeyResponse::GetClassData() const { return &_class_data_; }

void SingleKeyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SingleKeyResponse *>(to)->MergeFrom(
      static_cast<const SingleKeyResponse &>(from));
}


void SingleKeyResponse::MergeFrom(const SingleKeyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_key()) {
    _internal_mutable_key()->::clarifai::api::Key::MergeFrom(from._internal_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleKeyResponse::CopyFrom(const SingleKeyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleKeyResponse::IsInitialized() const {
  return true;
}

void SingleKeyResponse::InternalSwap(SingleKeyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleKeyResponse, key_)
      + sizeof(SingleKeyResponse::key_)
      - PROTOBUF_FIELD_OFFSET(SingleKeyResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleKeyResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[101]);
}

// ===================================================================

class MultiKeyResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiKeyResponse* msg);
};

const ::clarifai::api::status::Status&
MultiKeyResponse::_Internal::status(const MultiKeyResponse* msg) {
  return *msg->status_;
}
void MultiKeyResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiKeyResponse::clear_keys() {
  keys_.Clear();
}
MultiKeyResponse::MultiKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  keys_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiKeyResponse)
}
MultiKeyResponse::MultiKeyResponse(const MultiKeyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiKeyResponse)
}

inline void MultiKeyResponse::SharedCtor() {
status_ = nullptr;
}

MultiKeyResponse::~MultiKeyResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiKeyResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiKeyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiKeyResponse::ArenaDtor(void* object) {
  MultiKeyResponse* _this = reinterpret_cast< MultiKeyResponse* >(object);
  (void)_this;
}
void MultiKeyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiKeyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiKeyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiKeyResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiKeyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Key keys = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiKeyResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiKeyResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.Key keys = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_keys(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiKeyResponse)
  return target;
}

size_t MultiKeyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiKeyResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Key keys = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiKeyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiKeyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiKeyResponse::GetClassData() const { return &_class_data_; }

void MultiKeyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiKeyResponse *>(to)->MergeFrom(
      static_cast<const MultiKeyResponse &>(from));
}


void MultiKeyResponse::MergeFrom(const MultiKeyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiKeyResponse::CopyFrom(const MultiKeyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiKeyResponse::IsInitialized() const {
  return true;
}

void MultiKeyResponse::InternalSwap(MultiKeyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  keys_.InternalSwap(&other->keys_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiKeyResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[102]);
}

// ===================================================================

class GetModelRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetModelRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetModelRequest::_Internal::user_app_id(const GetModelRequest* msg) {
  return *msg->user_app_id_;
}
void GetModelRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetModelRequest::GetModelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  additional_fields_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetModelRequest)
}
GetModelRequest::GetModelRequest(const GetModelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      additional_fields_(from.additional_fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_id(), 
      GetArenaForAllocation());
  }
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version_id().empty()) {
    version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version_id(), 
      GetArenaForAllocation());
  }
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_language().empty()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  trained_before_ = from.trained_before_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetModelRequest)
}

inline void GetModelRequest::SharedCtor() {
model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&trained_before_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(trained_before_));
}

GetModelRequest::~GetModelRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetModelRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetModelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetModelRequest::ArenaDtor(void* object) {
  GetModelRequest* _this = reinterpret_cast< GetModelRequest* >(object);
  (void)_this;
}
void GetModelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetModelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetModelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetModelRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_fields_.Clear();
  model_id_.ClearToEmpty();
  version_id_.ClearToEmpty();
  language_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  trained_before_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetModelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetModelRequest.model_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetModelRequest.version_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string language = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetModelRequest.language"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool trained_before = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          trained_before_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string additional_fields = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_additional_fields();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetModelRequest.additional_fields"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetModelRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetModelRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string version_id = 3;
  if (!this->_internal_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version_id(), target);
  }

  // string language = 4;
  if (!this->_internal_language().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelRequest.language");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_language(), target);
  }

  // bool trained_before = 5;
  if (this->_internal_trained_before() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_trained_before(), target);
  }

  // repeated string additional_fields = 19;
  for (int i = 0, n = this->_internal_additional_fields_size(); i < n; i++) {
    const auto& s = this->_internal_additional_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelRequest.additional_fields");
    target = stream->WriteString(19, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetModelRequest)
  return target;
}

size_t GetModelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetModelRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string additional_fields = 19;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(additional_fields_.size());
  for (int i = 0, n = additional_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      additional_fields_.Get(i));
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string version_id = 3;
  if (!this->_internal_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  // string language = 4;
  if (!this->_internal_language().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // bool trained_before = 5;
  if (this->_internal_trained_before() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetModelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetModelRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetModelRequest::GetClassData() const { return &_class_data_; }

void GetModelRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetModelRequest *>(to)->MergeFrom(
      static_cast<const GetModelRequest &>(from));
}


void GetModelRequest::MergeFrom(const GetModelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetModelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  additional_fields_.MergeFrom(from.additional_fields_);
  if (!from._internal_model_id().empty()) {
    _internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_version_id().empty()) {
    _internal_set_version_id(from._internal_version_id());
  }
  if (!from._internal_language().empty()) {
    _internal_set_language(from._internal_language());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_trained_before() != 0) {
    _internal_set_trained_before(from._internal_trained_before());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetModelRequest::CopyFrom(const GetModelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetModelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModelRequest::IsInitialized() const {
  return true;
}

void GetModelRequest::InternalSwap(GetModelRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  additional_fields_.InternalSwap(&other->additional_fields_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_id_, lhs_arena,
      &other->model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_id_, lhs_arena,
      &other->version_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &language_, lhs_arena,
      &other->language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetModelRequest, trained_before_)
      + sizeof(GetModelRequest::trained_before_)
      - PROTOBUF_FIELD_OFFSET(GetModelRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetModelRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[103]);
}

// ===================================================================

class ListModelsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListModelsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListModelsRequest::_Internal::user_app_id(const ListModelsRequest* msg) {
  return *msg->user_app_id_;
}
void ListModelsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListModelsRequest::ListModelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  input_fields_(arena),
  output_fields_(arena),
  toolkits_(arena),
  use_cases_(arena),
  additional_fields_(arena),
  languages_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListModelsRequest)
}
ListModelsRequest::ListModelsRequest(const ListModelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      input_fields_(from.input_fields_),
      output_fields_(from.output_fields_),
      toolkits_(from.toolkits_),
      use_cases_(from.use_cases_),
      additional_fields_(from.additional_fields_),
      languages_(from.languages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  model_type_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_type_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_type_id().empty()) {
    model_type_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_type_id(), 
      GetArenaForAllocation());
  }
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_query().empty()) {
    query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_query(), 
      GetArenaForAllocation());
  }
  license_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    license_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_license().empty()) {
    license_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_license(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&starred_only_) -
    reinterpret_cast<char*>(&page_)) + sizeof(starred_only_));
  clear_has_sort_by();
  switch (from.sort_by_case()) {
    case kSortByName: {
      _internal_set_sort_by_name(from._internal_sort_by_name());
      break;
    }
    case kSortByNumInputs: {
      _internal_set_sort_by_num_inputs(from._internal_sort_by_num_inputs());
      break;
    }
    case kSortByModifiedAt: {
      _internal_set_sort_by_modified_at(from._internal_sort_by_modified_at());
      break;
    }
    case SORT_BY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListModelsRequest)
}

inline void ListModelsRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
model_type_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_type_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
license_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  license_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&starred_only_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(starred_only_));
clear_has_sort_by();
}

ListModelsRequest::~ListModelsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListModelsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListModelsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_type_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  license_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
  if (has_sort_by()) {
    clear_sort_by();
  }
}

void ListModelsRequest::ArenaDtor(void* object) {
  ListModelsRequest* _this = reinterpret_cast< ListModelsRequest* >(object);
  (void)_this;
}
void ListModelsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListModelsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListModelsRequest::clear_sort_by() {
// @@protoc_insertion_point(one_of_clear_start:clarifai.api.ListModelsRequest)
  switch (sort_by_case()) {
    case kSortByName: {
      // No need to clear
      break;
    }
    case kSortByNumInputs: {
      // No need to clear
      break;
    }
    case kSortByModifiedAt: {
      // No need to clear
      break;
    }
    case SORT_BY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SORT_BY_NOT_SET;
}


void ListModelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListModelsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_fields_.Clear();
  output_fields_.Clear();
  toolkits_.Clear();
  use_cases_.Clear();
  additional_fields_.Clear();
  languages_.Clear();
  name_.ClearToEmpty();
  model_type_id_.ClearToEmpty();
  query_.ClearToEmpty();
  license_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&starred_only_) -
      reinterpret_cast<char*>(&page_)) + sizeof(starred_only_));
  clear_sort_by();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListModelsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListModelsRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_type_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_model_type_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListModelsRequest.model_type_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool trained_only = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          trained_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string input_fields = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input_fields();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListModelsRequest.input_fields"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string output_fields = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_output_fields();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListModelsRequest.output_fields"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool sort_ascending = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          sort_ascending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool sort_by_name = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _internal_set_sort_by_name(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool sort_by_num_inputs = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _internal_set_sort_by_num_inputs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool sort_by_modified_at = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _internal_set_sort_by_modified_at(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string query = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListModelsRequest.query"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string license = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_license();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListModelsRequest.license"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool featured_only = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          featured_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string toolkits = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_toolkits();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListModelsRequest.toolkits"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string use_cases = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_use_cases();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListModelsRequest.use_cases"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string additional_fields = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_additional_fields();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListModelsRequest.additional_fields"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool starred_only = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          starred_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string languages = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_languages();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListModelsRequest.languages"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool filter_by_user_id = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          filter_by_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListModelsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListModelsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  // string name = 5;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelsRequest.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // string model_type_id = 6;
  if (!this->_internal_model_type_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_type_id().data(), static_cast<int>(this->_internal_model_type_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelsRequest.model_type_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_model_type_id(), target);
  }

  // bool trained_only = 7;
  if (this->_internal_trained_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_trained_only(), target);
  }

  // repeated string input_fields = 8;
  for (int i = 0, n = this->_internal_input_fields_size(); i < n; i++) {
    const auto& s = this->_internal_input_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelsRequest.input_fields");
    target = stream->WriteString(8, s, target);
  }

  // repeated string output_fields = 9;
  for (int i = 0, n = this->_internal_output_fields_size(); i < n; i++) {
    const auto& s = this->_internal_output_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelsRequest.output_fields");
    target = stream->WriteString(9, s, target);
  }

  // bool sort_ascending = 10;
  if (this->_internal_sort_ascending() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_sort_ascending(), target);
  }

  // bool sort_by_name = 11;
  if (_internal_has_sort_by_name()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_sort_by_name(), target);
  }

  // bool sort_by_num_inputs = 12;
  if (_internal_has_sort_by_num_inputs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_sort_by_num_inputs(), target);
  }

  // bool sort_by_modified_at = 13;
  if (_internal_has_sort_by_modified_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_sort_by_modified_at(), target);
  }

  // string query = 14;
  if (!this->_internal_query().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelsRequest.query");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_query(), target);
  }

  // string license = 15;
  if (!this->_internal_license().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_license().data(), static_cast<int>(this->_internal_license().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelsRequest.license");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_license(), target);
  }

  // bool featured_only = 16;
  if (this->_internal_featured_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_featured_only(), target);
  }

  // repeated string toolkits = 17;
  for (int i = 0, n = this->_internal_toolkits_size(); i < n; i++) {
    const auto& s = this->_internal_toolkits(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelsRequest.toolkits");
    target = stream->WriteString(17, s, target);
  }

  // repeated string use_cases = 18;
  for (int i = 0, n = this->_internal_use_cases_size(); i < n; i++) {
    const auto& s = this->_internal_use_cases(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelsRequest.use_cases");
    target = stream->WriteString(18, s, target);
  }

  // repeated string additional_fields = 19;
  for (int i = 0, n = this->_internal_additional_fields_size(); i < n; i++) {
    const auto& s = this->_internal_additional_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelsRequest.additional_fields");
    target = stream->WriteString(19, s, target);
  }

  // bool starred_only = 20;
  if (this->_internal_starred_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_starred_only(), target);
  }

  // repeated string languages = 21;
  for (int i = 0, n = this->_internal_languages_size(); i < n; i++) {
    const auto& s = this->_internal_languages(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelsRequest.languages");
    target = stream->WriteString(21, s, target);
  }

  // bool filter_by_user_id = 22;
  if (this->_internal_filter_by_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_filter_by_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListModelsRequest)
  return target;
}

size_t ListModelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListModelsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string input_fields = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(input_fields_.size());
  for (int i = 0, n = input_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      input_fields_.Get(i));
  }

  // repeated string output_fields = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(output_fields_.size());
  for (int i = 0, n = output_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      output_fields_.Get(i));
  }

  // repeated string toolkits = 17;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(toolkits_.size());
  for (int i = 0, n = toolkits_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      toolkits_.Get(i));
  }

  // repeated string use_cases = 18;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(use_cases_.size());
  for (int i = 0, n = use_cases_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      use_cases_.Get(i));
  }

  // repeated string additional_fields = 19;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(additional_fields_.size());
  for (int i = 0, n = additional_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      additional_fields_.Get(i));
  }

  // repeated string languages = 21;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(languages_.size());
  for (int i = 0, n = languages_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      languages_.Get(i));
  }

  // string name = 5;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string model_type_id = 6;
  if (!this->_internal_model_type_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_type_id());
  }

  // string query = 14;
  if (!this->_internal_query().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  // string license = 15;
  if (!this->_internal_license().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_license());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  // bool sort_ascending = 10;
  if (this->_internal_sort_ascending() != 0) {
    total_size += 1 + 1;
  }

  // bool filter_by_user_id = 22;
  if (this->_internal_filter_by_user_id() != 0) {
    total_size += 2 + 1;
  }

  // bool trained_only = 7;
  if (this->_internal_trained_only() != 0) {
    total_size += 1 + 1;
  }

  // bool featured_only = 16;
  if (this->_internal_featured_only() != 0) {
    total_size += 2 + 1;
  }

  // bool starred_only = 20;
  if (this->_internal_starred_only() != 0) {
    total_size += 2 + 1;
  }

  switch (sort_by_case()) {
    // bool sort_by_name = 11;
    case kSortByName: {
      total_size += 1 + 1;
      break;
    }
    // bool sort_by_num_inputs = 12;
    case kSortByNumInputs: {
      total_size += 1 + 1;
      break;
    }
    // bool sort_by_modified_at = 13;
    case kSortByModifiedAt: {
      total_size += 1 + 1;
      break;
    }
    case SORT_BY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListModelsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListModelsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListModelsRequest::GetClassData() const { return &_class_data_; }

void ListModelsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListModelsRequest *>(to)->MergeFrom(
      static_cast<const ListModelsRequest &>(from));
}


void ListModelsRequest::MergeFrom(const ListModelsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListModelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  input_fields_.MergeFrom(from.input_fields_);
  output_fields_.MergeFrom(from.output_fields_);
  toolkits_.MergeFrom(from.toolkits_);
  use_cases_.MergeFrom(from.use_cases_);
  additional_fields_.MergeFrom(from.additional_fields_);
  languages_.MergeFrom(from.languages_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_model_type_id().empty()) {
    _internal_set_model_type_id(from._internal_model_type_id());
  }
  if (!from._internal_query().empty()) {
    _internal_set_query(from._internal_query());
  }
  if (!from._internal_license().empty()) {
    _internal_set_license(from._internal_license());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
  if (from._internal_sort_ascending() != 0) {
    _internal_set_sort_ascending(from._internal_sort_ascending());
  }
  if (from._internal_filter_by_user_id() != 0) {
    _internal_set_filter_by_user_id(from._internal_filter_by_user_id());
  }
  if (from._internal_trained_only() != 0) {
    _internal_set_trained_only(from._internal_trained_only());
  }
  if (from._internal_featured_only() != 0) {
    _internal_set_featured_only(from._internal_featured_only());
  }
  if (from._internal_starred_only() != 0) {
    _internal_set_starred_only(from._internal_starred_only());
  }
  switch (from.sort_by_case()) {
    case kSortByName: {
      _internal_set_sort_by_name(from._internal_sort_by_name());
      break;
    }
    case kSortByNumInputs: {
      _internal_set_sort_by_num_inputs(from._internal_sort_by_num_inputs());
      break;
    }
    case kSortByModifiedAt: {
      _internal_set_sort_by_modified_at(from._internal_sort_by_modified_at());
      break;
    }
    case SORT_BY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListModelsRequest::CopyFrom(const ListModelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListModelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListModelsRequest::IsInitialized() const {
  return true;
}

void ListModelsRequest::InternalSwap(ListModelsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  input_fields_.InternalSwap(&other->input_fields_);
  output_fields_.InternalSwap(&other->output_fields_);
  toolkits_.InternalSwap(&other->toolkits_);
  use_cases_.InternalSwap(&other->use_cases_);
  additional_fields_.InternalSwap(&other->additional_fields_);
  languages_.InternalSwap(&other->languages_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_type_id_, lhs_arena,
      &other->model_type_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &query_, lhs_arena,
      &other->query_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &license_, lhs_arena,
      &other->license_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListModelsRequest, starred_only_)
      + sizeof(ListModelsRequest::starred_only_)
      - PROTOBUF_FIELD_OFFSET(ListModelsRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
  swap(sort_by_, other->sort_by_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListModelsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[104]);
}

// ===================================================================

class PatchModelToolkitsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchModelToolkitsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchModelToolkitsRequest::_Internal::user_app_id(const PatchModelToolkitsRequest* msg) {
  return *msg->user_app_id_;
}
void PatchModelToolkitsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
PatchModelToolkitsRequest::PatchModelToolkitsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  toolkits_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchModelToolkitsRequest)
}
PatchModelToolkitsRequest::PatchModelToolkitsRequest(const PatchModelToolkitsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      toolkits_(from.toolkits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_id(), 
      GetArenaForAllocation());
  }
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchModelToolkitsRequest)
}

inline void PatchModelToolkitsRequest::SharedCtor() {
model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

PatchModelToolkitsRequest::~PatchModelToolkitsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchModelToolkitsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PatchModelToolkitsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchModelToolkitsRequest::ArenaDtor(void* object) {
  PatchModelToolkitsRequest* _this = reinterpret_cast< PatchModelToolkitsRequest* >(object);
  (void)_this;
}
void PatchModelToolkitsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatchModelToolkitsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PatchModelToolkitsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchModelToolkitsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  toolkits_.Clear();
  model_id_.ClearToEmpty();
  action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchModelToolkitsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchModelToolkitsRequest.model_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string toolkits = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_toolkits();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchModelToolkitsRequest.toolkits"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchModelToolkitsRequest.action"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchModelToolkitsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchModelToolkitsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchModelToolkitsRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // repeated string toolkits = 3;
  for (int i = 0, n = this->_internal_toolkits_size(); i < n; i++) {
    const auto& s = this->_internal_toolkits(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchModelToolkitsRequest.toolkits");
    target = stream->WriteString(3, s, target);
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchModelToolkitsRequest.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchModelToolkitsRequest)
  return target;
}

size_t PatchModelToolkitsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchModelToolkitsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string toolkits = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(toolkits_.size());
  for (int i = 0, n = toolkits_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      toolkits_.Get(i));
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchModelToolkitsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PatchModelToolkitsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchModelToolkitsRequest::GetClassData() const { return &_class_data_; }

void PatchModelToolkitsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PatchModelToolkitsRequest *>(to)->MergeFrom(
      static_cast<const PatchModelToolkitsRequest &>(from));
}


void PatchModelToolkitsRequest::MergeFrom(const PatchModelToolkitsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchModelToolkitsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  toolkits_.MergeFrom(from.toolkits_);
  if (!from._internal_model_id().empty()) {
    _internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_action().empty()) {
    _internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchModelToolkitsRequest::CopyFrom(const PatchModelToolkitsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchModelToolkitsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchModelToolkitsRequest::IsInitialized() const {
  return true;
}

void PatchModelToolkitsRequest::InternalSwap(PatchModelToolkitsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  toolkits_.InternalSwap(&other->toolkits_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_id_, lhs_arena,
      &other->model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_, lhs_arena,
      &other->action_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchModelToolkitsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[105]);
}

// ===================================================================

class PatchModelUseCasesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchModelUseCasesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchModelUseCasesRequest::_Internal::user_app_id(const PatchModelUseCasesRequest* msg) {
  return *msg->user_app_id_;
}
void PatchModelUseCasesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
PatchModelUseCasesRequest::PatchModelUseCasesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  usecases_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchModelUseCasesRequest)
}
PatchModelUseCasesRequest::PatchModelUseCasesRequest(const PatchModelUseCasesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      usecases_(from.usecases_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_id(), 
      GetArenaForAllocation());
  }
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchModelUseCasesRequest)
}

inline void PatchModelUseCasesRequest::SharedCtor() {
model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

PatchModelUseCasesRequest::~PatchModelUseCasesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchModelUseCasesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PatchModelUseCasesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchModelUseCasesRequest::ArenaDtor(void* object) {
  PatchModelUseCasesRequest* _this = reinterpret_cast< PatchModelUseCasesRequest* >(object);
  (void)_this;
}
void PatchModelUseCasesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatchModelUseCasesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PatchModelUseCasesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchModelUseCasesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  usecases_.Clear();
  model_id_.ClearToEmpty();
  action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchModelUseCasesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchModelUseCasesRequest.model_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string usecases = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_usecases();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchModelUseCasesRequest.usecases"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchModelUseCasesRequest.action"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchModelUseCasesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchModelUseCasesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchModelUseCasesRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // repeated string usecases = 3;
  for (int i = 0, n = this->_internal_usecases_size(); i < n; i++) {
    const auto& s = this->_internal_usecases(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchModelUseCasesRequest.usecases");
    target = stream->WriteString(3, s, target);
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchModelUseCasesRequest.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchModelUseCasesRequest)
  return target;
}

size_t PatchModelUseCasesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchModelUseCasesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string usecases = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(usecases_.size());
  for (int i = 0, n = usecases_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      usecases_.Get(i));
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchModelUseCasesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PatchModelUseCasesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchModelUseCasesRequest::GetClassData() const { return &_class_data_; }

void PatchModelUseCasesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PatchModelUseCasesRequest *>(to)->MergeFrom(
      static_cast<const PatchModelUseCasesRequest &>(from));
}


void PatchModelUseCasesRequest::MergeFrom(const PatchModelUseCasesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchModelUseCasesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  usecases_.MergeFrom(from.usecases_);
  if (!from._internal_model_id().empty()) {
    _internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_action().empty()) {
    _internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchModelUseCasesRequest::CopyFrom(const PatchModelUseCasesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchModelUseCasesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchModelUseCasesRequest::IsInitialized() const {
  return true;
}

void PatchModelUseCasesRequest::InternalSwap(PatchModelUseCasesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  usecases_.InternalSwap(&other->usecases_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_id_, lhs_arena,
      &other->model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_, lhs_arena,
      &other->action_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchModelUseCasesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[106]);
}

// ===================================================================

class PatchModelLanguagesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchModelLanguagesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchModelLanguagesRequest::_Internal::user_app_id(const PatchModelLanguagesRequest* msg) {
  return *msg->user_app_id_;
}
void PatchModelLanguagesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
PatchModelLanguagesRequest::PatchModelLanguagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  languages_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchModelLanguagesRequest)
}
PatchModelLanguagesRequest::PatchModelLanguagesRequest(const PatchModelLanguagesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      languages_(from.languages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_id(), 
      GetArenaForAllocation());
  }
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchModelLanguagesRequest)
}

inline void PatchModelLanguagesRequest::SharedCtor() {
model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

PatchModelLanguagesRequest::~PatchModelLanguagesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchModelLanguagesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PatchModelLanguagesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchModelLanguagesRequest::ArenaDtor(void* object) {
  PatchModelLanguagesRequest* _this = reinterpret_cast< PatchModelLanguagesRequest* >(object);
  (void)_this;
}
void PatchModelLanguagesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatchModelLanguagesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PatchModelLanguagesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchModelLanguagesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  languages_.Clear();
  model_id_.ClearToEmpty();
  action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchModelLanguagesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchModelLanguagesRequest.model_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string languages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_languages();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchModelLanguagesRequest.languages"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchModelLanguagesRequest.action"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchModelLanguagesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchModelLanguagesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchModelLanguagesRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // repeated string languages = 3;
  for (int i = 0, n = this->_internal_languages_size(); i < n; i++) {
    const auto& s = this->_internal_languages(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchModelLanguagesRequest.languages");
    target = stream->WriteString(3, s, target);
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchModelLanguagesRequest.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchModelLanguagesRequest)
  return target;
}

size_t PatchModelLanguagesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchModelLanguagesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string languages = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(languages_.size());
  for (int i = 0, n = languages_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      languages_.Get(i));
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchModelLanguagesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PatchModelLanguagesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchModelLanguagesRequest::GetClassData() const { return &_class_data_; }

void PatchModelLanguagesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PatchModelLanguagesRequest *>(to)->MergeFrom(
      static_cast<const PatchModelLanguagesRequest &>(from));
}


void PatchModelLanguagesRequest::MergeFrom(const PatchModelLanguagesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchModelLanguagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  languages_.MergeFrom(from.languages_);
  if (!from._internal_model_id().empty()) {
    _internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_action().empty()) {
    _internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchModelLanguagesRequest::CopyFrom(const PatchModelLanguagesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchModelLanguagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchModelLanguagesRequest::IsInitialized() const {
  return true;
}

void PatchModelLanguagesRequest::InternalSwap(PatchModelLanguagesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  languages_.InternalSwap(&other->languages_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_id_, lhs_arena,
      &other->model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_, lhs_arena,
      &other->action_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchModelLanguagesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[107]);
}

// ===================================================================

class MultiModelToolkitResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiModelToolkitResponse* msg);
};

const ::clarifai::api::status::Status&
MultiModelToolkitResponse::_Internal::status(const MultiModelToolkitResponse* msg) {
  return *msg->status_;
}
void MultiModelToolkitResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
MultiModelToolkitResponse::MultiModelToolkitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  toolkits_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiModelToolkitResponse)
}
MultiModelToolkitResponse::MultiModelToolkitResponse(const MultiModelToolkitResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      toolkits_(from.toolkits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiModelToolkitResponse)
}

inline void MultiModelToolkitResponse::SharedCtor() {
status_ = nullptr;
}

MultiModelToolkitResponse::~MultiModelToolkitResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiModelToolkitResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiModelToolkitResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiModelToolkitResponse::ArenaDtor(void* object) {
  MultiModelToolkitResponse* _this = reinterpret_cast< MultiModelToolkitResponse* >(object);
  (void)_this;
}
void MultiModelToolkitResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiModelToolkitResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiModelToolkitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiModelToolkitResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  toolkits_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiModelToolkitResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string toolkits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_toolkits();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.MultiModelToolkitResponse.toolkits"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiModelToolkitResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiModelToolkitResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated string toolkits = 2;
  for (int i = 0, n = this->_internal_toolkits_size(); i < n; i++) {
    const auto& s = this->_internal_toolkits(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.MultiModelToolkitResponse.toolkits");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiModelToolkitResponse)
  return target;
}

size_t MultiModelToolkitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiModelToolkitResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string toolkits = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(toolkits_.size());
  for (int i = 0, n = toolkits_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      toolkits_.Get(i));
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiModelToolkitResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiModelToolkitResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiModelToolkitResponse::GetClassData() const { return &_class_data_; }

void MultiModelToolkitResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiModelToolkitResponse *>(to)->MergeFrom(
      static_cast<const MultiModelToolkitResponse &>(from));
}


void MultiModelToolkitResponse::MergeFrom(const MultiModelToolkitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiModelToolkitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  toolkits_.MergeFrom(from.toolkits_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiModelToolkitResponse::CopyFrom(const MultiModelToolkitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiModelToolkitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiModelToolkitResponse::IsInitialized() const {
  return true;
}

void MultiModelToolkitResponse::InternalSwap(MultiModelToolkitResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  toolkits_.InternalSwap(&other->toolkits_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiModelToolkitResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[108]);
}

// ===================================================================

class MultiModelUseCaseResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiModelUseCaseResponse* msg);
};

const ::clarifai::api::status::Status&
MultiModelUseCaseResponse::_Internal::status(const MultiModelUseCaseResponse* msg) {
  return *msg->status_;
}
void MultiModelUseCaseResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
MultiModelUseCaseResponse::MultiModelUseCaseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  usecases_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiModelUseCaseResponse)
}
MultiModelUseCaseResponse::MultiModelUseCaseResponse(const MultiModelUseCaseResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      usecases_(from.usecases_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiModelUseCaseResponse)
}

inline void MultiModelUseCaseResponse::SharedCtor() {
status_ = nullptr;
}

MultiModelUseCaseResponse::~MultiModelUseCaseResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiModelUseCaseResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiModelUseCaseResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiModelUseCaseResponse::ArenaDtor(void* object) {
  MultiModelUseCaseResponse* _this = reinterpret_cast< MultiModelUseCaseResponse* >(object);
  (void)_this;
}
void MultiModelUseCaseResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiModelUseCaseResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiModelUseCaseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiModelUseCaseResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  usecases_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiModelUseCaseResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string usecases = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_usecases();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.MultiModelUseCaseResponse.usecases"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiModelUseCaseResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiModelUseCaseResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated string usecases = 2;
  for (int i = 0, n = this->_internal_usecases_size(); i < n; i++) {
    const auto& s = this->_internal_usecases(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.MultiModelUseCaseResponse.usecases");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiModelUseCaseResponse)
  return target;
}

size_t MultiModelUseCaseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiModelUseCaseResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string usecases = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(usecases_.size());
  for (int i = 0, n = usecases_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      usecases_.Get(i));
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiModelUseCaseResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiModelUseCaseResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiModelUseCaseResponse::GetClassData() const { return &_class_data_; }

void MultiModelUseCaseResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiModelUseCaseResponse *>(to)->MergeFrom(
      static_cast<const MultiModelUseCaseResponse &>(from));
}


void MultiModelUseCaseResponse::MergeFrom(const MultiModelUseCaseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiModelUseCaseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  usecases_.MergeFrom(from.usecases_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiModelUseCaseResponse::CopyFrom(const MultiModelUseCaseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiModelUseCaseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiModelUseCaseResponse::IsInitialized() const {
  return true;
}

void MultiModelUseCaseResponse::InternalSwap(MultiModelUseCaseResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  usecases_.InternalSwap(&other->usecases_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiModelUseCaseResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[109]);
}

// ===================================================================

class MultiModelLanguageResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiModelLanguageResponse* msg);
};

const ::clarifai::api::status::Status&
MultiModelLanguageResponse::_Internal::status(const MultiModelLanguageResponse* msg) {
  return *msg->status_;
}
void MultiModelLanguageResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
MultiModelLanguageResponse::MultiModelLanguageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  languages_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiModelLanguageResponse)
}
MultiModelLanguageResponse::MultiModelLanguageResponse(const MultiModelLanguageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      languages_(from.languages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiModelLanguageResponse)
}

inline void MultiModelLanguageResponse::SharedCtor() {
status_ = nullptr;
}

MultiModelLanguageResponse::~MultiModelLanguageResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiModelLanguageResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiModelLanguageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiModelLanguageResponse::ArenaDtor(void* object) {
  MultiModelLanguageResponse* _this = reinterpret_cast< MultiModelLanguageResponse* >(object);
  (void)_this;
}
void MultiModelLanguageResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiModelLanguageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiModelLanguageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiModelLanguageResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  languages_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiModelLanguageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string languages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_languages();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.MultiModelLanguageResponse.languages"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiModelLanguageResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiModelLanguageResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated string languages = 2;
  for (int i = 0, n = this->_internal_languages_size(); i < n; i++) {
    const auto& s = this->_internal_languages(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.MultiModelLanguageResponse.languages");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiModelLanguageResponse)
  return target;
}

size_t MultiModelLanguageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiModelLanguageResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string languages = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(languages_.size());
  for (int i = 0, n = languages_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      languages_.Get(i));
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiModelLanguageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiModelLanguageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiModelLanguageResponse::GetClassData() const { return &_class_data_; }

void MultiModelLanguageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiModelLanguageResponse *>(to)->MergeFrom(
      static_cast<const MultiModelLanguageResponse &>(from));
}


void MultiModelLanguageResponse::MergeFrom(const MultiModelLanguageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiModelLanguageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  languages_.MergeFrom(from.languages_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiModelLanguageResponse::CopyFrom(const MultiModelLanguageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiModelLanguageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiModelLanguageResponse::IsInitialized() const {
  return true;
}

void MultiModelLanguageResponse::InternalSwap(MultiModelLanguageResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  languages_.InternalSwap(&other->languages_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiModelLanguageResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[110]);
}

// ===================================================================

class PostModelsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostModelsRequest* msg);
  static const ::clarifai::api::Model& model(const PostModelsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostModelsRequest::_Internal::user_app_id(const PostModelsRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::Model&
PostModelsRequest::_Internal::model(const PostModelsRequest* msg) {
  return *msg->model_;
}
void PostModelsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostModelsRequest::clear_model() {
  if (GetArenaForAllocation() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
}
void PostModelsRequest::clear_models() {
  models_.Clear();
}
PostModelsRequest::PostModelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  models_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostModelsRequest)
}
PostModelsRequest::PostModelsRequest(const PostModelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      models_(from.models_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_model()) {
    model_ = new ::clarifai::api::Model(*from.model_);
  } else {
    model_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostModelsRequest)
}

inline void PostModelsRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&model_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(model_));
}

PostModelsRequest::~PostModelsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostModelsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostModelsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete model_;
}

void PostModelsRequest::ArenaDtor(void* object) {
  PostModelsRequest* _this = reinterpret_cast< PostModelsRequest* >(object);
  (void)_this;
}
void PostModelsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostModelsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostModelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostModelsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  models_.Clear();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostModelsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Model model = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Model models = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostModelsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostModelsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // .clarifai.api.Model model = 2 [deprecated = true];
  if (this->_internal_has_model()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::model(this), target, stream);
  }

  // repeated .clarifai.api.Model models = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_models_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_models(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostModelsRequest)
  return target;
}

size_t PostModelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostModelsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Model models = 3;
  total_size += 1UL * this->_internal_models_size();
  for (const auto& msg : this->models_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.Model model = 2 [deprecated = true];
  if (this->_internal_has_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostModelsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostModelsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostModelsRequest::GetClassData() const { return &_class_data_; }

void PostModelsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostModelsRequest *>(to)->MergeFrom(
      static_cast<const PostModelsRequest &>(from));
}


void PostModelsRequest::MergeFrom(const PostModelsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostModelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  models_.MergeFrom(from.models_);
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_has_model()) {
    _internal_mutable_model()->::clarifai::api::Model::MergeFrom(from._internal_model());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostModelsRequest::CopyFrom(const PostModelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostModelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostModelsRequest::IsInitialized() const {
  return true;
}

void PostModelsRequest::InternalSwap(PostModelsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  models_.InternalSwap(&other->models_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostModelsRequest, model_)
      + sizeof(PostModelsRequest::model_)
      - PROTOBUF_FIELD_OFFSET(PostModelsRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostModelsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[111]);
}

// ===================================================================

class PatchModelsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchModelsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchModelsRequest::_Internal::user_app_id(const PatchModelsRequest* msg) {
  return *msg->user_app_id_;
}
void PatchModelsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchModelsRequest::clear_models() {
  models_.Clear();
}
PatchModelsRequest::PatchModelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  models_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchModelsRequest)
}
PatchModelsRequest::PatchModelsRequest(const PatchModelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      models_(from.models_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchModelsRequest)
}

inline void PatchModelsRequest::SharedCtor() {
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

PatchModelsRequest::~PatchModelsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchModelsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PatchModelsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchModelsRequest::ArenaDtor(void* object) {
  PatchModelsRequest* _this = reinterpret_cast< PatchModelsRequest* >(object);
  (void)_this;
}
void PatchModelsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatchModelsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PatchModelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchModelsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  models_.Clear();
  action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchModelsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Model models = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchModelsRequest.action"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchModelsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchModelsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Model models = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_models_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_models(i), target, stream);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchModelsRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchModelsRequest)
  return target;
}

size_t PatchModelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchModelsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Model models = 2;
  total_size += 1UL * this->_internal_models_size();
  for (const auto& msg : this->models_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchModelsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PatchModelsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchModelsRequest::GetClassData() const { return &_class_data_; }

void PatchModelsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PatchModelsRequest *>(to)->MergeFrom(
      static_cast<const PatchModelsRequest &>(from));
}


void PatchModelsRequest::MergeFrom(const PatchModelsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchModelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  models_.MergeFrom(from.models_);
  if (!from._internal_action().empty()) {
    _internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchModelsRequest::CopyFrom(const PatchModelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchModelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchModelsRequest::IsInitialized() const {
  return true;
}

void PatchModelsRequest::InternalSwap(PatchModelsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  models_.InternalSwap(&other->models_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_, lhs_arena,
      &other->action_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchModelsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[112]);
}

// ===================================================================

class IdUpdateSource::_Internal {
 public:
};

IdUpdateSource::IdUpdateSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.IdUpdateSource)
}
IdUpdateSource::IdUpdateSource(const IdUpdateSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  new_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    new_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_new_id().empty()) {
    new_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_new_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.IdUpdateSource)
}

inline void IdUpdateSource::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
new_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  new_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IdUpdateSource::~IdUpdateSource() {
  // @@protoc_insertion_point(destructor:clarifai.api.IdUpdateSource)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IdUpdateSource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IdUpdateSource::ArenaDtor(void* object) {
  IdUpdateSource* _this = reinterpret_cast< IdUpdateSource* >(object);
  (void)_this;
}
void IdUpdateSource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IdUpdateSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IdUpdateSource::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.IdUpdateSource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  new_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IdUpdateSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.IdUpdateSource.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string new_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_new_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.IdUpdateSource.new_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IdUpdateSource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.IdUpdateSource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.IdUpdateSource.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string new_id = 2;
  if (!this->_internal_new_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_id().data(), static_cast<int>(this->_internal_new_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.IdUpdateSource.new_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_new_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.IdUpdateSource)
  return target;
}

size_t IdUpdateSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.IdUpdateSource)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string new_id = 2;
  if (!this->_internal_new_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_new_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IdUpdateSource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IdUpdateSource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IdUpdateSource::GetClassData() const { return &_class_data_; }

void IdUpdateSource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IdUpdateSource *>(to)->MergeFrom(
      static_cast<const IdUpdateSource &>(from));
}


void IdUpdateSource::MergeFrom(const IdUpdateSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.IdUpdateSource)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_new_id().empty()) {
    _internal_set_new_id(from._internal_new_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IdUpdateSource::CopyFrom(const IdUpdateSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.IdUpdateSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdUpdateSource::IsInitialized() const {
  return true;
}

void IdUpdateSource::InternalSwap(IdUpdateSource* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &new_id_, lhs_arena,
      &other->new_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata IdUpdateSource::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[113]);
}

// ===================================================================

class PatchModelIdsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchModelIdsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchModelIdsRequest::_Internal::user_app_id(const PatchModelIdsRequest* msg) {
  return *msg->user_app_id_;
}
void PatchModelIdsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
PatchModelIdsRequest::PatchModelIdsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchModelIdsRequest)
}
PatchModelIdsRequest::PatchModelIdsRequest(const PatchModelIdsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchModelIdsRequest)
}

inline void PatchModelIdsRequest::SharedCtor() {
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

PatchModelIdsRequest::~PatchModelIdsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchModelIdsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PatchModelIdsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchModelIdsRequest::ArenaDtor(void* object) {
  PatchModelIdsRequest* _this = reinterpret_cast< PatchModelIdsRequest* >(object);
  (void)_this;
}
void PatchModelIdsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatchModelIdsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PatchModelIdsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchModelIdsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchModelIdsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.IdUpdateSource ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchModelIdsRequest.action"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchModelIdsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchModelIdsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.IdUpdateSource ids = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_ids(i), target, stream);
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchModelIdsRequest.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchModelIdsRequest)
  return target;
}

size_t PatchModelIdsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchModelIdsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.IdUpdateSource ids = 3;
  total_size += 1UL * this->_internal_ids_size();
  for (const auto& msg : this->ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchModelIdsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PatchModelIdsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchModelIdsRequest::GetClassData() const { return &_class_data_; }

void PatchModelIdsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PatchModelIdsRequest *>(to)->MergeFrom(
      static_cast<const PatchModelIdsRequest &>(from));
}


void PatchModelIdsRequest::MergeFrom(const PatchModelIdsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchModelIdsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (!from._internal_action().empty()) {
    _internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchModelIdsRequest::CopyFrom(const PatchModelIdsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchModelIdsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchModelIdsRequest::IsInitialized() const {
  return true;
}

void PatchModelIdsRequest::InternalSwap(PatchModelIdsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_, lhs_arena,
      &other->action_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchModelIdsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[114]);
}

// ===================================================================

class DeleteModelRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteModelRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteModelRequest::_Internal::user_app_id(const DeleteModelRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteModelRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteModelRequest::DeleteModelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteModelRequest)
}
DeleteModelRequest::DeleteModelRequest(const DeleteModelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteModelRequest)
}

inline void DeleteModelRequest::SharedCtor() {
model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

DeleteModelRequest::~DeleteModelRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteModelRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteModelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteModelRequest::ArenaDtor(void* object) {
  DeleteModelRequest* _this = reinterpret_cast< DeleteModelRequest* >(object);
  (void)_this;
}
void DeleteModelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteModelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteModelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteModelRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteModelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteModelRequest.model_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteModelRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteModelRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteModelRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteModelRequest)
  return target;
}

size_t DeleteModelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteModelRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteModelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteModelRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteModelRequest::GetClassData() const { return &_class_data_; }

void DeleteModelRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteModelRequest *>(to)->MergeFrom(
      static_cast<const DeleteModelRequest &>(from));
}


void DeleteModelRequest::MergeFrom(const DeleteModelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteModelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_model_id().empty()) {
    _internal_set_model_id(from._internal_model_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteModelRequest::CopyFrom(const DeleteModelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteModelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteModelRequest::IsInitialized() const {
  return true;
}

void DeleteModelRequest::InternalSwap(DeleteModelRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_id_, lhs_arena,
      &other->model_id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteModelRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[115]);
}

// ===================================================================

class DeleteModelsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteModelsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteModelsRequest::_Internal::user_app_id(const DeleteModelsRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteModelsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteModelsRequest::DeleteModelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteModelsRequest)
}
DeleteModelsRequest::DeleteModelsRequest(const DeleteModelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  delete_all_ = from.delete_all_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteModelsRequest)
}

inline void DeleteModelsRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&delete_all_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(delete_all_));
}

DeleteModelsRequest::~DeleteModelsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteModelsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteModelsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteModelsRequest::ArenaDtor(void* object) {
  DeleteModelsRequest* _this = reinterpret_cast< DeleteModelsRequest* >(object);
  (void)_this;
}
void DeleteModelsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteModelsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteModelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteModelsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  delete_all_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteModelsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteModelsRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool delete_all = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          delete_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteModelsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteModelsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteModelsRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  // bool delete_all = 3;
  if (this->_internal_delete_all() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_delete_all(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteModelsRequest)
  return target;
}

size_t DeleteModelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteModelsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // bool delete_all = 3;
  if (this->_internal_delete_all() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteModelsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteModelsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteModelsRequest::GetClassData() const { return &_class_data_; }

void DeleteModelsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteModelsRequest *>(to)->MergeFrom(
      static_cast<const DeleteModelsRequest &>(from));
}


void DeleteModelsRequest::MergeFrom(const DeleteModelsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteModelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_delete_all() != 0) {
    _internal_set_delete_all(from._internal_delete_all());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteModelsRequest::CopyFrom(const DeleteModelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteModelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteModelsRequest::IsInitialized() const {
  return true;
}

void DeleteModelsRequest::InternalSwap(DeleteModelsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteModelsRequest, delete_all_)
      + sizeof(DeleteModelsRequest::delete_all_)
      - PROTOBUF_FIELD_OFFSET(DeleteModelsRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteModelsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[116]);
}

// ===================================================================

class PostModelsSearchesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostModelsSearchesRequest* msg);
  static const ::clarifai::api::ModelQuery& model_query(const PostModelsSearchesRequest* msg);
  static const ::clarifai::api::Pagination& pagination(const PostModelsSearchesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostModelsSearchesRequest::_Internal::user_app_id(const PostModelsSearchesRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::ModelQuery&
PostModelsSearchesRequest::_Internal::model_query(const PostModelsSearchesRequest* msg) {
  return *msg->model_query_;
}
const ::clarifai::api::Pagination&
PostModelsSearchesRequest::_Internal::pagination(const PostModelsSearchesRequest* msg) {
  return *msg->pagination_;
}
void PostModelsSearchesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostModelsSearchesRequest::clear_model_query() {
  if (GetArenaForAllocation() == nullptr && model_query_ != nullptr) {
    delete model_query_;
  }
  model_query_ = nullptr;
}
PostModelsSearchesRequest::PostModelsSearchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostModelsSearchesRequest)
}
PostModelsSearchesRequest::PostModelsSearchesRequest(const PostModelsSearchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_model_query()) {
    model_query_ = new ::clarifai::api::ModelQuery(*from.model_query_);
  } else {
    model_query_ = nullptr;
  }
  if (from._internal_has_pagination()) {
    pagination_ = new ::clarifai::api::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostModelsSearchesRequest)
}

inline void PostModelsSearchesRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pagination_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(pagination_));
}

PostModelsSearchesRequest::~PostModelsSearchesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostModelsSearchesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostModelsSearchesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete model_query_;
  if (this != internal_default_instance()) delete pagination_;
}

void PostModelsSearchesRequest::ArenaDtor(void* object) {
  PostModelsSearchesRequest* _this = reinterpret_cast< PostModelsSearchesRequest* >(object);
  (void)_this;
}
void PostModelsSearchesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostModelsSearchesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostModelsSearchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostModelsSearchesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && model_query_ != nullptr) {
    delete model_query_;
  }
  model_query_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostModelsSearchesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ModelQuery model_query = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_query(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Pagination pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostModelsSearchesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostModelsSearchesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // .clarifai.api.ModelQuery model_query = 2;
  if (this->_internal_has_model_query()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::model_query(this), target, stream);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->_internal_has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pagination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostModelsSearchesRequest)
  return target;
}

size_t PostModelsSearchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostModelsSearchesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.ModelQuery model_query = 2;
  if (this->_internal_has_model_query()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_query_);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostModelsSearchesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostModelsSearchesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostModelsSearchesRequest::GetClassData() const { return &_class_data_; }

void PostModelsSearchesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostModelsSearchesRequest *>(to)->MergeFrom(
      static_cast<const PostModelsSearchesRequest &>(from));
}


void PostModelsSearchesRequest::MergeFrom(const PostModelsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostModelsSearchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_has_model_query()) {
    _internal_mutable_model_query()->::clarifai::api::ModelQuery::MergeFrom(from._internal_model_query());
  }
  if (from._internal_has_pagination()) {
    _internal_mutable_pagination()->::clarifai::api::Pagination::MergeFrom(from._internal_pagination());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostModelsSearchesRequest::CopyFrom(const PostModelsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostModelsSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostModelsSearchesRequest::IsInitialized() const {
  return true;
}

void PostModelsSearchesRequest::InternalSwap(PostModelsSearchesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostModelsSearchesRequest, pagination_)
      + sizeof(PostModelsSearchesRequest::pagination_)
      - PROTOBUF_FIELD_OFFSET(PostModelsSearchesRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostModelsSearchesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[117]);
}

// ===================================================================

class SingleModelResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleModelResponse* msg);
  static const ::clarifai::api::Model& model(const SingleModelResponse* msg);
};

const ::clarifai::api::status::Status&
SingleModelResponse::_Internal::status(const SingleModelResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::Model&
SingleModelResponse::_Internal::model(const SingleModelResponse* msg) {
  return *msg->model_;
}
void SingleModelResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleModelResponse::clear_model() {
  if (GetArenaForAllocation() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
}
SingleModelResponse::SingleModelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleModelResponse)
}
SingleModelResponse::SingleModelResponse(const SingleModelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_model()) {
    model_ = new ::clarifai::api::Model(*from.model_);
  } else {
    model_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleModelResponse)
}

inline void SingleModelResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&model_) -
    reinterpret_cast<char*>(&status_)) + sizeof(model_));
}

SingleModelResponse::~SingleModelResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleModelResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SingleModelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete model_;
}

void SingleModelResponse::ArenaDtor(void* object) {
  SingleModelResponse* _this = reinterpret_cast< SingleModelResponse* >(object);
  (void)_this;
}
void SingleModelResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleModelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleModelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleModelResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleModelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Model model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleModelResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleModelResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.Model model = 2;
  if (this->_internal_has_model()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::model(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleModelResponse)
  return target;
}

size_t SingleModelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleModelResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.Model model = 2;
  if (this->_internal_has_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleModelResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SingleModelResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleModelResponse::GetClassData() const { return &_class_data_; }

void SingleModelResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SingleModelResponse *>(to)->MergeFrom(
      static_cast<const SingleModelResponse &>(from));
}


void SingleModelResponse::MergeFrom(const SingleModelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleModelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_model()) {
    _internal_mutable_model()->::clarifai::api::Model::MergeFrom(from._internal_model());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleModelResponse::CopyFrom(const SingleModelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleModelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleModelResponse::IsInitialized() const {
  return true;
}

void SingleModelResponse::InternalSwap(SingleModelResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleModelResponse, model_)
      + sizeof(SingleModelResponse::model_)
      - PROTOBUF_FIELD_OFFSET(SingleModelResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleModelResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[118]);
}

// ===================================================================

class MultiModelResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiModelResponse* msg);
};

const ::clarifai::api::status::Status&
MultiModelResponse::_Internal::status(const MultiModelResponse* msg) {
  return *msg->status_;
}
void MultiModelResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiModelResponse::clear_models() {
  models_.Clear();
}
MultiModelResponse::MultiModelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  models_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiModelResponse)
}
MultiModelResponse::MultiModelResponse(const MultiModelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      models_(from.models_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiModelResponse)
}

inline void MultiModelResponse::SharedCtor() {
status_ = nullptr;
}

MultiModelResponse::~MultiModelResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiModelResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiModelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiModelResponse::ArenaDtor(void* object) {
  MultiModelResponse* _this = reinterpret_cast< MultiModelResponse* >(object);
  (void)_this;
}
void MultiModelResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiModelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiModelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiModelResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  models_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiModelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Model models = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiModelResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiModelResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.Model models = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_models_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_models(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiModelResponse)
  return target;
}

size_t MultiModelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiModelResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Model models = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_models_size();
  for (const auto& msg : this->models_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiModelResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiModelResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiModelResponse::GetClassData() const { return &_class_data_; }

void MultiModelResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiModelResponse *>(to)->MergeFrom(
      static_cast<const MultiModelResponse &>(from));
}


void MultiModelResponse::MergeFrom(const MultiModelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiModelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  models_.MergeFrom(from.models_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiModelResponse::CopyFrom(const MultiModelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiModelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiModelResponse::IsInitialized() const {
  return true;
}

void MultiModelResponse::InternalSwap(MultiModelResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  models_.InternalSwap(&other->models_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiModelResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[119]);
}

// ===================================================================

class PatchModelVersionsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchModelVersionsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchModelVersionsRequest::_Internal::user_app_id(const PatchModelVersionsRequest* msg) {
  return *msg->user_app_id_;
}
void PatchModelVersionsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchModelVersionsRequest::clear_model_versions() {
  model_versions_.Clear();
}
PatchModelVersionsRequest::PatchModelVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  model_versions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchModelVersionsRequest)
}
PatchModelVersionsRequest::PatchModelVersionsRequest(const PatchModelVersionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      model_versions_(from.model_versions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_id(), 
      GetArenaForAllocation());
  }
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchModelVersionsRequest)
}

inline void PatchModelVersionsRequest::SharedCtor() {
model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

PatchModelVersionsRequest::~PatchModelVersionsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchModelVersionsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PatchModelVersionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchModelVersionsRequest::ArenaDtor(void* object) {
  PatchModelVersionsRequest* _this = reinterpret_cast< PatchModelVersionsRequest* >(object);
  (void)_this;
}
void PatchModelVersionsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatchModelVersionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PatchModelVersionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchModelVersionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_versions_.Clear();
  model_id_.ClearToEmpty();
  action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchModelVersionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchModelVersionsRequest.model_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModelVersion model_versions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model_versions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchModelVersionsRequest.action"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchModelVersionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchModelVersionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchModelVersionsRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // repeated .clarifai.api.ModelVersion model_versions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_model_versions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_model_versions(i), target, stream);
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchModelVersionsRequest.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchModelVersionsRequest)
  return target;
}

size_t PatchModelVersionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchModelVersionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ModelVersion model_versions = 3;
  total_size += 1UL * this->_internal_model_versions_size();
  for (const auto& msg : this->model_versions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchModelVersionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PatchModelVersionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchModelVersionsRequest::GetClassData() const { return &_class_data_; }

void PatchModelVersionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PatchModelVersionsRequest *>(to)->MergeFrom(
      static_cast<const PatchModelVersionsRequest &>(from));
}


void PatchModelVersionsRequest::MergeFrom(const PatchModelVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchModelVersionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  model_versions_.MergeFrom(from.model_versions_);
  if (!from._internal_model_id().empty()) {
    _internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_action().empty()) {
    _internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchModelVersionsRequest::CopyFrom(const PatchModelVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchModelVersionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchModelVersionsRequest::IsInitialized() const {
  return true;
}

void PatchModelVersionsRequest::InternalSwap(PatchModelVersionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  model_versions_.InternalSwap(&other->model_versions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_id_, lhs_arena,
      &other->model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_, lhs_arena,
      &other->action_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchModelVersionsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[120]);
}

// ===================================================================

class GetModelVersionRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetModelVersionRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetModelVersionRequest::_Internal::user_app_id(const GetModelVersionRequest* msg) {
  return *msg->user_app_id_;
}
void GetModelVersionRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetModelVersionRequest::GetModelVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetModelVersionRequest)
}
GetModelVersionRequest::GetModelVersionRequest(const GetModelVersionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_id(), 
      GetArenaForAllocation());
  }
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version_id().empty()) {
    version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetModelVersionRequest)
}

inline void GetModelVersionRequest::SharedCtor() {
model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

GetModelVersionRequest::~GetModelVersionRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetModelVersionRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetModelVersionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetModelVersionRequest::ArenaDtor(void* object) {
  GetModelVersionRequest* _this = reinterpret_cast< GetModelVersionRequest* >(object);
  (void)_this;
}
void GetModelVersionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetModelVersionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetModelVersionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetModelVersionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_id_.ClearToEmpty();
  version_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetModelVersionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetModelVersionRequest.model_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetModelVersionRequest.version_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetModelVersionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetModelVersionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelVersionRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string version_id = 3;
  if (!this->_internal_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelVersionRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetModelVersionRequest)
  return target;
}

size_t GetModelVersionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetModelVersionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string version_id = 3;
  if (!this->_internal_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetModelVersionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetModelVersionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetModelVersionRequest::GetClassData() const { return &_class_data_; }

void GetModelVersionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetModelVersionRequest *>(to)->MergeFrom(
      static_cast<const GetModelVersionRequest &>(from));
}


void GetModelVersionRequest::MergeFrom(const GetModelVersionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetModelVersionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_model_id().empty()) {
    _internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_version_id().empty()) {
    _internal_set_version_id(from._internal_version_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetModelVersionRequest::CopyFrom(const GetModelVersionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetModelVersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModelVersionRequest::IsInitialized() const {
  return true;
}

void GetModelVersionRequest::InternalSwap(GetModelVersionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_id_, lhs_arena,
      &other->model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_id_, lhs_arena,
      &other->version_id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetModelVersionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[121]);
}

// ===================================================================

class ListModelVersionsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListModelVersionsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListModelVersionsRequest::_Internal::user_app_id(const ListModelVersionsRequest* msg) {
  return *msg->user_app_id_;
}
void ListModelVersionsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListModelVersionsRequest::ListModelVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  concept_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListModelVersionsRequest)
}
ListModelVersionsRequest::ListModelVersionsRequest(const ListModelVersionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      concept_ids_(from.concept_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListModelVersionsRequest)
}

inline void ListModelVersionsRequest::SharedCtor() {
model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListModelVersionsRequest::~ListModelVersionsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListModelVersionsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListModelVersionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListModelVersionsRequest::ArenaDtor(void* object) {
  ListModelVersionsRequest* _this = reinterpret_cast< ListModelVersionsRequest* >(object);
  (void)_this;
}
void ListModelVersionsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListModelVersionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListModelVersionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListModelVersionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concept_ids_.Clear();
  model_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListModelVersionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListModelVersionsRequest.model_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string concept_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_concept_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListModelVersionsRequest.concept_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListModelVersionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListModelVersionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelVersionsRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // uint32 page = 3;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_page(), target);
  }

  // uint32 per_page = 4;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_per_page(), target);
  }

  // repeated string concept_ids = 5;
  for (int i = 0, n = this->_internal_concept_ids_size(); i < n; i++) {
    const auto& s = this->_internal_concept_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelVersionsRequest.concept_ids");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListModelVersionsRequest)
  return target;
}

size_t ListModelVersionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListModelVersionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string concept_ids = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(concept_ids_.size());
  for (int i = 0, n = concept_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      concept_ids_.Get(i));
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 3;
  if (this->_internal_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 4;
  if (this->_internal_per_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListModelVersionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListModelVersionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListModelVersionsRequest::GetClassData() const { return &_class_data_; }

void ListModelVersionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListModelVersionsRequest *>(to)->MergeFrom(
      static_cast<const ListModelVersionsRequest &>(from));
}


void ListModelVersionsRequest::MergeFrom(const ListModelVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListModelVersionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  concept_ids_.MergeFrom(from.concept_ids_);
  if (!from._internal_model_id().empty()) {
    _internal_set_model_id(from._internal_model_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListModelVersionsRequest::CopyFrom(const ListModelVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListModelVersionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListModelVersionsRequest::IsInitialized() const {
  return true;
}

void ListModelVersionsRequest::InternalSwap(ListModelVersionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  concept_ids_.InternalSwap(&other->concept_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_id_, lhs_arena,
      &other->model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListModelVersionsRequest, per_page_)
      + sizeof(ListModelVersionsRequest::per_page_)
      - PROTOBUF_FIELD_OFFSET(ListModelVersionsRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListModelVersionsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[122]);
}

// ===================================================================

class DeleteModelVersionRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteModelVersionRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteModelVersionRequest::_Internal::user_app_id(const DeleteModelVersionRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteModelVersionRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteModelVersionRequest::DeleteModelVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteModelVersionRequest)
}
DeleteModelVersionRequest::DeleteModelVersionRequest(const DeleteModelVersionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_id(), 
      GetArenaForAllocation());
  }
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version_id().empty()) {
    version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteModelVersionRequest)
}

inline void DeleteModelVersionRequest::SharedCtor() {
model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

DeleteModelVersionRequest::~DeleteModelVersionRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteModelVersionRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteModelVersionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteModelVersionRequest::ArenaDtor(void* object) {
  DeleteModelVersionRequest* _this = reinterpret_cast< DeleteModelVersionRequest* >(object);
  (void)_this;
}
void DeleteModelVersionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteModelVersionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteModelVersionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteModelVersionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_id_.ClearToEmpty();
  version_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteModelVersionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteModelVersionRequest.model_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteModelVersionRequest.version_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteModelVersionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteModelVersionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 3;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteModelVersionRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model_id(), target);
  }

  // string version_id = 4;
  if (!this->_internal_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteModelVersionRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_version_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteModelVersionRequest)
  return target;
}

size_t DeleteModelVersionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteModelVersionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 3;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string version_id = 4;
  if (!this->_internal_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteModelVersionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteModelVersionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteModelVersionRequest::GetClassData() const { return &_class_data_; }

void DeleteModelVersionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteModelVersionRequest *>(to)->MergeFrom(
      static_cast<const DeleteModelVersionRequest &>(from));
}


void DeleteModelVersionRequest::MergeFrom(const DeleteModelVersionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteModelVersionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_model_id().empty()) {
    _internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_version_id().empty()) {
    _internal_set_version_id(from._internal_version_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteModelVersionRequest::CopyFrom(const DeleteModelVersionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteModelVersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteModelVersionRequest::IsInitialized() const {
  return true;
}

void DeleteModelVersionRequest::InternalSwap(DeleteModelVersionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_id_, lhs_arena,
      &other->model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_id_, lhs_arena,
      &other->version_id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteModelVersionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[123]);
}

// ===================================================================

class SingleModelVersionResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleModelVersionResponse* msg);
  static const ::clarifai::api::ModelVersion& model_version(const SingleModelVersionResponse* msg);
};

const ::clarifai::api::status::Status&
SingleModelVersionResponse::_Internal::status(const SingleModelVersionResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::ModelVersion&
SingleModelVersionResponse::_Internal::model_version(const SingleModelVersionResponse* msg) {
  return *msg->model_version_;
}
void SingleModelVersionResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleModelVersionResponse::clear_model_version() {
  if (GetArenaForAllocation() == nullptr && model_version_ != nullptr) {
    delete model_version_;
  }
  model_version_ = nullptr;
}
SingleModelVersionResponse::SingleModelVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleModelVersionResponse)
}
SingleModelVersionResponse::SingleModelVersionResponse(const SingleModelVersionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_model_version()) {
    model_version_ = new ::clarifai::api::ModelVersion(*from.model_version_);
  } else {
    model_version_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleModelVersionResponse)
}

inline void SingleModelVersionResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&model_version_) -
    reinterpret_cast<char*>(&status_)) + sizeof(model_version_));
}

SingleModelVersionResponse::~SingleModelVersionResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleModelVersionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SingleModelVersionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete model_version_;
}

void SingleModelVersionResponse::ArenaDtor(void* object) {
  SingleModelVersionResponse* _this = reinterpret_cast< SingleModelVersionResponse* >(object);
  (void)_this;
}
void SingleModelVersionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleModelVersionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleModelVersionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleModelVersionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && model_version_ != nullptr) {
    delete model_version_;
  }
  model_version_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleModelVersionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ModelVersion model_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleModelVersionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleModelVersionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.ModelVersion model_version = 2;
  if (this->_internal_has_model_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::model_version(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleModelVersionResponse)
  return target;
}

size_t SingleModelVersionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleModelVersionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.ModelVersion model_version = 2;
  if (this->_internal_has_model_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_version_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleModelVersionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SingleModelVersionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleModelVersionResponse::GetClassData() const { return &_class_data_; }

void SingleModelVersionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SingleModelVersionResponse *>(to)->MergeFrom(
      static_cast<const SingleModelVersionResponse &>(from));
}


void SingleModelVersionResponse::MergeFrom(const SingleModelVersionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleModelVersionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_model_version()) {
    _internal_mutable_model_version()->::clarifai::api::ModelVersion::MergeFrom(from._internal_model_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleModelVersionResponse::CopyFrom(const SingleModelVersionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleModelVersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleModelVersionResponse::IsInitialized() const {
  return true;
}

void SingleModelVersionResponse::InternalSwap(SingleModelVersionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleModelVersionResponse, model_version_)
      + sizeof(SingleModelVersionResponse::model_version_)
      - PROTOBUF_FIELD_OFFSET(SingleModelVersionResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleModelVersionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[124]);
}

// ===================================================================

class MultiModelVersionResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiModelVersionResponse* msg);
};

const ::clarifai::api::status::Status&
MultiModelVersionResponse::_Internal::status(const MultiModelVersionResponse* msg) {
  return *msg->status_;
}
void MultiModelVersionResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiModelVersionResponse::clear_model_versions() {
  model_versions_.Clear();
}
MultiModelVersionResponse::MultiModelVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  model_versions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiModelVersionResponse)
}
MultiModelVersionResponse::MultiModelVersionResponse(const MultiModelVersionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      model_versions_(from.model_versions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiModelVersionResponse)
}

inline void MultiModelVersionResponse::SharedCtor() {
status_ = nullptr;
}

MultiModelVersionResponse::~MultiModelVersionResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiModelVersionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiModelVersionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiModelVersionResponse::ArenaDtor(void* object) {
  MultiModelVersionResponse* _this = reinterpret_cast< MultiModelVersionResponse* >(object);
  (void)_this;
}
void MultiModelVersionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiModelVersionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiModelVersionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiModelVersionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_versions_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiModelVersionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModelVersion model_versions = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model_versions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiModelVersionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiModelVersionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.ModelVersion model_versions = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_model_versions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_model_versions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiModelVersionResponse)
  return target;
}

size_t MultiModelVersionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiModelVersionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ModelVersion model_versions = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_model_versions_size();
  for (const auto& msg : this->model_versions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiModelVersionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiModelVersionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiModelVersionResponse::GetClassData() const { return &_class_data_; }

void MultiModelVersionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiModelVersionResponse *>(to)->MergeFrom(
      static_cast<const MultiModelVersionResponse &>(from));
}


void MultiModelVersionResponse::MergeFrom(const MultiModelVersionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiModelVersionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  model_versions_.MergeFrom(from.model_versions_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiModelVersionResponse::CopyFrom(const MultiModelVersionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiModelVersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiModelVersionResponse::IsInitialized() const {
  return true;
}

void MultiModelVersionResponse::InternalSwap(MultiModelVersionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  model_versions_.InternalSwap(&other->model_versions_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiModelVersionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[125]);
}

// ===================================================================

class PostModelVersionsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostModelVersionsRequest* msg);
  static const ::clarifai::api::Search& search(const PostModelVersionsRequest* msg);
  static const ::clarifai::api::Search& train_search(const PostModelVersionsRequest* msg);
  static const ::clarifai::api::Search& test_search(const PostModelVersionsRequest* msg);
  static const ::clarifai::api::DatasetVersion& dataset_version(const PostModelVersionsRequest* msg);
  static const ::clarifai::api::EvalInfo& eval_info(const PostModelVersionsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostModelVersionsRequest::_Internal::user_app_id(const PostModelVersionsRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::Search&
PostModelVersionsRequest::_Internal::search(const PostModelVersionsRequest* msg) {
  return *msg->search_;
}
const ::clarifai::api::Search&
PostModelVersionsRequest::_Internal::train_search(const PostModelVersionsRequest* msg) {
  return *msg->train_search_;
}
const ::clarifai::api::Search&
PostModelVersionsRequest::_Internal::test_search(const PostModelVersionsRequest* msg) {
  return *msg->test_search_;
}
const ::clarifai::api::DatasetVersion&
PostModelVersionsRequest::_Internal::dataset_version(const PostModelVersionsRequest* msg) {
  return *msg->dataset_version_;
}
const ::clarifai::api::EvalInfo&
PostModelVersionsRequest::_Internal::eval_info(const PostModelVersionsRequest* msg) {
  return *msg->eval_info_;
}
void PostModelVersionsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostModelVersionsRequest::clear_model_versions() {
  model_versions_.Clear();
}
void PostModelVersionsRequest::clear_search() {
  if (GetArenaForAllocation() == nullptr && search_ != nullptr) {
    delete search_;
  }
  search_ = nullptr;
}
void PostModelVersionsRequest::clear_train_search() {
  if (GetArenaForAllocation() == nullptr && train_search_ != nullptr) {
    delete train_search_;
  }
  train_search_ = nullptr;
}
void PostModelVersionsRequest::clear_test_search() {
  if (GetArenaForAllocation() == nullptr && test_search_ != nullptr) {
    delete test_search_;
  }
  test_search_ = nullptr;
}
void PostModelVersionsRequest::clear_dataset_version() {
  if (GetArenaForAllocation() == nullptr && dataset_version_ != nullptr) {
    delete dataset_version_;
  }
  dataset_version_ = nullptr;
}
void PostModelVersionsRequest::clear_eval_info() {
  if (GetArenaForAllocation() == nullptr && eval_info_ != nullptr) {
    delete eval_info_;
  }
  eval_info_ = nullptr;
}
PostModelVersionsRequest::PostModelVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  model_versions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostModelVersionsRequest)
}
PostModelVersionsRequest::PostModelVersionsRequest(const PostModelVersionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      model_versions_(from.model_versions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_id(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_search()) {
    search_ = new ::clarifai::api::Search(*from.search_);
  } else {
    search_ = nullptr;
  }
  if (from._internal_has_train_search()) {
    train_search_ = new ::clarifai::api::Search(*from.train_search_);
  } else {
    train_search_ = nullptr;
  }
  if (from._internal_has_test_search()) {
    test_search_ = new ::clarifai::api::Search(*from.test_search_);
  } else {
    test_search_ = nullptr;
  }
  if (from._internal_has_dataset_version()) {
    dataset_version_ = new ::clarifai::api::DatasetVersion(*from.dataset_version_);
  } else {
    dataset_version_ = nullptr;
  }
  if (from._internal_has_eval_info()) {
    eval_info_ = new ::clarifai::api::EvalInfo(*from.eval_info_);
  } else {
    eval_info_ = nullptr;
  }
  evaluate_after_training_ = from.evaluate_after_training_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostModelVersionsRequest)
}

inline void PostModelVersionsRequest::SharedCtor() {
model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&evaluate_after_training_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(evaluate_after_training_));
}

PostModelVersionsRequest::~PostModelVersionsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostModelVersionsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostModelVersionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete search_;
  if (this != internal_default_instance()) delete train_search_;
  if (this != internal_default_instance()) delete test_search_;
  if (this != internal_default_instance()) delete dataset_version_;
  if (this != internal_default_instance()) delete eval_info_;
}

void PostModelVersionsRequest::ArenaDtor(void* object) {
  PostModelVersionsRequest* _this = reinterpret_cast< PostModelVersionsRequest* >(object);
  (void)_this;
}
void PostModelVersionsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostModelVersionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostModelVersionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostModelVersionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_versions_.Clear();
  model_id_.ClearToEmpty();
  description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && search_ != nullptr) {
    delete search_;
  }
  search_ = nullptr;
  if (GetArenaForAllocation() == nullptr && train_search_ != nullptr) {
    delete train_search_;
  }
  train_search_ = nullptr;
  if (GetArenaForAllocation() == nullptr && test_search_ != nullptr) {
    delete test_search_;
  }
  test_search_ = nullptr;
  if (GetArenaForAllocation() == nullptr && dataset_version_ != nullptr) {
    delete dataset_version_;
  }
  dataset_version_ = nullptr;
  if (GetArenaForAllocation() == nullptr && eval_info_ != nullptr) {
    delete eval_info_;
  }
  eval_info_ = nullptr;
  evaluate_after_training_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostModelVersionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostModelVersionsRequest.model_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModelVersion model_versions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model_versions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Search search = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_search(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Search train_search = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_train_search(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Search test_search = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_test_search(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool evaluate_after_training = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          evaluate_after_training_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostModelVersionsRequest.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.DatasetVersion dataset_version = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_dataset_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.EvalInfo eval_info = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_eval_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostModelVersionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostModelVersionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostModelVersionsRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // repeated .clarifai.api.ModelVersion model_versions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_model_versions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_model_versions(i), target, stream);
  }

  // .clarifai.api.Search search = 4 [deprecated = true];
  if (this->_internal_has_search()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::search(this), target, stream);
  }

  // .clarifai.api.Search train_search = 5;
  if (this->_internal_has_train_search()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::train_search(this), target, stream);
  }

  // .clarifai.api.Search test_search = 6;
  if (this->_internal_has_test_search()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::test_search(this), target, stream);
  }

  // bool evaluate_after_training = 7;
  if (this->_internal_evaluate_after_training() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_evaluate_after_training(), target);
  }

  // string description = 8;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostModelVersionsRequest.description");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_description(), target);
  }

  // .clarifai.api.DatasetVersion dataset_version = 9;
  if (this->_internal_has_dataset_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::dataset_version(this), target, stream);
  }

  // .clarifai.api.EvalInfo eval_info = 10;
  if (this->_internal_has_eval_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::eval_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostModelVersionsRequest)
  return target;
}

size_t PostModelVersionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostModelVersionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ModelVersion model_versions = 3;
  total_size += 1UL * this->_internal_model_versions_size();
  for (const auto& msg : this->model_versions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string description = 8;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.Search search = 4 [deprecated = true];
  if (this->_internal_has_search()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *search_);
  }

  // .clarifai.api.Search train_search = 5;
  if (this->_internal_has_train_search()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *train_search_);
  }

  // .clarifai.api.Search test_search = 6;
  if (this->_internal_has_test_search()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *test_search_);
  }

  // .clarifai.api.DatasetVersion dataset_version = 9;
  if (this->_internal_has_dataset_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dataset_version_);
  }

  // .clarifai.api.EvalInfo eval_info = 10;
  if (this->_internal_has_eval_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eval_info_);
  }

  // bool evaluate_after_training = 7;
  if (this->_internal_evaluate_after_training() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostModelVersionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostModelVersionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostModelVersionsRequest::GetClassData() const { return &_class_data_; }

void PostModelVersionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostModelVersionsRequest *>(to)->MergeFrom(
      static_cast<const PostModelVersionsRequest &>(from));
}


void PostModelVersionsRequest::MergeFrom(const PostModelVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostModelVersionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  model_versions_.MergeFrom(from.model_versions_);
  if (!from._internal_model_id().empty()) {
    _internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_has_search()) {
    _internal_mutable_search()->::clarifai::api::Search::MergeFrom(from._internal_search());
  }
  if (from._internal_has_train_search()) {
    _internal_mutable_train_search()->::clarifai::api::Search::MergeFrom(from._internal_train_search());
  }
  if (from._internal_has_test_search()) {
    _internal_mutable_test_search()->::clarifai::api::Search::MergeFrom(from._internal_test_search());
  }
  if (from._internal_has_dataset_version()) {
    _internal_mutable_dataset_version()->::clarifai::api::DatasetVersion::MergeFrom(from._internal_dataset_version());
  }
  if (from._internal_has_eval_info()) {
    _internal_mutable_eval_info()->::clarifai::api::EvalInfo::MergeFrom(from._internal_eval_info());
  }
  if (from._internal_evaluate_after_training() != 0) {
    _internal_set_evaluate_after_training(from._internal_evaluate_after_training());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostModelVersionsRequest::CopyFrom(const PostModelVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostModelVersionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostModelVersionsRequest::IsInitialized() const {
  return true;
}

void PostModelVersionsRequest::InternalSwap(PostModelVersionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  model_versions_.InternalSwap(&other->model_versions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_id_, lhs_arena,
      &other->model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostModelVersionsRequest, evaluate_after_training_)
      + sizeof(PostModelVersionsRequest::evaluate_after_training_)
      - PROTOBUF_FIELD_OFFSET(PostModelVersionsRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostModelVersionsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[126]);
}

// ===================================================================

class PostWorkflowVersionsUnPublishRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostWorkflowVersionsUnPublishRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostWorkflowVersionsUnPublishRequest::_Internal::user_app_id(const PostWorkflowVersionsUnPublishRequest* msg) {
  return *msg->user_app_id_;
}
void PostWorkflowVersionsUnPublishRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
PostWorkflowVersionsUnPublishRequest::PostWorkflowVersionsUnPublishRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  publications_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostWorkflowVersionsUnPublishRequest)
}
PostWorkflowVersionsUnPublishRequest::PostWorkflowVersionsUnPublishRequest(const PostWorkflowVersionsUnPublishRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      publications_(from.publications_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workflow_id().empty()) {
    workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_workflow_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostWorkflowVersionsUnPublishRequest)
}

inline void PostWorkflowVersionsUnPublishRequest::SharedCtor() {
workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

PostWorkflowVersionsUnPublishRequest::~PostWorkflowVersionsUnPublishRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostWorkflowVersionsUnPublishRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostWorkflowVersionsUnPublishRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  workflow_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostWorkflowVersionsUnPublishRequest::ArenaDtor(void* object) {
  PostWorkflowVersionsUnPublishRequest* _this = reinterpret_cast< PostWorkflowVersionsUnPublishRequest* >(object);
  (void)_this;
}
void PostWorkflowVersionsUnPublishRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostWorkflowVersionsUnPublishRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostWorkflowVersionsUnPublishRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostWorkflowVersionsUnPublishRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publications_.Clear();
  workflow_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostWorkflowVersionsUnPublishRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string workflow_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_workflow_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostWorkflowVersionsUnPublishRequest.workflow_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.WorkflowVersionUnPublishRequest publications = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_publications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostWorkflowVersionsUnPublishRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostWorkflowVersionsUnPublishRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_id().data(), static_cast<int>(this->_internal_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostWorkflowVersionsUnPublishRequest.workflow_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_workflow_id(), target);
  }

  // repeated .clarifai.api.WorkflowVersionUnPublishRequest publications = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_publications_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_publications(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostWorkflowVersionsUnPublishRequest)
  return target;
}

size_t PostWorkflowVersionsUnPublishRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostWorkflowVersionsUnPublishRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.WorkflowVersionUnPublishRequest publications = 3;
  total_size += 1UL * this->_internal_publications_size();
  for (const auto& msg : this->publications_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostWorkflowVersionsUnPublishRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostWorkflowVersionsUnPublishRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostWorkflowVersionsUnPublishRequest::GetClassData() const { return &_class_data_; }

void PostWorkflowVersionsUnPublishRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostWorkflowVersionsUnPublishRequest *>(to)->MergeFrom(
      static_cast<const PostWorkflowVersionsUnPublishRequest &>(from));
}


void PostWorkflowVersionsUnPublishRequest::MergeFrom(const PostWorkflowVersionsUnPublishRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostWorkflowVersionsUnPublishRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  publications_.MergeFrom(from.publications_);
  if (!from._internal_workflow_id().empty()) {
    _internal_set_workflow_id(from._internal_workflow_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostWorkflowVersionsUnPublishRequest::CopyFrom(const PostWorkflowVersionsUnPublishRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostWorkflowVersionsUnPublishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostWorkflowVersionsUnPublishRequest::IsInitialized() const {
  return true;
}

void PostWorkflowVersionsUnPublishRequest::InternalSwap(PostWorkflowVersionsUnPublishRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  publications_.InternalSwap(&other->publications_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &workflow_id_, lhs_arena,
      &other->workflow_id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostWorkflowVersionsUnPublishRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[127]);
}

// ===================================================================

class PostWorkflowVersionsPublishRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostWorkflowVersionsPublishRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostWorkflowVersionsPublishRequest::_Internal::user_app_id(const PostWorkflowVersionsPublishRequest* msg) {
  return *msg->user_app_id_;
}
void PostWorkflowVersionsPublishRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
PostWorkflowVersionsPublishRequest::PostWorkflowVersionsPublishRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  publications_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostWorkflowVersionsPublishRequest)
}
PostWorkflowVersionsPublishRequest::PostWorkflowVersionsPublishRequest(const PostWorkflowVersionsPublishRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      publications_(from.publications_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workflow_id().empty()) {
    workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_workflow_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostWorkflowVersionsPublishRequest)
}

inline void PostWorkflowVersionsPublishRequest::SharedCtor() {
workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

PostWorkflowVersionsPublishRequest::~PostWorkflowVersionsPublishRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostWorkflowVersionsPublishRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostWorkflowVersionsPublishRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  workflow_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostWorkflowVersionsPublishRequest::ArenaDtor(void* object) {
  PostWorkflowVersionsPublishRequest* _this = reinterpret_cast< PostWorkflowVersionsPublishRequest* >(object);
  (void)_this;
}
void PostWorkflowVersionsPublishRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostWorkflowVersionsPublishRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostWorkflowVersionsPublishRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostWorkflowVersionsPublishRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publications_.Clear();
  workflow_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostWorkflowVersionsPublishRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string workflow_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_workflow_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostWorkflowVersionsPublishRequest.workflow_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.WorkflowVersionPublishRequest publications = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_publications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostWorkflowVersionsPublishRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostWorkflowVersionsPublishRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_id().data(), static_cast<int>(this->_internal_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostWorkflowVersionsPublishRequest.workflow_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_workflow_id(), target);
  }

  // repeated .clarifai.api.WorkflowVersionPublishRequest publications = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_publications_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_publications(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostWorkflowVersionsPublishRequest)
  return target;
}

size_t PostWorkflowVersionsPublishRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostWorkflowVersionsPublishRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.WorkflowVersionPublishRequest publications = 3;
  total_size += 1UL * this->_internal_publications_size();
  for (const auto& msg : this->publications_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostWorkflowVersionsPublishRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostWorkflowVersionsPublishRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostWorkflowVersionsPublishRequest::GetClassData() const { return &_class_data_; }

void PostWorkflowVersionsPublishRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostWorkflowVersionsPublishRequest *>(to)->MergeFrom(
      static_cast<const PostWorkflowVersionsPublishRequest &>(from));
}


void PostWorkflowVersionsPublishRequest::MergeFrom(const PostWorkflowVersionsPublishRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostWorkflowVersionsPublishRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  publications_.MergeFrom(from.publications_);
  if (!from._internal_workflow_id().empty()) {
    _internal_set_workflow_id(from._internal_workflow_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostWorkflowVersionsPublishRequest::CopyFrom(const PostWorkflowVersionsPublishRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostWorkflowVersionsPublishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostWorkflowVersionsPublishRequest::IsInitialized() const {
  return true;
}

void PostWorkflowVersionsPublishRequest::InternalSwap(PostWorkflowVersionsPublishRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  publications_.InternalSwap(&other->publications_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &workflow_id_, lhs_arena,
      &other->workflow_id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostWorkflowVersionsPublishRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[128]);
}

// ===================================================================

class WorkflowVersionPublishRequest::_Internal {
 public:
};

WorkflowVersionPublishRequest::WorkflowVersionPublishRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.WorkflowVersionPublishRequest)
}
WorkflowVersionPublishRequest::WorkflowVersionPublishRequest(const WorkflowVersionPublishRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version_id().empty()) {
    version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.WorkflowVersionPublishRequest)
}

inline void WorkflowVersionPublishRequest::SharedCtor() {
version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WorkflowVersionPublishRequest::~WorkflowVersionPublishRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.WorkflowVersionPublishRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WorkflowVersionPublishRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WorkflowVersionPublishRequest::ArenaDtor(void* object) {
  WorkflowVersionPublishRequest* _this = reinterpret_cast< WorkflowVersionPublishRequest* >(object);
  (void)_this;
}
void WorkflowVersionPublishRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkflowVersionPublishRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkflowVersionPublishRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.WorkflowVersionPublishRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkflowVersionPublishRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.WorkflowVersionPublishRequest.version_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkflowVersionPublishRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.WorkflowVersionPublishRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version_id = 1;
  if (!this->_internal_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.WorkflowVersionPublishRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.WorkflowVersionPublishRequest)
  return target;
}

size_t WorkflowVersionPublishRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.WorkflowVersionPublishRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version_id = 1;
  if (!this->_internal_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkflowVersionPublishRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WorkflowVersionPublishRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkflowVersionPublishRequest::GetClassData() const { return &_class_data_; }

void WorkflowVersionPublishRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WorkflowVersionPublishRequest *>(to)->MergeFrom(
      static_cast<const WorkflowVersionPublishRequest &>(from));
}


void WorkflowVersionPublishRequest::MergeFrom(const WorkflowVersionPublishRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.WorkflowVersionPublishRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version_id().empty()) {
    _internal_set_version_id(from._internal_version_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkflowVersionPublishRequest::CopyFrom(const WorkflowVersionPublishRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.WorkflowVersionPublishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowVersionPublishRequest::IsInitialized() const {
  return true;
}

void WorkflowVersionPublishRequest::InternalSwap(WorkflowVersionPublishRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_id_, lhs_arena,
      &other->version_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowVersionPublishRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[129]);
}

// ===================================================================

class WorkflowVersionUnPublishRequest::_Internal {
 public:
};

WorkflowVersionUnPublishRequest::WorkflowVersionUnPublishRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.WorkflowVersionUnPublishRequest)
}
WorkflowVersionUnPublishRequest::WorkflowVersionUnPublishRequest(const WorkflowVersionUnPublishRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version_id().empty()) {
    version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.WorkflowVersionUnPublishRequest)
}

inline void WorkflowVersionUnPublishRequest::SharedCtor() {
version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WorkflowVersionUnPublishRequest::~WorkflowVersionUnPublishRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.WorkflowVersionUnPublishRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WorkflowVersionUnPublishRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WorkflowVersionUnPublishRequest::ArenaDtor(void* object) {
  WorkflowVersionUnPublishRequest* _this = reinterpret_cast< WorkflowVersionUnPublishRequest* >(object);
  (void)_this;
}
void WorkflowVersionUnPublishRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkflowVersionUnPublishRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkflowVersionUnPublishRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.WorkflowVersionUnPublishRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkflowVersionUnPublishRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.WorkflowVersionUnPublishRequest.version_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkflowVersionUnPublishRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.WorkflowVersionUnPublishRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version_id = 1;
  if (!this->_internal_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.WorkflowVersionUnPublishRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.WorkflowVersionUnPublishRequest)
  return target;
}

size_t WorkflowVersionUnPublishRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.WorkflowVersionUnPublishRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version_id = 1;
  if (!this->_internal_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkflowVersionUnPublishRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WorkflowVersionUnPublishRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkflowVersionUnPublishRequest::GetClassData() const { return &_class_data_; }

void WorkflowVersionUnPublishRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WorkflowVersionUnPublishRequest *>(to)->MergeFrom(
      static_cast<const WorkflowVersionUnPublishRequest &>(from));
}


void WorkflowVersionUnPublishRequest::MergeFrom(const WorkflowVersionUnPublishRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.WorkflowVersionUnPublishRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version_id().empty()) {
    _internal_set_version_id(from._internal_version_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkflowVersionUnPublishRequest::CopyFrom(const WorkflowVersionUnPublishRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.WorkflowVersionUnPublishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowVersionUnPublishRequest::IsInitialized() const {
  return true;
}

void WorkflowVersionUnPublishRequest::InternalSwap(WorkflowVersionUnPublishRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_id_, lhs_arena,
      &other->version_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowVersionUnPublishRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[130]);
}

// ===================================================================

class ModelVersionPublishRequest::_Internal {
 public:
};

ModelVersionPublishRequest::ModelVersionPublishRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ModelVersionPublishRequest)
}
ModelVersionPublishRequest::ModelVersionPublishRequest(const ModelVersionPublishRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version_id().empty()) {
    version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ModelVersionPublishRequest)
}

inline void ModelVersionPublishRequest::SharedCtor() {
version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModelVersionPublishRequest::~ModelVersionPublishRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ModelVersionPublishRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ModelVersionPublishRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelVersionPublishRequest::ArenaDtor(void* object) {
  ModelVersionPublishRequest* _this = reinterpret_cast< ModelVersionPublishRequest* >(object);
  (void)_this;
}
void ModelVersionPublishRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelVersionPublishRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelVersionPublishRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ModelVersionPublishRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelVersionPublishRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelVersionPublishRequest.version_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelVersionPublishRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ModelVersionPublishRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version_id = 1;
  if (!this->_internal_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelVersionPublishRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ModelVersionPublishRequest)
  return target;
}

size_t ModelVersionPublishRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ModelVersionPublishRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version_id = 1;
  if (!this->_internal_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelVersionPublishRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModelVersionPublishRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelVersionPublishRequest::GetClassData() const { return &_class_data_; }

void ModelVersionPublishRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModelVersionPublishRequest *>(to)->MergeFrom(
      static_cast<const ModelVersionPublishRequest &>(from));
}


void ModelVersionPublishRequest::MergeFrom(const ModelVersionPublishRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ModelVersionPublishRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version_id().empty()) {
    _internal_set_version_id(from._internal_version_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelVersionPublishRequest::CopyFrom(const ModelVersionPublishRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ModelVersionPublishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelVersionPublishRequest::IsInitialized() const {
  return true;
}

void ModelVersionPublishRequest::InternalSwap(ModelVersionPublishRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_id_, lhs_arena,
      &other->version_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelVersionPublishRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[131]);
}

// ===================================================================

class PostModelVersionsPublishRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostModelVersionsPublishRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostModelVersionsPublishRequest::_Internal::user_app_id(const PostModelVersionsPublishRequest* msg) {
  return *msg->user_app_id_;
}
void PostModelVersionsPublishRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
PostModelVersionsPublishRequest::PostModelVersionsPublishRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  publications_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostModelVersionsPublishRequest)
}
PostModelVersionsPublishRequest::PostModelVersionsPublishRequest(const PostModelVersionsPublishRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      publications_(from.publications_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostModelVersionsPublishRequest)
}

inline void PostModelVersionsPublishRequest::SharedCtor() {
model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

PostModelVersionsPublishRequest::~PostModelVersionsPublishRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostModelVersionsPublishRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostModelVersionsPublishRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostModelVersionsPublishRequest::ArenaDtor(void* object) {
  PostModelVersionsPublishRequest* _this = reinterpret_cast< PostModelVersionsPublishRequest* >(object);
  (void)_this;
}
void PostModelVersionsPublishRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostModelVersionsPublishRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostModelVersionsPublishRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostModelVersionsPublishRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publications_.Clear();
  model_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostModelVersionsPublishRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostModelVersionsPublishRequest.model_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModelVersionPublishRequest publications = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_publications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostModelVersionsPublishRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostModelVersionsPublishRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostModelVersionsPublishRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // repeated .clarifai.api.ModelVersionPublishRequest publications = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_publications_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_publications(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostModelVersionsPublishRequest)
  return target;
}

size_t PostModelVersionsPublishRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostModelVersionsPublishRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ModelVersionPublishRequest publications = 3;
  total_size += 1UL * this->_internal_publications_size();
  for (const auto& msg : this->publications_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostModelVersionsPublishRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostModelVersionsPublishRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostModelVersionsPublishRequest::GetClassData() const { return &_class_data_; }

void PostModelVersionsPublishRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostModelVersionsPublishRequest *>(to)->MergeFrom(
      static_cast<const PostModelVersionsPublishRequest &>(from));
}


void PostModelVersionsPublishRequest::MergeFrom(const PostModelVersionsPublishRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostModelVersionsPublishRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  publications_.MergeFrom(from.publications_);
  if (!from._internal_model_id().empty()) {
    _internal_set_model_id(from._internal_model_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostModelVersionsPublishRequest::CopyFrom(const PostModelVersionsPublishRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostModelVersionsPublishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostModelVersionsPublishRequest::IsInitialized() const {
  return true;
}

void PostModelVersionsPublishRequest::InternalSwap(PostModelVersionsPublishRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  publications_.InternalSwap(&other->publications_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_id_, lhs_arena,
      &other->model_id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostModelVersionsPublishRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[132]);
}

// ===================================================================

class ModelVersionUnpublishRequest::_Internal {
 public:
};

ModelVersionUnpublishRequest::ModelVersionUnpublishRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ModelVersionUnpublishRequest)
}
ModelVersionUnpublishRequest::ModelVersionUnpublishRequest(const ModelVersionUnpublishRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version_id().empty()) {
    version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ModelVersionUnpublishRequest)
}

inline void ModelVersionUnpublishRequest::SharedCtor() {
version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModelVersionUnpublishRequest::~ModelVersionUnpublishRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ModelVersionUnpublishRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ModelVersionUnpublishRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelVersionUnpublishRequest::ArenaDtor(void* object) {
  ModelVersionUnpublishRequest* _this = reinterpret_cast< ModelVersionUnpublishRequest* >(object);
  (void)_this;
}
void ModelVersionUnpublishRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelVersionUnpublishRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelVersionUnpublishRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ModelVersionUnpublishRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelVersionUnpublishRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ModelVersionUnpublishRequest.version_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelVersionUnpublishRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ModelVersionUnpublishRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version_id = 1;
  if (!this->_internal_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ModelVersionUnpublishRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ModelVersionUnpublishRequest)
  return target;
}

size_t ModelVersionUnpublishRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ModelVersionUnpublishRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version_id = 1;
  if (!this->_internal_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelVersionUnpublishRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModelVersionUnpublishRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelVersionUnpublishRequest::GetClassData() const { return &_class_data_; }

void ModelVersionUnpublishRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModelVersionUnpublishRequest *>(to)->MergeFrom(
      static_cast<const ModelVersionUnpublishRequest &>(from));
}


void ModelVersionUnpublishRequest::MergeFrom(const ModelVersionUnpublishRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ModelVersionUnpublishRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version_id().empty()) {
    _internal_set_version_id(from._internal_version_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelVersionUnpublishRequest::CopyFrom(const ModelVersionUnpublishRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ModelVersionUnpublishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelVersionUnpublishRequest::IsInitialized() const {
  return true;
}

void ModelVersionUnpublishRequest::InternalSwap(ModelVersionUnpublishRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_id_, lhs_arena,
      &other->version_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelVersionUnpublishRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[133]);
}

// ===================================================================

class PostModelVersionsUnPublishRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostModelVersionsUnPublishRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostModelVersionsUnPublishRequest::_Internal::user_app_id(const PostModelVersionsUnPublishRequest* msg) {
  return *msg->user_app_id_;
}
void PostModelVersionsUnPublishRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
PostModelVersionsUnPublishRequest::PostModelVersionsUnPublishRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  publications_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostModelVersionsUnPublishRequest)
}
PostModelVersionsUnPublishRequest::PostModelVersionsUnPublishRequest(const PostModelVersionsUnPublishRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      publications_(from.publications_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostModelVersionsUnPublishRequest)
}

inline void PostModelVersionsUnPublishRequest::SharedCtor() {
model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

PostModelVersionsUnPublishRequest::~PostModelVersionsUnPublishRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostModelVersionsUnPublishRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostModelVersionsUnPublishRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostModelVersionsUnPublishRequest::ArenaDtor(void* object) {
  PostModelVersionsUnPublishRequest* _this = reinterpret_cast< PostModelVersionsUnPublishRequest* >(object);
  (void)_this;
}
void PostModelVersionsUnPublishRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostModelVersionsUnPublishRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostModelVersionsUnPublishRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostModelVersionsUnPublishRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publications_.Clear();
  model_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostModelVersionsUnPublishRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostModelVersionsUnPublishRequest.model_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModelVersionUnpublishRequest publications = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_publications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostModelVersionsUnPublishRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostModelVersionsUnPublishRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostModelVersionsUnPublishRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // repeated .clarifai.api.ModelVersionUnpublishRequest publications = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_publications_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_publications(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostModelVersionsUnPublishRequest)
  return target;
}

size_t PostModelVersionsUnPublishRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostModelVersionsUnPublishRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ModelVersionUnpublishRequest publications = 3;
  total_size += 1UL * this->_internal_publications_size();
  for (const auto& msg : this->publications_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostModelVersionsUnPublishRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostModelVersionsUnPublishRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostModelVersionsUnPublishRequest::GetClassData() const { return &_class_data_; }

void PostModelVersionsUnPublishRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostModelVersionsUnPublishRequest *>(to)->MergeFrom(
      static_cast<const PostModelVersionsUnPublishRequest &>(from));
}


void PostModelVersionsUnPublishRequest::MergeFrom(const PostModelVersionsUnPublishRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostModelVersionsUnPublishRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  publications_.MergeFrom(from.publications_);
  if (!from._internal_model_id().empty()) {
    _internal_set_model_id(from._internal_model_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostModelVersionsUnPublishRequest::CopyFrom(const PostModelVersionsUnPublishRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostModelVersionsUnPublishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostModelVersionsUnPublishRequest::IsInitialized() const {
  return true;
}

void PostModelVersionsUnPublishRequest::InternalSwap(PostModelVersionsUnPublishRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  publications_.InternalSwap(&other->publications_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_id_, lhs_arena,
      &other->model_id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostModelVersionsUnPublishRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[134]);
}

// ===================================================================

class PostModelVersionMetricsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostModelVersionMetricsRequest* msg);
  static const ::clarifai::api::Search& test_search(const PostModelVersionMetricsRequest* msg);
  static const ::clarifai::api::EvalInfo& eval_info(const PostModelVersionMetricsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostModelVersionMetricsRequest::_Internal::user_app_id(const PostModelVersionMetricsRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::Search&
PostModelVersionMetricsRequest::_Internal::test_search(const PostModelVersionMetricsRequest* msg) {
  return *msg->test_search_;
}
const ::clarifai::api::EvalInfo&
PostModelVersionMetricsRequest::_Internal::eval_info(const PostModelVersionMetricsRequest* msg) {
  return *msg->eval_info_;
}
void PostModelVersionMetricsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostModelVersionMetricsRequest::clear_test_search() {
  if (GetArenaForAllocation() == nullptr && test_search_ != nullptr) {
    delete test_search_;
  }
  test_search_ = nullptr;
}
void PostModelVersionMetricsRequest::clear_eval_info() {
  if (GetArenaForAllocation() == nullptr && eval_info_ != nullptr) {
    delete eval_info_;
  }
  eval_info_ = nullptr;
}
PostModelVersionMetricsRequest::PostModelVersionMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostModelVersionMetricsRequest)
}
PostModelVersionMetricsRequest::PostModelVersionMetricsRequest(const PostModelVersionMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_id(), 
      GetArenaForAllocation());
  }
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version_id().empty()) {
    version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_test_search()) {
    test_search_ = new ::clarifai::api::Search(*from.test_search_);
  } else {
    test_search_ = nullptr;
  }
  if (from._internal_has_eval_info()) {
    eval_info_ = new ::clarifai::api::EvalInfo(*from.eval_info_);
  } else {
    eval_info_ = nullptr;
  }
  max_examples_ = from.max_examples_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostModelVersionMetricsRequest)
}

inline void PostModelVersionMetricsRequest::SharedCtor() {
model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_examples_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(max_examples_));
}

PostModelVersionMetricsRequest::~PostModelVersionMetricsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostModelVersionMetricsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostModelVersionMetricsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete test_search_;
  if (this != internal_default_instance()) delete eval_info_;
}

void PostModelVersionMetricsRequest::ArenaDtor(void* object) {
  PostModelVersionMetricsRequest* _this = reinterpret_cast< PostModelVersionMetricsRequest* >(object);
  (void)_this;
}
void PostModelVersionMetricsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostModelVersionMetricsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostModelVersionMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostModelVersionMetricsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_id_.ClearToEmpty();
  version_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && test_search_ != nullptr) {
    delete test_search_;
  }
  test_search_ = nullptr;
  if (GetArenaForAllocation() == nullptr && eval_info_ != nullptr) {
    delete eval_info_;
  }
  eval_info_ = nullptr;
  max_examples_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostModelVersionMetricsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostModelVersionMetricsRequest.model_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostModelVersionMetricsRequest.version_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_examples = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          max_examples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Search test_search = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_test_search(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.EvalInfo eval_info = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_eval_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostModelVersionMetricsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostModelVersionMetricsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostModelVersionMetricsRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string version_id = 3;
  if (!this->_internal_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostModelVersionMetricsRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version_id(), target);
  }

  // uint32 max_examples = 4;
  if (this->_internal_max_examples() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_examples(), target);
  }

  // .clarifai.api.Search test_search = 5;
  if (this->_internal_has_test_search()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::test_search(this), target, stream);
  }

  // .clarifai.api.EvalInfo eval_info = 10;
  if (this->_internal_has_eval_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::eval_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostModelVersionMetricsRequest)
  return target;
}

size_t PostModelVersionMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostModelVersionMetricsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string version_id = 3;
  if (!this->_internal_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.Search test_search = 5;
  if (this->_internal_has_test_search()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *test_search_);
  }

  // .clarifai.api.EvalInfo eval_info = 10;
  if (this->_internal_has_eval_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eval_info_);
  }

  // uint32 max_examples = 4;
  if (this->_internal_max_examples() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_max_examples());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostModelVersionMetricsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostModelVersionMetricsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostModelVersionMetricsRequest::GetClassData() const { return &_class_data_; }

void PostModelVersionMetricsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostModelVersionMetricsRequest *>(to)->MergeFrom(
      static_cast<const PostModelVersionMetricsRequest &>(from));
}


void PostModelVersionMetricsRequest::MergeFrom(const PostModelVersionMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostModelVersionMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_model_id().empty()) {
    _internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_version_id().empty()) {
    _internal_set_version_id(from._internal_version_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_has_test_search()) {
    _internal_mutable_test_search()->::clarifai::api::Search::MergeFrom(from._internal_test_search());
  }
  if (from._internal_has_eval_info()) {
    _internal_mutable_eval_info()->::clarifai::api::EvalInfo::MergeFrom(from._internal_eval_info());
  }
  if (from._internal_max_examples() != 0) {
    _internal_set_max_examples(from._internal_max_examples());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostModelVersionMetricsRequest::CopyFrom(const PostModelVersionMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostModelVersionMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostModelVersionMetricsRequest::IsInitialized() const {
  return true;
}

void PostModelVersionMetricsRequest::InternalSwap(PostModelVersionMetricsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_id_, lhs_arena,
      &other->model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_id_, lhs_arena,
      &other->version_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostModelVersionMetricsRequest, max_examples_)
      + sizeof(PostModelVersionMetricsRequest::max_examples_)
      - PROTOBUF_FIELD_OFFSET(PostModelVersionMetricsRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostModelVersionMetricsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[135]);
}

// ===================================================================

class GetModelVersionMetricsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetModelVersionMetricsRequest* msg);
  static const ::clarifai::api::FieldsValue& fields(const GetModelVersionMetricsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetModelVersionMetricsRequest::_Internal::user_app_id(const GetModelVersionMetricsRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::FieldsValue&
GetModelVersionMetricsRequest::_Internal::fields(const GetModelVersionMetricsRequest* msg) {
  return *msg->fields_;
}
void GetModelVersionMetricsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void GetModelVersionMetricsRequest::clear_fields() {
  if (GetArenaForAllocation() == nullptr && fields_ != nullptr) {
    delete fields_;
  }
  fields_ = nullptr;
}
GetModelVersionMetricsRequest::GetModelVersionMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetModelVersionMetricsRequest)
}
GetModelVersionMetricsRequest::GetModelVersionMetricsRequest(const GetModelVersionMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_id(), 
      GetArenaForAllocation());
  }
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version_id().empty()) {
    version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_fields()) {
    fields_ = new ::clarifai::api::FieldsValue(*from.fields_);
  } else {
    fields_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetModelVersionMetricsRequest)
}

inline void GetModelVersionMetricsRequest::SharedCtor() {
model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fields_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(fields_));
}

GetModelVersionMetricsRequest::~GetModelVersionMetricsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetModelVersionMetricsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetModelVersionMetricsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete fields_;
}

void GetModelVersionMetricsRequest::ArenaDtor(void* object) {
  GetModelVersionMetricsRequest* _this = reinterpret_cast< GetModelVersionMetricsRequest* >(object);
  (void)_this;
}
void GetModelVersionMetricsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetModelVersionMetricsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetModelVersionMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetModelVersionMetricsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_id_.ClearToEmpty();
  version_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && fields_ != nullptr) {
    delete fields_;
  }
  fields_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetModelVersionMetricsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetModelVersionMetricsRequest.model_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetModelVersionMetricsRequest.version_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.FieldsValue fields = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fields(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetModelVersionMetricsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetModelVersionMetricsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelVersionMetricsRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string version_id = 3;
  if (!this->_internal_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelVersionMetricsRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version_id(), target);
  }

  // .clarifai.api.FieldsValue fields = 4;
  if (this->_internal_has_fields()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::fields(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetModelVersionMetricsRequest)
  return target;
}

size_t GetModelVersionMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetModelVersionMetricsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string version_id = 3;
  if (!this->_internal_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.FieldsValue fields = 4;
  if (this->_internal_has_fields()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fields_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetModelVersionMetricsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetModelVersionMetricsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetModelVersionMetricsRequest::GetClassData() const { return &_class_data_; }

void GetModelVersionMetricsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetModelVersionMetricsRequest *>(to)->MergeFrom(
      static_cast<const GetModelVersionMetricsRequest &>(from));
}


void GetModelVersionMetricsRequest::MergeFrom(const GetModelVersionMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetModelVersionMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_model_id().empty()) {
    _internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_version_id().empty()) {
    _internal_set_version_id(from._internal_version_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_has_fields()) {
    _internal_mutable_fields()->::clarifai::api::FieldsValue::MergeFrom(from._internal_fields());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetModelVersionMetricsRequest::CopyFrom(const GetModelVersionMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetModelVersionMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModelVersionMetricsRequest::IsInitialized() const {
  return true;
}

void GetModelVersionMetricsRequest::InternalSwap(GetModelVersionMetricsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_id_, lhs_arena,
      &other->model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_id_, lhs_arena,
      &other->version_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetModelVersionMetricsRequest, fields_)
      + sizeof(GetModelVersionMetricsRequest::fields_)
      - PROTOBUF_FIELD_OFFSET(GetModelVersionMetricsRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetModelVersionMetricsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[136]);
}

// ===================================================================

class GetModelTypeRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetModelTypeRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetModelTypeRequest::_Internal::user_app_id(const GetModelTypeRequest* msg) {
  return *msg->user_app_id_;
}
void GetModelTypeRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetModelTypeRequest::GetModelTypeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetModelTypeRequest)
}
GetModelTypeRequest::GetModelTypeRequest(const GetModelTypeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_type_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_type_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_type_id().empty()) {
    model_type_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_type_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetModelTypeRequest)
}

inline void GetModelTypeRequest::SharedCtor() {
model_type_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_type_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

GetModelTypeRequest::~GetModelTypeRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetModelTypeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetModelTypeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_type_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetModelTypeRequest::ArenaDtor(void* object) {
  GetModelTypeRequest* _this = reinterpret_cast< GetModelTypeRequest* >(object);
  (void)_this;
}
void GetModelTypeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetModelTypeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetModelTypeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetModelTypeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_type_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetModelTypeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_type_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_type_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetModelTypeRequest.model_type_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetModelTypeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetModelTypeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_type_id = 2;
  if (!this->_internal_model_type_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_type_id().data(), static_cast<int>(this->_internal_model_type_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelTypeRequest.model_type_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_type_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetModelTypeRequest)
  return target;
}

size_t GetModelTypeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetModelTypeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_type_id = 2;
  if (!this->_internal_model_type_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_type_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetModelTypeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetModelTypeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetModelTypeRequest::GetClassData() const { return &_class_data_; }

void GetModelTypeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetModelTypeRequest *>(to)->MergeFrom(
      static_cast<const GetModelTypeRequest &>(from));
}


void GetModelTypeRequest::MergeFrom(const GetModelTypeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetModelTypeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_model_type_id().empty()) {
    _internal_set_model_type_id(from._internal_model_type_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetModelTypeRequest::CopyFrom(const GetModelTypeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetModelTypeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModelTypeRequest::IsInitialized() const {
  return true;
}

void GetModelTypeRequest::InternalSwap(GetModelTypeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_type_id_, lhs_arena,
      &other->model_type_id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetModelTypeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[137]);
}

// ===================================================================

class ListModelTypesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListModelTypesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListModelTypesRequest::_Internal::user_app_id(const ListModelTypesRequest* msg) {
  return *msg->user_app_id_;
}
void ListModelTypesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListModelTypesRequest::ListModelTypesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListModelTypesRequest)
}
ListModelTypesRequest::ListModelTypesRequest(const ListModelTypesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListModelTypesRequest)
}

inline void ListModelTypesRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListModelTypesRequest::~ListModelTypesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListModelTypesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListModelTypesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListModelTypesRequest::ArenaDtor(void* object) {
  ListModelTypesRequest* _this = reinterpret_cast< ListModelTypesRequest* >(object);
  (void)_this;
}
void ListModelTypesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListModelTypesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListModelTypesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListModelTypesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListModelTypesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListModelTypesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListModelTypesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListModelTypesRequest)
  return target;
}

size_t ListModelTypesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListModelTypesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListModelTypesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListModelTypesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListModelTypesRequest::GetClassData() const { return &_class_data_; }

void ListModelTypesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListModelTypesRequest *>(to)->MergeFrom(
      static_cast<const ListModelTypesRequest &>(from));
}


void ListModelTypesRequest::MergeFrom(const ListModelTypesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListModelTypesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListModelTypesRequest::CopyFrom(const ListModelTypesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListModelTypesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListModelTypesRequest::IsInitialized() const {
  return true;
}

void ListModelTypesRequest::InternalSwap(ListModelTypesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListModelTypesRequest, per_page_)
      + sizeof(ListModelTypesRequest::per_page_)
      - PROTOBUF_FIELD_OFFSET(ListModelTypesRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListModelTypesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[138]);
}

// ===================================================================

class ListOpenSourceLicensesRequest::_Internal {
 public:
};

ListOpenSourceLicensesRequest::ListOpenSourceLicensesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListOpenSourceLicensesRequest)
}
ListOpenSourceLicensesRequest::ListOpenSourceLicensesRequest(const ListOpenSourceLicensesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListOpenSourceLicensesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListOpenSourceLicensesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListOpenSourceLicensesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ListOpenSourceLicensesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[139]);
}

// ===================================================================

class ListOpenSourceLicensesResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const ListOpenSourceLicensesResponse* msg);
};

const ::clarifai::api::status::Status&
ListOpenSourceLicensesResponse::_Internal::status(const ListOpenSourceLicensesResponse* msg) {
  return *msg->status_;
}
void ListOpenSourceLicensesResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
ListOpenSourceLicensesResponse::ListOpenSourceLicensesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  licenses_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListOpenSourceLicensesResponse)
}
ListOpenSourceLicensesResponse::ListOpenSourceLicensesResponse(const ListOpenSourceLicensesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      licenses_(from.licenses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListOpenSourceLicensesResponse)
}

inline void ListOpenSourceLicensesResponse::SharedCtor() {
status_ = nullptr;
}

ListOpenSourceLicensesResponse::~ListOpenSourceLicensesResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListOpenSourceLicensesResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListOpenSourceLicensesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void ListOpenSourceLicensesResponse::ArenaDtor(void* object) {
  ListOpenSourceLicensesResponse* _this = reinterpret_cast< ListOpenSourceLicensesResponse* >(object);
  (void)_this;
}
void ListOpenSourceLicensesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListOpenSourceLicensesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListOpenSourceLicensesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListOpenSourceLicensesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  licenses_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListOpenSourceLicensesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string licenses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_licenses();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListOpenSourceLicensesResponse.licenses"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListOpenSourceLicensesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListOpenSourceLicensesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated string licenses = 2;
  for (int i = 0, n = this->_internal_licenses_size(); i < n; i++) {
    const auto& s = this->_internal_licenses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListOpenSourceLicensesResponse.licenses");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListOpenSourceLicensesResponse)
  return target;
}

size_t ListOpenSourceLicensesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListOpenSourceLicensesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string licenses = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(licenses_.size());
  for (int i = 0, n = licenses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      licenses_.Get(i));
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListOpenSourceLicensesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListOpenSourceLicensesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListOpenSourceLicensesResponse::GetClassData() const { return &_class_data_; }

void ListOpenSourceLicensesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListOpenSourceLicensesResponse *>(to)->MergeFrom(
      static_cast<const ListOpenSourceLicensesResponse &>(from));
}


void ListOpenSourceLicensesResponse::MergeFrom(const ListOpenSourceLicensesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListOpenSourceLicensesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  licenses_.MergeFrom(from.licenses_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListOpenSourceLicensesResponse::CopyFrom(const ListOpenSourceLicensesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListOpenSourceLicensesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListOpenSourceLicensesResponse::IsInitialized() const {
  return true;
}

void ListOpenSourceLicensesResponse::InternalSwap(ListOpenSourceLicensesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  licenses_.InternalSwap(&other->licenses_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListOpenSourceLicensesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[140]);
}

// ===================================================================

class SingleModelTypeResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleModelTypeResponse* msg);
  static const ::clarifai::api::ModelType& model_type(const SingleModelTypeResponse* msg);
};

const ::clarifai::api::status::Status&
SingleModelTypeResponse::_Internal::status(const SingleModelTypeResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::ModelType&
SingleModelTypeResponse::_Internal::model_type(const SingleModelTypeResponse* msg) {
  return *msg->model_type_;
}
void SingleModelTypeResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleModelTypeResponse::clear_model_type() {
  if (GetArenaForAllocation() == nullptr && model_type_ != nullptr) {
    delete model_type_;
  }
  model_type_ = nullptr;
}
SingleModelTypeResponse::SingleModelTypeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleModelTypeResponse)
}
SingleModelTypeResponse::SingleModelTypeResponse(const SingleModelTypeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_model_type()) {
    model_type_ = new ::clarifai::api::ModelType(*from.model_type_);
  } else {
    model_type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleModelTypeResponse)
}

inline void SingleModelTypeResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&model_type_) -
    reinterpret_cast<char*>(&status_)) + sizeof(model_type_));
}

SingleModelTypeResponse::~SingleModelTypeResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleModelTypeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SingleModelTypeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete model_type_;
}

void SingleModelTypeResponse::ArenaDtor(void* object) {
  SingleModelTypeResponse* _this = reinterpret_cast< SingleModelTypeResponse* >(object);
  (void)_this;
}
void SingleModelTypeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleModelTypeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleModelTypeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleModelTypeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && model_type_ != nullptr) {
    delete model_type_;
  }
  model_type_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleModelTypeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ModelType model_type = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleModelTypeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleModelTypeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.ModelType model_type = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_has_model_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::model_type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleModelTypeResponse)
  return target;
}

size_t SingleModelTypeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleModelTypeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.ModelType model_type = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  if (this->_internal_has_model_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_type_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleModelTypeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SingleModelTypeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleModelTypeResponse::GetClassData() const { return &_class_data_; }

void SingleModelTypeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SingleModelTypeResponse *>(to)->MergeFrom(
      static_cast<const SingleModelTypeResponse &>(from));
}


void SingleModelTypeResponse::MergeFrom(const SingleModelTypeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleModelTypeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_model_type()) {
    _internal_mutable_model_type()->::clarifai::api::ModelType::MergeFrom(from._internal_model_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleModelTypeResponse::CopyFrom(const SingleModelTypeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleModelTypeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleModelTypeResponse::IsInitialized() const {
  return true;
}

void SingleModelTypeResponse::InternalSwap(SingleModelTypeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleModelTypeResponse, model_type_)
      + sizeof(SingleModelTypeResponse::model_type_)
      - PROTOBUF_FIELD_OFFSET(SingleModelTypeResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleModelTypeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[141]);
}

// ===================================================================

class MultiModelTypeResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiModelTypeResponse* msg);
  static const ::clarifai::api::ModelTypeField& model_importers(const MultiModelTypeResponse* msg);
};

const ::clarifai::api::status::Status&
MultiModelTypeResponse::_Internal::status(const MultiModelTypeResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::ModelTypeField&
MultiModelTypeResponse::_Internal::model_importers(const MultiModelTypeResponse* msg) {
  return *msg->model_importers_;
}
void MultiModelTypeResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiModelTypeResponse::clear_model_types() {
  model_types_.Clear();
}
void MultiModelTypeResponse::clear_model_importers() {
  if (GetArenaForAllocation() == nullptr && model_importers_ != nullptr) {
    delete model_importers_;
  }
  model_importers_ = nullptr;
}
MultiModelTypeResponse::MultiModelTypeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  model_types_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiModelTypeResponse)
}
MultiModelTypeResponse::MultiModelTypeResponse(const MultiModelTypeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      model_types_(from.model_types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_model_importers()) {
    model_importers_ = new ::clarifai::api::ModelTypeField(*from.model_importers_);
  } else {
    model_importers_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiModelTypeResponse)
}

inline void MultiModelTypeResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&model_importers_) -
    reinterpret_cast<char*>(&status_)) + sizeof(model_importers_));
}

MultiModelTypeResponse::~MultiModelTypeResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiModelTypeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiModelTypeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete model_importers_;
}

void MultiModelTypeResponse::ArenaDtor(void* object) {
  MultiModelTypeResponse* _this = reinterpret_cast< MultiModelTypeResponse* >(object);
  (void)_this;
}
void MultiModelTypeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiModelTypeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiModelTypeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiModelTypeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_types_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && model_importers_ != nullptr) {
    delete model_importers_;
  }
  model_importers_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiModelTypeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModelType model_types = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ModelTypeField model_importers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_importers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiModelTypeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiModelTypeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.ModelType model_types = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_model_types_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_model_types(i), target, stream);
  }

  // .clarifai.api.ModelTypeField model_importers = 3;
  if (this->_internal_has_model_importers()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::model_importers(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiModelTypeResponse)
  return target;
}

size_t MultiModelTypeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiModelTypeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ModelType model_types = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_model_types_size();
  for (const auto& msg : this->model_types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.ModelTypeField model_importers = 3;
  if (this->_internal_has_model_importers()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_importers_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiModelTypeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiModelTypeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiModelTypeResponse::GetClassData() const { return &_class_data_; }

void MultiModelTypeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiModelTypeResponse *>(to)->MergeFrom(
      static_cast<const MultiModelTypeResponse &>(from));
}


void MultiModelTypeResponse::MergeFrom(const MultiModelTypeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiModelTypeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  model_types_.MergeFrom(from.model_types_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_model_importers()) {
    _internal_mutable_model_importers()->::clarifai::api::ModelTypeField::MergeFrom(from._internal_model_importers());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiModelTypeResponse::CopyFrom(const MultiModelTypeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiModelTypeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiModelTypeResponse::IsInitialized() const {
  return true;
}

void MultiModelTypeResponse::InternalSwap(MultiModelTypeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  model_types_.InternalSwap(&other->model_types_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MultiModelTypeResponse, model_importers_)
      + sizeof(MultiModelTypeResponse::model_importers_)
      - PROTOBUF_FIELD_OFFSET(MultiModelTypeResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiModelTypeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[142]);
}

// ===================================================================

class GetModelVersionInputExampleRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetModelVersionInputExampleRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetModelVersionInputExampleRequest::_Internal::user_app_id(const GetModelVersionInputExampleRequest* msg) {
  return *msg->user_app_id_;
}
void GetModelVersionInputExampleRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetModelVersionInputExampleRequest::GetModelVersionInputExampleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetModelVersionInputExampleRequest)
}
GetModelVersionInputExampleRequest::GetModelVersionInputExampleRequest(const GetModelVersionInputExampleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_id(), 
      GetArenaForAllocation());
  }
  model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_version_id().empty()) {
    model_version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_version_id(), 
      GetArenaForAllocation());
  }
  example_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    example_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_example_id().empty()) {
    example_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_example_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetModelVersionInputExampleRequest)
}

inline void GetModelVersionInputExampleRequest::SharedCtor() {
model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
example_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  example_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

GetModelVersionInputExampleRequest::~GetModelVersionInputExampleRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetModelVersionInputExampleRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetModelVersionInputExampleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  example_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetModelVersionInputExampleRequest::ArenaDtor(void* object) {
  GetModelVersionInputExampleRequest* _this = reinterpret_cast< GetModelVersionInputExampleRequest* >(object);
  (void)_this;
}
void GetModelVersionInputExampleRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetModelVersionInputExampleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetModelVersionInputExampleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetModelVersionInputExampleRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_id_.ClearToEmpty();
  model_version_id_.ClearToEmpty();
  example_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetModelVersionInputExampleRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetModelVersionInputExampleRequest.model_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_model_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetModelVersionInputExampleRequest.model_version_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string example_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_example_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetModelVersionInputExampleRequest.example_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetModelVersionInputExampleRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetModelVersionInputExampleRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelVersionInputExampleRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string model_version_id = 3;
  if (!this->_internal_model_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_version_id().data(), static_cast<int>(this->_internal_model_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelVersionInputExampleRequest.model_version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model_version_id(), target);
  }

  // string example_id = 4;
  if (!this->_internal_example_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_example_id().data(), static_cast<int>(this->_internal_example_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetModelVersionInputExampleRequest.example_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_example_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetModelVersionInputExampleRequest)
  return target;
}

size_t GetModelVersionInputExampleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetModelVersionInputExampleRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string model_version_id = 3;
  if (!this->_internal_model_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_version_id());
  }

  // string example_id = 4;
  if (!this->_internal_example_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_example_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetModelVersionInputExampleRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetModelVersionInputExampleRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetModelVersionInputExampleRequest::GetClassData() const { return &_class_data_; }

void GetModelVersionInputExampleRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetModelVersionInputExampleRequest *>(to)->MergeFrom(
      static_cast<const GetModelVersionInputExampleRequest &>(from));
}


void GetModelVersionInputExampleRequest::MergeFrom(const GetModelVersionInputExampleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetModelVersionInputExampleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_model_id().empty()) {
    _internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_model_version_id().empty()) {
    _internal_set_model_version_id(from._internal_model_version_id());
  }
  if (!from._internal_example_id().empty()) {
    _internal_set_example_id(from._internal_example_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetModelVersionInputExampleRequest::CopyFrom(const GetModelVersionInputExampleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetModelVersionInputExampleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModelVersionInputExampleRequest::IsInitialized() const {
  return true;
}

void GetModelVersionInputExampleRequest::InternalSwap(GetModelVersionInputExampleRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_id_, lhs_arena,
      &other->model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_version_id_, lhs_arena,
      &other->model_version_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &example_id_, lhs_arena,
      &other->example_id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetModelVersionInputExampleRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[143]);
}

// ===================================================================

class ListModelVersionInputExamplesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListModelVersionInputExamplesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListModelVersionInputExamplesRequest::_Internal::user_app_id(const ListModelVersionInputExamplesRequest* msg) {
  return *msg->user_app_id_;
}
void ListModelVersionInputExamplesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListModelVersionInputExamplesRequest::ListModelVersionInputExamplesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListModelVersionInputExamplesRequest)
}
ListModelVersionInputExamplesRequest::ListModelVersionInputExamplesRequest(const ListModelVersionInputExamplesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_id(), 
      GetArenaForAllocation());
  }
  model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_version_id().empty()) {
    model_version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_version_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListModelVersionInputExamplesRequest)
}

inline void ListModelVersionInputExamplesRequest::SharedCtor() {
model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListModelVersionInputExamplesRequest::~ListModelVersionInputExamplesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListModelVersionInputExamplesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListModelVersionInputExamplesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListModelVersionInputExamplesRequest::ArenaDtor(void* object) {
  ListModelVersionInputExamplesRequest* _this = reinterpret_cast< ListModelVersionInputExamplesRequest* >(object);
  (void)_this;
}
void ListModelVersionInputExamplesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListModelVersionInputExamplesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListModelVersionInputExamplesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListModelVersionInputExamplesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_id_.ClearToEmpty();
  model_version_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListModelVersionInputExamplesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListModelVersionInputExamplesRequest.model_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_model_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListModelVersionInputExamplesRequest.model_version_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListModelVersionInputExamplesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListModelVersionInputExamplesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelVersionInputExamplesRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // string model_version_id = 3;
  if (!this->_internal_model_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_version_id().data(), static_cast<int>(this->_internal_model_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelVersionInputExamplesRequest.model_version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model_version_id(), target);
  }

  // uint32 page = 4;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_page(), target);
  }

  // uint32 per_page = 5;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListModelVersionInputExamplesRequest)
  return target;
}

size_t ListModelVersionInputExamplesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListModelVersionInputExamplesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string model_version_id = 3;
  if (!this->_internal_model_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 4;
  if (this->_internal_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 5;
  if (this->_internal_per_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListModelVersionInputExamplesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListModelVersionInputExamplesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListModelVersionInputExamplesRequest::GetClassData() const { return &_class_data_; }

void ListModelVersionInputExamplesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListModelVersionInputExamplesRequest *>(to)->MergeFrom(
      static_cast<const ListModelVersionInputExamplesRequest &>(from));
}


void ListModelVersionInputExamplesRequest::MergeFrom(const ListModelVersionInputExamplesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListModelVersionInputExamplesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_model_id().empty()) {
    _internal_set_model_id(from._internal_model_id());
  }
  if (!from._internal_model_version_id().empty()) {
    _internal_set_model_version_id(from._internal_model_version_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListModelVersionInputExamplesRequest::CopyFrom(const ListModelVersionInputExamplesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListModelVersionInputExamplesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListModelVersionInputExamplesRequest::IsInitialized() const {
  return true;
}

void ListModelVersionInputExamplesRequest::InternalSwap(ListModelVersionInputExamplesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_id_, lhs_arena,
      &other->model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_version_id_, lhs_arena,
      &other->model_version_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListModelVersionInputExamplesRequest, per_page_)
      + sizeof(ListModelVersionInputExamplesRequest::per_page_)
      - PROTOBUF_FIELD_OFFSET(ListModelVersionInputExamplesRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListModelVersionInputExamplesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[144]);
}

// ===================================================================

class SingleModelVersionInputExampleResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleModelVersionInputExampleResponse* msg);
  static const ::clarifai::api::ModelVersionInputExample& model_version_input_example(const SingleModelVersionInputExampleResponse* msg);
};

const ::clarifai::api::status::Status&
SingleModelVersionInputExampleResponse::_Internal::status(const SingleModelVersionInputExampleResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::ModelVersionInputExample&
SingleModelVersionInputExampleResponse::_Internal::model_version_input_example(const SingleModelVersionInputExampleResponse* msg) {
  return *msg->model_version_input_example_;
}
void SingleModelVersionInputExampleResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleModelVersionInputExampleResponse::clear_model_version_input_example() {
  if (GetArenaForAllocation() == nullptr && model_version_input_example_ != nullptr) {
    delete model_version_input_example_;
  }
  model_version_input_example_ = nullptr;
}
SingleModelVersionInputExampleResponse::SingleModelVersionInputExampleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleModelVersionInputExampleResponse)
}
SingleModelVersionInputExampleResponse::SingleModelVersionInputExampleResponse(const SingleModelVersionInputExampleResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_model_version_input_example()) {
    model_version_input_example_ = new ::clarifai::api::ModelVersionInputExample(*from.model_version_input_example_);
  } else {
    model_version_input_example_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleModelVersionInputExampleResponse)
}

inline void SingleModelVersionInputExampleResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&model_version_input_example_) -
    reinterpret_cast<char*>(&status_)) + sizeof(model_version_input_example_));
}

SingleModelVersionInputExampleResponse::~SingleModelVersionInputExampleResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleModelVersionInputExampleResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SingleModelVersionInputExampleResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete model_version_input_example_;
}

void SingleModelVersionInputExampleResponse::ArenaDtor(void* object) {
  SingleModelVersionInputExampleResponse* _this = reinterpret_cast< SingleModelVersionInputExampleResponse* >(object);
  (void)_this;
}
void SingleModelVersionInputExampleResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleModelVersionInputExampleResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleModelVersionInputExampleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleModelVersionInputExampleResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && model_version_input_example_ != nullptr) {
    delete model_version_input_example_;
  }
  model_version_input_example_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleModelVersionInputExampleResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.ModelVersionInputExample model_version_input_example = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_version_input_example(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleModelVersionInputExampleResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleModelVersionInputExampleResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.ModelVersionInputExample model_version_input_example = 2;
  if (this->_internal_has_model_version_input_example()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::model_version_input_example(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleModelVersionInputExampleResponse)
  return target;
}

size_t SingleModelVersionInputExampleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleModelVersionInputExampleResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.ModelVersionInputExample model_version_input_example = 2;
  if (this->_internal_has_model_version_input_example()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_version_input_example_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleModelVersionInputExampleResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SingleModelVersionInputExampleResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleModelVersionInputExampleResponse::GetClassData() const { return &_class_data_; }

void SingleModelVersionInputExampleResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SingleModelVersionInputExampleResponse *>(to)->MergeFrom(
      static_cast<const SingleModelVersionInputExampleResponse &>(from));
}


void SingleModelVersionInputExampleResponse::MergeFrom(const SingleModelVersionInputExampleResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleModelVersionInputExampleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_model_version_input_example()) {
    _internal_mutable_model_version_input_example()->::clarifai::api::ModelVersionInputExample::MergeFrom(from._internal_model_version_input_example());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleModelVersionInputExampleResponse::CopyFrom(const SingleModelVersionInputExampleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleModelVersionInputExampleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleModelVersionInputExampleResponse::IsInitialized() const {
  return true;
}

void SingleModelVersionInputExampleResponse::InternalSwap(SingleModelVersionInputExampleResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleModelVersionInputExampleResponse, model_version_input_example_)
      + sizeof(SingleModelVersionInputExampleResponse::model_version_input_example_)
      - PROTOBUF_FIELD_OFFSET(SingleModelVersionInputExampleResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleModelVersionInputExampleResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[145]);
}

// ===================================================================

class MultiModelVersionInputExampleResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiModelVersionInputExampleResponse* msg);
};

const ::clarifai::api::status::Status&
MultiModelVersionInputExampleResponse::_Internal::status(const MultiModelVersionInputExampleResponse* msg) {
  return *msg->status_;
}
void MultiModelVersionInputExampleResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiModelVersionInputExampleResponse::clear_model_version_input_examples() {
  model_version_input_examples_.Clear();
}
MultiModelVersionInputExampleResponse::MultiModelVersionInputExampleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  model_version_input_examples_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiModelVersionInputExampleResponse)
}
MultiModelVersionInputExampleResponse::MultiModelVersionInputExampleResponse(const MultiModelVersionInputExampleResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      model_version_input_examples_(from.model_version_input_examples_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiModelVersionInputExampleResponse)
}

inline void MultiModelVersionInputExampleResponse::SharedCtor() {
status_ = nullptr;
}

MultiModelVersionInputExampleResponse::~MultiModelVersionInputExampleResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiModelVersionInputExampleResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiModelVersionInputExampleResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiModelVersionInputExampleResponse::ArenaDtor(void* object) {
  MultiModelVersionInputExampleResponse* _this = reinterpret_cast< MultiModelVersionInputExampleResponse* >(object);
  (void)_this;
}
void MultiModelVersionInputExampleResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiModelVersionInputExampleResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiModelVersionInputExampleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiModelVersionInputExampleResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_version_input_examples_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiModelVersionInputExampleResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModelVersionInputExample model_version_input_examples = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model_version_input_examples(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiModelVersionInputExampleResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiModelVersionInputExampleResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.ModelVersionInputExample model_version_input_examples = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_model_version_input_examples_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_model_version_input_examples(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiModelVersionInputExampleResponse)
  return target;
}

size_t MultiModelVersionInputExampleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiModelVersionInputExampleResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ModelVersionInputExample model_version_input_examples = 2;
  total_size += 1UL * this->_internal_model_version_input_examples_size();
  for (const auto& msg : this->model_version_input_examples_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiModelVersionInputExampleResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiModelVersionInputExampleResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiModelVersionInputExampleResponse::GetClassData() const { return &_class_data_; }

void MultiModelVersionInputExampleResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiModelVersionInputExampleResponse *>(to)->MergeFrom(
      static_cast<const MultiModelVersionInputExampleResponse &>(from));
}


void MultiModelVersionInputExampleResponse::MergeFrom(const MultiModelVersionInputExampleResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiModelVersionInputExampleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  model_version_input_examples_.MergeFrom(from.model_version_input_examples_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiModelVersionInputExampleResponse::CopyFrom(const MultiModelVersionInputExampleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiModelVersionInputExampleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiModelVersionInputExampleResponse::IsInitialized() const {
  return true;
}

void MultiModelVersionInputExampleResponse::InternalSwap(MultiModelVersionInputExampleResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  model_version_input_examples_.InternalSwap(&other->model_version_input_examples_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiModelVersionInputExampleResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[146]);
}

// ===================================================================

class ListModelReferencesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListModelReferencesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListModelReferencesRequest::_Internal::user_app_id(const ListModelReferencesRequest* msg) {
  return *msg->user_app_id_;
}
void ListModelReferencesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListModelReferencesRequest::ListModelReferencesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListModelReferencesRequest)
}
ListModelReferencesRequest::ListModelReferencesRequest(const ListModelReferencesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_id().empty()) {
    model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListModelReferencesRequest)
}

inline void ListModelReferencesRequest::SharedCtor() {
model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListModelReferencesRequest::~ListModelReferencesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListModelReferencesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListModelReferencesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListModelReferencesRequest::ArenaDtor(void* object) {
  ListModelReferencesRequest* _this = reinterpret_cast< ListModelReferencesRequest* >(object);
  (void)_this;
}
void ListModelReferencesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListModelReferencesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListModelReferencesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListModelReferencesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListModelReferencesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListModelReferencesRequest.model_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListModelReferencesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListModelReferencesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListModelReferencesRequest.model_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_id(), target);
  }

  // uint32 page = 3;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_page(), target);
  }

  // uint32 per_page = 4;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListModelReferencesRequest)
  return target;
}

size_t ListModelReferencesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListModelReferencesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 2;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 3;
  if (this->_internal_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 4;
  if (this->_internal_per_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListModelReferencesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListModelReferencesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListModelReferencesRequest::GetClassData() const { return &_class_data_; }

void ListModelReferencesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListModelReferencesRequest *>(to)->MergeFrom(
      static_cast<const ListModelReferencesRequest &>(from));
}


void ListModelReferencesRequest::MergeFrom(const ListModelReferencesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListModelReferencesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_model_id().empty()) {
    _internal_set_model_id(from._internal_model_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListModelReferencesRequest::CopyFrom(const ListModelReferencesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListModelReferencesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListModelReferencesRequest::IsInitialized() const {
  return true;
}

void ListModelReferencesRequest::InternalSwap(ListModelReferencesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_id_, lhs_arena,
      &other->model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListModelReferencesRequest, per_page_)
      + sizeof(ListModelReferencesRequest::per_page_)
      - PROTOBUF_FIELD_OFFSET(ListModelReferencesRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListModelReferencesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[147]);
}

// ===================================================================

class MultiModelReferenceResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiModelReferenceResponse* msg);
};

const ::clarifai::api::status::Status&
MultiModelReferenceResponse::_Internal::status(const MultiModelReferenceResponse* msg) {
  return *msg->status_;
}
void MultiModelReferenceResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiModelReferenceResponse::clear_model_references() {
  model_references_.Clear();
}
MultiModelReferenceResponse::MultiModelReferenceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  model_references_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiModelReferenceResponse)
}
MultiModelReferenceResponse::MultiModelReferenceResponse(const MultiModelReferenceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      model_references_(from.model_references_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiModelReferenceResponse)
}

inline void MultiModelReferenceResponse::SharedCtor() {
status_ = nullptr;
}

MultiModelReferenceResponse::~MultiModelReferenceResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiModelReferenceResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiModelReferenceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiModelReferenceResponse::ArenaDtor(void* object) {
  MultiModelReferenceResponse* _this = reinterpret_cast< MultiModelReferenceResponse* >(object);
  (void)_this;
}
void MultiModelReferenceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiModelReferenceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiModelReferenceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiModelReferenceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_references_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiModelReferenceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ModelReference model_references = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model_references(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiModelReferenceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiModelReferenceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.ModelReference model_references = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_model_references_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_model_references(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiModelReferenceResponse)
  return target;
}

size_t MultiModelReferenceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiModelReferenceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ModelReference model_references = 2;
  total_size += 1UL * this->_internal_model_references_size();
  for (const auto& msg : this->model_references_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiModelReferenceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiModelReferenceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiModelReferenceResponse::GetClassData() const { return &_class_data_; }

void MultiModelReferenceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiModelReferenceResponse *>(to)->MergeFrom(
      static_cast<const MultiModelReferenceResponse &>(from));
}


void MultiModelReferenceResponse::MergeFrom(const MultiModelReferenceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiModelReferenceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  model_references_.MergeFrom(from.model_references_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiModelReferenceResponse::CopyFrom(const MultiModelReferenceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiModelReferenceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiModelReferenceResponse::IsInitialized() const {
  return true;
}

void MultiModelReferenceResponse::InternalSwap(MultiModelReferenceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  model_references_.InternalSwap(&other->model_references_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiModelReferenceResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[148]);
}

// ===================================================================

class MultiOutputResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiOutputResponse* msg);
};

const ::clarifai::api::status::Status&
MultiOutputResponse::_Internal::status(const MultiOutputResponse* msg) {
  return *msg->status_;
}
void MultiOutputResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiOutputResponse::clear_outputs() {
  outputs_.Clear();
}
MultiOutputResponse::MultiOutputResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  outputs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiOutputResponse)
}
MultiOutputResponse::MultiOutputResponse(const MultiOutputResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      outputs_(from.outputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiOutputResponse)
}

inline void MultiOutputResponse::SharedCtor() {
status_ = nullptr;
}

MultiOutputResponse::~MultiOutputResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiOutputResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiOutputResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiOutputResponse::ArenaDtor(void* object) {
  MultiOutputResponse* _this = reinterpret_cast< MultiOutputResponse* >(object);
  (void)_this;
}
void MultiOutputResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiOutputResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiOutputResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiOutputResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  outputs_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiOutputResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Output outputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiOutputResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiOutputResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.Output outputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_outputs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiOutputResponse)
  return target;
}

size_t MultiOutputResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiOutputResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Output outputs = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_outputs_size();
  for (const auto& msg : this->outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiOutputResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiOutputResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiOutputResponse::GetClassData() const { return &_class_data_; }

void MultiOutputResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiOutputResponse *>(to)->MergeFrom(
      static_cast<const MultiOutputResponse &>(from));
}


void MultiOutputResponse::MergeFrom(const MultiOutputResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiOutputResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  outputs_.MergeFrom(from.outputs_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiOutputResponse::CopyFrom(const MultiOutputResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiOutputResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiOutputResponse::IsInitialized() const {
  return true;
}

void MultiOutputResponse::InternalSwap(MultiOutputResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  outputs_.InternalSwap(&other->outputs_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiOutputResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[149]);
}

// ===================================================================

class ListScopesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListScopesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListScopesRequest::_Internal::user_app_id(const ListScopesRequest* msg) {
  return *msg->user_app_id_;
}
void ListScopesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListScopesRequest::ListScopesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListScopesRequest)
}
ListScopesRequest::ListScopesRequest(const ListScopesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key_type().empty()) {
    key_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key_type(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListScopesRequest)
}

inline void ListScopesRequest::SharedCtor() {
key_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

ListScopesRequest::~ListScopesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListScopesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListScopesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListScopesRequest::ArenaDtor(void* object) {
  ListScopesRequest* _this = reinterpret_cast< ListScopesRequest* >(object);
  (void)_this;
}
void ListScopesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListScopesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListScopesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListScopesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListScopesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListScopesRequest.key_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.UserAppIDSet user_app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListScopesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListScopesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key_type = 1;
  if (!this->_internal_key_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key_type().data(), static_cast<int>(this->_internal_key_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListScopesRequest.key_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key_type(), target);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 2;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user_app_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListScopesRequest)
  return target;
}

size_t ListScopesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListScopesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key_type = 1;
  if (!this->_internal_key_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_type());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 2;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListScopesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListScopesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListScopesRequest::GetClassData() const { return &_class_data_; }

void ListScopesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListScopesRequest *>(to)->MergeFrom(
      static_cast<const ListScopesRequest &>(from));
}


void ListScopesRequest::MergeFrom(const ListScopesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListScopesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key_type().empty()) {
    _internal_set_key_type(from._internal_key_type());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListScopesRequest::CopyFrom(const ListScopesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListScopesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListScopesRequest::IsInitialized() const {
  return true;
}

void ListScopesRequest::InternalSwap(ListScopesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_type_, lhs_arena,
      &other->key_type_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListScopesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[150]);
}

// ===================================================================

class MyScopesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const MyScopesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
MyScopesRequest::_Internal::user_app_id(const MyScopesRequest* msg) {
  return *msg->user_app_id_;
}
void MyScopesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
MyScopesRequest::MyScopesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MyScopesRequest)
}
MyScopesRequest::MyScopesRequest(const MyScopesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MyScopesRequest)
}

inline void MyScopesRequest::SharedCtor() {
user_app_id_ = nullptr;
}

MyScopesRequest::~MyScopesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.MyScopesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MyScopesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void MyScopesRequest::ArenaDtor(void* object) {
  MyScopesRequest* _this = reinterpret_cast< MyScopesRequest* >(object);
  (void)_this;
}
void MyScopesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MyScopesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MyScopesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MyScopesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MyScopesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MyScopesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MyScopesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MyScopesRequest)
  return target;
}

size_t MyScopesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MyScopesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MyScopesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MyScopesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MyScopesRequest::GetClassData() const { return &_class_data_; }

void MyScopesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MyScopesRequest *>(to)->MergeFrom(
      static_cast<const MyScopesRequest &>(from));
}


void MyScopesRequest::MergeFrom(const MyScopesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MyScopesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MyScopesRequest::CopyFrom(const MyScopesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MyScopesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyScopesRequest::IsInitialized() const {
  return true;
}

void MyScopesRequest::InternalSwap(MyScopesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MyScopesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[151]);
}

// ===================================================================

class MyScopesUserRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const MyScopesUserRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
MyScopesUserRequest::_Internal::user_app_id(const MyScopesUserRequest* msg) {
  return *msg->user_app_id_;
}
void MyScopesUserRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
MyScopesUserRequest::MyScopesUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MyScopesUserRequest)
}
MyScopesUserRequest::MyScopesUserRequest(const MyScopesUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MyScopesUserRequest)
}

inline void MyScopesUserRequest::SharedCtor() {
user_app_id_ = nullptr;
}

MyScopesUserRequest::~MyScopesUserRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.MyScopesUserRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MyScopesUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void MyScopesUserRequest::ArenaDtor(void* object) {
  MyScopesUserRequest* _this = reinterpret_cast< MyScopesUserRequest* >(object);
  (void)_this;
}
void MyScopesUserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MyScopesUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MyScopesUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MyScopesUserRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MyScopesUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MyScopesUserRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MyScopesUserRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MyScopesUserRequest)
  return target;
}

size_t MyScopesUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MyScopesUserRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MyScopesUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MyScopesUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MyScopesUserRequest::GetClassData() const { return &_class_data_; }

void MyScopesUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MyScopesUserRequest *>(to)->MergeFrom(
      static_cast<const MyScopesUserRequest &>(from));
}


void MyScopesUserRequest::MergeFrom(const MyScopesUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MyScopesUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MyScopesUserRequest::CopyFrom(const MyScopesUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MyScopesUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyScopesUserRequest::IsInitialized() const {
  return true;
}

void MyScopesUserRequest::InternalSwap(MyScopesUserRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MyScopesUserRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[152]);
}

// ===================================================================

class MyScopesRootRequest::_Internal {
 public:
};

MyScopesRootRequest::MyScopesRootRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MyScopesRootRequest)
}
MyScopesRootRequest::MyScopesRootRequest(const MyScopesRootRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MyScopesRootRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MyScopesRootRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MyScopesRootRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MyScopesRootRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[153]);
}

// ===================================================================

class MultiScopeDepsResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiScopeDepsResponse* msg);
};

const ::clarifai::api::status::Status&
MultiScopeDepsResponse::_Internal::status(const MultiScopeDepsResponse* msg) {
  return *msg->status_;
}
void MultiScopeDepsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiScopeDepsResponse::clear_scope_deps() {
  scope_deps_.Clear();
}
void MultiScopeDepsResponse::clear_endpoint_deps() {
  endpoint_deps_.Clear();
}
MultiScopeDepsResponse::MultiScopeDepsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  scope_deps_(arena),
  endpoint_deps_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiScopeDepsResponse)
}
MultiScopeDepsResponse::MultiScopeDepsResponse(const MultiScopeDepsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      scope_deps_(from.scope_deps_),
      endpoint_deps_(from.endpoint_deps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiScopeDepsResponse)
}

inline void MultiScopeDepsResponse::SharedCtor() {
status_ = nullptr;
}

MultiScopeDepsResponse::~MultiScopeDepsResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiScopeDepsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiScopeDepsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiScopeDepsResponse::ArenaDtor(void* object) {
  MultiScopeDepsResponse* _this = reinterpret_cast< MultiScopeDepsResponse* >(object);
  (void)_this;
}
void MultiScopeDepsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiScopeDepsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiScopeDepsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiScopeDepsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scope_deps_.Clear();
  endpoint_deps_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiScopeDepsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.ScopeDeps scope_deps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_scope_deps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.EndpointDeps endpoint_deps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_endpoint_deps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiScopeDepsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiScopeDepsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.ScopeDeps scope_deps = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_scope_deps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_scope_deps(i), target, stream);
  }

  // repeated .clarifai.api.EndpointDeps endpoint_deps = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_endpoint_deps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_endpoint_deps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiScopeDepsResponse)
  return target;
}

size_t MultiScopeDepsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiScopeDepsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.ScopeDeps scope_deps = 2;
  total_size += 1UL * this->_internal_scope_deps_size();
  for (const auto& msg : this->scope_deps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.EndpointDeps endpoint_deps = 3;
  total_size += 1UL * this->_internal_endpoint_deps_size();
  for (const auto& msg : this->endpoint_deps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiScopeDepsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiScopeDepsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiScopeDepsResponse::GetClassData() const { return &_class_data_; }

void MultiScopeDepsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiScopeDepsResponse *>(to)->MergeFrom(
      static_cast<const MultiScopeDepsResponse &>(from));
}


void MultiScopeDepsResponse::MergeFrom(const MultiScopeDepsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiScopeDepsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  scope_deps_.MergeFrom(from.scope_deps_);
  endpoint_deps_.MergeFrom(from.endpoint_deps_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiScopeDepsResponse::CopyFrom(const MultiScopeDepsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiScopeDepsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiScopeDepsResponse::IsInitialized() const {
  return true;
}

void MultiScopeDepsResponse::InternalSwap(MultiScopeDepsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  scope_deps_.InternalSwap(&other->scope_deps_);
  endpoint_deps_.InternalSwap(&other->endpoint_deps_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiScopeDepsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[154]);
}

// ===================================================================

class MultiScopeResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiScopeResponse* msg);
  static const ::clarifai::api::App& app(const MultiScopeResponse* msg);
};

const ::clarifai::api::status::Status&
MultiScopeResponse::_Internal::status(const MultiScopeResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::App&
MultiScopeResponse::_Internal::app(const MultiScopeResponse* msg) {
  return *msg->app_;
}
void MultiScopeResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiScopeResponse::clear_app() {
  if (GetArenaForAllocation() == nullptr && app_ != nullptr) {
    delete app_;
  }
  app_ = nullptr;
}
MultiScopeResponse::MultiScopeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  scopes_(arena),
  endpoints_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiScopeResponse)
}
MultiScopeResponse::MultiScopeResponse(const MultiScopeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      scopes_(from.scopes_),
      endpoints_(from.endpoints_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_feature_flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_feature_flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_feature_flags().empty()) {
    user_feature_flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_feature_flags(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_app()) {
    app_ = new ::clarifai::api::App(*from.app_);
  } else {
    app_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiScopeResponse)
}

inline void MultiScopeResponse::SharedCtor() {
user_feature_flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_feature_flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&app_) -
    reinterpret_cast<char*>(&status_)) + sizeof(app_));
}

MultiScopeResponse::~MultiScopeResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiScopeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiScopeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_feature_flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete app_;
}

void MultiScopeResponse::ArenaDtor(void* object) {
  MultiScopeResponse* _this = reinterpret_cast< MultiScopeResponse* >(object);
  (void)_this;
}
void MultiScopeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiScopeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiScopeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiScopeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scopes_.Clear();
  endpoints_.Clear();
  user_feature_flags_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && app_ != nullptr) {
    delete app_;
  }
  app_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiScopeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string scopes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_scopes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.MultiScopeResponse.scopes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.App app = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_app(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string endpoints = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_endpoints();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.MultiScopeResponse.endpoints"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string user_feature_flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_user_feature_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.MultiScopeResponse.user_feature_flags"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiScopeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiScopeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated string scopes = 2;
  for (int i = 0, n = this->_internal_scopes_size(); i < n; i++) {
    const auto& s = this->_internal_scopes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.MultiScopeResponse.scopes");
    target = stream->WriteString(2, s, target);
  }

  // .clarifai.api.App app = 3;
  if (this->_internal_has_app()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::app(this), target, stream);
  }

  // repeated string endpoints = 4;
  for (int i = 0, n = this->_internal_endpoints_size(); i < n; i++) {
    const auto& s = this->_internal_endpoints(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.MultiScopeResponse.endpoints");
    target = stream->WriteString(4, s, target);
  }

  // string user_feature_flags = 5;
  if (!this->_internal_user_feature_flags().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_feature_flags().data(), static_cast<int>(this->_internal_user_feature_flags().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.MultiScopeResponse.user_feature_flags");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_user_feature_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiScopeResponse)
  return target;
}

size_t MultiScopeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiScopeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string scopes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(scopes_.size());
  for (int i = 0, n = scopes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      scopes_.Get(i));
  }

  // repeated string endpoints = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(endpoints_.size());
  for (int i = 0, n = endpoints_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      endpoints_.Get(i));
  }

  // string user_feature_flags = 5;
  if (!this->_internal_user_feature_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_feature_flags());
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.App app = 3;
  if (this->_internal_has_app()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiScopeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiScopeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiScopeResponse::GetClassData() const { return &_class_data_; }

void MultiScopeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiScopeResponse *>(to)->MergeFrom(
      static_cast<const MultiScopeResponse &>(from));
}


void MultiScopeResponse::MergeFrom(const MultiScopeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiScopeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  scopes_.MergeFrom(from.scopes_);
  endpoints_.MergeFrom(from.endpoints_);
  if (!from._internal_user_feature_flags().empty()) {
    _internal_set_user_feature_flags(from._internal_user_feature_flags());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_app()) {
    _internal_mutable_app()->::clarifai::api::App::MergeFrom(from._internal_app());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiScopeResponse::CopyFrom(const MultiScopeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiScopeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiScopeResponse::IsInitialized() const {
  return true;
}

void MultiScopeResponse::InternalSwap(MultiScopeResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  scopes_.InternalSwap(&other->scopes_);
  endpoints_.InternalSwap(&other->endpoints_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_feature_flags_, lhs_arena,
      &other->user_feature_flags_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MultiScopeResponse, app_)
      + sizeof(MultiScopeResponse::app_)
      - PROTOBUF_FIELD_OFFSET(MultiScopeResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiScopeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[155]);
}

// ===================================================================

class MultiScopeUserResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiScopeUserResponse* msg);
};

const ::clarifai::api::status::Status&
MultiScopeUserResponse::_Internal::status(const MultiScopeUserResponse* msg) {
  return *msg->status_;
}
void MultiScopeUserResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
MultiScopeUserResponse::MultiScopeUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  scopes_(arena),
  endpoints_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiScopeUserResponse)
}
MultiScopeUserResponse::MultiScopeUserResponse(const MultiScopeUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      scopes_(from.scopes_),
      endpoints_(from.endpoints_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_feature_flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_feature_flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_feature_flags().empty()) {
    user_feature_flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_feature_flags(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiScopeUserResponse)
}

inline void MultiScopeUserResponse::SharedCtor() {
user_feature_flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_feature_flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
status_ = nullptr;
}

MultiScopeUserResponse::~MultiScopeUserResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiScopeUserResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiScopeUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_feature_flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void MultiScopeUserResponse::ArenaDtor(void* object) {
  MultiScopeUserResponse* _this = reinterpret_cast< MultiScopeUserResponse* >(object);
  (void)_this;
}
void MultiScopeUserResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiScopeUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiScopeUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiScopeUserResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scopes_.Clear();
  endpoints_.Clear();
  user_feature_flags_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiScopeUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string scopes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_scopes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.MultiScopeUserResponse.scopes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string endpoints = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_endpoints();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.MultiScopeUserResponse.endpoints"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string user_feature_flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_user_feature_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.MultiScopeUserResponse.user_feature_flags"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiScopeUserResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiScopeUserResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated string scopes = 2;
  for (int i = 0, n = this->_internal_scopes_size(); i < n; i++) {
    const auto& s = this->_internal_scopes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.MultiScopeUserResponse.scopes");
    target = stream->WriteString(2, s, target);
  }

  // repeated string endpoints = 4;
  for (int i = 0, n = this->_internal_endpoints_size(); i < n; i++) {
    const auto& s = this->_internal_endpoints(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.MultiScopeUserResponse.endpoints");
    target = stream->WriteString(4, s, target);
  }

  // string user_feature_flags = 5;
  if (!this->_internal_user_feature_flags().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_feature_flags().data(), static_cast<int>(this->_internal_user_feature_flags().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.MultiScopeUserResponse.user_feature_flags");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_user_feature_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiScopeUserResponse)
  return target;
}

size_t MultiScopeUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiScopeUserResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string scopes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(scopes_.size());
  for (int i = 0, n = scopes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      scopes_.Get(i));
  }

  // repeated string endpoints = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(endpoints_.size());
  for (int i = 0, n = endpoints_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      endpoints_.Get(i));
  }

  // string user_feature_flags = 5;
  if (!this->_internal_user_feature_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_feature_flags());
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiScopeUserResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiScopeUserResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiScopeUserResponse::GetClassData() const { return &_class_data_; }

void MultiScopeUserResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiScopeUserResponse *>(to)->MergeFrom(
      static_cast<const MultiScopeUserResponse &>(from));
}


void MultiScopeUserResponse::MergeFrom(const MultiScopeUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiScopeUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  scopes_.MergeFrom(from.scopes_);
  endpoints_.MergeFrom(from.endpoints_);
  if (!from._internal_user_feature_flags().empty()) {
    _internal_set_user_feature_flags(from._internal_user_feature_flags());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiScopeUserResponse::CopyFrom(const MultiScopeUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiScopeUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiScopeUserResponse::IsInitialized() const {
  return true;
}

void MultiScopeUserResponse::InternalSwap(MultiScopeUserResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  scopes_.InternalSwap(&other->scopes_);
  endpoints_.InternalSwap(&other->endpoints_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_feature_flags_, lhs_arena,
      &other->user_feature_flags_, rhs_arena
  );
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiScopeUserResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[156]);
}

// ===================================================================

class MultiScopeRootResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiScopeRootResponse* msg);
};

const ::clarifai::api::status::Status&
MultiScopeRootResponse::_Internal::status(const MultiScopeRootResponse* msg) {
  return *msg->status_;
}
void MultiScopeRootResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
MultiScopeRootResponse::MultiScopeRootResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  scopes_(arena),
  endpoints_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiScopeRootResponse)
}
MultiScopeRootResponse::MultiScopeRootResponse(const MultiScopeRootResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      scopes_(from.scopes_),
      endpoints_(from.endpoints_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_feature_flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_feature_flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_feature_flags().empty()) {
    user_feature_flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_feature_flags(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiScopeRootResponse)
}

inline void MultiScopeRootResponse::SharedCtor() {
user_feature_flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_feature_flags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
status_ = nullptr;
}

MultiScopeRootResponse::~MultiScopeRootResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiScopeRootResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiScopeRootResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_feature_flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void MultiScopeRootResponse::ArenaDtor(void* object) {
  MultiScopeRootResponse* _this = reinterpret_cast< MultiScopeRootResponse* >(object);
  (void)_this;
}
void MultiScopeRootResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiScopeRootResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiScopeRootResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiScopeRootResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scopes_.Clear();
  endpoints_.Clear();
  user_feature_flags_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiScopeRootResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string scopes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_scopes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.MultiScopeRootResponse.scopes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string endpoints = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_endpoints();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.MultiScopeRootResponse.endpoints"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string user_feature_flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_user_feature_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.MultiScopeRootResponse.user_feature_flags"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiScopeRootResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiScopeRootResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated string scopes = 2;
  for (int i = 0, n = this->_internal_scopes_size(); i < n; i++) {
    const auto& s = this->_internal_scopes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.MultiScopeRootResponse.scopes");
    target = stream->WriteString(2, s, target);
  }

  // repeated string endpoints = 4;
  for (int i = 0, n = this->_internal_endpoints_size(); i < n; i++) {
    const auto& s = this->_internal_endpoints(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.MultiScopeRootResponse.endpoints");
    target = stream->WriteString(4, s, target);
  }

  // string user_feature_flags = 5;
  if (!this->_internal_user_feature_flags().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_feature_flags().data(), static_cast<int>(this->_internal_user_feature_flags().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.MultiScopeRootResponse.user_feature_flags");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_user_feature_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiScopeRootResponse)
  return target;
}

size_t MultiScopeRootResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiScopeRootResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string scopes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(scopes_.size());
  for (int i = 0, n = scopes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      scopes_.Get(i));
  }

  // repeated string endpoints = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(endpoints_.size());
  for (int i = 0, n = endpoints_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      endpoints_.Get(i));
  }

  // string user_feature_flags = 5;
  if (!this->_internal_user_feature_flags().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_feature_flags());
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiScopeRootResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiScopeRootResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiScopeRootResponse::GetClassData() const { return &_class_data_; }

void MultiScopeRootResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiScopeRootResponse *>(to)->MergeFrom(
      static_cast<const MultiScopeRootResponse &>(from));
}


void MultiScopeRootResponse::MergeFrom(const MultiScopeRootResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiScopeRootResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  scopes_.MergeFrom(from.scopes_);
  endpoints_.MergeFrom(from.endpoints_);
  if (!from._internal_user_feature_flags().empty()) {
    _internal_set_user_feature_flags(from._internal_user_feature_flags());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiScopeRootResponse::CopyFrom(const MultiScopeRootResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiScopeRootResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiScopeRootResponse::IsInitialized() const {
  return true;
}

void MultiScopeRootResponse::InternalSwap(MultiScopeRootResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  scopes_.InternalSwap(&other->scopes_);
  endpoints_.InternalSwap(&other->endpoints_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_feature_flags_, lhs_arena,
      &other->user_feature_flags_, rhs_arena
  );
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiScopeRootResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[157]);
}

// ===================================================================

class GetSearchRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetSearchRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetSearchRequest::_Internal::user_app_id(const GetSearchRequest* msg) {
  return *msg->user_app_id_;
}
void GetSearchRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetSearchRequest::GetSearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetSearchRequest)
}
GetSearchRequest::GetSearchRequest(const GetSearchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetSearchRequest)
}

inline void GetSearchRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

GetSearchRequest::~GetSearchRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetSearchRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetSearchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetSearchRequest::ArenaDtor(void* object) {
  GetSearchRequest* _this = reinterpret_cast< GetSearchRequest* >(object);
  (void)_this;
}
void GetSearchRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSearchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSearchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetSearchRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSearchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetSearchRequest.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSearchRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetSearchRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetSearchRequest.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetSearchRequest)
  return target;
}

size_t GetSearchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetSearchRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSearchRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetSearchRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSearchRequest::GetClassData() const { return &_class_data_; }

void GetSearchRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetSearchRequest *>(to)->MergeFrom(
      static_cast<const GetSearchRequest &>(from));
}


void GetSearchRequest::MergeFrom(const GetSearchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetSearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSearchRequest::CopyFrom(const GetSearchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetSearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSearchRequest::IsInitialized() const {
  return true;
}

void GetSearchRequest::InternalSwap(GetSearchRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSearchRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[158]);
}

// ===================================================================

class ListSearchesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListSearchesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListSearchesRequest::_Internal::user_app_id(const ListSearchesRequest* msg) {
  return *msg->user_app_id_;
}
void ListSearchesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListSearchesRequest::ListSearchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListSearchesRequest)
}
ListSearchesRequest::ListSearchesRequest(const ListSearchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListSearchesRequest)
}

inline void ListSearchesRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListSearchesRequest::~ListSearchesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListSearchesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListSearchesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListSearchesRequest::ArenaDtor(void* object) {
  ListSearchesRequest* _this = reinterpret_cast< ListSearchesRequest* >(object);
  (void)_this;
}
void ListSearchesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListSearchesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListSearchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListSearchesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListSearchesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListSearchesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListSearchesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListSearchesRequest)
  return target;
}

size_t ListSearchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListSearchesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListSearchesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListSearchesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListSearchesRequest::GetClassData() const { return &_class_data_; }

void ListSearchesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListSearchesRequest *>(to)->MergeFrom(
      static_cast<const ListSearchesRequest &>(from));
}


void ListSearchesRequest::MergeFrom(const ListSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListSearchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListSearchesRequest::CopyFrom(const ListSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSearchesRequest::IsInitialized() const {
  return true;
}

void ListSearchesRequest::InternalSwap(ListSearchesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListSearchesRequest, per_page_)
      + sizeof(ListSearchesRequest::per_page_)
      - PROTOBUF_FIELD_OFFSET(ListSearchesRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSearchesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[159]);
}

// ===================================================================

class PostSearchesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostSearchesRequest* msg);
  static const ::clarifai::api::Query& query(const PostSearchesRequest* msg);
  static const ::clarifai::api::Pagination& pagination(const PostSearchesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostSearchesRequest::_Internal::user_app_id(const PostSearchesRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::Query&
PostSearchesRequest::_Internal::query(const PostSearchesRequest* msg) {
  return *msg->query_;
}
const ::clarifai::api::Pagination&
PostSearchesRequest::_Internal::pagination(const PostSearchesRequest* msg) {
  return *msg->pagination_;
}
void PostSearchesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostSearchesRequest::clear_query() {
  if (GetArenaForAllocation() == nullptr && query_ != nullptr) {
    delete query_;
  }
  query_ = nullptr;
}
void PostSearchesRequest::clear_searches() {
  searches_.Clear();
}
PostSearchesRequest::PostSearchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  searches_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostSearchesRequest)
}
PostSearchesRequest::PostSearchesRequest(const PostSearchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      searches_(from.searches_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_query()) {
    query_ = new ::clarifai::api::Query(*from.query_);
  } else {
    query_ = nullptr;
  }
  if (from._internal_has_pagination()) {
    pagination_ = new ::clarifai::api::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostSearchesRequest)
}

inline void PostSearchesRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pagination_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(pagination_));
}

PostSearchesRequest::~PostSearchesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostSearchesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostSearchesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete query_;
  if (this != internal_default_instance()) delete pagination_;
}

void PostSearchesRequest::ArenaDtor(void* object) {
  PostSearchesRequest* _this = reinterpret_cast< PostSearchesRequest* >(object);
  (void)_this;
}
void PostSearchesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostSearchesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostSearchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostSearchesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  searches_.Clear();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && query_ != nullptr) {
    delete query_;
  }
  query_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostSearchesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Query query = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Search searches = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_searches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Pagination pagination = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostSearchesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostSearchesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // .clarifai.api.Query query = 2 [deprecated = true];
  if (this->_internal_has_query()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::query(this), target, stream);
  }

  // repeated .clarifai.api.Search searches = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_searches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_searches(i), target, stream);
  }

  // .clarifai.api.Pagination pagination = 4;
  if (this->_internal_has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pagination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostSearchesRequest)
  return target;
}

size_t PostSearchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostSearchesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Search searches = 3;
  total_size += 1UL * this->_internal_searches_size();
  for (const auto& msg : this->searches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.Query query = 2 [deprecated = true];
  if (this->_internal_has_query()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *query_);
  }

  // .clarifai.api.Pagination pagination = 4;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostSearchesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostSearchesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostSearchesRequest::GetClassData() const { return &_class_data_; }

void PostSearchesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostSearchesRequest *>(to)->MergeFrom(
      static_cast<const PostSearchesRequest &>(from));
}


void PostSearchesRequest::MergeFrom(const PostSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostSearchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  searches_.MergeFrom(from.searches_);
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_has_query()) {
    _internal_mutable_query()->::clarifai::api::Query::MergeFrom(from._internal_query());
  }
  if (from._internal_has_pagination()) {
    _internal_mutable_pagination()->::clarifai::api::Pagination::MergeFrom(from._internal_pagination());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostSearchesRequest::CopyFrom(const PostSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostSearchesRequest::IsInitialized() const {
  return true;
}

void PostSearchesRequest::InternalSwap(PostSearchesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  searches_.InternalSwap(&other->searches_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostSearchesRequest, pagination_)
      + sizeof(PostSearchesRequest::pagination_)
      - PROTOBUF_FIELD_OFFSET(PostSearchesRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostSearchesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[160]);
}

// ===================================================================

class PatchInputsSearchesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchInputsSearchesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchInputsSearchesRequest::_Internal::user_app_id(const PatchInputsSearchesRequest* msg) {
  return *msg->user_app_id_;
}
void PatchInputsSearchesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchInputsSearchesRequest::clear_searches() {
  searches_.Clear();
}
PatchInputsSearchesRequest::PatchInputsSearchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  searches_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchInputsSearchesRequest)
}
PatchInputsSearchesRequest::PatchInputsSearchesRequest(const PatchInputsSearchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      searches_(from.searches_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchInputsSearchesRequest)
}

inline void PatchInputsSearchesRequest::SharedCtor() {
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

PatchInputsSearchesRequest::~PatchInputsSearchesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchInputsSearchesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PatchInputsSearchesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchInputsSearchesRequest::ArenaDtor(void* object) {
  PatchInputsSearchesRequest* _this = reinterpret_cast< PatchInputsSearchesRequest* >(object);
  (void)_this;
}
void PatchInputsSearchesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatchInputsSearchesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PatchInputsSearchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchInputsSearchesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  searches_.Clear();
  action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchInputsSearchesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Search searches = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_searches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchInputsSearchesRequest.action"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchInputsSearchesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchInputsSearchesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Search searches = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_searches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_searches(i), target, stream);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchInputsSearchesRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchInputsSearchesRequest)
  return target;
}

size_t PatchInputsSearchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchInputsSearchesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Search searches = 2;
  total_size += 1UL * this->_internal_searches_size();
  for (const auto& msg : this->searches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchInputsSearchesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PatchInputsSearchesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchInputsSearchesRequest::GetClassData() const { return &_class_data_; }

void PatchInputsSearchesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PatchInputsSearchesRequest *>(to)->MergeFrom(
      static_cast<const PatchInputsSearchesRequest &>(from));
}


void PatchInputsSearchesRequest::MergeFrom(const PatchInputsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchInputsSearchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  searches_.MergeFrom(from.searches_);
  if (!from._internal_action().empty()) {
    _internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchInputsSearchesRequest::CopyFrom(const PatchInputsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchInputsSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchInputsSearchesRequest::IsInitialized() const {
  return true;
}

void PatchInputsSearchesRequest::InternalSwap(PatchInputsSearchesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  searches_.InternalSwap(&other->searches_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_, lhs_arena,
      &other->action_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchInputsSearchesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[161]);
}

// ===================================================================

class PatchAnnotationsSearchesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchAnnotationsSearchesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchAnnotationsSearchesRequest::_Internal::user_app_id(const PatchAnnotationsSearchesRequest* msg) {
  return *msg->user_app_id_;
}
void PatchAnnotationsSearchesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchAnnotationsSearchesRequest::clear_searches() {
  searches_.Clear();
}
PatchAnnotationsSearchesRequest::PatchAnnotationsSearchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  searches_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchAnnotationsSearchesRequest)
}
PatchAnnotationsSearchesRequest::PatchAnnotationsSearchesRequest(const PatchAnnotationsSearchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      searches_(from.searches_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchAnnotationsSearchesRequest)
}

inline void PatchAnnotationsSearchesRequest::SharedCtor() {
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

PatchAnnotationsSearchesRequest::~PatchAnnotationsSearchesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchAnnotationsSearchesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PatchAnnotationsSearchesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchAnnotationsSearchesRequest::ArenaDtor(void* object) {
  PatchAnnotationsSearchesRequest* _this = reinterpret_cast< PatchAnnotationsSearchesRequest* >(object);
  (void)_this;
}
void PatchAnnotationsSearchesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatchAnnotationsSearchesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PatchAnnotationsSearchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchAnnotationsSearchesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  searches_.Clear();
  action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchAnnotationsSearchesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Search searches = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_searches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchAnnotationsSearchesRequest.action"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchAnnotationsSearchesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchAnnotationsSearchesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Search searches = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_searches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_searches(i), target, stream);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchAnnotationsSearchesRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchAnnotationsSearchesRequest)
  return target;
}

size_t PatchAnnotationsSearchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchAnnotationsSearchesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Search searches = 2;
  total_size += 1UL * this->_internal_searches_size();
  for (const auto& msg : this->searches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchAnnotationsSearchesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PatchAnnotationsSearchesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchAnnotationsSearchesRequest::GetClassData() const { return &_class_data_; }

void PatchAnnotationsSearchesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PatchAnnotationsSearchesRequest *>(to)->MergeFrom(
      static_cast<const PatchAnnotationsSearchesRequest &>(from));
}


void PatchAnnotationsSearchesRequest::MergeFrom(const PatchAnnotationsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchAnnotationsSearchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  searches_.MergeFrom(from.searches_);
  if (!from._internal_action().empty()) {
    _internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchAnnotationsSearchesRequest::CopyFrom(const PatchAnnotationsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchAnnotationsSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchAnnotationsSearchesRequest::IsInitialized() const {
  return true;
}

void PatchAnnotationsSearchesRequest::InternalSwap(PatchAnnotationsSearchesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  searches_.InternalSwap(&other->searches_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_, lhs_arena,
      &other->action_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchAnnotationsSearchesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[162]);
}

// ===================================================================

class PatchSearchesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchSearchesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchSearchesRequest::_Internal::user_app_id(const PatchSearchesRequest* msg) {
  return *msg->user_app_id_;
}
void PatchSearchesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchSearchesRequest::clear_searches() {
  searches_.Clear();
}
PatchSearchesRequest::PatchSearchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  searches_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchSearchesRequest)
}
PatchSearchesRequest::PatchSearchesRequest(const PatchSearchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      searches_(from.searches_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchSearchesRequest)
}

inline void PatchSearchesRequest::SharedCtor() {
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

PatchSearchesRequest::~PatchSearchesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchSearchesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PatchSearchesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchSearchesRequest::ArenaDtor(void* object) {
  PatchSearchesRequest* _this = reinterpret_cast< PatchSearchesRequest* >(object);
  (void)_this;
}
void PatchSearchesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatchSearchesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PatchSearchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchSearchesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  searches_.Clear();
  action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchSearchesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Search searches = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_searches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchSearchesRequest.action"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchSearchesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchSearchesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Search searches = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_searches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_searches(i), target, stream);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchSearchesRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchSearchesRequest)
  return target;
}

size_t PatchSearchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchSearchesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Search searches = 2;
  total_size += 1UL * this->_internal_searches_size();
  for (const auto& msg : this->searches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchSearchesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PatchSearchesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchSearchesRequest::GetClassData() const { return &_class_data_; }

void PatchSearchesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PatchSearchesRequest *>(to)->MergeFrom(
      static_cast<const PatchSearchesRequest &>(from));
}


void PatchSearchesRequest::MergeFrom(const PatchSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchSearchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  searches_.MergeFrom(from.searches_);
  if (!from._internal_action().empty()) {
    _internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchSearchesRequest::CopyFrom(const PatchSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchSearchesRequest::IsInitialized() const {
  return true;
}

void PatchSearchesRequest::InternalSwap(PatchSearchesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  searches_.InternalSwap(&other->searches_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_, lhs_arena,
      &other->action_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchSearchesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[163]);
}

// ===================================================================

class PostSearchesByIDRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostSearchesByIDRequest* msg);
  static const ::clarifai::api::Pagination& pagination(const PostSearchesByIDRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostSearchesByIDRequest::_Internal::user_app_id(const PostSearchesByIDRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::Pagination&
PostSearchesByIDRequest::_Internal::pagination(const PostSearchesByIDRequest* msg) {
  return *msg->pagination_;
}
void PostSearchesByIDRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
PostSearchesByIDRequest::PostSearchesByIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostSearchesByIDRequest)
}
PostSearchesByIDRequest::PostSearchesByIDRequest(const PostSearchesByIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_pagination()) {
    pagination_ = new ::clarifai::api::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostSearchesByIDRequest)
}

inline void PostSearchesByIDRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pagination_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(pagination_));
}

PostSearchesByIDRequest::~PostSearchesByIDRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostSearchesByIDRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostSearchesByIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete pagination_;
}

void PostSearchesByIDRequest::ArenaDtor(void* object) {
  PostSearchesByIDRequest* _this = reinterpret_cast< PostSearchesByIDRequest* >(object);
  (void)_this;
}
void PostSearchesByIDRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostSearchesByIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostSearchesByIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostSearchesByIDRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostSearchesByIDRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostSearchesByIDRequest.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Pagination pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostSearchesByIDRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostSearchesByIDRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostSearchesByIDRequest.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->_internal_has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pagination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostSearchesByIDRequest)
  return target;
}

size_t PostSearchesByIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostSearchesByIDRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostSearchesByIDRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostSearchesByIDRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostSearchesByIDRequest::GetClassData() const { return &_class_data_; }

void PostSearchesByIDRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostSearchesByIDRequest *>(to)->MergeFrom(
      static_cast<const PostSearchesByIDRequest &>(from));
}


void PostSearchesByIDRequest::MergeFrom(const PostSearchesByIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostSearchesByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_has_pagination()) {
    _internal_mutable_pagination()->::clarifai::api::Pagination::MergeFrom(from._internal_pagination());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostSearchesByIDRequest::CopyFrom(const PostSearchesByIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostSearchesByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostSearchesByIDRequest::IsInitialized() const {
  return true;
}

void PostSearchesByIDRequest::InternalSwap(PostSearchesByIDRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostSearchesByIDRequest, pagination_)
      + sizeof(PostSearchesByIDRequest::pagination_)
      - PROTOBUF_FIELD_OFFSET(PostSearchesByIDRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostSearchesByIDRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[164]);
}

// ===================================================================

class DeleteSearchRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteSearchRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteSearchRequest::_Internal::user_app_id(const DeleteSearchRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteSearchRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteSearchRequest::DeleteSearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteSearchRequest)
}
DeleteSearchRequest::DeleteSearchRequest(const DeleteSearchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteSearchRequest)
}

inline void DeleteSearchRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

DeleteSearchRequest::~DeleteSearchRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteSearchRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteSearchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteSearchRequest::ArenaDtor(void* object) {
  DeleteSearchRequest* _this = reinterpret_cast< DeleteSearchRequest* >(object);
  (void)_this;
}
void DeleteSearchRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteSearchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteSearchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteSearchRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteSearchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteSearchRequest.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteSearchRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteSearchRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteSearchRequest.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteSearchRequest)
  return target;
}

size_t DeleteSearchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteSearchRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteSearchRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteSearchRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteSearchRequest::GetClassData() const { return &_class_data_; }

void DeleteSearchRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteSearchRequest *>(to)->MergeFrom(
      static_cast<const DeleteSearchRequest &>(from));
}


void DeleteSearchRequest::MergeFrom(const DeleteSearchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteSearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteSearchRequest::CopyFrom(const DeleteSearchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteSearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSearchRequest::IsInitialized() const {
  return true;
}

void DeleteSearchRequest::InternalSwap(DeleteSearchRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteSearchRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[165]);
}

// ===================================================================

class PostAnnotationsSearchesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostAnnotationsSearchesRequest* msg);
  static const ::clarifai::api::Pagination& pagination(const PostAnnotationsSearchesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostAnnotationsSearchesRequest::_Internal::user_app_id(const PostAnnotationsSearchesRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::Pagination&
PostAnnotationsSearchesRequest::_Internal::pagination(const PostAnnotationsSearchesRequest* msg) {
  return *msg->pagination_;
}
void PostAnnotationsSearchesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostAnnotationsSearchesRequest::clear_searches() {
  searches_.Clear();
}
PostAnnotationsSearchesRequest::PostAnnotationsSearchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  searches_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostAnnotationsSearchesRequest)
}
PostAnnotationsSearchesRequest::PostAnnotationsSearchesRequest(const PostAnnotationsSearchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      searches_(from.searches_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_pagination()) {
    pagination_ = new ::clarifai::api::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostAnnotationsSearchesRequest)
}

inline void PostAnnotationsSearchesRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pagination_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(pagination_));
}

PostAnnotationsSearchesRequest::~PostAnnotationsSearchesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostAnnotationsSearchesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostAnnotationsSearchesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete pagination_;
}

void PostAnnotationsSearchesRequest::ArenaDtor(void* object) {
  PostAnnotationsSearchesRequest* _this = reinterpret_cast< PostAnnotationsSearchesRequest* >(object);
  (void)_this;
}
void PostAnnotationsSearchesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostAnnotationsSearchesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostAnnotationsSearchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostAnnotationsSearchesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  searches_.Clear();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostAnnotationsSearchesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Search searches = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_searches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Pagination pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostAnnotationsSearchesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostAnnotationsSearchesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Search searches = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_searches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_searches(i), target, stream);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->_internal_has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pagination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostAnnotationsSearchesRequest)
  return target;
}

size_t PostAnnotationsSearchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostAnnotationsSearchesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Search searches = 2;
  total_size += 1UL * this->_internal_searches_size();
  for (const auto& msg : this->searches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostAnnotationsSearchesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostAnnotationsSearchesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostAnnotationsSearchesRequest::GetClassData() const { return &_class_data_; }

void PostAnnotationsSearchesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostAnnotationsSearchesRequest *>(to)->MergeFrom(
      static_cast<const PostAnnotationsSearchesRequest &>(from));
}


void PostAnnotationsSearchesRequest::MergeFrom(const PostAnnotationsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostAnnotationsSearchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  searches_.MergeFrom(from.searches_);
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_has_pagination()) {
    _internal_mutable_pagination()->::clarifai::api::Pagination::MergeFrom(from._internal_pagination());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostAnnotationsSearchesRequest::CopyFrom(const PostAnnotationsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostAnnotationsSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostAnnotationsSearchesRequest::IsInitialized() const {
  return true;
}

void PostAnnotationsSearchesRequest::InternalSwap(PostAnnotationsSearchesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  searches_.InternalSwap(&other->searches_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostAnnotationsSearchesRequest, pagination_)
      + sizeof(PostAnnotationsSearchesRequest::pagination_)
      - PROTOBUF_FIELD_OFFSET(PostAnnotationsSearchesRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostAnnotationsSearchesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[166]);
}

// ===================================================================

class DeleteAnnotationSearchMetricsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteAnnotationSearchMetricsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteAnnotationSearchMetricsRequest::_Internal::user_app_id(const DeleteAnnotationSearchMetricsRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteAnnotationSearchMetricsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteAnnotationSearchMetricsRequest::DeleteAnnotationSearchMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteAnnotationSearchMetricsRequest)
}
DeleteAnnotationSearchMetricsRequest::DeleteAnnotationSearchMetricsRequest(const DeleteAnnotationSearchMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteAnnotationSearchMetricsRequest)
}

inline void DeleteAnnotationSearchMetricsRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

DeleteAnnotationSearchMetricsRequest::~DeleteAnnotationSearchMetricsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteAnnotationSearchMetricsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteAnnotationSearchMetricsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteAnnotationSearchMetricsRequest::ArenaDtor(void* object) {
  DeleteAnnotationSearchMetricsRequest* _this = reinterpret_cast< DeleteAnnotationSearchMetricsRequest* >(object);
  (void)_this;
}
void DeleteAnnotationSearchMetricsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteAnnotationSearchMetricsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteAnnotationSearchMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteAnnotationSearchMetricsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteAnnotationSearchMetricsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteAnnotationSearchMetricsRequest.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteAnnotationSearchMetricsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteAnnotationSearchMetricsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteAnnotationSearchMetricsRequest.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteAnnotationSearchMetricsRequest)
  return target;
}

size_t DeleteAnnotationSearchMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteAnnotationSearchMetricsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteAnnotationSearchMetricsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteAnnotationSearchMetricsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteAnnotationSearchMetricsRequest::GetClassData() const { return &_class_data_; }

void DeleteAnnotationSearchMetricsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteAnnotationSearchMetricsRequest *>(to)->MergeFrom(
      static_cast<const DeleteAnnotationSearchMetricsRequest &>(from));
}


void DeleteAnnotationSearchMetricsRequest::MergeFrom(const DeleteAnnotationSearchMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteAnnotationSearchMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteAnnotationSearchMetricsRequest::CopyFrom(const DeleteAnnotationSearchMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteAnnotationSearchMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAnnotationSearchMetricsRequest::IsInitialized() const {
  return true;
}

void DeleteAnnotationSearchMetricsRequest::InternalSwap(DeleteAnnotationSearchMetricsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteAnnotationSearchMetricsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[167]);
}

// ===================================================================

class PostInputsSearchesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostInputsSearchesRequest* msg);
  static const ::clarifai::api::Pagination& pagination(const PostInputsSearchesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostInputsSearchesRequest::_Internal::user_app_id(const PostInputsSearchesRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::Pagination&
PostInputsSearchesRequest::_Internal::pagination(const PostInputsSearchesRequest* msg) {
  return *msg->pagination_;
}
void PostInputsSearchesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostInputsSearchesRequest::clear_searches() {
  searches_.Clear();
}
PostInputsSearchesRequest::PostInputsSearchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  searches_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostInputsSearchesRequest)
}
PostInputsSearchesRequest::PostInputsSearchesRequest(const PostInputsSearchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      searches_(from.searches_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_pagination()) {
    pagination_ = new ::clarifai::api::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostInputsSearchesRequest)
}

inline void PostInputsSearchesRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pagination_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(pagination_));
}

PostInputsSearchesRequest::~PostInputsSearchesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostInputsSearchesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostInputsSearchesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete pagination_;
}

void PostInputsSearchesRequest::ArenaDtor(void* object) {
  PostInputsSearchesRequest* _this = reinterpret_cast< PostInputsSearchesRequest* >(object);
  (void)_this;
}
void PostInputsSearchesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostInputsSearchesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostInputsSearchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostInputsSearchesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  searches_.Clear();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostInputsSearchesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Search searches = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_searches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Pagination pagination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostInputsSearchesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostInputsSearchesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Search searches = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_searches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_searches(i), target, stream);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->_internal_has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pagination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostInputsSearchesRequest)
  return target;
}

size_t PostInputsSearchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostInputsSearchesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Search searches = 2;
  total_size += 1UL * this->_internal_searches_size();
  for (const auto& msg : this->searches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.Pagination pagination = 3;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostInputsSearchesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostInputsSearchesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostInputsSearchesRequest::GetClassData() const { return &_class_data_; }

void PostInputsSearchesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostInputsSearchesRequest *>(to)->MergeFrom(
      static_cast<const PostInputsSearchesRequest &>(from));
}


void PostInputsSearchesRequest::MergeFrom(const PostInputsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostInputsSearchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  searches_.MergeFrom(from.searches_);
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_has_pagination()) {
    _internal_mutable_pagination()->::clarifai::api::Pagination::MergeFrom(from._internal_pagination());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostInputsSearchesRequest::CopyFrom(const PostInputsSearchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostInputsSearchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostInputsSearchesRequest::IsInitialized() const {
  return true;
}

void PostInputsSearchesRequest::InternalSwap(PostInputsSearchesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  searches_.InternalSwap(&other->searches_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostInputsSearchesRequest, pagination_)
      + sizeof(PostInputsSearchesRequest::pagination_)
      - PROTOBUF_FIELD_OFFSET(PostInputsSearchesRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostInputsSearchesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[168]);
}

// ===================================================================

class SingleSearchResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleSearchResponse* msg);
  static const ::clarifai::api::Search& search(const SingleSearchResponse* msg);
};

const ::clarifai::api::status::Status&
SingleSearchResponse::_Internal::status(const SingleSearchResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::Search&
SingleSearchResponse::_Internal::search(const SingleSearchResponse* msg) {
  return *msg->search_;
}
void SingleSearchResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleSearchResponse::clear_search() {
  if (GetArenaForAllocation() == nullptr && search_ != nullptr) {
    delete search_;
  }
  search_ = nullptr;
}
SingleSearchResponse::SingleSearchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleSearchResponse)
}
SingleSearchResponse::SingleSearchResponse(const SingleSearchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_search()) {
    search_ = new ::clarifai::api::Search(*from.search_);
  } else {
    search_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleSearchResponse)
}

inline void SingleSearchResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&search_) -
    reinterpret_cast<char*>(&status_)) + sizeof(search_));
}

SingleSearchResponse::~SingleSearchResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleSearchResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SingleSearchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete search_;
}

void SingleSearchResponse::ArenaDtor(void* object) {
  SingleSearchResponse* _this = reinterpret_cast< SingleSearchResponse* >(object);
  (void)_this;
}
void SingleSearchResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleSearchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleSearchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleSearchResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && search_ != nullptr) {
    delete search_;
  }
  search_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleSearchResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Search search = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_search(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleSearchResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleSearchResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.Search search = 5;
  if (this->_internal_has_search()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::search(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleSearchResponse)
  return target;
}

size_t SingleSearchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleSearchResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.Search search = 5;
  if (this->_internal_has_search()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *search_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleSearchResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SingleSearchResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleSearchResponse::GetClassData() const { return &_class_data_; }

void SingleSearchResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SingleSearchResponse *>(to)->MergeFrom(
      static_cast<const SingleSearchResponse &>(from));
}


void SingleSearchResponse::MergeFrom(const SingleSearchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleSearchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_search()) {
    _internal_mutable_search()->::clarifai::api::Search::MergeFrom(from._internal_search());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleSearchResponse::CopyFrom(const SingleSearchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleSearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleSearchResponse::IsInitialized() const {
  return true;
}

void SingleSearchResponse::InternalSwap(SingleSearchResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleSearchResponse, search_)
      + sizeof(SingleSearchResponse::search_)
      - PROTOBUF_FIELD_OFFSET(SingleSearchResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleSearchResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[169]);
}

// ===================================================================

class MultiSearchResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiSearchResponse* msg);
  static const ::clarifai::api::Query& query(const MultiSearchResponse* msg);
};

const ::clarifai::api::status::Status&
MultiSearchResponse::_Internal::status(const MultiSearchResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::Query&
MultiSearchResponse::_Internal::query(const MultiSearchResponse* msg) {
  return *msg->query_;
}
void MultiSearchResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiSearchResponse::clear_hits() {
  hits_.Clear();
}
void MultiSearchResponse::clear_query() {
  if (GetArenaForAllocation() == nullptr && query_ != nullptr) {
    delete query_;
  }
  query_ = nullptr;
}
void MultiSearchResponse::clear_searches() {
  searches_.Clear();
}
MultiSearchResponse::MultiSearchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  hits_(arena),
  searches_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiSearchResponse)
}
MultiSearchResponse::MultiSearchResponse(const MultiSearchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hits_(from.hits_),
      searches_(from.searches_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_query()) {
    query_ = new ::clarifai::api::Query(*from.query_);
  } else {
    query_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiSearchResponse)
}

inline void MultiSearchResponse::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&query_) -
    reinterpret_cast<char*>(&status_)) + sizeof(query_));
}

MultiSearchResponse::~MultiSearchResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiSearchResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiSearchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete query_;
}

void MultiSearchResponse::ArenaDtor(void* object) {
  MultiSearchResponse* _this = reinterpret_cast< MultiSearchResponse* >(object);
  (void)_this;
}
void MultiSearchResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiSearchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiSearchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiSearchResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hits_.Clear();
  searches_.Clear();
  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && query_ != nullptr) {
    delete query_;
  }
  query_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiSearchResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.MultiSearchResponse.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Hit hits = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Query query = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Search searches = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_searches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiSearchResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiSearchResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.MultiSearchResponse.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // repeated .clarifai.api.Hit hits = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hits_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_hits(i), target, stream);
  }

  // .clarifai.api.Query query = 4;
  if (this->_internal_has_query()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::query(this), target, stream);
  }

  // repeated .clarifai.api.Search searches = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_searches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_searches(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiSearchResponse)
  return target;
}

size_t MultiSearchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiSearchResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Hit hits = 3 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_hits_size();
  for (const auto& msg : this->hits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Search searches = 5;
  total_size += 1UL * this->_internal_searches_size();
  for (const auto& msg : this->searches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.Query query = 4;
  if (this->_internal_has_query()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *query_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiSearchResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiSearchResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiSearchResponse::GetClassData() const { return &_class_data_; }

void MultiSearchResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiSearchResponse *>(to)->MergeFrom(
      static_cast<const MultiSearchResponse &>(from));
}


void MultiSearchResponse::MergeFrom(const MultiSearchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiSearchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  hits_.MergeFrom(from.hits_);
  searches_.MergeFrom(from.searches_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_query()) {
    _internal_mutable_query()->::clarifai::api::Query::MergeFrom(from._internal_query());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiSearchResponse::CopyFrom(const MultiSearchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiSearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiSearchResponse::IsInitialized() const {
  return true;
}

void MultiSearchResponse::InternalSwap(MultiSearchResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  hits_.InternalSwap(&other->hits_);
  searches_.InternalSwap(&other->searches_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MultiSearchResponse, query_)
      + sizeof(MultiSearchResponse::query_)
      - PROTOBUF_FIELD_OFFSET(MultiSearchResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiSearchResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[170]);
}

// ===================================================================

class PostAnnotationSearchMetricsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostAnnotationSearchMetricsRequest* msg);
  static const ::clarifai::api::Search& ground_truth(const PostAnnotationSearchMetricsRequest* msg);
  static const ::clarifai::api::Search& search_to_eval(const PostAnnotationSearchMetricsRequest* msg);
  static const ::clarifai::api::Data& data(const PostAnnotationSearchMetricsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostAnnotationSearchMetricsRequest::_Internal::user_app_id(const PostAnnotationSearchMetricsRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::Search&
PostAnnotationSearchMetricsRequest::_Internal::ground_truth(const PostAnnotationSearchMetricsRequest* msg) {
  return *msg->ground_truth_;
}
const ::clarifai::api::Search&
PostAnnotationSearchMetricsRequest::_Internal::search_to_eval(const PostAnnotationSearchMetricsRequest* msg) {
  return *msg->search_to_eval_;
}
const ::clarifai::api::Data&
PostAnnotationSearchMetricsRequest::_Internal::data(const PostAnnotationSearchMetricsRequest* msg) {
  return *msg->data_;
}
void PostAnnotationSearchMetricsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostAnnotationSearchMetricsRequest::clear_ground_truth() {
  if (GetArenaForAllocation() == nullptr && ground_truth_ != nullptr) {
    delete ground_truth_;
  }
  ground_truth_ = nullptr;
}
void PostAnnotationSearchMetricsRequest::clear_search_to_eval() {
  if (GetArenaForAllocation() == nullptr && search_to_eval_ != nullptr) {
    delete search_to_eval_;
  }
  search_to_eval_ = nullptr;
}
void PostAnnotationSearchMetricsRequest::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
PostAnnotationSearchMetricsRequest::PostAnnotationSearchMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostAnnotationSearchMetricsRequest)
}
PostAnnotationSearchMetricsRequest::PostAnnotationSearchMetricsRequest(const PostAnnotationSearchMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_ground_truth()) {
    ground_truth_ = new ::clarifai::api::Search(*from.ground_truth_);
  } else {
    ground_truth_ = nullptr;
  }
  if (from._internal_has_search_to_eval()) {
    search_to_eval_ = new ::clarifai::api::Search(*from.search_to_eval_);
  } else {
    search_to_eval_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::clarifai::api::Data(*from.data_);
  } else {
    data_ = nullptr;
  }
  evaluation_type_ = from.evaluation_type_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostAnnotationSearchMetricsRequest)
}

inline void PostAnnotationSearchMetricsRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&evaluation_type_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(evaluation_type_));
}

PostAnnotationSearchMetricsRequest::~PostAnnotationSearchMetricsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostAnnotationSearchMetricsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostAnnotationSearchMetricsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete ground_truth_;
  if (this != internal_default_instance()) delete search_to_eval_;
  if (this != internal_default_instance()) delete data_;
}

void PostAnnotationSearchMetricsRequest::ArenaDtor(void* object) {
  PostAnnotationSearchMetricsRequest* _this = reinterpret_cast< PostAnnotationSearchMetricsRequest* >(object);
  (void)_this;
}
void PostAnnotationSearchMetricsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostAnnotationSearchMetricsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostAnnotationSearchMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostAnnotationSearchMetricsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ground_truth_ != nullptr) {
    delete ground_truth_;
  }
  ground_truth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && search_to_eval_ != nullptr) {
    delete search_to_eval_;
  }
  search_to_eval_ = nullptr;
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  evaluation_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostAnnotationSearchMetricsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostAnnotationSearchMetricsRequest.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Search ground_truth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ground_truth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Search search_to_eval = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_search_to_eval(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Data data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.EvaluationType evaluation_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_evaluation_type(static_cast<::clarifai::api::EvaluationType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostAnnotationSearchMetricsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostAnnotationSearchMetricsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostAnnotationSearchMetricsRequest.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // .clarifai.api.Search ground_truth = 3;
  if (this->_internal_has_ground_truth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ground_truth(this), target, stream);
  }

  // .clarifai.api.Search search_to_eval = 4;
  if (this->_internal_has_search_to_eval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::search_to_eval(this), target, stream);
  }

  // .clarifai.api.Data data = 5;
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::data(this), target, stream);
  }

  // .clarifai.api.EvaluationType evaluation_type = 6;
  if (this->_internal_evaluation_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_evaluation_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostAnnotationSearchMetricsRequest)
  return target;
}

size_t PostAnnotationSearchMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostAnnotationSearchMetricsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.Search ground_truth = 3;
  if (this->_internal_has_ground_truth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ground_truth_);
  }

  // .clarifai.api.Search search_to_eval = 4;
  if (this->_internal_has_search_to_eval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *search_to_eval_);
  }

  // .clarifai.api.Data data = 5;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // .clarifai.api.EvaluationType evaluation_type = 6;
  if (this->_internal_evaluation_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_evaluation_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostAnnotationSearchMetricsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostAnnotationSearchMetricsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostAnnotationSearchMetricsRequest::GetClassData() const { return &_class_data_; }

void PostAnnotationSearchMetricsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostAnnotationSearchMetricsRequest *>(to)->MergeFrom(
      static_cast<const PostAnnotationSearchMetricsRequest &>(from));
}


void PostAnnotationSearchMetricsRequest::MergeFrom(const PostAnnotationSearchMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostAnnotationSearchMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_has_ground_truth()) {
    _internal_mutable_ground_truth()->::clarifai::api::Search::MergeFrom(from._internal_ground_truth());
  }
  if (from._internal_has_search_to_eval()) {
    _internal_mutable_search_to_eval()->::clarifai::api::Search::MergeFrom(from._internal_search_to_eval());
  }
  if (from._internal_has_data()) {
    _internal_mutable_data()->::clarifai::api::Data::MergeFrom(from._internal_data());
  }
  if (from._internal_evaluation_type() != 0) {
    _internal_set_evaluation_type(from._internal_evaluation_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostAnnotationSearchMetricsRequest::CopyFrom(const PostAnnotationSearchMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostAnnotationSearchMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostAnnotationSearchMetricsRequest::IsInitialized() const {
  return true;
}

void PostAnnotationSearchMetricsRequest::InternalSwap(PostAnnotationSearchMetricsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostAnnotationSearchMetricsRequest, evaluation_type_)
      + sizeof(PostAnnotationSearchMetricsRequest::evaluation_type_)
      - PROTOBUF_FIELD_OFFSET(PostAnnotationSearchMetricsRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostAnnotationSearchMetricsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[171]);
}

// ===================================================================

class GetAnnotationSearchMetricsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetAnnotationSearchMetricsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetAnnotationSearchMetricsRequest::_Internal::user_app_id(const GetAnnotationSearchMetricsRequest* msg) {
  return *msg->user_app_id_;
}
void GetAnnotationSearchMetricsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetAnnotationSearchMetricsRequest::GetAnnotationSearchMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetAnnotationSearchMetricsRequest)
}
GetAnnotationSearchMetricsRequest::GetAnnotationSearchMetricsRequest(const GetAnnotationSearchMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetAnnotationSearchMetricsRequest)
}

inline void GetAnnotationSearchMetricsRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

GetAnnotationSearchMetricsRequest::~GetAnnotationSearchMetricsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetAnnotationSearchMetricsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetAnnotationSearchMetricsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetAnnotationSearchMetricsRequest::ArenaDtor(void* object) {
  GetAnnotationSearchMetricsRequest* _this = reinterpret_cast< GetAnnotationSearchMetricsRequest* >(object);
  (void)_this;
}
void GetAnnotationSearchMetricsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAnnotationSearchMetricsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAnnotationSearchMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetAnnotationSearchMetricsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAnnotationSearchMetricsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetAnnotationSearchMetricsRequest.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAnnotationSearchMetricsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetAnnotationSearchMetricsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetAnnotationSearchMetricsRequest.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetAnnotationSearchMetricsRequest)
  return target;
}

size_t GetAnnotationSearchMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetAnnotationSearchMetricsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAnnotationSearchMetricsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetAnnotationSearchMetricsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAnnotationSearchMetricsRequest::GetClassData() const { return &_class_data_; }

void GetAnnotationSearchMetricsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetAnnotationSearchMetricsRequest *>(to)->MergeFrom(
      static_cast<const GetAnnotationSearchMetricsRequest &>(from));
}


void GetAnnotationSearchMetricsRequest::MergeFrom(const GetAnnotationSearchMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetAnnotationSearchMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAnnotationSearchMetricsRequest::CopyFrom(const GetAnnotationSearchMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetAnnotationSearchMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAnnotationSearchMetricsRequest::IsInitialized() const {
  return true;
}

void GetAnnotationSearchMetricsRequest::InternalSwap(GetAnnotationSearchMetricsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAnnotationSearchMetricsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[172]);
}

// ===================================================================

class ListAnnotationSearchMetricsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListAnnotationSearchMetricsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListAnnotationSearchMetricsRequest::_Internal::user_app_id(const ListAnnotationSearchMetricsRequest* msg) {
  return *msg->user_app_id_;
}
void ListAnnotationSearchMetricsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListAnnotationSearchMetricsRequest::ListAnnotationSearchMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListAnnotationSearchMetricsRequest)
}
ListAnnotationSearchMetricsRequest::ListAnnotationSearchMetricsRequest(const ListAnnotationSearchMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListAnnotationSearchMetricsRequest)
}

inline void ListAnnotationSearchMetricsRequest::SharedCtor() {
user_app_id_ = nullptr;
}

ListAnnotationSearchMetricsRequest::~ListAnnotationSearchMetricsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListAnnotationSearchMetricsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListAnnotationSearchMetricsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListAnnotationSearchMetricsRequest::ArenaDtor(void* object) {
  ListAnnotationSearchMetricsRequest* _this = reinterpret_cast< ListAnnotationSearchMetricsRequest* >(object);
  (void)_this;
}
void ListAnnotationSearchMetricsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListAnnotationSearchMetricsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListAnnotationSearchMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListAnnotationSearchMetricsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListAnnotationSearchMetricsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListAnnotationSearchMetricsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListAnnotationSearchMetricsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListAnnotationSearchMetricsRequest)
  return target;
}

size_t ListAnnotationSearchMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListAnnotationSearchMetricsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListAnnotationSearchMetricsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListAnnotationSearchMetricsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListAnnotationSearchMetricsRequest::GetClassData() const { return &_class_data_; }

void ListAnnotationSearchMetricsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListAnnotationSearchMetricsRequest *>(to)->MergeFrom(
      static_cast<const ListAnnotationSearchMetricsRequest &>(from));
}


void ListAnnotationSearchMetricsRequest::MergeFrom(const ListAnnotationSearchMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListAnnotationSearchMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListAnnotationSearchMetricsRequest::CopyFrom(const ListAnnotationSearchMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListAnnotationSearchMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAnnotationSearchMetricsRequest::IsInitialized() const {
  return true;
}

void ListAnnotationSearchMetricsRequest::InternalSwap(ListAnnotationSearchMetricsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAnnotationSearchMetricsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[173]);
}

// ===================================================================

class MultiAnnotationSearchMetricsResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiAnnotationSearchMetricsResponse* msg);
};

const ::clarifai::api::status::Status&
MultiAnnotationSearchMetricsResponse::_Internal::status(const MultiAnnotationSearchMetricsResponse* msg) {
  return *msg->status_;
}
void MultiAnnotationSearchMetricsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiAnnotationSearchMetricsResponse::clear_annotation_search_metrics() {
  annotation_search_metrics_.Clear();
}
MultiAnnotationSearchMetricsResponse::MultiAnnotationSearchMetricsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  annotation_search_metrics_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiAnnotationSearchMetricsResponse)
}
MultiAnnotationSearchMetricsResponse::MultiAnnotationSearchMetricsResponse(const MultiAnnotationSearchMetricsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      annotation_search_metrics_(from.annotation_search_metrics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiAnnotationSearchMetricsResponse)
}

inline void MultiAnnotationSearchMetricsResponse::SharedCtor() {
status_ = nullptr;
}

MultiAnnotationSearchMetricsResponse::~MultiAnnotationSearchMetricsResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiAnnotationSearchMetricsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiAnnotationSearchMetricsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiAnnotationSearchMetricsResponse::ArenaDtor(void* object) {
  MultiAnnotationSearchMetricsResponse* _this = reinterpret_cast< MultiAnnotationSearchMetricsResponse* >(object);
  (void)_this;
}
void MultiAnnotationSearchMetricsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiAnnotationSearchMetricsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiAnnotationSearchMetricsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiAnnotationSearchMetricsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotation_search_metrics_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiAnnotationSearchMetricsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.AnnotationSearchMetrics annotation_search_metrics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotation_search_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiAnnotationSearchMetricsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiAnnotationSearchMetricsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.AnnotationSearchMetrics annotation_search_metrics = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_annotation_search_metrics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_annotation_search_metrics(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiAnnotationSearchMetricsResponse)
  return target;
}

size_t MultiAnnotationSearchMetricsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiAnnotationSearchMetricsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.AnnotationSearchMetrics annotation_search_metrics = 2;
  total_size += 1UL * this->_internal_annotation_search_metrics_size();
  for (const auto& msg : this->annotation_search_metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiAnnotationSearchMetricsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiAnnotationSearchMetricsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiAnnotationSearchMetricsResponse::GetClassData() const { return &_class_data_; }

void MultiAnnotationSearchMetricsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiAnnotationSearchMetricsResponse *>(to)->MergeFrom(
      static_cast<const MultiAnnotationSearchMetricsResponse &>(from));
}


void MultiAnnotationSearchMetricsResponse::MergeFrom(const MultiAnnotationSearchMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiAnnotationSearchMetricsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  annotation_search_metrics_.MergeFrom(from.annotation_search_metrics_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiAnnotationSearchMetricsResponse::CopyFrom(const MultiAnnotationSearchMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiAnnotationSearchMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiAnnotationSearchMetricsResponse::IsInitialized() const {
  return true;
}

void MultiAnnotationSearchMetricsResponse::InternalSwap(MultiAnnotationSearchMetricsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  annotation_search_metrics_.InternalSwap(&other->annotation_search_metrics_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiAnnotationSearchMetricsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[174]);
}

// ===================================================================

class ListAnnotationFiltersRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListAnnotationFiltersRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListAnnotationFiltersRequest::_Internal::user_app_id(const ListAnnotationFiltersRequest* msg) {
  return *msg->user_app_id_;
}
void ListAnnotationFiltersRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListAnnotationFiltersRequest::ListAnnotationFiltersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListAnnotationFiltersRequest)
}
ListAnnotationFiltersRequest::ListAnnotationFiltersRequest(const ListAnnotationFiltersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListAnnotationFiltersRequest)
}

inline void ListAnnotationFiltersRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListAnnotationFiltersRequest::~ListAnnotationFiltersRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListAnnotationFiltersRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListAnnotationFiltersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListAnnotationFiltersRequest::ArenaDtor(void* object) {
  ListAnnotationFiltersRequest* _this = reinterpret_cast< ListAnnotationFiltersRequest* >(object);
  (void)_this;
}
void ListAnnotationFiltersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListAnnotationFiltersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListAnnotationFiltersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListAnnotationFiltersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListAnnotationFiltersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListAnnotationFiltersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListAnnotationFiltersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListAnnotationFiltersRequest)
  return target;
}

size_t ListAnnotationFiltersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListAnnotationFiltersRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListAnnotationFiltersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListAnnotationFiltersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListAnnotationFiltersRequest::GetClassData() const { return &_class_data_; }

void ListAnnotationFiltersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListAnnotationFiltersRequest *>(to)->MergeFrom(
      static_cast<const ListAnnotationFiltersRequest &>(from));
}


void ListAnnotationFiltersRequest::MergeFrom(const ListAnnotationFiltersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListAnnotationFiltersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListAnnotationFiltersRequest::CopyFrom(const ListAnnotationFiltersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListAnnotationFiltersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAnnotationFiltersRequest::IsInitialized() const {
  return true;
}

void ListAnnotationFiltersRequest::InternalSwap(ListAnnotationFiltersRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListAnnotationFiltersRequest, per_page_)
      + sizeof(ListAnnotationFiltersRequest::per_page_)
      - PROTOBUF_FIELD_OFFSET(ListAnnotationFiltersRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAnnotationFiltersRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[175]);
}

// ===================================================================

class GetAnnotationFilterRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetAnnotationFilterRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetAnnotationFilterRequest::_Internal::user_app_id(const GetAnnotationFilterRequest* msg) {
  return *msg->user_app_id_;
}
void GetAnnotationFilterRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetAnnotationFilterRequest::GetAnnotationFilterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetAnnotationFilterRequest)
}
GetAnnotationFilterRequest::GetAnnotationFilterRequest(const GetAnnotationFilterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  annotation_filter_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    annotation_filter_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_annotation_filter_id().empty()) {
    annotation_filter_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_annotation_filter_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetAnnotationFilterRequest)
}

inline void GetAnnotationFilterRequest::SharedCtor() {
annotation_filter_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  annotation_filter_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

GetAnnotationFilterRequest::~GetAnnotationFilterRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetAnnotationFilterRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetAnnotationFilterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  annotation_filter_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetAnnotationFilterRequest::ArenaDtor(void* object) {
  GetAnnotationFilterRequest* _this = reinterpret_cast< GetAnnotationFilterRequest* >(object);
  (void)_this;
}
void GetAnnotationFilterRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAnnotationFilterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAnnotationFilterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetAnnotationFilterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotation_filter_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAnnotationFilterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string annotation_filter_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_annotation_filter_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetAnnotationFilterRequest.annotation_filter_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAnnotationFilterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetAnnotationFilterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string annotation_filter_id = 2;
  if (!this->_internal_annotation_filter_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_annotation_filter_id().data(), static_cast<int>(this->_internal_annotation_filter_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetAnnotationFilterRequest.annotation_filter_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_annotation_filter_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetAnnotationFilterRequest)
  return target;
}

size_t GetAnnotationFilterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetAnnotationFilterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string annotation_filter_id = 2;
  if (!this->_internal_annotation_filter_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_annotation_filter_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAnnotationFilterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetAnnotationFilterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAnnotationFilterRequest::GetClassData() const { return &_class_data_; }

void GetAnnotationFilterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetAnnotationFilterRequest *>(to)->MergeFrom(
      static_cast<const GetAnnotationFilterRequest &>(from));
}


void GetAnnotationFilterRequest::MergeFrom(const GetAnnotationFilterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetAnnotationFilterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_annotation_filter_id().empty()) {
    _internal_set_annotation_filter_id(from._internal_annotation_filter_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAnnotationFilterRequest::CopyFrom(const GetAnnotationFilterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetAnnotationFilterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAnnotationFilterRequest::IsInitialized() const {
  return true;
}

void GetAnnotationFilterRequest::InternalSwap(GetAnnotationFilterRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &annotation_filter_id_, lhs_arena,
      &other->annotation_filter_id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAnnotationFilterRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[176]);
}

// ===================================================================

class PostAnnotationFiltersRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostAnnotationFiltersRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostAnnotationFiltersRequest::_Internal::user_app_id(const PostAnnotationFiltersRequest* msg) {
  return *msg->user_app_id_;
}
void PostAnnotationFiltersRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostAnnotationFiltersRequest::clear_annotation_filters() {
  annotation_filters_.Clear();
}
PostAnnotationFiltersRequest::PostAnnotationFiltersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  annotation_filters_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostAnnotationFiltersRequest)
}
PostAnnotationFiltersRequest::PostAnnotationFiltersRequest(const PostAnnotationFiltersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      annotation_filters_(from.annotation_filters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostAnnotationFiltersRequest)
}

inline void PostAnnotationFiltersRequest::SharedCtor() {
user_app_id_ = nullptr;
}

PostAnnotationFiltersRequest::~PostAnnotationFiltersRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostAnnotationFiltersRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostAnnotationFiltersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostAnnotationFiltersRequest::ArenaDtor(void* object) {
  PostAnnotationFiltersRequest* _this = reinterpret_cast< PostAnnotationFiltersRequest* >(object);
  (void)_this;
}
void PostAnnotationFiltersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostAnnotationFiltersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostAnnotationFiltersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostAnnotationFiltersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotation_filters_.Clear();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostAnnotationFiltersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.AnnotationFilter annotation_filters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotation_filters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostAnnotationFiltersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostAnnotationFiltersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.AnnotationFilter annotation_filters = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_annotation_filters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_annotation_filters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostAnnotationFiltersRequest)
  return target;
}

size_t PostAnnotationFiltersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostAnnotationFiltersRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.AnnotationFilter annotation_filters = 2;
  total_size += 1UL * this->_internal_annotation_filters_size();
  for (const auto& msg : this->annotation_filters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostAnnotationFiltersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostAnnotationFiltersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostAnnotationFiltersRequest::GetClassData() const { return &_class_data_; }

void PostAnnotationFiltersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostAnnotationFiltersRequest *>(to)->MergeFrom(
      static_cast<const PostAnnotationFiltersRequest &>(from));
}


void PostAnnotationFiltersRequest::MergeFrom(const PostAnnotationFiltersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostAnnotationFiltersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  annotation_filters_.MergeFrom(from.annotation_filters_);
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostAnnotationFiltersRequest::CopyFrom(const PostAnnotationFiltersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostAnnotationFiltersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostAnnotationFiltersRequest::IsInitialized() const {
  return true;
}

void PostAnnotationFiltersRequest::InternalSwap(PostAnnotationFiltersRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  annotation_filters_.InternalSwap(&other->annotation_filters_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostAnnotationFiltersRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[177]);
}

// ===================================================================

class PatchAnnotationFiltersRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchAnnotationFiltersRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchAnnotationFiltersRequest::_Internal::user_app_id(const PatchAnnotationFiltersRequest* msg) {
  return *msg->user_app_id_;
}
void PatchAnnotationFiltersRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchAnnotationFiltersRequest::clear_annotation_filters() {
  annotation_filters_.Clear();
}
PatchAnnotationFiltersRequest::PatchAnnotationFiltersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  annotation_filters_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchAnnotationFiltersRequest)
}
PatchAnnotationFiltersRequest::PatchAnnotationFiltersRequest(const PatchAnnotationFiltersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      annotation_filters_(from.annotation_filters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchAnnotationFiltersRequest)
}

inline void PatchAnnotationFiltersRequest::SharedCtor() {
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

PatchAnnotationFiltersRequest::~PatchAnnotationFiltersRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchAnnotationFiltersRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PatchAnnotationFiltersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchAnnotationFiltersRequest::ArenaDtor(void* object) {
  PatchAnnotationFiltersRequest* _this = reinterpret_cast< PatchAnnotationFiltersRequest* >(object);
  (void)_this;
}
void PatchAnnotationFiltersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatchAnnotationFiltersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PatchAnnotationFiltersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchAnnotationFiltersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotation_filters_.Clear();
  action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchAnnotationFiltersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.AnnotationFilter annotation_filters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotation_filters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchAnnotationFiltersRequest.action"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchAnnotationFiltersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchAnnotationFiltersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.AnnotationFilter annotation_filters = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_annotation_filters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_annotation_filters(i), target, stream);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchAnnotationFiltersRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchAnnotationFiltersRequest)
  return target;
}

size_t PatchAnnotationFiltersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchAnnotationFiltersRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.AnnotationFilter annotation_filters = 2;
  total_size += 1UL * this->_internal_annotation_filters_size();
  for (const auto& msg : this->annotation_filters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchAnnotationFiltersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PatchAnnotationFiltersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchAnnotationFiltersRequest::GetClassData() const { return &_class_data_; }

void PatchAnnotationFiltersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PatchAnnotationFiltersRequest *>(to)->MergeFrom(
      static_cast<const PatchAnnotationFiltersRequest &>(from));
}


void PatchAnnotationFiltersRequest::MergeFrom(const PatchAnnotationFiltersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchAnnotationFiltersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  annotation_filters_.MergeFrom(from.annotation_filters_);
  if (!from._internal_action().empty()) {
    _internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchAnnotationFiltersRequest::CopyFrom(const PatchAnnotationFiltersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchAnnotationFiltersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchAnnotationFiltersRequest::IsInitialized() const {
  return true;
}

void PatchAnnotationFiltersRequest::InternalSwap(PatchAnnotationFiltersRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  annotation_filters_.InternalSwap(&other->annotation_filters_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_, lhs_arena,
      &other->action_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchAnnotationFiltersRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[178]);
}

// ===================================================================

class DeleteAnnotationFiltersRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteAnnotationFiltersRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteAnnotationFiltersRequest::_Internal::user_app_id(const DeleteAnnotationFiltersRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteAnnotationFiltersRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteAnnotationFiltersRequest::DeleteAnnotationFiltersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  annotation_filter_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteAnnotationFiltersRequest)
}
DeleteAnnotationFiltersRequest::DeleteAnnotationFiltersRequest(const DeleteAnnotationFiltersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      annotation_filter_ids_(from.annotation_filter_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteAnnotationFiltersRequest)
}

inline void DeleteAnnotationFiltersRequest::SharedCtor() {
user_app_id_ = nullptr;
}

DeleteAnnotationFiltersRequest::~DeleteAnnotationFiltersRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteAnnotationFiltersRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteAnnotationFiltersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteAnnotationFiltersRequest::ArenaDtor(void* object) {
  DeleteAnnotationFiltersRequest* _this = reinterpret_cast< DeleteAnnotationFiltersRequest* >(object);
  (void)_this;
}
void DeleteAnnotationFiltersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteAnnotationFiltersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteAnnotationFiltersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteAnnotationFiltersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotation_filter_ids_.Clear();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteAnnotationFiltersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string annotation_filter_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_annotation_filter_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteAnnotationFiltersRequest.annotation_filter_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteAnnotationFiltersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteAnnotationFiltersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated string annotation_filter_ids = 2;
  for (int i = 0, n = this->_internal_annotation_filter_ids_size(); i < n; i++) {
    const auto& s = this->_internal_annotation_filter_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteAnnotationFiltersRequest.annotation_filter_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteAnnotationFiltersRequest)
  return target;
}

size_t DeleteAnnotationFiltersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteAnnotationFiltersRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string annotation_filter_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(annotation_filter_ids_.size());
  for (int i = 0, n = annotation_filter_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      annotation_filter_ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteAnnotationFiltersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteAnnotationFiltersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteAnnotationFiltersRequest::GetClassData() const { return &_class_data_; }

void DeleteAnnotationFiltersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteAnnotationFiltersRequest *>(to)->MergeFrom(
      static_cast<const DeleteAnnotationFiltersRequest &>(from));
}


void DeleteAnnotationFiltersRequest::MergeFrom(const DeleteAnnotationFiltersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteAnnotationFiltersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  annotation_filter_ids_.MergeFrom(from.annotation_filter_ids_);
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteAnnotationFiltersRequest::CopyFrom(const DeleteAnnotationFiltersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteAnnotationFiltersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAnnotationFiltersRequest::IsInitialized() const {
  return true;
}

void DeleteAnnotationFiltersRequest::InternalSwap(DeleteAnnotationFiltersRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  annotation_filter_ids_.InternalSwap(&other->annotation_filter_ids_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteAnnotationFiltersRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[179]);
}

// ===================================================================

class MultiAnnotationFilterResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiAnnotationFilterResponse* msg);
};

const ::clarifai::api::status::Status&
MultiAnnotationFilterResponse::_Internal::status(const MultiAnnotationFilterResponse* msg) {
  return *msg->status_;
}
void MultiAnnotationFilterResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiAnnotationFilterResponse::clear_annotation_filters() {
  annotation_filters_.Clear();
}
MultiAnnotationFilterResponse::MultiAnnotationFilterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  annotation_filters_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiAnnotationFilterResponse)
}
MultiAnnotationFilterResponse::MultiAnnotationFilterResponse(const MultiAnnotationFilterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      annotation_filters_(from.annotation_filters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiAnnotationFilterResponse)
}

inline void MultiAnnotationFilterResponse::SharedCtor() {
status_ = nullptr;
}

MultiAnnotationFilterResponse::~MultiAnnotationFilterResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiAnnotationFilterResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiAnnotationFilterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiAnnotationFilterResponse::ArenaDtor(void* object) {
  MultiAnnotationFilterResponse* _this = reinterpret_cast< MultiAnnotationFilterResponse* >(object);
  (void)_this;
}
void MultiAnnotationFilterResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiAnnotationFilterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiAnnotationFilterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiAnnotationFilterResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotation_filters_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiAnnotationFilterResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.AnnotationFilter annotation_filters = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotation_filters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiAnnotationFilterResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiAnnotationFilterResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.AnnotationFilter annotation_filters = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_annotation_filters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_annotation_filters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiAnnotationFilterResponse)
  return target;
}

size_t MultiAnnotationFilterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiAnnotationFilterResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.AnnotationFilter annotation_filters = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_annotation_filters_size();
  for (const auto& msg : this->annotation_filters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiAnnotationFilterResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiAnnotationFilterResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiAnnotationFilterResponse::GetClassData() const { return &_class_data_; }

void MultiAnnotationFilterResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiAnnotationFilterResponse *>(to)->MergeFrom(
      static_cast<const MultiAnnotationFilterResponse &>(from));
}


void MultiAnnotationFilterResponse::MergeFrom(const MultiAnnotationFilterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiAnnotationFilterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  annotation_filters_.MergeFrom(from.annotation_filters_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiAnnotationFilterResponse::CopyFrom(const MultiAnnotationFilterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiAnnotationFilterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiAnnotationFilterResponse::IsInitialized() const {
  return true;
}

void MultiAnnotationFilterResponse::InternalSwap(MultiAnnotationFilterResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  annotation_filters_.InternalSwap(&other->annotation_filters_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiAnnotationFilterResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[180]);
}

// ===================================================================

class SingleAnnotationFilterResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleAnnotationFilterResponse* msg);
  static const ::clarifai::api::AnnotationFilter& annotation_filter(const SingleAnnotationFilterResponse* msg);
};

const ::clarifai::api::status::Status&
SingleAnnotationFilterResponse::_Internal::status(const SingleAnnotationFilterResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::AnnotationFilter&
SingleAnnotationFilterResponse::_Internal::annotation_filter(const SingleAnnotationFilterResponse* msg) {
  return *msg->annotation_filter_;
}
void SingleAnnotationFilterResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleAnnotationFilterResponse::clear_annotation_filter() {
  if (GetArenaForAllocation() == nullptr && annotation_filter_ != nullptr) {
    delete annotation_filter_;
  }
  annotation_filter_ = nullptr;
}
SingleAnnotationFilterResponse::SingleAnnotationFilterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleAnnotationFilterResponse)
}
SingleAnnotationFilterResponse::SingleAnnotationFilterResponse(const SingleAnnotationFilterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_annotation_filter()) {
    annotation_filter_ = new ::clarifai::api::AnnotationFilter(*from.annotation_filter_);
  } else {
    annotation_filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleAnnotationFilterResponse)
}

inline void SingleAnnotationFilterResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&annotation_filter_) -
    reinterpret_cast<char*>(&status_)) + sizeof(annotation_filter_));
}

SingleAnnotationFilterResponse::~SingleAnnotationFilterResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleAnnotationFilterResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SingleAnnotationFilterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete annotation_filter_;
}

void SingleAnnotationFilterResponse::ArenaDtor(void* object) {
  SingleAnnotationFilterResponse* _this = reinterpret_cast< SingleAnnotationFilterResponse* >(object);
  (void)_this;
}
void SingleAnnotationFilterResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleAnnotationFilterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleAnnotationFilterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleAnnotationFilterResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && annotation_filter_ != nullptr) {
    delete annotation_filter_;
  }
  annotation_filter_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleAnnotationFilterResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.AnnotationFilter annotation_filter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleAnnotationFilterResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleAnnotationFilterResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.AnnotationFilter annotation_filter = 2;
  if (this->_internal_has_annotation_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::annotation_filter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleAnnotationFilterResponse)
  return target;
}

size_t SingleAnnotationFilterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleAnnotationFilterResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.AnnotationFilter annotation_filter = 2;
  if (this->_internal_has_annotation_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *annotation_filter_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleAnnotationFilterResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SingleAnnotationFilterResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleAnnotationFilterResponse::GetClassData() const { return &_class_data_; }

void SingleAnnotationFilterResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SingleAnnotationFilterResponse *>(to)->MergeFrom(
      static_cast<const SingleAnnotationFilterResponse &>(from));
}


void SingleAnnotationFilterResponse::MergeFrom(const SingleAnnotationFilterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleAnnotationFilterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_annotation_filter()) {
    _internal_mutable_annotation_filter()->::clarifai::api::AnnotationFilter::MergeFrom(from._internal_annotation_filter());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleAnnotationFilterResponse::CopyFrom(const SingleAnnotationFilterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleAnnotationFilterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleAnnotationFilterResponse::IsInitialized() const {
  return true;
}

void SingleAnnotationFilterResponse::InternalSwap(SingleAnnotationFilterResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleAnnotationFilterResponse, annotation_filter_)
      + sizeof(SingleAnnotationFilterResponse::annotation_filter_)
      - PROTOBUF_FIELD_OFFSET(SingleAnnotationFilterResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleAnnotationFilterResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[181]);
}

// ===================================================================

class PostValidatePasswordRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostValidatePasswordRequest* msg);
  static const ::clarifai::api::Password& password(const PostValidatePasswordRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostValidatePasswordRequest::_Internal::user_app_id(const PostValidatePasswordRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::Password&
PostValidatePasswordRequest::_Internal::password(const PostValidatePasswordRequest* msg) {
  return *msg->password_;
}
void PostValidatePasswordRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostValidatePasswordRequest::clear_password() {
  if (GetArenaForAllocation() == nullptr && password_ != nullptr) {
    delete password_;
  }
  password_ = nullptr;
}
PostValidatePasswordRequest::PostValidatePasswordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostValidatePasswordRequest)
}
PostValidatePasswordRequest::PostValidatePasswordRequest(const PostValidatePasswordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_password()) {
    password_ = new ::clarifai::api::Password(*from.password_);
  } else {
    password_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostValidatePasswordRequest)
}

inline void PostValidatePasswordRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&password_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(password_));
}

PostValidatePasswordRequest::~PostValidatePasswordRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostValidatePasswordRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostValidatePasswordRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete password_;
}

void PostValidatePasswordRequest::ArenaDtor(void* object) {
  PostValidatePasswordRequest* _this = reinterpret_cast< PostValidatePasswordRequest* >(object);
  (void)_this;
}
void PostValidatePasswordRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostValidatePasswordRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostValidatePasswordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostValidatePasswordRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && password_ != nullptr) {
    delete password_;
  }
  password_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostValidatePasswordRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Password password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_password(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostValidatePasswordRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostValidatePasswordRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // .clarifai.api.Password password = 2;
  if (this->_internal_has_password()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::password(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostValidatePasswordRequest)
  return target;
}

size_t PostValidatePasswordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostValidatePasswordRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.Password password = 2;
  if (this->_internal_has_password()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *password_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostValidatePasswordRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostValidatePasswordRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostValidatePasswordRequest::GetClassData() const { return &_class_data_; }

void PostValidatePasswordRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostValidatePasswordRequest *>(to)->MergeFrom(
      static_cast<const PostValidatePasswordRequest &>(from));
}


void PostValidatePasswordRequest::MergeFrom(const PostValidatePasswordRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostValidatePasswordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_has_password()) {
    _internal_mutable_password()->::clarifai::api::Password::MergeFrom(from._internal_password());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostValidatePasswordRequest::CopyFrom(const PostValidatePasswordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostValidatePasswordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostValidatePasswordRequest::IsInitialized() const {
  return true;
}

void PostValidatePasswordRequest::InternalSwap(PostValidatePasswordRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostValidatePasswordRequest, password_)
      + sizeof(PostValidatePasswordRequest::password_)
      - PROTOBUF_FIELD_OFFSET(PostValidatePasswordRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostValidatePasswordRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[182]);
}

// ===================================================================

class SinglePasswordValidationResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SinglePasswordValidationResponse* msg);
  static const ::clarifai::api::PasswordViolations& password_violations(const SinglePasswordValidationResponse* msg);
};

const ::clarifai::api::status::Status&
SinglePasswordValidationResponse::_Internal::status(const SinglePasswordValidationResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::PasswordViolations&
SinglePasswordValidationResponse::_Internal::password_violations(const SinglePasswordValidationResponse* msg) {
  return *msg->password_violations_;
}
void SinglePasswordValidationResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SinglePasswordValidationResponse::clear_password_violations() {
  if (GetArenaForAllocation() == nullptr && password_violations_ != nullptr) {
    delete password_violations_;
  }
  password_violations_ = nullptr;
}
SinglePasswordValidationResponse::SinglePasswordValidationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SinglePasswordValidationResponse)
}
SinglePasswordValidationResponse::SinglePasswordValidationResponse(const SinglePasswordValidationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_password_violations()) {
    password_violations_ = new ::clarifai::api::PasswordViolations(*from.password_violations_);
  } else {
    password_violations_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SinglePasswordValidationResponse)
}

inline void SinglePasswordValidationResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&password_violations_) -
    reinterpret_cast<char*>(&status_)) + sizeof(password_violations_));
}

SinglePasswordValidationResponse::~SinglePasswordValidationResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SinglePasswordValidationResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SinglePasswordValidationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete password_violations_;
}

void SinglePasswordValidationResponse::ArenaDtor(void* object) {
  SinglePasswordValidationResponse* _this = reinterpret_cast< SinglePasswordValidationResponse* >(object);
  (void)_this;
}
void SinglePasswordValidationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SinglePasswordValidationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SinglePasswordValidationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SinglePasswordValidationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && password_violations_ != nullptr) {
    delete password_violations_;
  }
  password_violations_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SinglePasswordValidationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.PasswordViolations password_violations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_password_violations(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SinglePasswordValidationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SinglePasswordValidationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.PasswordViolations password_violations = 2;
  if (this->_internal_has_password_violations()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::password_violations(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SinglePasswordValidationResponse)
  return target;
}

size_t SinglePasswordValidationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SinglePasswordValidationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.PasswordViolations password_violations = 2;
  if (this->_internal_has_password_violations()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *password_violations_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SinglePasswordValidationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SinglePasswordValidationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SinglePasswordValidationResponse::GetClassData() const { return &_class_data_; }

void SinglePasswordValidationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SinglePasswordValidationResponse *>(to)->MergeFrom(
      static_cast<const SinglePasswordValidationResponse &>(from));
}


void SinglePasswordValidationResponse::MergeFrom(const SinglePasswordValidationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SinglePasswordValidationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_password_violations()) {
    _internal_mutable_password_violations()->::clarifai::api::PasswordViolations::MergeFrom(from._internal_password_violations());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SinglePasswordValidationResponse::CopyFrom(const SinglePasswordValidationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SinglePasswordValidationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SinglePasswordValidationResponse::IsInitialized() const {
  return true;
}

void SinglePasswordValidationResponse::InternalSwap(SinglePasswordValidationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SinglePasswordValidationResponse, password_violations_)
      + sizeof(SinglePasswordValidationResponse::password_violations_)
      - PROTOBUF_FIELD_OFFSET(SinglePasswordValidationResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SinglePasswordValidationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[183]);
}

// ===================================================================

class GetWorkflowRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetWorkflowRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetWorkflowRequest::_Internal::user_app_id(const GetWorkflowRequest* msg) {
  return *msg->user_app_id_;
}
void GetWorkflowRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetWorkflowRequest::GetWorkflowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  additional_fields_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetWorkflowRequest)
}
GetWorkflowRequest::GetWorkflowRequest(const GetWorkflowRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      additional_fields_(from.additional_fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workflow_id().empty()) {
    workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_workflow_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&favor_clarifai_workflows_, &from.favor_clarifai_workflows_,
    static_cast<size_t>(reinterpret_cast<char*>(&exclude_clarifai_workflows_) -
    reinterpret_cast<char*>(&favor_clarifai_workflows_)) + sizeof(exclude_clarifai_workflows_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetWorkflowRequest)
}

inline void GetWorkflowRequest::SharedCtor() {
workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&exclude_clarifai_workflows_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(exclude_clarifai_workflows_));
}

GetWorkflowRequest::~GetWorkflowRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetWorkflowRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetWorkflowRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  workflow_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetWorkflowRequest::ArenaDtor(void* object) {
  GetWorkflowRequest* _this = reinterpret_cast< GetWorkflowRequest* >(object);
  (void)_this;
}
void GetWorkflowRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetWorkflowRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetWorkflowRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetWorkflowRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_fields_.Clear();
  workflow_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&favor_clarifai_workflows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exclude_clarifai_workflows_) -
      reinterpret_cast<char*>(&favor_clarifai_workflows_)) + sizeof(exclude_clarifai_workflows_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWorkflowRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string workflow_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_workflow_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetWorkflowRequest.workflow_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool favor_clarifai_workflows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          favor_clarifai_workflows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string additional_fields = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_additional_fields();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetWorkflowRequest.additional_fields"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool exclude_clarifai_workflows = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          exclude_clarifai_workflows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetWorkflowRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetWorkflowRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_id().data(), static_cast<int>(this->_internal_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetWorkflowRequest.workflow_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_workflow_id(), target);
  }

  // bool favor_clarifai_workflows = 3;
  if (this->_internal_favor_clarifai_workflows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_favor_clarifai_workflows(), target);
  }

  // repeated string additional_fields = 4;
  for (int i = 0, n = this->_internal_additional_fields_size(); i < n; i++) {
    const auto& s = this->_internal_additional_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetWorkflowRequest.additional_fields");
    target = stream->WriteString(4, s, target);
  }

  // bool exclude_clarifai_workflows = 5;
  if (this->_internal_exclude_clarifai_workflows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_exclude_clarifai_workflows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetWorkflowRequest)
  return target;
}

size_t GetWorkflowRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetWorkflowRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string additional_fields = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(additional_fields_.size());
  for (int i = 0, n = additional_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      additional_fields_.Get(i));
  }

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // bool favor_clarifai_workflows = 3;
  if (this->_internal_favor_clarifai_workflows() != 0) {
    total_size += 1 + 1;
  }

  // bool exclude_clarifai_workflows = 5;
  if (this->_internal_exclude_clarifai_workflows() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetWorkflowRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetWorkflowRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetWorkflowRequest::GetClassData() const { return &_class_data_; }

void GetWorkflowRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetWorkflowRequest *>(to)->MergeFrom(
      static_cast<const GetWorkflowRequest &>(from));
}


void GetWorkflowRequest::MergeFrom(const GetWorkflowRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetWorkflowRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  additional_fields_.MergeFrom(from.additional_fields_);
  if (!from._internal_workflow_id().empty()) {
    _internal_set_workflow_id(from._internal_workflow_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_favor_clarifai_workflows() != 0) {
    _internal_set_favor_clarifai_workflows(from._internal_favor_clarifai_workflows());
  }
  if (from._internal_exclude_clarifai_workflows() != 0) {
    _internal_set_exclude_clarifai_workflows(from._internal_exclude_clarifai_workflows());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetWorkflowRequest::CopyFrom(const GetWorkflowRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetWorkflowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWorkflowRequest::IsInitialized() const {
  return true;
}

void GetWorkflowRequest::InternalSwap(GetWorkflowRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  additional_fields_.InternalSwap(&other->additional_fields_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &workflow_id_, lhs_arena,
      &other->workflow_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetWorkflowRequest, exclude_clarifai_workflows_)
      + sizeof(GetWorkflowRequest::exclude_clarifai_workflows_)
      - PROTOBUF_FIELD_OFFSET(GetWorkflowRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWorkflowRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[184]);
}

// ===================================================================

class ListWorkflowsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListWorkflowsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListWorkflowsRequest::_Internal::user_app_id(const ListWorkflowsRequest* msg) {
  return *msg->user_app_id_;
}
void ListWorkflowsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListWorkflowsRequest::ListWorkflowsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  additional_fields_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListWorkflowsRequest)
}
ListWorkflowsRequest::ListWorkflowsRequest(const ListWorkflowsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      additional_fields_(from.additional_fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_query().empty()) {
    query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_query(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&starred_only_) -
    reinterpret_cast<char*>(&page_)) + sizeof(starred_only_));
  clear_has_sort_by();
  switch (from.sort_by_case()) {
    case kSortById: {
      _internal_set_sort_by_id(from._internal_sort_by_id());
      break;
    }
    case kSortByModifiedAt: {
      _internal_set_sort_by_modified_at(from._internal_sort_by_modified_at());
      break;
    }
    case SORT_BY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListWorkflowsRequest)
}

inline void ListWorkflowsRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&starred_only_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(starred_only_));
clear_has_sort_by();
}

ListWorkflowsRequest::~ListWorkflowsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListWorkflowsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListWorkflowsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
  if (has_sort_by()) {
    clear_sort_by();
  }
}

void ListWorkflowsRequest::ArenaDtor(void* object) {
  ListWorkflowsRequest* _this = reinterpret_cast< ListWorkflowsRequest* >(object);
  (void)_this;
}
void ListWorkflowsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListWorkflowsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListWorkflowsRequest::clear_sort_by() {
// @@protoc_insertion_point(one_of_clear_start:clarifai.api.ListWorkflowsRequest)
  switch (sort_by_case()) {
    case kSortById: {
      // No need to clear
      break;
    }
    case kSortByModifiedAt: {
      // No need to clear
      break;
    }
    case SORT_BY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SORT_BY_NOT_SET;
}


void ListWorkflowsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListWorkflowsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_fields_.Clear();
  id_.ClearToEmpty();
  query_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&starred_only_) -
      reinterpret_cast<char*>(&page_)) + sizeof(starred_only_));
  clear_sort_by();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListWorkflowsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListWorkflowsRequest.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool sort_ascending = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          sort_ascending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool sort_by_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _internal_set_sort_by_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool sort_by_modified_at = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _internal_set_sort_by_modified_at(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string query = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListWorkflowsRequest.query"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool featured_only = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          featured_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string additional_fields = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_additional_fields();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListWorkflowsRequest.additional_fields"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool starred_only = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          starred_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListWorkflowsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListWorkflowsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  // string id = 4 [deprecated = true];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListWorkflowsRequest.id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_id(), target);
  }

  // bool sort_ascending = 5;
  if (this->_internal_sort_ascending() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_sort_ascending(), target);
  }

  // bool sort_by_id = 6;
  if (_internal_has_sort_by_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_sort_by_id(), target);
  }

  // bool sort_by_modified_at = 7;
  if (_internal_has_sort_by_modified_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_sort_by_modified_at(), target);
  }

  // string query = 8;
  if (!this->_internal_query().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListWorkflowsRequest.query");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_query(), target);
  }

  // bool featured_only = 9;
  if (this->_internal_featured_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_featured_only(), target);
  }

  // repeated string additional_fields = 10;
  for (int i = 0, n = this->_internal_additional_fields_size(); i < n; i++) {
    const auto& s = this->_internal_additional_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListWorkflowsRequest.additional_fields");
    target = stream->WriteString(10, s, target);
  }

  // bool starred_only = 11;
  if (this->_internal_starred_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_starred_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListWorkflowsRequest)
  return target;
}

size_t ListWorkflowsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListWorkflowsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string additional_fields = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(additional_fields_.size());
  for (int i = 0, n = additional_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      additional_fields_.Get(i));
  }

  // string id = 4 [deprecated = true];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string query = 8;
  if (!this->_internal_query().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  // bool sort_ascending = 5;
  if (this->_internal_sort_ascending() != 0) {
    total_size += 1 + 1;
  }

  // bool featured_only = 9;
  if (this->_internal_featured_only() != 0) {
    total_size += 1 + 1;
  }

  // bool starred_only = 11;
  if (this->_internal_starred_only() != 0) {
    total_size += 1 + 1;
  }

  switch (sort_by_case()) {
    // bool sort_by_id = 6;
    case kSortById: {
      total_size += 1 + 1;
      break;
    }
    // bool sort_by_modified_at = 7;
    case kSortByModifiedAt: {
      total_size += 1 + 1;
      break;
    }
    case SORT_BY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListWorkflowsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListWorkflowsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListWorkflowsRequest::GetClassData() const { return &_class_data_; }

void ListWorkflowsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListWorkflowsRequest *>(to)->MergeFrom(
      static_cast<const ListWorkflowsRequest &>(from));
}


void ListWorkflowsRequest::MergeFrom(const ListWorkflowsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListWorkflowsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  additional_fields_.MergeFrom(from.additional_fields_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_query().empty()) {
    _internal_set_query(from._internal_query());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
  if (from._internal_sort_ascending() != 0) {
    _internal_set_sort_ascending(from._internal_sort_ascending());
  }
  if (from._internal_featured_only() != 0) {
    _internal_set_featured_only(from._internal_featured_only());
  }
  if (from._internal_starred_only() != 0) {
    _internal_set_starred_only(from._internal_starred_only());
  }
  switch (from.sort_by_case()) {
    case kSortById: {
      _internal_set_sort_by_id(from._internal_sort_by_id());
      break;
    }
    case kSortByModifiedAt: {
      _internal_set_sort_by_modified_at(from._internal_sort_by_modified_at());
      break;
    }
    case SORT_BY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListWorkflowsRequest::CopyFrom(const ListWorkflowsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListWorkflowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListWorkflowsRequest::IsInitialized() const {
  return true;
}

void ListWorkflowsRequest::InternalSwap(ListWorkflowsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  additional_fields_.InternalSwap(&other->additional_fields_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &query_, lhs_arena,
      &other->query_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListWorkflowsRequest, starred_only_)
      + sizeof(ListWorkflowsRequest::starred_only_)
      - PROTOBUF_FIELD_OFFSET(ListWorkflowsRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
  swap(sort_by_, other->sort_by_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListWorkflowsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[185]);
}

// ===================================================================

class PostWorkflowsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostWorkflowsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostWorkflowsRequest::_Internal::user_app_id(const PostWorkflowsRequest* msg) {
  return *msg->user_app_id_;
}
void PostWorkflowsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostWorkflowsRequest::clear_workflows() {
  workflows_.Clear();
}
PostWorkflowsRequest::PostWorkflowsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  workflows_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostWorkflowsRequest)
}
PostWorkflowsRequest::PostWorkflowsRequest(const PostWorkflowsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      workflows_(from.workflows_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostWorkflowsRequest)
}

inline void PostWorkflowsRequest::SharedCtor() {
user_app_id_ = nullptr;
}

PostWorkflowsRequest::~PostWorkflowsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostWorkflowsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostWorkflowsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostWorkflowsRequest::ArenaDtor(void* object) {
  PostWorkflowsRequest* _this = reinterpret_cast< PostWorkflowsRequest* >(object);
  (void)_this;
}
void PostWorkflowsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostWorkflowsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostWorkflowsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostWorkflowsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  workflows_.Clear();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostWorkflowsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Workflow workflows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_workflows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostWorkflowsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostWorkflowsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Workflow workflows = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_workflows_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_workflows(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostWorkflowsRequest)
  return target;
}

size_t PostWorkflowsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostWorkflowsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Workflow workflows = 2;
  total_size += 1UL * this->_internal_workflows_size();
  for (const auto& msg : this->workflows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostWorkflowsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostWorkflowsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostWorkflowsRequest::GetClassData() const { return &_class_data_; }

void PostWorkflowsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostWorkflowsRequest *>(to)->MergeFrom(
      static_cast<const PostWorkflowsRequest &>(from));
}


void PostWorkflowsRequest::MergeFrom(const PostWorkflowsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostWorkflowsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  workflows_.MergeFrom(from.workflows_);
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostWorkflowsRequest::CopyFrom(const PostWorkflowsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostWorkflowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostWorkflowsRequest::IsInitialized() const {
  return true;
}

void PostWorkflowsRequest::InternalSwap(PostWorkflowsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  workflows_.InternalSwap(&other->workflows_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostWorkflowsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[186]);
}

// ===================================================================

class PatchWorkflowsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchWorkflowsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchWorkflowsRequest::_Internal::user_app_id(const PatchWorkflowsRequest* msg) {
  return *msg->user_app_id_;
}
void PatchWorkflowsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchWorkflowsRequest::clear_workflows() {
  workflows_.Clear();
}
PatchWorkflowsRequest::PatchWorkflowsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  workflows_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchWorkflowsRequest)
}
PatchWorkflowsRequest::PatchWorkflowsRequest(const PatchWorkflowsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      workflows_(from.workflows_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchWorkflowsRequest)
}

inline void PatchWorkflowsRequest::SharedCtor() {
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

PatchWorkflowsRequest::~PatchWorkflowsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchWorkflowsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PatchWorkflowsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchWorkflowsRequest::ArenaDtor(void* object) {
  PatchWorkflowsRequest* _this = reinterpret_cast< PatchWorkflowsRequest* >(object);
  (void)_this;
}
void PatchWorkflowsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatchWorkflowsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PatchWorkflowsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchWorkflowsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  workflows_.Clear();
  action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchWorkflowsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Workflow workflows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_workflows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchWorkflowsRequest.action"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchWorkflowsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchWorkflowsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Workflow workflows = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_workflows_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_workflows(i), target, stream);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchWorkflowsRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchWorkflowsRequest)
  return target;
}

size_t PatchWorkflowsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchWorkflowsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Workflow workflows = 2;
  total_size += 1UL * this->_internal_workflows_size();
  for (const auto& msg : this->workflows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchWorkflowsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PatchWorkflowsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchWorkflowsRequest::GetClassData() const { return &_class_data_; }

void PatchWorkflowsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PatchWorkflowsRequest *>(to)->MergeFrom(
      static_cast<const PatchWorkflowsRequest &>(from));
}


void PatchWorkflowsRequest::MergeFrom(const PatchWorkflowsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchWorkflowsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  workflows_.MergeFrom(from.workflows_);
  if (!from._internal_action().empty()) {
    _internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchWorkflowsRequest::CopyFrom(const PatchWorkflowsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchWorkflowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchWorkflowsRequest::IsInitialized() const {
  return true;
}

void PatchWorkflowsRequest::InternalSwap(PatchWorkflowsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  workflows_.InternalSwap(&other->workflows_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_, lhs_arena,
      &other->action_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchWorkflowsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[187]);
}

// ===================================================================

class DeleteWorkflowRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteWorkflowRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteWorkflowRequest::_Internal::user_app_id(const DeleteWorkflowRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteWorkflowRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteWorkflowRequest::DeleteWorkflowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteWorkflowRequest)
}
DeleteWorkflowRequest::DeleteWorkflowRequest(const DeleteWorkflowRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workflow_id().empty()) {
    workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_workflow_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteWorkflowRequest)
}

inline void DeleteWorkflowRequest::SharedCtor() {
workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

DeleteWorkflowRequest::~DeleteWorkflowRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteWorkflowRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteWorkflowRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  workflow_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteWorkflowRequest::ArenaDtor(void* object) {
  DeleteWorkflowRequest* _this = reinterpret_cast< DeleteWorkflowRequest* >(object);
  (void)_this;
}
void DeleteWorkflowRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteWorkflowRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteWorkflowRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteWorkflowRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  workflow_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteWorkflowRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string workflow_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_workflow_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteWorkflowRequest.workflow_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteWorkflowRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteWorkflowRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_id().data(), static_cast<int>(this->_internal_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteWorkflowRequest.workflow_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_workflow_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteWorkflowRequest)
  return target;
}

size_t DeleteWorkflowRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteWorkflowRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteWorkflowRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteWorkflowRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteWorkflowRequest::GetClassData() const { return &_class_data_; }

void DeleteWorkflowRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteWorkflowRequest *>(to)->MergeFrom(
      static_cast<const DeleteWorkflowRequest &>(from));
}


void DeleteWorkflowRequest::MergeFrom(const DeleteWorkflowRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteWorkflowRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_workflow_id().empty()) {
    _internal_set_workflow_id(from._internal_workflow_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteWorkflowRequest::CopyFrom(const DeleteWorkflowRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteWorkflowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteWorkflowRequest::IsInitialized() const {
  return true;
}

void DeleteWorkflowRequest::InternalSwap(DeleteWorkflowRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &workflow_id_, lhs_arena,
      &other->workflow_id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteWorkflowRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[188]);
}

// ===================================================================

class DeleteWorkflowsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteWorkflowsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteWorkflowsRequest::_Internal::user_app_id(const DeleteWorkflowsRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteWorkflowsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteWorkflowsRequest::DeleteWorkflowsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteWorkflowsRequest)
}
DeleteWorkflowsRequest::DeleteWorkflowsRequest(const DeleteWorkflowsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  delete_all_ = from.delete_all_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteWorkflowsRequest)
}

inline void DeleteWorkflowsRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&delete_all_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(delete_all_));
}

DeleteWorkflowsRequest::~DeleteWorkflowsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteWorkflowsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteWorkflowsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteWorkflowsRequest::ArenaDtor(void* object) {
  DeleteWorkflowsRequest* _this = reinterpret_cast< DeleteWorkflowsRequest* >(object);
  (void)_this;
}
void DeleteWorkflowsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteWorkflowsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteWorkflowsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteWorkflowsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  delete_all_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteWorkflowsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteWorkflowsRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool delete_all = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          delete_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteWorkflowsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteWorkflowsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteWorkflowsRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  // bool delete_all = 3;
  if (this->_internal_delete_all() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_delete_all(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteWorkflowsRequest)
  return target;
}

size_t DeleteWorkflowsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteWorkflowsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // bool delete_all = 3;
  if (this->_internal_delete_all() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteWorkflowsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteWorkflowsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteWorkflowsRequest::GetClassData() const { return &_class_data_; }

void DeleteWorkflowsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteWorkflowsRequest *>(to)->MergeFrom(
      static_cast<const DeleteWorkflowsRequest &>(from));
}


void DeleteWorkflowsRequest::MergeFrom(const DeleteWorkflowsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteWorkflowsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_delete_all() != 0) {
    _internal_set_delete_all(from._internal_delete_all());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteWorkflowsRequest::CopyFrom(const DeleteWorkflowsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteWorkflowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteWorkflowsRequest::IsInitialized() const {
  return true;
}

void DeleteWorkflowsRequest::InternalSwap(DeleteWorkflowsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteWorkflowsRequest, delete_all_)
      + sizeof(DeleteWorkflowsRequest::delete_all_)
      - PROTOBUF_FIELD_OFFSET(DeleteWorkflowsRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteWorkflowsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[189]);
}

// ===================================================================

class SingleWorkflowResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleWorkflowResponse* msg);
  static const ::clarifai::api::Workflow& workflow(const SingleWorkflowResponse* msg);
};

const ::clarifai::api::status::Status&
SingleWorkflowResponse::_Internal::status(const SingleWorkflowResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::Workflow&
SingleWorkflowResponse::_Internal::workflow(const SingleWorkflowResponse* msg) {
  return *msg->workflow_;
}
void SingleWorkflowResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleWorkflowResponse::clear_workflow() {
  if (GetArenaForAllocation() == nullptr && workflow_ != nullptr) {
    delete workflow_;
  }
  workflow_ = nullptr;
}
SingleWorkflowResponse::SingleWorkflowResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleWorkflowResponse)
}
SingleWorkflowResponse::SingleWorkflowResponse(const SingleWorkflowResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_workflow()) {
    workflow_ = new ::clarifai::api::Workflow(*from.workflow_);
  } else {
    workflow_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleWorkflowResponse)
}

inline void SingleWorkflowResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&workflow_) -
    reinterpret_cast<char*>(&status_)) + sizeof(workflow_));
}

SingleWorkflowResponse::~SingleWorkflowResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleWorkflowResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SingleWorkflowResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete workflow_;
}

void SingleWorkflowResponse::ArenaDtor(void* object) {
  SingleWorkflowResponse* _this = reinterpret_cast< SingleWorkflowResponse* >(object);
  (void)_this;
}
void SingleWorkflowResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleWorkflowResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleWorkflowResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleWorkflowResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && workflow_ != nullptr) {
    delete workflow_;
  }
  workflow_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleWorkflowResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Workflow workflow = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_workflow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleWorkflowResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleWorkflowResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.Workflow workflow = 2;
  if (this->_internal_has_workflow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::workflow(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleWorkflowResponse)
  return target;
}

size_t SingleWorkflowResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleWorkflowResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.Workflow workflow = 2;
  if (this->_internal_has_workflow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *workflow_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleWorkflowResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SingleWorkflowResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleWorkflowResponse::GetClassData() const { return &_class_data_; }

void SingleWorkflowResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SingleWorkflowResponse *>(to)->MergeFrom(
      static_cast<const SingleWorkflowResponse &>(from));
}


void SingleWorkflowResponse::MergeFrom(const SingleWorkflowResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleWorkflowResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_workflow()) {
    _internal_mutable_workflow()->::clarifai::api::Workflow::MergeFrom(from._internal_workflow());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleWorkflowResponse::CopyFrom(const SingleWorkflowResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleWorkflowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleWorkflowResponse::IsInitialized() const {
  return true;
}

void SingleWorkflowResponse::InternalSwap(SingleWorkflowResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleWorkflowResponse, workflow_)
      + sizeof(SingleWorkflowResponse::workflow_)
      - PROTOBUF_FIELD_OFFSET(SingleWorkflowResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleWorkflowResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[190]);
}

// ===================================================================

class MultiWorkflowResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiWorkflowResponse* msg);
};

const ::clarifai::api::status::Status&
MultiWorkflowResponse::_Internal::status(const MultiWorkflowResponse* msg) {
  return *msg->status_;
}
void MultiWorkflowResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiWorkflowResponse::clear_workflows() {
  workflows_.Clear();
}
MultiWorkflowResponse::MultiWorkflowResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  workflows_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiWorkflowResponse)
}
MultiWorkflowResponse::MultiWorkflowResponse(const MultiWorkflowResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      workflows_(from.workflows_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiWorkflowResponse)
}

inline void MultiWorkflowResponse::SharedCtor() {
status_ = nullptr;
}

MultiWorkflowResponse::~MultiWorkflowResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiWorkflowResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiWorkflowResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiWorkflowResponse::ArenaDtor(void* object) {
  MultiWorkflowResponse* _this = reinterpret_cast< MultiWorkflowResponse* >(object);
  (void)_this;
}
void MultiWorkflowResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiWorkflowResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiWorkflowResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiWorkflowResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  workflows_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiWorkflowResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Workflow workflows = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_workflows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiWorkflowResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiWorkflowResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.Workflow workflows = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_workflows_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_workflows(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiWorkflowResponse)
  return target;
}

size_t MultiWorkflowResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiWorkflowResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Workflow workflows = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_workflows_size();
  for (const auto& msg : this->workflows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiWorkflowResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiWorkflowResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiWorkflowResponse::GetClassData() const { return &_class_data_; }

void MultiWorkflowResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiWorkflowResponse *>(to)->MergeFrom(
      static_cast<const MultiWorkflowResponse &>(from));
}


void MultiWorkflowResponse::MergeFrom(const MultiWorkflowResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiWorkflowResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  workflows_.MergeFrom(from.workflows_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiWorkflowResponse::CopyFrom(const MultiWorkflowResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiWorkflowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiWorkflowResponse::IsInitialized() const {
  return true;
}

void MultiWorkflowResponse::InternalSwap(MultiWorkflowResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  workflows_.InternalSwap(&other->workflows_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiWorkflowResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[191]);
}

// ===================================================================

class PostWorkflowResultsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostWorkflowResultsRequest* msg);
  static const ::clarifai::api::OutputConfig& output_config(const PostWorkflowResultsRequest* msg);
  static const ::clarifai::api::WorkflowState& workflow_state(const PostWorkflowResultsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostWorkflowResultsRequest::_Internal::user_app_id(const PostWorkflowResultsRequest* msg) {
  return *msg->user_app_id_;
}
const ::clarifai::api::OutputConfig&
PostWorkflowResultsRequest::_Internal::output_config(const PostWorkflowResultsRequest* msg) {
  return *msg->output_config_;
}
const ::clarifai::api::WorkflowState&
PostWorkflowResultsRequest::_Internal::workflow_state(const PostWorkflowResultsRequest* msg) {
  return *msg->workflow_state_;
}
void PostWorkflowResultsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostWorkflowResultsRequest::clear_inputs() {
  inputs_.Clear();
}
void PostWorkflowResultsRequest::clear_output_config() {
  if (GetArenaForAllocation() == nullptr && output_config_ != nullptr) {
    delete output_config_;
  }
  output_config_ = nullptr;
}
void PostWorkflowResultsRequest::clear_workflow_state() {
  if (GetArenaForAllocation() == nullptr && workflow_state_ != nullptr) {
    delete workflow_state_;
  }
  workflow_state_ = nullptr;
}
PostWorkflowResultsRequest::PostWorkflowResultsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  inputs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostWorkflowResultsRequest)
}
PostWorkflowResultsRequest::PostWorkflowResultsRequest(const PostWorkflowResultsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      inputs_(from.inputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workflow_id().empty()) {
    workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_workflow_id(), 
      GetArenaForAllocation());
  }
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version_id().empty()) {
    version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  if (from._internal_has_output_config()) {
    output_config_ = new ::clarifai::api::OutputConfig(*from.output_config_);
  } else {
    output_config_ = nullptr;
  }
  if (from._internal_has_workflow_state()) {
    workflow_state_ = new ::clarifai::api::WorkflowState(*from.workflow_state_);
  } else {
    workflow_state_ = nullptr;
  }
  favor_clarifai_workflows_ = from.favor_clarifai_workflows_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostWorkflowResultsRequest)
}

inline void PostWorkflowResultsRequest::SharedCtor() {
workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&favor_clarifai_workflows_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(favor_clarifai_workflows_));
}

PostWorkflowResultsRequest::~PostWorkflowResultsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostWorkflowResultsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostWorkflowResultsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  workflow_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
  if (this != internal_default_instance()) delete output_config_;
  if (this != internal_default_instance()) delete workflow_state_;
}

void PostWorkflowResultsRequest::ArenaDtor(void* object) {
  PostWorkflowResultsRequest* _this = reinterpret_cast< PostWorkflowResultsRequest* >(object);
  (void)_this;
}
void PostWorkflowResultsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostWorkflowResultsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostWorkflowResultsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostWorkflowResultsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  workflow_id_.ClearToEmpty();
  version_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && output_config_ != nullptr) {
    delete output_config_;
  }
  output_config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && workflow_state_ != nullptr) {
    delete workflow_state_;
  }
  workflow_state_ = nullptr;
  favor_clarifai_workflows_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostWorkflowResultsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string workflow_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_workflow_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostWorkflowResultsRequest.workflow_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Input inputs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.OutputConfig output_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool favor_clarifai_workflows = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          favor_clarifai_workflows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.WorkflowState workflow_state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_workflow_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostWorkflowResultsRequest.version_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostWorkflowResultsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostWorkflowResultsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_id().data(), static_cast<int>(this->_internal_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostWorkflowResultsRequest.workflow_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_workflow_id(), target);
  }

  // repeated .clarifai.api.Input inputs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_inputs(i), target, stream);
  }

  // .clarifai.api.OutputConfig output_config = 4;
  if (this->_internal_has_output_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::output_config(this), target, stream);
  }

  // bool favor_clarifai_workflows = 5;
  if (this->_internal_favor_clarifai_workflows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_favor_clarifai_workflows(), target);
  }

  // .clarifai.api.WorkflowState workflow_state = 6;
  if (this->_internal_has_workflow_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::workflow_state(this), target, stream);
  }

  // string version_id = 7;
  if (!this->_internal_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostWorkflowResultsRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_version_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostWorkflowResultsRequest)
  return target;
}

size_t PostWorkflowResultsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostWorkflowResultsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Input inputs = 3;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_id());
  }

  // string version_id = 7;
  if (!this->_internal_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // .clarifai.api.OutputConfig output_config = 4;
  if (this->_internal_has_output_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_config_);
  }

  // .clarifai.api.WorkflowState workflow_state = 6;
  if (this->_internal_has_workflow_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *workflow_state_);
  }

  // bool favor_clarifai_workflows = 5;
  if (this->_internal_favor_clarifai_workflows() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostWorkflowResultsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostWorkflowResultsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostWorkflowResultsRequest::GetClassData() const { return &_class_data_; }

void PostWorkflowResultsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostWorkflowResultsRequest *>(to)->MergeFrom(
      static_cast<const PostWorkflowResultsRequest &>(from));
}


void PostWorkflowResultsRequest::MergeFrom(const PostWorkflowResultsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostWorkflowResultsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  if (!from._internal_workflow_id().empty()) {
    _internal_set_workflow_id(from._internal_workflow_id());
  }
  if (!from._internal_version_id().empty()) {
    _internal_set_version_id(from._internal_version_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_has_output_config()) {
    _internal_mutable_output_config()->::clarifai::api::OutputConfig::MergeFrom(from._internal_output_config());
  }
  if (from._internal_has_workflow_state()) {
    _internal_mutable_workflow_state()->::clarifai::api::WorkflowState::MergeFrom(from._internal_workflow_state());
  }
  if (from._internal_favor_clarifai_workflows() != 0) {
    _internal_set_favor_clarifai_workflows(from._internal_favor_clarifai_workflows());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostWorkflowResultsRequest::CopyFrom(const PostWorkflowResultsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostWorkflowResultsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostWorkflowResultsRequest::IsInitialized() const {
  return true;
}

void PostWorkflowResultsRequest::InternalSwap(PostWorkflowResultsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  inputs_.InternalSwap(&other->inputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &workflow_id_, lhs_arena,
      &other->workflow_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_id_, lhs_arena,
      &other->version_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostWorkflowResultsRequest, favor_clarifai_workflows_)
      + sizeof(PostWorkflowResultsRequest::favor_clarifai_workflows_)
      - PROTOBUF_FIELD_OFFSET(PostWorkflowResultsRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostWorkflowResultsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[192]);
}

// ===================================================================

class PostWorkflowResultsResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const PostWorkflowResultsResponse* msg);
  static const ::clarifai::api::Workflow& workflow(const PostWorkflowResultsResponse* msg);
  static const ::clarifai::api::WorkflowState& workflow_state(const PostWorkflowResultsResponse* msg);
};

const ::clarifai::api::status::Status&
PostWorkflowResultsResponse::_Internal::status(const PostWorkflowResultsResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::Workflow&
PostWorkflowResultsResponse::_Internal::workflow(const PostWorkflowResultsResponse* msg) {
  return *msg->workflow_;
}
const ::clarifai::api::WorkflowState&
PostWorkflowResultsResponse::_Internal::workflow_state(const PostWorkflowResultsResponse* msg) {
  return *msg->workflow_state_;
}
void PostWorkflowResultsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void PostWorkflowResultsResponse::clear_workflow() {
  if (GetArenaForAllocation() == nullptr && workflow_ != nullptr) {
    delete workflow_;
  }
  workflow_ = nullptr;
}
void PostWorkflowResultsResponse::clear_results() {
  results_.Clear();
}
void PostWorkflowResultsResponse::clear_workflow_state() {
  if (GetArenaForAllocation() == nullptr && workflow_state_ != nullptr) {
    delete workflow_state_;
  }
  workflow_state_ = nullptr;
}
PostWorkflowResultsResponse::PostWorkflowResultsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  results_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostWorkflowResultsResponse)
}
PostWorkflowResultsResponse::PostWorkflowResultsResponse(const PostWorkflowResultsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_workflow()) {
    workflow_ = new ::clarifai::api::Workflow(*from.workflow_);
  } else {
    workflow_ = nullptr;
  }
  if (from._internal_has_workflow_state()) {
    workflow_state_ = new ::clarifai::api::WorkflowState(*from.workflow_state_);
  } else {
    workflow_state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostWorkflowResultsResponse)
}

inline void PostWorkflowResultsResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&workflow_state_) -
    reinterpret_cast<char*>(&status_)) + sizeof(workflow_state_));
}

PostWorkflowResultsResponse::~PostWorkflowResultsResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostWorkflowResultsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostWorkflowResultsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete workflow_;
  if (this != internal_default_instance()) delete workflow_state_;
}

void PostWorkflowResultsResponse::ArenaDtor(void* object) {
  PostWorkflowResultsResponse* _this = reinterpret_cast< PostWorkflowResultsResponse* >(object);
  (void)_this;
}
void PostWorkflowResultsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostWorkflowResultsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostWorkflowResultsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostWorkflowResultsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && workflow_ != nullptr) {
    delete workflow_;
  }
  workflow_ = nullptr;
  if (GetArenaForAllocation() == nullptr && workflow_state_ != nullptr) {
    delete workflow_state_;
  }
  workflow_state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostWorkflowResultsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Workflow workflow = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_workflow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.WorkflowResult results = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.WorkflowState workflow_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_workflow_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostWorkflowResultsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostWorkflowResultsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.Workflow workflow = 2;
  if (this->_internal_has_workflow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::workflow(this), target, stream);
  }

  // repeated .clarifai.api.WorkflowResult results = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_results(i), target, stream);
  }

  // .clarifai.api.WorkflowState workflow_state = 4;
  if (this->_internal_has_workflow_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::workflow_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostWorkflowResultsResponse)
  return target;
}

size_t PostWorkflowResultsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostWorkflowResultsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.WorkflowResult results = 3;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.Workflow workflow = 2;
  if (this->_internal_has_workflow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *workflow_);
  }

  // .clarifai.api.WorkflowState workflow_state = 4;
  if (this->_internal_has_workflow_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *workflow_state_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostWorkflowResultsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostWorkflowResultsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostWorkflowResultsResponse::GetClassData() const { return &_class_data_; }

void PostWorkflowResultsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostWorkflowResultsResponse *>(to)->MergeFrom(
      static_cast<const PostWorkflowResultsResponse &>(from));
}


void PostWorkflowResultsResponse::MergeFrom(const PostWorkflowResultsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostWorkflowResultsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_workflow()) {
    _internal_mutable_workflow()->::clarifai::api::Workflow::MergeFrom(from._internal_workflow());
  }
  if (from._internal_has_workflow_state()) {
    _internal_mutable_workflow_state()->::clarifai::api::WorkflowState::MergeFrom(from._internal_workflow_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostWorkflowResultsResponse::CopyFrom(const PostWorkflowResultsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostWorkflowResultsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostWorkflowResultsResponse::IsInitialized() const {
  return true;
}

void PostWorkflowResultsResponse::InternalSwap(PostWorkflowResultsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostWorkflowResultsResponse, workflow_state_)
      + sizeof(PostWorkflowResultsResponse::workflow_state_)
      - PROTOBUF_FIELD_OFFSET(PostWorkflowResultsResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostWorkflowResultsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[193]);
}

// ===================================================================

class PostWorkflowResultsSimilarityRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostWorkflowResultsSimilarityRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostWorkflowResultsSimilarityRequest::_Internal::user_app_id(const PostWorkflowResultsSimilarityRequest* msg) {
  return *msg->user_app_id_;
}
void PostWorkflowResultsSimilarityRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostWorkflowResultsSimilarityRequest::clear_probe_inputs() {
  probe_inputs_.Clear();
}
void PostWorkflowResultsSimilarityRequest::clear_pool_inputs() {
  pool_inputs_.Clear();
}
PostWorkflowResultsSimilarityRequest::PostWorkflowResultsSimilarityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  probe_inputs_(arena),
  pool_inputs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostWorkflowResultsSimilarityRequest)
}
PostWorkflowResultsSimilarityRequest::PostWorkflowResultsSimilarityRequest(const PostWorkflowResultsSimilarityRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      probe_inputs_(from.probe_inputs_),
      pool_inputs_(from.pool_inputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workflow_id().empty()) {
    workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_workflow_id(), 
      GetArenaForAllocation());
  }
  model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_version_id().empty()) {
    model_version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_version_id(), 
      GetArenaForAllocation());
  }
  version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version_id().empty()) {
    version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  favor_clarifai_workflows_ = from.favor_clarifai_workflows_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostWorkflowResultsSimilarityRequest)
}

inline void PostWorkflowResultsSimilarityRequest::SharedCtor() {
workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
model_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&favor_clarifai_workflows_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(favor_clarifai_workflows_));
}

PostWorkflowResultsSimilarityRequest::~PostWorkflowResultsSimilarityRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostWorkflowResultsSimilarityRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostWorkflowResultsSimilarityRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  workflow_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostWorkflowResultsSimilarityRequest::ArenaDtor(void* object) {
  PostWorkflowResultsSimilarityRequest* _this = reinterpret_cast< PostWorkflowResultsSimilarityRequest* >(object);
  (void)_this;
}
void PostWorkflowResultsSimilarityRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostWorkflowResultsSimilarityRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostWorkflowResultsSimilarityRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostWorkflowResultsSimilarityRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  probe_inputs_.Clear();
  pool_inputs_.Clear();
  workflow_id_.ClearToEmpty();
  model_version_id_.ClearToEmpty();
  version_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  favor_clarifai_workflows_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostWorkflowResultsSimilarityRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string workflow_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_workflow_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostWorkflowResultsSimilarityRequest.workflow_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model_version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_model_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostWorkflowResultsSimilarityRequest.model_version_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Input probe_inputs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_probe_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Input pool_inputs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pool_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool favor_clarifai_workflows = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          favor_clarifai_workflows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostWorkflowResultsSimilarityRequest.version_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostWorkflowResultsSimilarityRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostWorkflowResultsSimilarityRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_id().data(), static_cast<int>(this->_internal_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostWorkflowResultsSimilarityRequest.workflow_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_workflow_id(), target);
  }

  // string model_version_id = 3;
  if (!this->_internal_model_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_version_id().data(), static_cast<int>(this->_internal_model_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostWorkflowResultsSimilarityRequest.model_version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model_version_id(), target);
  }

  // repeated .clarifai.api.Input probe_inputs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_probe_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_probe_inputs(i), target, stream);
  }

  // repeated .clarifai.api.Input pool_inputs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pool_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_pool_inputs(i), target, stream);
  }

  // bool favor_clarifai_workflows = 6;
  if (this->_internal_favor_clarifai_workflows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_favor_clarifai_workflows(), target);
  }

  // string version_id = 7;
  if (!this->_internal_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_id().data(), static_cast<int>(this->_internal_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostWorkflowResultsSimilarityRequest.version_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_version_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostWorkflowResultsSimilarityRequest)
  return target;
}

size_t PostWorkflowResultsSimilarityRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostWorkflowResultsSimilarityRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Input probe_inputs = 4;
  total_size += 1UL * this->_internal_probe_inputs_size();
  for (const auto& msg : this->probe_inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clarifai.api.Input pool_inputs = 5;
  total_size += 1UL * this->_internal_pool_inputs_size();
  for (const auto& msg : this->pool_inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_id());
  }

  // string model_version_id = 3;
  if (!this->_internal_model_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_version_id());
  }

  // string version_id = 7;
  if (!this->_internal_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // bool favor_clarifai_workflows = 6;
  if (this->_internal_favor_clarifai_workflows() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostWorkflowResultsSimilarityRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostWorkflowResultsSimilarityRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostWorkflowResultsSimilarityRequest::GetClassData() const { return &_class_data_; }

void PostWorkflowResultsSimilarityRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostWorkflowResultsSimilarityRequest *>(to)->MergeFrom(
      static_cast<const PostWorkflowResultsSimilarityRequest &>(from));
}


void PostWorkflowResultsSimilarityRequest::MergeFrom(const PostWorkflowResultsSimilarityRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostWorkflowResultsSimilarityRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  probe_inputs_.MergeFrom(from.probe_inputs_);
  pool_inputs_.MergeFrom(from.pool_inputs_);
  if (!from._internal_workflow_id().empty()) {
    _internal_set_workflow_id(from._internal_workflow_id());
  }
  if (!from._internal_model_version_id().empty()) {
    _internal_set_model_version_id(from._internal_model_version_id());
  }
  if (!from._internal_version_id().empty()) {
    _internal_set_version_id(from._internal_version_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_favor_clarifai_workflows() != 0) {
    _internal_set_favor_clarifai_workflows(from._internal_favor_clarifai_workflows());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostWorkflowResultsSimilarityRequest::CopyFrom(const PostWorkflowResultsSimilarityRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostWorkflowResultsSimilarityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostWorkflowResultsSimilarityRequest::IsInitialized() const {
  return true;
}

void PostWorkflowResultsSimilarityRequest::InternalSwap(PostWorkflowResultsSimilarityRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  probe_inputs_.InternalSwap(&other->probe_inputs_);
  pool_inputs_.InternalSwap(&other->pool_inputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &workflow_id_, lhs_arena,
      &other->workflow_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_version_id_, lhs_arena,
      &other->model_version_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_id_, lhs_arena,
      &other->version_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostWorkflowResultsSimilarityRequest, favor_clarifai_workflows_)
      + sizeof(PostWorkflowResultsSimilarityRequest::favor_clarifai_workflows_)
      - PROTOBUF_FIELD_OFFSET(PostWorkflowResultsSimilarityRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PostWorkflowResultsSimilarityRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[194]);
}

// ===================================================================

class PostWorkflowResultsSimilarityResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const PostWorkflowResultsSimilarityResponse* msg);
};

const ::clarifai::api::status::Status&
PostWorkflowResultsSimilarityResponse::_Internal::status(const PostWorkflowResultsSimilarityResponse* msg) {
  return *msg->status_;
}
void PostWorkflowResultsSimilarityResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void PostWorkflowResultsSimilarityResponse::clear_results() {
  results_.Clear();
}
PostWorkflowResultsSimilarityResponse::PostWorkflowResultsSimilarityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  results_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostWorkflowResultsSimilarityResponse)
}
PostWorkflowResultsSimilarityResponse::PostWorkflowResultsSimilarityResponse(const PostWorkflowResultsSimilarityResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostWorkflowResultsSimilarityResponse)
}

inline void PostWorkflowResultsSimilarityResponse::SharedCtor() {
status_ = nullptr;
}

PostWorkflowResultsSimilarityResponse::~PostWorkflowResultsSimilarityResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostWorkflowResultsSimilarityResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostWorkflowResultsSimilarityResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void PostWorkflowResultsSimilarityResponse::ArenaDtor(void* object) {
  PostWorkflowResultsSimilarityResponse* _this = reinterpret_cast< PostWorkflowResultsSimilarityResponse* >(object);
  (void)_this;
}
void PostWorkflowResultsSimilarityResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostWorkflowResultsSimilarityResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostWorkflowResultsSimilarityResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostWorkflowResultsSimilarityResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostWorkflowResultsSimilarityResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.WorkflowResultsSimilarity results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostWorkflowResultsSimilarityResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostWorkflowResultsSimilarityResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.WorkflowResultsSimilarity results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostWorkflowResultsSimilarityResponse)
  return target;
}

size_t PostWorkflowResultsSimilarityResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostWorkflowResultsSimilarityResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.WorkflowResultsSimilarity results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostWorkflowResultsSimilarityResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostWorkflowResultsSimilarityResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostWorkflowResultsSimilarityResponse::GetClassData() const { return &_class_data_; }

void PostWorkflowResultsSimilarityResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostWorkflowResultsSimilarityResponse *>(to)->MergeFrom(
      static_cast<const PostWorkflowResultsSimilarityResponse &>(from));
}


void PostWorkflowResultsSimilarityResponse::MergeFrom(const PostWorkflowResultsSimilarityResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostWorkflowResultsSimilarityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostWorkflowResultsSimilarityResponse::CopyFrom(const PostWorkflowResultsSimilarityResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostWorkflowResultsSimilarityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostWorkflowResultsSimilarityResponse::IsInitialized() const {
  return true;
}

void PostWorkflowResultsSimilarityResponse::InternalSwap(PostWorkflowResultsSimilarityResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostWorkflowResultsSimilarityResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[195]);
}

// ===================================================================

class ListWorkflowVersionsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListWorkflowVersionsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListWorkflowVersionsRequest::_Internal::user_app_id(const ListWorkflowVersionsRequest* msg) {
  return *msg->user_app_id_;
}
void ListWorkflowVersionsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListWorkflowVersionsRequest::ListWorkflowVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListWorkflowVersionsRequest)
}
ListWorkflowVersionsRequest::ListWorkflowVersionsRequest(const ListWorkflowVersionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workflow_id().empty()) {
    workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_workflow_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListWorkflowVersionsRequest)
}

inline void ListWorkflowVersionsRequest::SharedCtor() {
workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListWorkflowVersionsRequest::~ListWorkflowVersionsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListWorkflowVersionsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListWorkflowVersionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  workflow_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListWorkflowVersionsRequest::ArenaDtor(void* object) {
  ListWorkflowVersionsRequest* _this = reinterpret_cast< ListWorkflowVersionsRequest* >(object);
  (void)_this;
}
void ListWorkflowVersionsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListWorkflowVersionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListWorkflowVersionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListWorkflowVersionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  workflow_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListWorkflowVersionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string workflow_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_workflow_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListWorkflowVersionsRequest.workflow_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListWorkflowVersionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListWorkflowVersionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_id().data(), static_cast<int>(this->_internal_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListWorkflowVersionsRequest.workflow_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_workflow_id(), target);
  }

  // uint32 page = 3;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_page(), target);
  }

  // uint32 per_page = 4;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListWorkflowVersionsRequest)
  return target;
}

size_t ListWorkflowVersionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListWorkflowVersionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 3;
  if (this->_internal_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 4;
  if (this->_internal_per_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListWorkflowVersionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListWorkflowVersionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListWorkflowVersionsRequest::GetClassData() const { return &_class_data_; }

void ListWorkflowVersionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListWorkflowVersionsRequest *>(to)->MergeFrom(
      static_cast<const ListWorkflowVersionsRequest &>(from));
}


void ListWorkflowVersionsRequest::MergeFrom(const ListWorkflowVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListWorkflowVersionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_workflow_id().empty()) {
    _internal_set_workflow_id(from._internal_workflow_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListWorkflowVersionsRequest::CopyFrom(const ListWorkflowVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListWorkflowVersionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListWorkflowVersionsRequest::IsInitialized() const {
  return true;
}

void ListWorkflowVersionsRequest::InternalSwap(ListWorkflowVersionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &workflow_id_, lhs_arena,
      &other->workflow_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListWorkflowVersionsRequest, per_page_)
      + sizeof(ListWorkflowVersionsRequest::per_page_)
      - PROTOBUF_FIELD_OFFSET(ListWorkflowVersionsRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListWorkflowVersionsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[196]);
}

// ===================================================================

class GetWorkflowVersionRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetWorkflowVersionRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetWorkflowVersionRequest::_Internal::user_app_id(const GetWorkflowVersionRequest* msg) {
  return *msg->user_app_id_;
}
void GetWorkflowVersionRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetWorkflowVersionRequest::GetWorkflowVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetWorkflowVersionRequest)
}
GetWorkflowVersionRequest::GetWorkflowVersionRequest(const GetWorkflowVersionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workflow_id().empty()) {
    workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_workflow_id(), 
      GetArenaForAllocation());
  }
  workflow_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    workflow_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workflow_version_id().empty()) {
    workflow_version_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_workflow_version_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetWorkflowVersionRequest)
}

inline void GetWorkflowVersionRequest::SharedCtor() {
workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
workflow_version_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  workflow_version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

GetWorkflowVersionRequest::~GetWorkflowVersionRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetWorkflowVersionRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetWorkflowVersionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  workflow_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  workflow_version_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetWorkflowVersionRequest::ArenaDtor(void* object) {
  GetWorkflowVersionRequest* _this = reinterpret_cast< GetWorkflowVersionRequest* >(object);
  (void)_this;
}
void GetWorkflowVersionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetWorkflowVersionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetWorkflowVersionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetWorkflowVersionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  workflow_id_.ClearToEmpty();
  workflow_version_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWorkflowVersionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string workflow_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_workflow_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetWorkflowVersionRequest.workflow_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string workflow_version_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_workflow_version_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetWorkflowVersionRequest.workflow_version_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetWorkflowVersionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetWorkflowVersionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_id().data(), static_cast<int>(this->_internal_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetWorkflowVersionRequest.workflow_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_workflow_id(), target);
  }

  // string workflow_version_id = 3;
  if (!this->_internal_workflow_version_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_version_id().data(), static_cast<int>(this->_internal_workflow_version_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetWorkflowVersionRequest.workflow_version_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_workflow_version_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetWorkflowVersionRequest)
  return target;
}

size_t GetWorkflowVersionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetWorkflowVersionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_id());
  }

  // string workflow_version_id = 3;
  if (!this->_internal_workflow_version_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_version_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetWorkflowVersionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetWorkflowVersionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetWorkflowVersionRequest::GetClassData() const { return &_class_data_; }

void GetWorkflowVersionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetWorkflowVersionRequest *>(to)->MergeFrom(
      static_cast<const GetWorkflowVersionRequest &>(from));
}


void GetWorkflowVersionRequest::MergeFrom(const GetWorkflowVersionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetWorkflowVersionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_workflow_id().empty()) {
    _internal_set_workflow_id(from._internal_workflow_id());
  }
  if (!from._internal_workflow_version_id().empty()) {
    _internal_set_workflow_version_id(from._internal_workflow_version_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetWorkflowVersionRequest::CopyFrom(const GetWorkflowVersionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetWorkflowVersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWorkflowVersionRequest::IsInitialized() const {
  return true;
}

void GetWorkflowVersionRequest::InternalSwap(GetWorkflowVersionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &workflow_id_, lhs_arena,
      &other->workflow_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &workflow_version_id_, lhs_arena,
      &other->workflow_version_id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWorkflowVersionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[197]);
}

// ===================================================================

class DeleteWorkflowVersionsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteWorkflowVersionsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteWorkflowVersionsRequest::_Internal::user_app_id(const DeleteWorkflowVersionsRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteWorkflowVersionsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteWorkflowVersionsRequest::DeleteWorkflowVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  workflow_version_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteWorkflowVersionsRequest)
}
DeleteWorkflowVersionsRequest::DeleteWorkflowVersionsRequest(const DeleteWorkflowVersionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      workflow_version_ids_(from.workflow_version_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workflow_id().empty()) {
    workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_workflow_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteWorkflowVersionsRequest)
}

inline void DeleteWorkflowVersionsRequest::SharedCtor() {
workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

DeleteWorkflowVersionsRequest::~DeleteWorkflowVersionsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteWorkflowVersionsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteWorkflowVersionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  workflow_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteWorkflowVersionsRequest::ArenaDtor(void* object) {
  DeleteWorkflowVersionsRequest* _this = reinterpret_cast< DeleteWorkflowVersionsRequest* >(object);
  (void)_this;
}
void DeleteWorkflowVersionsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteWorkflowVersionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteWorkflowVersionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteWorkflowVersionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  workflow_version_ids_.Clear();
  workflow_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteWorkflowVersionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string workflow_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_workflow_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteWorkflowVersionsRequest.workflow_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string workflow_version_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_workflow_version_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteWorkflowVersionsRequest.workflow_version_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteWorkflowVersionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteWorkflowVersionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_id().data(), static_cast<int>(this->_internal_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteWorkflowVersionsRequest.workflow_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_workflow_id(), target);
  }

  // repeated string workflow_version_ids = 3;
  for (int i = 0, n = this->_internal_workflow_version_ids_size(); i < n; i++) {
    const auto& s = this->_internal_workflow_version_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteWorkflowVersionsRequest.workflow_version_ids");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteWorkflowVersionsRequest)
  return target;
}

size_t DeleteWorkflowVersionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteWorkflowVersionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string workflow_version_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(workflow_version_ids_.size());
  for (int i = 0, n = workflow_version_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      workflow_version_ids_.Get(i));
  }

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteWorkflowVersionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteWorkflowVersionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteWorkflowVersionsRequest::GetClassData() const { return &_class_data_; }

void DeleteWorkflowVersionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteWorkflowVersionsRequest *>(to)->MergeFrom(
      static_cast<const DeleteWorkflowVersionsRequest &>(from));
}


void DeleteWorkflowVersionsRequest::MergeFrom(const DeleteWorkflowVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteWorkflowVersionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  workflow_version_ids_.MergeFrom(from.workflow_version_ids_);
  if (!from._internal_workflow_id().empty()) {
    _internal_set_workflow_id(from._internal_workflow_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteWorkflowVersionsRequest::CopyFrom(const DeleteWorkflowVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteWorkflowVersionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteWorkflowVersionsRequest::IsInitialized() const {
  return true;
}

void DeleteWorkflowVersionsRequest::InternalSwap(DeleteWorkflowVersionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  workflow_version_ids_.InternalSwap(&other->workflow_version_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &workflow_id_, lhs_arena,
      &other->workflow_id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteWorkflowVersionsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[198]);
}

// ===================================================================

class PatchWorkflowVersionsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchWorkflowVersionsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchWorkflowVersionsRequest::_Internal::user_app_id(const PatchWorkflowVersionsRequest* msg) {
  return *msg->user_app_id_;
}
void PatchWorkflowVersionsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchWorkflowVersionsRequest::clear_workflow_versions() {
  workflow_versions_.Clear();
}
PatchWorkflowVersionsRequest::PatchWorkflowVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  workflow_versions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchWorkflowVersionsRequest)
}
PatchWorkflowVersionsRequest::PatchWorkflowVersionsRequest(const PatchWorkflowVersionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      workflow_versions_(from.workflow_versions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workflow_id().empty()) {
    workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_workflow_id(), 
      GetArenaForAllocation());
  }
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchWorkflowVersionsRequest)
}

inline void PatchWorkflowVersionsRequest::SharedCtor() {
workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

PatchWorkflowVersionsRequest::~PatchWorkflowVersionsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchWorkflowVersionsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PatchWorkflowVersionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  workflow_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchWorkflowVersionsRequest::ArenaDtor(void* object) {
  PatchWorkflowVersionsRequest* _this = reinterpret_cast< PatchWorkflowVersionsRequest* >(object);
  (void)_this;
}
void PatchWorkflowVersionsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatchWorkflowVersionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PatchWorkflowVersionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchWorkflowVersionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  workflow_versions_.Clear();
  workflow_id_.ClearToEmpty();
  action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchWorkflowVersionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string workflow_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_workflow_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchWorkflowVersionsRequest.workflow_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.WorkflowVersion workflow_versions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_workflow_versions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchWorkflowVersionsRequest.action"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchWorkflowVersionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchWorkflowVersionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workflow_id().data(), static_cast<int>(this->_internal_workflow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchWorkflowVersionsRequest.workflow_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_workflow_id(), target);
  }

  // repeated .clarifai.api.WorkflowVersion workflow_versions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_workflow_versions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_workflow_versions(i), target, stream);
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchWorkflowVersionsRequest.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchWorkflowVersionsRequest)
  return target;
}

size_t PatchWorkflowVersionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchWorkflowVersionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.WorkflowVersion workflow_versions = 3;
  total_size += 1UL * this->_internal_workflow_versions_size();
  for (const auto& msg : this->workflow_versions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string workflow_id = 2;
  if (!this->_internal_workflow_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workflow_id());
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchWorkflowVersionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PatchWorkflowVersionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchWorkflowVersionsRequest::GetClassData() const { return &_class_data_; }

void PatchWorkflowVersionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PatchWorkflowVersionsRequest *>(to)->MergeFrom(
      static_cast<const PatchWorkflowVersionsRequest &>(from));
}


void PatchWorkflowVersionsRequest::MergeFrom(const PatchWorkflowVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchWorkflowVersionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  workflow_versions_.MergeFrom(from.workflow_versions_);
  if (!from._internal_workflow_id().empty()) {
    _internal_set_workflow_id(from._internal_workflow_id());
  }
  if (!from._internal_action().empty()) {
    _internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchWorkflowVersionsRequest::CopyFrom(const PatchWorkflowVersionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchWorkflowVersionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchWorkflowVersionsRequest::IsInitialized() const {
  return true;
}

void PatchWorkflowVersionsRequest::InternalSwap(PatchWorkflowVersionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  workflow_versions_.InternalSwap(&other->workflow_versions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &workflow_id_, lhs_arena,
      &other->workflow_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_, lhs_arena,
      &other->action_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchWorkflowVersionsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[199]);
}

// ===================================================================

class MultiWorkflowVersionResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiWorkflowVersionResponse* msg);
};

const ::clarifai::api::status::Status&
MultiWorkflowVersionResponse::_Internal::status(const MultiWorkflowVersionResponse* msg) {
  return *msg->status_;
}
void MultiWorkflowVersionResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiWorkflowVersionResponse::clear_workflow_versions() {
  workflow_versions_.Clear();
}
MultiWorkflowVersionResponse::MultiWorkflowVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  workflow_versions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiWorkflowVersionResponse)
}
MultiWorkflowVersionResponse::MultiWorkflowVersionResponse(const MultiWorkflowVersionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      workflow_versions_(from.workflow_versions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiWorkflowVersionResponse)
}

inline void MultiWorkflowVersionResponse::SharedCtor() {
status_ = nullptr;
}

MultiWorkflowVersionResponse::~MultiWorkflowVersionResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiWorkflowVersionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiWorkflowVersionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiWorkflowVersionResponse::ArenaDtor(void* object) {
  MultiWorkflowVersionResponse* _this = reinterpret_cast< MultiWorkflowVersionResponse* >(object);
  (void)_this;
}
void MultiWorkflowVersionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiWorkflowVersionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiWorkflowVersionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiWorkflowVersionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  workflow_versions_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiWorkflowVersionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.WorkflowVersion workflow_versions = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_workflow_versions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiWorkflowVersionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiWorkflowVersionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.WorkflowVersion workflow_versions = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_workflow_versions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_workflow_versions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiWorkflowVersionResponse)
  return target;
}

size_t MultiWorkflowVersionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiWorkflowVersionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.WorkflowVersion workflow_versions = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_workflow_versions_size();
  for (const auto& msg : this->workflow_versions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiWorkflowVersionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiWorkflowVersionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiWorkflowVersionResponse::GetClassData() const { return &_class_data_; }

void MultiWorkflowVersionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiWorkflowVersionResponse *>(to)->MergeFrom(
      static_cast<const MultiWorkflowVersionResponse &>(from));
}


void MultiWorkflowVersionResponse::MergeFrom(const MultiWorkflowVersionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiWorkflowVersionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  workflow_versions_.MergeFrom(from.workflow_versions_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiWorkflowVersionResponse::CopyFrom(const MultiWorkflowVersionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiWorkflowVersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiWorkflowVersionResponse::IsInitialized() const {
  return true;
}

void MultiWorkflowVersionResponse::InternalSwap(MultiWorkflowVersionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  workflow_versions_.InternalSwap(&other->workflow_versions_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiWorkflowVersionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[200]);
}

// ===================================================================

class SingleWorkflowVersionResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleWorkflowVersionResponse* msg);
  static const ::clarifai::api::WorkflowVersion& workflow_version(const SingleWorkflowVersionResponse* msg);
};

const ::clarifai::api::status::Status&
SingleWorkflowVersionResponse::_Internal::status(const SingleWorkflowVersionResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::WorkflowVersion&
SingleWorkflowVersionResponse::_Internal::workflow_version(const SingleWorkflowVersionResponse* msg) {
  return *msg->workflow_version_;
}
void SingleWorkflowVersionResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleWorkflowVersionResponse::clear_workflow_version() {
  if (GetArenaForAllocation() == nullptr && workflow_version_ != nullptr) {
    delete workflow_version_;
  }
  workflow_version_ = nullptr;
}
SingleWorkflowVersionResponse::SingleWorkflowVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleWorkflowVersionResponse)
}
SingleWorkflowVersionResponse::SingleWorkflowVersionResponse(const SingleWorkflowVersionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_workflow_version()) {
    workflow_version_ = new ::clarifai::api::WorkflowVersion(*from.workflow_version_);
  } else {
    workflow_version_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleWorkflowVersionResponse)
}

inline void SingleWorkflowVersionResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&workflow_version_) -
    reinterpret_cast<char*>(&status_)) + sizeof(workflow_version_));
}

SingleWorkflowVersionResponse::~SingleWorkflowVersionResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleWorkflowVersionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SingleWorkflowVersionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete workflow_version_;
}

void SingleWorkflowVersionResponse::ArenaDtor(void* object) {
  SingleWorkflowVersionResponse* _this = reinterpret_cast< SingleWorkflowVersionResponse* >(object);
  (void)_this;
}
void SingleWorkflowVersionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleWorkflowVersionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleWorkflowVersionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleWorkflowVersionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && workflow_version_ != nullptr) {
    delete workflow_version_;
  }
  workflow_version_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleWorkflowVersionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.WorkflowVersion workflow_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_workflow_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleWorkflowVersionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleWorkflowVersionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.WorkflowVersion workflow_version = 2;
  if (this->_internal_has_workflow_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::workflow_version(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleWorkflowVersionResponse)
  return target;
}

size_t SingleWorkflowVersionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleWorkflowVersionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.WorkflowVersion workflow_version = 2;
  if (this->_internal_has_workflow_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *workflow_version_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleWorkflowVersionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SingleWorkflowVersionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleWorkflowVersionResponse::GetClassData() const { return &_class_data_; }

void SingleWorkflowVersionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SingleWorkflowVersionResponse *>(to)->MergeFrom(
      static_cast<const SingleWorkflowVersionResponse &>(from));
}


void SingleWorkflowVersionResponse::MergeFrom(const SingleWorkflowVersionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleWorkflowVersionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_workflow_version()) {
    _internal_mutable_workflow_version()->::clarifai::api::WorkflowVersion::MergeFrom(from._internal_workflow_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleWorkflowVersionResponse::CopyFrom(const SingleWorkflowVersionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleWorkflowVersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleWorkflowVersionResponse::IsInitialized() const {
  return true;
}

void SingleWorkflowVersionResponse::InternalSwap(SingleWorkflowVersionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleWorkflowVersionResponse, workflow_version_)
      + sizeof(SingleWorkflowVersionResponse::workflow_version_)
      - PROTOBUF_FIELD_OFFSET(SingleWorkflowVersionResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleWorkflowVersionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[201]);
}

// ===================================================================

class PostAppDuplicationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostAppDuplicationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostAppDuplicationsRequest::_Internal::user_app_id(const PostAppDuplicationsRequest* msg) {
  return *msg->user_app_id_;
}
void PostAppDuplicationsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostAppDuplicationsRequest::clear_app_duplications() {
  app_duplications_.Clear();
}
PostAppDuplicationsRequest::PostAppDuplicationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  app_duplications_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostAppDuplicationsRequest)
}
PostAppDuplicationsRequest::PostAppDuplicationsRequest(const PostAppDuplicationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      app_duplications_(from.app_duplications_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostAppDuplicationsRequest)
}

inline void PostAppDuplicationsRequest::SharedCtor() {
user_app_id_ = nullptr;
}

PostAppDuplicationsRequest::~PostAppDuplicationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostAppDuplicationsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostAppDuplicationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostAppDuplicationsRequest::ArenaDtor(void* object) {
  PostAppDuplicationsRequest* _this = reinterpret_cast< PostAppDuplicationsRequest* >(object);
  (void)_this;
}
void PostAppDuplicationsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostAppDuplicationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostAppDuplicationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostAppDuplicationsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_duplications_.Clear();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostAppDuplicationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.AppDuplication app_duplications = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_app_duplications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostAppDuplicationsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostAppDuplicationsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.AppDuplication app_duplications = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_app_duplications_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_app_duplications(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostAppDuplicationsRequest)
  return target;
}

size_t PostAppDuplicationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostAppDuplicationsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.AppDuplication app_duplications = 2;
  total_size += 1UL * this->_internal_app_duplications_size();
  for (const auto& msg : this->app_duplications_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostAppDuplicationsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostAppDuplicationsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostAppDuplicationsRequest::GetClassData() const { return &_class_data_; }

void PostAppDuplicationsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostAppDuplicationsRequest *>(to)->MergeFrom(
      static_cast<const PostAppDuplicationsRequest &>(from));
}


void PostAppDuplicationsRequest::MergeFrom(const PostAppDuplicationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostAppDuplicationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  app_duplications_.MergeFrom(from.app_duplications_);
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostAppDuplicationsRequest::CopyFrom(const PostAppDuplicationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostAppDuplicationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostAppDuplicationsRequest::IsInitialized() const {
  return true;
}

void PostAppDuplicationsRequest::InternalSwap(PostAppDuplicationsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  app_duplications_.InternalSwap(&other->app_duplications_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostAppDuplicationsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[202]);
}

// ===================================================================

class GetAppDuplicationRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetAppDuplicationRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetAppDuplicationRequest::_Internal::user_app_id(const GetAppDuplicationRequest* msg) {
  return *msg->user_app_id_;
}
void GetAppDuplicationRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetAppDuplicationRequest::GetAppDuplicationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetAppDuplicationRequest)
}
GetAppDuplicationRequest::GetAppDuplicationRequest(const GetAppDuplicationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  app_duplication_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_duplication_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_duplication_id().empty()) {
    app_duplication_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_duplication_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetAppDuplicationRequest)
}

inline void GetAppDuplicationRequest::SharedCtor() {
app_duplication_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_duplication_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

GetAppDuplicationRequest::~GetAppDuplicationRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetAppDuplicationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetAppDuplicationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  app_duplication_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetAppDuplicationRequest::ArenaDtor(void* object) {
  GetAppDuplicationRequest* _this = reinterpret_cast< GetAppDuplicationRequest* >(object);
  (void)_this;
}
void GetAppDuplicationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAppDuplicationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAppDuplicationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetAppDuplicationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_duplication_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAppDuplicationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string app_duplication_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_app_duplication_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetAppDuplicationRequest.app_duplication_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAppDuplicationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetAppDuplicationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string app_duplication_id = 2;
  if (!this->_internal_app_duplication_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_duplication_id().data(), static_cast<int>(this->_internal_app_duplication_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetAppDuplicationRequest.app_duplication_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_duplication_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetAppDuplicationRequest)
  return target;
}

size_t GetAppDuplicationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetAppDuplicationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_duplication_id = 2;
  if (!this->_internal_app_duplication_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_duplication_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAppDuplicationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetAppDuplicationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAppDuplicationRequest::GetClassData() const { return &_class_data_; }

void GetAppDuplicationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetAppDuplicationRequest *>(to)->MergeFrom(
      static_cast<const GetAppDuplicationRequest &>(from));
}


void GetAppDuplicationRequest::MergeFrom(const GetAppDuplicationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetAppDuplicationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_app_duplication_id().empty()) {
    _internal_set_app_duplication_id(from._internal_app_duplication_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAppDuplicationRequest::CopyFrom(const GetAppDuplicationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetAppDuplicationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppDuplicationRequest::IsInitialized() const {
  return true;
}

void GetAppDuplicationRequest::InternalSwap(GetAppDuplicationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_duplication_id_, lhs_arena,
      &other->app_duplication_id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAppDuplicationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[203]);
}

// ===================================================================

class ListAppDuplicationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListAppDuplicationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListAppDuplicationsRequest::_Internal::user_app_id(const ListAppDuplicationsRequest* msg) {
  return *msg->user_app_id_;
}
void ListAppDuplicationsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListAppDuplicationsRequest::ListAppDuplicationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListAppDuplicationsRequest)
}
ListAppDuplicationsRequest::ListAppDuplicationsRequest(const ListAppDuplicationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListAppDuplicationsRequest)
}

inline void ListAppDuplicationsRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListAppDuplicationsRequest::~ListAppDuplicationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListAppDuplicationsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListAppDuplicationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListAppDuplicationsRequest::ArenaDtor(void* object) {
  ListAppDuplicationsRequest* _this = reinterpret_cast< ListAppDuplicationsRequest* >(object);
  (void)_this;
}
void ListAppDuplicationsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListAppDuplicationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListAppDuplicationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListAppDuplicationsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListAppDuplicationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListAppDuplicationsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListAppDuplicationsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListAppDuplicationsRequest)
  return target;
}

size_t ListAppDuplicationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListAppDuplicationsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListAppDuplicationsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListAppDuplicationsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListAppDuplicationsRequest::GetClassData() const { return &_class_data_; }

void ListAppDuplicationsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListAppDuplicationsRequest *>(to)->MergeFrom(
      static_cast<const ListAppDuplicationsRequest &>(from));
}


void ListAppDuplicationsRequest::MergeFrom(const ListAppDuplicationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListAppDuplicationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListAppDuplicationsRequest::CopyFrom(const ListAppDuplicationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListAppDuplicationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAppDuplicationsRequest::IsInitialized() const {
  return true;
}

void ListAppDuplicationsRequest::InternalSwap(ListAppDuplicationsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListAppDuplicationsRequest, per_page_)
      + sizeof(ListAppDuplicationsRequest::per_page_)
      - PROTOBUF_FIELD_OFFSET(ListAppDuplicationsRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAppDuplicationsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[204]);
}

// ===================================================================

class MultiAppDuplicationsResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiAppDuplicationsResponse* msg);
};

const ::clarifai::api::status::Status&
MultiAppDuplicationsResponse::_Internal::status(const MultiAppDuplicationsResponse* msg) {
  return *msg->status_;
}
void MultiAppDuplicationsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiAppDuplicationsResponse::clear_app_duplications() {
  app_duplications_.Clear();
}
MultiAppDuplicationsResponse::MultiAppDuplicationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  app_duplications_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiAppDuplicationsResponse)
}
MultiAppDuplicationsResponse::MultiAppDuplicationsResponse(const MultiAppDuplicationsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      app_duplications_(from.app_duplications_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiAppDuplicationsResponse)
}

inline void MultiAppDuplicationsResponse::SharedCtor() {
status_ = nullptr;
}

MultiAppDuplicationsResponse::~MultiAppDuplicationsResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiAppDuplicationsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiAppDuplicationsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiAppDuplicationsResponse::ArenaDtor(void* object) {
  MultiAppDuplicationsResponse* _this = reinterpret_cast< MultiAppDuplicationsResponse* >(object);
  (void)_this;
}
void MultiAppDuplicationsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiAppDuplicationsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiAppDuplicationsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiAppDuplicationsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_duplications_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiAppDuplicationsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.AppDuplication app_duplications = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_app_duplications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiAppDuplicationsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiAppDuplicationsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.AppDuplication app_duplications = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_app_duplications_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_app_duplications(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiAppDuplicationsResponse)
  return target;
}

size_t MultiAppDuplicationsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiAppDuplicationsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.AppDuplication app_duplications = 2;
  total_size += 1UL * this->_internal_app_duplications_size();
  for (const auto& msg : this->app_duplications_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiAppDuplicationsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiAppDuplicationsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiAppDuplicationsResponse::GetClassData() const { return &_class_data_; }

void MultiAppDuplicationsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiAppDuplicationsResponse *>(to)->MergeFrom(
      static_cast<const MultiAppDuplicationsResponse &>(from));
}


void MultiAppDuplicationsResponse::MergeFrom(const MultiAppDuplicationsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiAppDuplicationsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  app_duplications_.MergeFrom(from.app_duplications_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiAppDuplicationsResponse::CopyFrom(const MultiAppDuplicationsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiAppDuplicationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiAppDuplicationsResponse::IsInitialized() const {
  return true;
}

void MultiAppDuplicationsResponse::InternalSwap(MultiAppDuplicationsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  app_duplications_.InternalSwap(&other->app_duplications_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiAppDuplicationsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[205]);
}

// ===================================================================

class SingleAppDuplicationResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleAppDuplicationResponse* msg);
  static const ::clarifai::api::AppDuplication& app_duplication(const SingleAppDuplicationResponse* msg);
};

const ::clarifai::api::status::Status&
SingleAppDuplicationResponse::_Internal::status(const SingleAppDuplicationResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::AppDuplication&
SingleAppDuplicationResponse::_Internal::app_duplication(const SingleAppDuplicationResponse* msg) {
  return *msg->app_duplication_;
}
void SingleAppDuplicationResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleAppDuplicationResponse::clear_app_duplication() {
  if (GetArenaForAllocation() == nullptr && app_duplication_ != nullptr) {
    delete app_duplication_;
  }
  app_duplication_ = nullptr;
}
SingleAppDuplicationResponse::SingleAppDuplicationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleAppDuplicationResponse)
}
SingleAppDuplicationResponse::SingleAppDuplicationResponse(const SingleAppDuplicationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_app_duplication()) {
    app_duplication_ = new ::clarifai::api::AppDuplication(*from.app_duplication_);
  } else {
    app_duplication_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleAppDuplicationResponse)
}

inline void SingleAppDuplicationResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&app_duplication_) -
    reinterpret_cast<char*>(&status_)) + sizeof(app_duplication_));
}

SingleAppDuplicationResponse::~SingleAppDuplicationResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleAppDuplicationResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SingleAppDuplicationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete app_duplication_;
}

void SingleAppDuplicationResponse::ArenaDtor(void* object) {
  SingleAppDuplicationResponse* _this = reinterpret_cast< SingleAppDuplicationResponse* >(object);
  (void)_this;
}
void SingleAppDuplicationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleAppDuplicationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleAppDuplicationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleAppDuplicationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && app_duplication_ != nullptr) {
    delete app_duplication_;
  }
  app_duplication_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleAppDuplicationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.AppDuplication app_duplication = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_duplication(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleAppDuplicationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleAppDuplicationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.AppDuplication app_duplication = 2;
  if (this->_internal_has_app_duplication()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::app_duplication(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleAppDuplicationResponse)
  return target;
}

size_t SingleAppDuplicationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleAppDuplicationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.AppDuplication app_duplication = 2;
  if (this->_internal_has_app_duplication()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_duplication_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleAppDuplicationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SingleAppDuplicationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleAppDuplicationResponse::GetClassData() const { return &_class_data_; }

void SingleAppDuplicationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SingleAppDuplicationResponse *>(to)->MergeFrom(
      static_cast<const SingleAppDuplicationResponse &>(from));
}


void SingleAppDuplicationResponse::MergeFrom(const SingleAppDuplicationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleAppDuplicationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_app_duplication()) {
    _internal_mutable_app_duplication()->::clarifai::api::AppDuplication::MergeFrom(from._internal_app_duplication());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleAppDuplicationResponse::CopyFrom(const SingleAppDuplicationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleAppDuplicationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleAppDuplicationResponse::IsInitialized() const {
  return true;
}

void SingleAppDuplicationResponse::InternalSwap(SingleAppDuplicationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleAppDuplicationResponse, app_duplication_)
      + sizeof(SingleAppDuplicationResponse::app_duplication_)
      - PROTOBUF_FIELD_OFFSET(SingleAppDuplicationResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleAppDuplicationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[206]);
}

// ===================================================================

class PostTasksRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostTasksRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostTasksRequest::_Internal::user_app_id(const PostTasksRequest* msg) {
  return *msg->user_app_id_;
}
void PostTasksRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostTasksRequest::clear_tasks() {
  tasks_.Clear();
}
PostTasksRequest::PostTasksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tasks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostTasksRequest)
}
PostTasksRequest::PostTasksRequest(const PostTasksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostTasksRequest)
}

inline void PostTasksRequest::SharedCtor() {
user_app_id_ = nullptr;
}

PostTasksRequest::~PostTasksRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostTasksRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostTasksRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostTasksRequest::ArenaDtor(void* object) {
  PostTasksRequest* _this = reinterpret_cast< PostTasksRequest* >(object);
  (void)_this;
}
void PostTasksRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostTasksRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostTasksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostTasksRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tasks_.Clear();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostTasksRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Task tasks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostTasksRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostTasksRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Task tasks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tasks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tasks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostTasksRequest)
  return target;
}

size_t PostTasksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostTasksRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Task tasks = 2;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostTasksRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostTasksRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostTasksRequest::GetClassData() const { return &_class_data_; }

void PostTasksRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostTasksRequest *>(to)->MergeFrom(
      static_cast<const PostTasksRequest &>(from));
}


void PostTasksRequest::MergeFrom(const PostTasksRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostTasksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tasks_.MergeFrom(from.tasks_);
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostTasksRequest::CopyFrom(const PostTasksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostTasksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostTasksRequest::IsInitialized() const {
  return true;
}

void PostTasksRequest::InternalSwap(PostTasksRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tasks_.InternalSwap(&other->tasks_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostTasksRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[207]);
}

// ===================================================================

class GetTaskRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetTaskRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetTaskRequest::_Internal::user_app_id(const GetTaskRequest* msg) {
  return *msg->user_app_id_;
}
void GetTaskRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetTaskRequest::GetTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  additional_fields_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetTaskRequest)
}
GetTaskRequest::GetTaskRequest(const GetTaskRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      additional_fields_(from.additional_fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task_id().empty()) {
    task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_task_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetTaskRequest)
}

inline void GetTaskRequest::SharedCtor() {
task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

GetTaskRequest::~GetTaskRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetTaskRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetTaskRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetTaskRequest::ArenaDtor(void* object) {
  GetTaskRequest* _this = reinterpret_cast< GetTaskRequest* >(object);
  (void)_this;
}
void GetTaskRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTaskRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetTaskRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_fields_.Clear();
  task_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTaskRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string task_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_task_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetTaskRequest.task_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string additional_fields = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_additional_fields();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetTaskRequest.additional_fields"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTaskRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetTaskRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string task_id = 2;
  if (!this->_internal_task_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetTaskRequest.task_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_task_id(), target);
  }

  // repeated string additional_fields = 3;
  for (int i = 0, n = this->_internal_additional_fields_size(); i < n; i++) {
    const auto& s = this->_internal_additional_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetTaskRequest.additional_fields");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetTaskRequest)
  return target;
}

size_t GetTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetTaskRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string additional_fields = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(additional_fields_.size());
  for (int i = 0, n = additional_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      additional_fields_.Get(i));
  }

  // string task_id = 2;
  if (!this->_internal_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTaskRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetTaskRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTaskRequest::GetClassData() const { return &_class_data_; }

void GetTaskRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetTaskRequest *>(to)->MergeFrom(
      static_cast<const GetTaskRequest &>(from));
}


void GetTaskRequest::MergeFrom(const GetTaskRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  additional_fields_.MergeFrom(from.additional_fields_);
  if (!from._internal_task_id().empty()) {
    _internal_set_task_id(from._internal_task_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTaskRequest::CopyFrom(const GetTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTaskRequest::IsInitialized() const {
  return true;
}

void GetTaskRequest::InternalSwap(GetTaskRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  additional_fields_.InternalSwap(&other->additional_fields_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &task_id_, lhs_arena,
      &other->task_id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTaskRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[208]);
}

// ===================================================================

class ListTasksRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListTasksRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListTasksRequest::_Internal::user_app_id(const ListTasksRequest* msg) {
  return *msg->user_app_id_;
}
void ListTasksRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListTasksRequest::ListTasksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  worker_user_ids_(arena),
  review_user_ids_(arena),
  additional_fields_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListTasksRequest)
}
ListTasksRequest::ListTasksRequest(const ListTasksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      worker_user_ids_(from.worker_user_ids_),
      review_user_ids_(from.review_user_ids_),
      additional_fields_(from.additional_fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&including_label_order_tasks_) -
    reinterpret_cast<char*>(&page_)) + sizeof(including_label_order_tasks_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListTasksRequest)
}

inline void ListTasksRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&including_label_order_tasks_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(including_label_order_tasks_));
}

ListTasksRequest::~ListTasksRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListTasksRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListTasksRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListTasksRequest::ArenaDtor(void* object) {
  ListTasksRequest* _this = reinterpret_cast< ListTasksRequest* >(object);
  (void)_this;
}
void ListTasksRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListTasksRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListTasksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListTasksRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  worker_user_ids_.Clear();
  review_user_ids_.Clear();
  additional_fields_.Clear();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&including_label_order_tasks_) -
      reinterpret_cast<char*>(&page_)) + sizeof(including_label_order_tasks_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListTasksRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string worker_user_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_worker_user_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListTasksRequest.worker_user_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string review_user_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_review_user_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListTasksRequest.review_user_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool including_label_order_tasks = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          including_label_order_tasks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string additional_fields = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_additional_fields();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListTasksRequest.additional_fields"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListTasksRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListTasksRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  // repeated string worker_user_ids = 4;
  for (int i = 0, n = this->_internal_worker_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_worker_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListTasksRequest.worker_user_ids");
    target = stream->WriteString(4, s, target);
  }

  // repeated string review_user_ids = 5;
  for (int i = 0, n = this->_internal_review_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_review_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListTasksRequest.review_user_ids");
    target = stream->WriteString(5, s, target);
  }

  // bool including_label_order_tasks = 6;
  if (this->_internal_including_label_order_tasks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_including_label_order_tasks(), target);
  }

  // repeated string additional_fields = 7;
  for (int i = 0, n = this->_internal_additional_fields_size(); i < n; i++) {
    const auto& s = this->_internal_additional_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListTasksRequest.additional_fields");
    target = stream->WriteString(7, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListTasksRequest)
  return target;
}

size_t ListTasksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListTasksRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string worker_user_ids = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(worker_user_ids_.size());
  for (int i = 0, n = worker_user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      worker_user_ids_.Get(i));
  }

  // repeated string review_user_ids = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(review_user_ids_.size());
  for (int i = 0, n = review_user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      review_user_ids_.Get(i));
  }

  // repeated string additional_fields = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(additional_fields_.size());
  for (int i = 0, n = additional_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      additional_fields_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  // bool including_label_order_tasks = 6;
  if (this->_internal_including_label_order_tasks() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListTasksRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListTasksRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListTasksRequest::GetClassData() const { return &_class_data_; }

void ListTasksRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListTasksRequest *>(to)->MergeFrom(
      static_cast<const ListTasksRequest &>(from));
}


void ListTasksRequest::MergeFrom(const ListTasksRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListTasksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  worker_user_ids_.MergeFrom(from.worker_user_ids_);
  review_user_ids_.MergeFrom(from.review_user_ids_);
  additional_fields_.MergeFrom(from.additional_fields_);
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
  if (from._internal_including_label_order_tasks() != 0) {
    _internal_set_including_label_order_tasks(from._internal_including_label_order_tasks());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListTasksRequest::CopyFrom(const ListTasksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListTasksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTasksRequest::IsInitialized() const {
  return true;
}

void ListTasksRequest::InternalSwap(ListTasksRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  worker_user_ids_.InternalSwap(&other->worker_user_ids_);
  review_user_ids_.InternalSwap(&other->review_user_ids_);
  additional_fields_.InternalSwap(&other->additional_fields_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListTasksRequest, including_label_order_tasks_)
      + sizeof(ListTasksRequest::including_label_order_tasks_)
      - PROTOBUF_FIELD_OFFSET(ListTasksRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListTasksRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[209]);
}

// ===================================================================

class PatchTasksRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchTasksRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchTasksRequest::_Internal::user_app_id(const PatchTasksRequest* msg) {
  return *msg->user_app_id_;
}
void PatchTasksRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchTasksRequest::clear_tasks() {
  tasks_.Clear();
}
PatchTasksRequest::PatchTasksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tasks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchTasksRequest)
}
PatchTasksRequest::PatchTasksRequest(const PatchTasksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchTasksRequest)
}

inline void PatchTasksRequest::SharedCtor() {
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

PatchTasksRequest::~PatchTasksRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchTasksRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PatchTasksRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchTasksRequest::ArenaDtor(void* object) {
  PatchTasksRequest* _this = reinterpret_cast< PatchTasksRequest* >(object);
  (void)_this;
}
void PatchTasksRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatchTasksRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PatchTasksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchTasksRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tasks_.Clear();
  action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchTasksRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Task tasks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchTasksRequest.action"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchTasksRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchTasksRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Task tasks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tasks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tasks(i), target, stream);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchTasksRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchTasksRequest)
  return target;
}

size_t PatchTasksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchTasksRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Task tasks = 2;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchTasksRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PatchTasksRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchTasksRequest::GetClassData() const { return &_class_data_; }

void PatchTasksRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PatchTasksRequest *>(to)->MergeFrom(
      static_cast<const PatchTasksRequest &>(from));
}


void PatchTasksRequest::MergeFrom(const PatchTasksRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchTasksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tasks_.MergeFrom(from.tasks_);
  if (!from._internal_action().empty()) {
    _internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchTasksRequest::CopyFrom(const PatchTasksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchTasksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchTasksRequest::IsInitialized() const {
  return true;
}

void PatchTasksRequest::InternalSwap(PatchTasksRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tasks_.InternalSwap(&other->tasks_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_, lhs_arena,
      &other->action_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchTasksRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[210]);
}

// ===================================================================

class DeleteTasksRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteTasksRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteTasksRequest::_Internal::user_app_id(const DeleteTasksRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteTasksRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteTasksRequest::DeleteTasksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteTasksRequest)
}
DeleteTasksRequest::DeleteTasksRequest(const DeleteTasksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteTasksRequest)
}

inline void DeleteTasksRequest::SharedCtor() {
user_app_id_ = nullptr;
}

DeleteTasksRequest::~DeleteTasksRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteTasksRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteTasksRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteTasksRequest::ArenaDtor(void* object) {
  DeleteTasksRequest* _this = reinterpret_cast< DeleteTasksRequest* >(object);
  (void)_this;
}
void DeleteTasksRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteTasksRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteTasksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteTasksRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteTasksRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteTasksRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteTasksRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteTasksRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteTasksRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteTasksRequest)
  return target;
}

size_t DeleteTasksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteTasksRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteTasksRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteTasksRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteTasksRequest::GetClassData() const { return &_class_data_; }

void DeleteTasksRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteTasksRequest *>(to)->MergeFrom(
      static_cast<const DeleteTasksRequest &>(from));
}


void DeleteTasksRequest::MergeFrom(const DeleteTasksRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteTasksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteTasksRequest::CopyFrom(const DeleteTasksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteTasksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTasksRequest::IsInitialized() const {
  return true;
}

void DeleteTasksRequest::InternalSwap(DeleteTasksRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteTasksRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[211]);
}

// ===================================================================

class MultiTaskResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiTaskResponse* msg);
};

const ::clarifai::api::status::Status&
MultiTaskResponse::_Internal::status(const MultiTaskResponse* msg) {
  return *msg->status_;
}
void MultiTaskResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiTaskResponse::clear_tasks() {
  tasks_.Clear();
}
MultiTaskResponse::MultiTaskResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tasks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiTaskResponse)
}
MultiTaskResponse::MultiTaskResponse(const MultiTaskResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiTaskResponse)
}

inline void MultiTaskResponse::SharedCtor() {
status_ = nullptr;
}

MultiTaskResponse::~MultiTaskResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiTaskResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiTaskResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiTaskResponse::ArenaDtor(void* object) {
  MultiTaskResponse* _this = reinterpret_cast< MultiTaskResponse* >(object);
  (void)_this;
}
void MultiTaskResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiTaskResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiTaskResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiTaskResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tasks_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiTaskResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Task tasks = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiTaskResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiTaskResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.Task tasks = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tasks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tasks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiTaskResponse)
  return target;
}

size_t MultiTaskResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiTaskResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Task tasks = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiTaskResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiTaskResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiTaskResponse::GetClassData() const { return &_class_data_; }

void MultiTaskResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiTaskResponse *>(to)->MergeFrom(
      static_cast<const MultiTaskResponse &>(from));
}


void MultiTaskResponse::MergeFrom(const MultiTaskResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiTaskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tasks_.MergeFrom(from.tasks_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiTaskResponse::CopyFrom(const MultiTaskResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiTaskResponse::IsInitialized() const {
  return true;
}

void MultiTaskResponse::InternalSwap(MultiTaskResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tasks_.InternalSwap(&other->tasks_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiTaskResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[212]);
}

// ===================================================================

class SingleTaskResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleTaskResponse* msg);
  static const ::clarifai::api::Task& task(const SingleTaskResponse* msg);
};

const ::clarifai::api::status::Status&
SingleTaskResponse::_Internal::status(const SingleTaskResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::Task&
SingleTaskResponse::_Internal::task(const SingleTaskResponse* msg) {
  return *msg->task_;
}
void SingleTaskResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleTaskResponse::clear_task() {
  if (GetArenaForAllocation() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
}
SingleTaskResponse::SingleTaskResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleTaskResponse)
}
SingleTaskResponse::SingleTaskResponse(const SingleTaskResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_task()) {
    task_ = new ::clarifai::api::Task(*from.task_);
  } else {
    task_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleTaskResponse)
}

inline void SingleTaskResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&task_) -
    reinterpret_cast<char*>(&status_)) + sizeof(task_));
}

SingleTaskResponse::~SingleTaskResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleTaskResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SingleTaskResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete task_;
}

void SingleTaskResponse::ArenaDtor(void* object) {
  SingleTaskResponse* _this = reinterpret_cast< SingleTaskResponse* >(object);
  (void)_this;
}
void SingleTaskResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleTaskResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleTaskResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleTaskResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleTaskResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Task task = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleTaskResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleTaskResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.Task task = 2;
  if (this->_internal_has_task()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::task(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleTaskResponse)
  return target;
}

size_t SingleTaskResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleTaskResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.Task task = 2;
  if (this->_internal_has_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleTaskResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SingleTaskResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleTaskResponse::GetClassData() const { return &_class_data_; }

void SingleTaskResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SingleTaskResponse *>(to)->MergeFrom(
      static_cast<const SingleTaskResponse &>(from));
}


void SingleTaskResponse::MergeFrom(const SingleTaskResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleTaskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_task()) {
    _internal_mutable_task()->::clarifai::api::Task::MergeFrom(from._internal_task());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleTaskResponse::CopyFrom(const SingleTaskResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleTaskResponse::IsInitialized() const {
  return true;
}

void SingleTaskResponse::InternalSwap(SingleTaskResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleTaskResponse, task_)
      + sizeof(SingleTaskResponse::task_)
      - PROTOBUF_FIELD_OFFSET(SingleTaskResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleTaskResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[213]);
}

// ===================================================================

class GetTaskCountRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetTaskCountRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetTaskCountRequest::_Internal::user_app_id(const GetTaskCountRequest* msg) {
  return *msg->user_app_id_;
}
void GetTaskCountRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetTaskCountRequest::GetTaskCountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  user_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetTaskCountRequest)
}
GetTaskCountRequest::GetTaskCountRequest(const GetTaskCountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      user_ids_(from.user_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task_id().empty()) {
    task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_task_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetTaskCountRequest)
}

inline void GetTaskCountRequest::SharedCtor() {
task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

GetTaskCountRequest::~GetTaskCountRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetTaskCountRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetTaskCountRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetTaskCountRequest::ArenaDtor(void* object) {
  GetTaskCountRequest* _this = reinterpret_cast< GetTaskCountRequest* >(object);
  (void)_this;
}
void GetTaskCountRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTaskCountRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetTaskCountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetTaskCountRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_ids_.Clear();
  task_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTaskCountRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string task_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_task_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetTaskCountRequest.task_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string user_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetTaskCountRequest.user_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTaskCountRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetTaskCountRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string task_id = 2;
  if (!this->_internal_task_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetTaskCountRequest.task_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_task_id(), target);
  }

  // repeated string user_ids = 3;
  for (int i = 0, n = this->_internal_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetTaskCountRequest.user_ids");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetTaskCountRequest)
  return target;
}

size_t GetTaskCountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetTaskCountRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string user_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(user_ids_.size());
  for (int i = 0, n = user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      user_ids_.Get(i));
  }

  // string task_id = 2;
  if (!this->_internal_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTaskCountRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetTaskCountRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTaskCountRequest::GetClassData() const { return &_class_data_; }

void GetTaskCountRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetTaskCountRequest *>(to)->MergeFrom(
      static_cast<const GetTaskCountRequest &>(from));
}


void GetTaskCountRequest::MergeFrom(const GetTaskCountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetTaskCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  user_ids_.MergeFrom(from.user_ids_);
  if (!from._internal_task_id().empty()) {
    _internal_set_task_id(from._internal_task_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTaskCountRequest::CopyFrom(const GetTaskCountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetTaskCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTaskCountRequest::IsInitialized() const {
  return true;
}

void GetTaskCountRequest::InternalSwap(GetTaskCountRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  user_ids_.InternalSwap(&other->user_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &task_id_, lhs_arena,
      &other->task_id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTaskCountRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[214]);
}

// ===================================================================

class SingleTaskCountResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleTaskCountResponse* msg);
};

const ::clarifai::api::status::Status&
SingleTaskCountResponse::_Internal::status(const SingleTaskCountResponse* msg) {
  return *msg->status_;
}
void SingleTaskCountResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleTaskCountResponse::clear_counts() {
  counts_.Clear();
}
SingleTaskCountResponse::SingleTaskCountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  counts_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleTaskCountResponse)
}
SingleTaskCountResponse::SingleTaskCountResponse(const SingleTaskCountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      counts_(from.counts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_id(), 
      GetArenaForAllocation());
  }
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task_id().empty()) {
    task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_task_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleTaskCountResponse)
}

inline void SingleTaskCountResponse::SharedCtor() {
app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
status_ = nullptr;
}

SingleTaskCountResponse::~SingleTaskCountResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleTaskCountResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SingleTaskCountResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void SingleTaskCountResponse::ArenaDtor(void* object) {
  SingleTaskCountResponse* _this = reinterpret_cast< SingleTaskCountResponse* >(object);
  (void)_this;
}
void SingleTaskCountResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleTaskCountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleTaskCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleTaskCountResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  counts_.Clear();
  app_id_.ClearToEmpty();
  task_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleTaskCountResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.SingleTaskCountResponse.app_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string task_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_task_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.SingleTaskCountResponse.task_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.TaskStatusCountPerUser counts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_counts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleTaskCountResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleTaskCountResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // string app_id = 2;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.SingleTaskCountResponse.app_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_id(), target);
  }

  // string task_id = 3;
  if (!this->_internal_task_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.SingleTaskCountResponse.task_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_task_id(), target);
  }

  // repeated .clarifai.api.TaskStatusCountPerUser counts = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_counts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_counts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleTaskCountResponse)
  return target;
}

size_t SingleTaskCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleTaskCountResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.TaskStatusCountPerUser counts = 4;
  total_size += 1UL * this->_internal_counts_size();
  for (const auto& msg : this->counts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string app_id = 2;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string task_id = 3;
  if (!this->_internal_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleTaskCountResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SingleTaskCountResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleTaskCountResponse::GetClassData() const { return &_class_data_; }

void SingleTaskCountResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SingleTaskCountResponse *>(to)->MergeFrom(
      static_cast<const SingleTaskCountResponse &>(from));
}


void SingleTaskCountResponse::MergeFrom(const SingleTaskCountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleTaskCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  counts_.MergeFrom(from.counts_);
  if (!from._internal_app_id().empty()) {
    _internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_task_id().empty()) {
    _internal_set_task_id(from._internal_task_id());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleTaskCountResponse::CopyFrom(const SingleTaskCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleTaskCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleTaskCountResponse::IsInitialized() const {
  return true;
}

void SingleTaskCountResponse::InternalSwap(SingleTaskCountResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  counts_.InternalSwap(&other->counts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_id_, lhs_arena,
      &other->app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &task_id_, lhs_arena,
      &other->task_id_, rhs_arena
  );
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleTaskCountResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[215]);
}

// ===================================================================

class PostLabelOrdersRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostLabelOrdersRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostLabelOrdersRequest::_Internal::user_app_id(const PostLabelOrdersRequest* msg) {
  return *msg->user_app_id_;
}
void PostLabelOrdersRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostLabelOrdersRequest::clear_label_orders() {
  label_orders_.Clear();
}
PostLabelOrdersRequest::PostLabelOrdersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  label_orders_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostLabelOrdersRequest)
}
PostLabelOrdersRequest::PostLabelOrdersRequest(const PostLabelOrdersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      label_orders_(from.label_orders_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostLabelOrdersRequest)
}

inline void PostLabelOrdersRequest::SharedCtor() {
user_app_id_ = nullptr;
}

PostLabelOrdersRequest::~PostLabelOrdersRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostLabelOrdersRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostLabelOrdersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostLabelOrdersRequest::ArenaDtor(void* object) {
  PostLabelOrdersRequest* _this = reinterpret_cast< PostLabelOrdersRequest* >(object);
  (void)_this;
}
void PostLabelOrdersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostLabelOrdersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostLabelOrdersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostLabelOrdersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_orders_.Clear();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostLabelOrdersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.LabelOrder label_orders = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_label_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostLabelOrdersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostLabelOrdersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.LabelOrder label_orders = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_label_orders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_label_orders(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostLabelOrdersRequest)
  return target;
}

size_t PostLabelOrdersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostLabelOrdersRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.LabelOrder label_orders = 2;
  total_size += 1UL * this->_internal_label_orders_size();
  for (const auto& msg : this->label_orders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostLabelOrdersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostLabelOrdersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostLabelOrdersRequest::GetClassData() const { return &_class_data_; }

void PostLabelOrdersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostLabelOrdersRequest *>(to)->MergeFrom(
      static_cast<const PostLabelOrdersRequest &>(from));
}


void PostLabelOrdersRequest::MergeFrom(const PostLabelOrdersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostLabelOrdersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  label_orders_.MergeFrom(from.label_orders_);
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostLabelOrdersRequest::CopyFrom(const PostLabelOrdersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostLabelOrdersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostLabelOrdersRequest::IsInitialized() const {
  return true;
}

void PostLabelOrdersRequest::InternalSwap(PostLabelOrdersRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  label_orders_.InternalSwap(&other->label_orders_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostLabelOrdersRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[216]);
}

// ===================================================================

class GetLabelOrderRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetLabelOrderRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetLabelOrderRequest::_Internal::user_app_id(const GetLabelOrderRequest* msg) {
  return *msg->user_app_id_;
}
void GetLabelOrderRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetLabelOrderRequest::GetLabelOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetLabelOrderRequest)
}
GetLabelOrderRequest::GetLabelOrderRequest(const GetLabelOrderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    label_order_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_label_order_id().empty()) {
    label_order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label_order_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetLabelOrderRequest)
}

inline void GetLabelOrderRequest::SharedCtor() {
label_order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  label_order_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

GetLabelOrderRequest::~GetLabelOrderRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetLabelOrderRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetLabelOrderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  label_order_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetLabelOrderRequest::ArenaDtor(void* object) {
  GetLabelOrderRequest* _this = reinterpret_cast< GetLabelOrderRequest* >(object);
  (void)_this;
}
void GetLabelOrderRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLabelOrderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetLabelOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetLabelOrderRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_order_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLabelOrderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string label_order_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_label_order_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetLabelOrderRequest.label_order_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetLabelOrderRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetLabelOrderRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string label_order_id = 2;
  if (!this->_internal_label_order_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label_order_id().data(), static_cast<int>(this->_internal_label_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetLabelOrderRequest.label_order_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_label_order_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetLabelOrderRequest)
  return target;
}

size_t GetLabelOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetLabelOrderRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string label_order_id = 2;
  if (!this->_internal_label_order_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label_order_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLabelOrderRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetLabelOrderRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLabelOrderRequest::GetClassData() const { return &_class_data_; }

void GetLabelOrderRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetLabelOrderRequest *>(to)->MergeFrom(
      static_cast<const GetLabelOrderRequest &>(from));
}


void GetLabelOrderRequest::MergeFrom(const GetLabelOrderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetLabelOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_label_order_id().empty()) {
    _internal_set_label_order_id(from._internal_label_order_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLabelOrderRequest::CopyFrom(const GetLabelOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetLabelOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLabelOrderRequest::IsInitialized() const {
  return true;
}

void GetLabelOrderRequest::InternalSwap(GetLabelOrderRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &label_order_id_, lhs_arena,
      &other->label_order_id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLabelOrderRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[217]);
}

// ===================================================================

class ListLabelOrdersRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListLabelOrdersRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListLabelOrdersRequest::_Internal::user_app_id(const ListLabelOrdersRequest* msg) {
  return *msg->user_app_id_;
}
void ListLabelOrdersRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListLabelOrdersRequest::ListLabelOrdersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListLabelOrdersRequest)
}
ListLabelOrdersRequest::ListLabelOrdersRequest(const ListLabelOrdersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListLabelOrdersRequest)
}

inline void ListLabelOrdersRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListLabelOrdersRequest::~ListLabelOrdersRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListLabelOrdersRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListLabelOrdersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListLabelOrdersRequest::ArenaDtor(void* object) {
  ListLabelOrdersRequest* _this = reinterpret_cast< ListLabelOrdersRequest* >(object);
  (void)_this;
}
void ListLabelOrdersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListLabelOrdersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListLabelOrdersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListLabelOrdersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListLabelOrdersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListLabelOrdersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListLabelOrdersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListLabelOrdersRequest)
  return target;
}

size_t ListLabelOrdersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListLabelOrdersRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListLabelOrdersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListLabelOrdersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListLabelOrdersRequest::GetClassData() const { return &_class_data_; }

void ListLabelOrdersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListLabelOrdersRequest *>(to)->MergeFrom(
      static_cast<const ListLabelOrdersRequest &>(from));
}


void ListLabelOrdersRequest::MergeFrom(const ListLabelOrdersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListLabelOrdersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListLabelOrdersRequest::CopyFrom(const ListLabelOrdersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListLabelOrdersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListLabelOrdersRequest::IsInitialized() const {
  return true;
}

void ListLabelOrdersRequest::InternalSwap(ListLabelOrdersRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListLabelOrdersRequest, per_page_)
      + sizeof(ListLabelOrdersRequest::per_page_)
      - PROTOBUF_FIELD_OFFSET(ListLabelOrdersRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListLabelOrdersRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[218]);
}

// ===================================================================

class PatchLabelOrdersRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchLabelOrdersRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchLabelOrdersRequest::_Internal::user_app_id(const PatchLabelOrdersRequest* msg) {
  return *msg->user_app_id_;
}
void PatchLabelOrdersRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchLabelOrdersRequest::clear_label_orders() {
  label_orders_.Clear();
}
PatchLabelOrdersRequest::PatchLabelOrdersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  label_orders_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchLabelOrdersRequest)
}
PatchLabelOrdersRequest::PatchLabelOrdersRequest(const PatchLabelOrdersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      label_orders_(from.label_orders_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchLabelOrdersRequest)
}

inline void PatchLabelOrdersRequest::SharedCtor() {
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

PatchLabelOrdersRequest::~PatchLabelOrdersRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchLabelOrdersRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PatchLabelOrdersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchLabelOrdersRequest::ArenaDtor(void* object) {
  PatchLabelOrdersRequest* _this = reinterpret_cast< PatchLabelOrdersRequest* >(object);
  (void)_this;
}
void PatchLabelOrdersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatchLabelOrdersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PatchLabelOrdersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchLabelOrdersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_orders_.Clear();
  action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchLabelOrdersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.LabelOrder label_orders = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_label_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchLabelOrdersRequest.action"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchLabelOrdersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchLabelOrdersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.LabelOrder label_orders = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_label_orders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_label_orders(i), target, stream);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchLabelOrdersRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchLabelOrdersRequest)
  return target;
}

size_t PatchLabelOrdersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchLabelOrdersRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.LabelOrder label_orders = 2;
  total_size += 1UL * this->_internal_label_orders_size();
  for (const auto& msg : this->label_orders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchLabelOrdersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PatchLabelOrdersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchLabelOrdersRequest::GetClassData() const { return &_class_data_; }

void PatchLabelOrdersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PatchLabelOrdersRequest *>(to)->MergeFrom(
      static_cast<const PatchLabelOrdersRequest &>(from));
}


void PatchLabelOrdersRequest::MergeFrom(const PatchLabelOrdersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchLabelOrdersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  label_orders_.MergeFrom(from.label_orders_);
  if (!from._internal_action().empty()) {
    _internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchLabelOrdersRequest::CopyFrom(const PatchLabelOrdersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchLabelOrdersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchLabelOrdersRequest::IsInitialized() const {
  return true;
}

void PatchLabelOrdersRequest::InternalSwap(PatchLabelOrdersRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  label_orders_.InternalSwap(&other->label_orders_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_, lhs_arena,
      &other->action_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchLabelOrdersRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[219]);
}

// ===================================================================

class DeleteLabelOrdersRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteLabelOrdersRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteLabelOrdersRequest::_Internal::user_app_id(const DeleteLabelOrdersRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteLabelOrdersRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteLabelOrdersRequest::DeleteLabelOrdersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteLabelOrdersRequest)
}
DeleteLabelOrdersRequest::DeleteLabelOrdersRequest(const DeleteLabelOrdersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteLabelOrdersRequest)
}

inline void DeleteLabelOrdersRequest::SharedCtor() {
user_app_id_ = nullptr;
}

DeleteLabelOrdersRequest::~DeleteLabelOrdersRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteLabelOrdersRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteLabelOrdersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteLabelOrdersRequest::ArenaDtor(void* object) {
  DeleteLabelOrdersRequest* _this = reinterpret_cast< DeleteLabelOrdersRequest* >(object);
  (void)_this;
}
void DeleteLabelOrdersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteLabelOrdersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteLabelOrdersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteLabelOrdersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteLabelOrdersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteLabelOrdersRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteLabelOrdersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteLabelOrdersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteLabelOrdersRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteLabelOrdersRequest)
  return target;
}

size_t DeleteLabelOrdersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteLabelOrdersRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteLabelOrdersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteLabelOrdersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteLabelOrdersRequest::GetClassData() const { return &_class_data_; }

void DeleteLabelOrdersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteLabelOrdersRequest *>(to)->MergeFrom(
      static_cast<const DeleteLabelOrdersRequest &>(from));
}


void DeleteLabelOrdersRequest::MergeFrom(const DeleteLabelOrdersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteLabelOrdersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteLabelOrdersRequest::CopyFrom(const DeleteLabelOrdersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteLabelOrdersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteLabelOrdersRequest::IsInitialized() const {
  return true;
}

void DeleteLabelOrdersRequest::InternalSwap(DeleteLabelOrdersRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteLabelOrdersRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[220]);
}

// ===================================================================

class MultiLabelOrderResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiLabelOrderResponse* msg);
};

const ::clarifai::api::status::Status&
MultiLabelOrderResponse::_Internal::status(const MultiLabelOrderResponse* msg) {
  return *msg->status_;
}
void MultiLabelOrderResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiLabelOrderResponse::clear_label_orders() {
  label_orders_.Clear();
}
MultiLabelOrderResponse::MultiLabelOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  label_orders_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiLabelOrderResponse)
}
MultiLabelOrderResponse::MultiLabelOrderResponse(const MultiLabelOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      label_orders_(from.label_orders_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiLabelOrderResponse)
}

inline void MultiLabelOrderResponse::SharedCtor() {
status_ = nullptr;
}

MultiLabelOrderResponse::~MultiLabelOrderResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiLabelOrderResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiLabelOrderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiLabelOrderResponse::ArenaDtor(void* object) {
  MultiLabelOrderResponse* _this = reinterpret_cast< MultiLabelOrderResponse* >(object);
  (void)_this;
}
void MultiLabelOrderResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiLabelOrderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiLabelOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiLabelOrderResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_orders_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiLabelOrderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.LabelOrder label_orders = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_label_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiLabelOrderResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiLabelOrderResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.LabelOrder label_orders = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_label_orders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_label_orders(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiLabelOrderResponse)
  return target;
}

size_t MultiLabelOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiLabelOrderResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.LabelOrder label_orders = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_label_orders_size();
  for (const auto& msg : this->label_orders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiLabelOrderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiLabelOrderResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiLabelOrderResponse::GetClassData() const { return &_class_data_; }

void MultiLabelOrderResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiLabelOrderResponse *>(to)->MergeFrom(
      static_cast<const MultiLabelOrderResponse &>(from));
}


void MultiLabelOrderResponse::MergeFrom(const MultiLabelOrderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiLabelOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  label_orders_.MergeFrom(from.label_orders_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiLabelOrderResponse::CopyFrom(const MultiLabelOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiLabelOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiLabelOrderResponse::IsInitialized() const {
  return true;
}

void MultiLabelOrderResponse::InternalSwap(MultiLabelOrderResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  label_orders_.InternalSwap(&other->label_orders_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiLabelOrderResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[221]);
}

// ===================================================================

class SingleLabelOrderResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleLabelOrderResponse* msg);
  static const ::clarifai::api::LabelOrder& label_order(const SingleLabelOrderResponse* msg);
};

const ::clarifai::api::status::Status&
SingleLabelOrderResponse::_Internal::status(const SingleLabelOrderResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::LabelOrder&
SingleLabelOrderResponse::_Internal::label_order(const SingleLabelOrderResponse* msg) {
  return *msg->label_order_;
}
void SingleLabelOrderResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleLabelOrderResponse::clear_label_order() {
  if (GetArenaForAllocation() == nullptr && label_order_ != nullptr) {
    delete label_order_;
  }
  label_order_ = nullptr;
}
SingleLabelOrderResponse::SingleLabelOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleLabelOrderResponse)
}
SingleLabelOrderResponse::SingleLabelOrderResponse(const SingleLabelOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_label_order()) {
    label_order_ = new ::clarifai::api::LabelOrder(*from.label_order_);
  } else {
    label_order_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleLabelOrderResponse)
}

inline void SingleLabelOrderResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&label_order_) -
    reinterpret_cast<char*>(&status_)) + sizeof(label_order_));
}

SingleLabelOrderResponse::~SingleLabelOrderResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleLabelOrderResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SingleLabelOrderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete label_order_;
}

void SingleLabelOrderResponse::ArenaDtor(void* object) {
  SingleLabelOrderResponse* _this = reinterpret_cast< SingleLabelOrderResponse* >(object);
  (void)_this;
}
void SingleLabelOrderResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleLabelOrderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleLabelOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleLabelOrderResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && label_order_ != nullptr) {
    delete label_order_;
  }
  label_order_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleLabelOrderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.LabelOrder label_order = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_order(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleLabelOrderResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleLabelOrderResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.LabelOrder label_order = 2;
  if (this->_internal_has_label_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::label_order(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleLabelOrderResponse)
  return target;
}

size_t SingleLabelOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleLabelOrderResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.LabelOrder label_order = 2;
  if (this->_internal_has_label_order()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *label_order_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleLabelOrderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SingleLabelOrderResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleLabelOrderResponse::GetClassData() const { return &_class_data_; }

void SingleLabelOrderResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SingleLabelOrderResponse *>(to)->MergeFrom(
      static_cast<const SingleLabelOrderResponse &>(from));
}


void SingleLabelOrderResponse::MergeFrom(const SingleLabelOrderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleLabelOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_label_order()) {
    _internal_mutable_label_order()->::clarifai::api::LabelOrder::MergeFrom(from._internal_label_order());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleLabelOrderResponse::CopyFrom(const SingleLabelOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleLabelOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleLabelOrderResponse::IsInitialized() const {
  return true;
}

void SingleLabelOrderResponse::InternalSwap(SingleLabelOrderResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleLabelOrderResponse, label_order_)
      + sizeof(SingleLabelOrderResponse::label_order_)
      - PROTOBUF_FIELD_OFFSET(SingleLabelOrderResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleLabelOrderResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[222]);
}

// ===================================================================

class PostCollectorsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostCollectorsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostCollectorsRequest::_Internal::user_app_id(const PostCollectorsRequest* msg) {
  return *msg->user_app_id_;
}
void PostCollectorsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostCollectorsRequest::clear_collectors() {
  collectors_.Clear();
}
PostCollectorsRequest::PostCollectorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  collectors_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostCollectorsRequest)
}
PostCollectorsRequest::PostCollectorsRequest(const PostCollectorsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      collectors_(from.collectors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostCollectorsRequest)
}

inline void PostCollectorsRequest::SharedCtor() {
user_app_id_ = nullptr;
}

PostCollectorsRequest::~PostCollectorsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostCollectorsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostCollectorsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostCollectorsRequest::ArenaDtor(void* object) {
  PostCollectorsRequest* _this = reinterpret_cast< PostCollectorsRequest* >(object);
  (void)_this;
}
void PostCollectorsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostCollectorsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostCollectorsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostCollectorsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collectors_.Clear();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostCollectorsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Collector collectors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collectors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostCollectorsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostCollectorsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Collector collectors = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_collectors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_collectors(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostCollectorsRequest)
  return target;
}

size_t PostCollectorsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostCollectorsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Collector collectors = 2;
  total_size += 1UL * this->_internal_collectors_size();
  for (const auto& msg : this->collectors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostCollectorsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostCollectorsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostCollectorsRequest::GetClassData() const { return &_class_data_; }

void PostCollectorsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostCollectorsRequest *>(to)->MergeFrom(
      static_cast<const PostCollectorsRequest &>(from));
}


void PostCollectorsRequest::MergeFrom(const PostCollectorsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostCollectorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  collectors_.MergeFrom(from.collectors_);
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostCollectorsRequest::CopyFrom(const PostCollectorsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostCollectorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostCollectorsRequest::IsInitialized() const {
  return true;
}

void PostCollectorsRequest::InternalSwap(PostCollectorsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  collectors_.InternalSwap(&other->collectors_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostCollectorsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[223]);
}

// ===================================================================

class PatchCollectorsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PatchCollectorsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PatchCollectorsRequest::_Internal::user_app_id(const PatchCollectorsRequest* msg) {
  return *msg->user_app_id_;
}
void PatchCollectorsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PatchCollectorsRequest::clear_collectors() {
  collectors_.Clear();
}
PatchCollectorsRequest::PatchCollectorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  collectors_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PatchCollectorsRequest)
}
PatchCollectorsRequest::PatchCollectorsRequest(const PatchCollectorsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      collectors_(from.collectors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PatchCollectorsRequest)
}

inline void PatchCollectorsRequest::SharedCtor() {
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

PatchCollectorsRequest::~PatchCollectorsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PatchCollectorsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PatchCollectorsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PatchCollectorsRequest::ArenaDtor(void* object) {
  PatchCollectorsRequest* _this = reinterpret_cast< PatchCollectorsRequest* >(object);
  (void)_this;
}
void PatchCollectorsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatchCollectorsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PatchCollectorsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PatchCollectorsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collectors_.Clear();
  action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchCollectorsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Collector collectors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collectors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PatchCollectorsRequest.action"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchCollectorsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PatchCollectorsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.Collector collectors = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_collectors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_collectors(i), target, stream);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PatchCollectorsRequest.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PatchCollectorsRequest)
  return target;
}

size_t PatchCollectorsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PatchCollectorsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Collector collectors = 2;
  total_size += 1UL * this->_internal_collectors_size();
  for (const auto& msg : this->collectors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string action = 3;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatchCollectorsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PatchCollectorsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatchCollectorsRequest::GetClassData() const { return &_class_data_; }

void PatchCollectorsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PatchCollectorsRequest *>(to)->MergeFrom(
      static_cast<const PatchCollectorsRequest &>(from));
}


void PatchCollectorsRequest::MergeFrom(const PatchCollectorsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PatchCollectorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  collectors_.MergeFrom(from.collectors_);
  if (!from._internal_action().empty()) {
    _internal_set_action(from._internal_action());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatchCollectorsRequest::CopyFrom(const PatchCollectorsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PatchCollectorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchCollectorsRequest::IsInitialized() const {
  return true;
}

void PatchCollectorsRequest::InternalSwap(PatchCollectorsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  collectors_.InternalSwap(&other->collectors_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_, lhs_arena,
      &other->action_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchCollectorsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[224]);
}

// ===================================================================

class DeleteCollectorsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteCollectorsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteCollectorsRequest::_Internal::user_app_id(const DeleteCollectorsRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteCollectorsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteCollectorsRequest::DeleteCollectorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteCollectorsRequest)
}
DeleteCollectorsRequest::DeleteCollectorsRequest(const DeleteCollectorsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  delete_all_ = from.delete_all_;
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteCollectorsRequest)
}

inline void DeleteCollectorsRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&delete_all_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(delete_all_));
}

DeleteCollectorsRequest::~DeleteCollectorsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteCollectorsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteCollectorsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteCollectorsRequest::ArenaDtor(void* object) {
  DeleteCollectorsRequest* _this = reinterpret_cast< DeleteCollectorsRequest* >(object);
  (void)_this;
}
void DeleteCollectorsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteCollectorsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteCollectorsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteCollectorsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  delete_all_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteCollectorsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteCollectorsRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool delete_all = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          delete_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteCollectorsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteCollectorsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteCollectorsRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  // bool delete_all = 3;
  if (this->_internal_delete_all() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_delete_all(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteCollectorsRequest)
  return target;
}

size_t DeleteCollectorsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteCollectorsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // bool delete_all = 3;
  if (this->_internal_delete_all() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteCollectorsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteCollectorsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteCollectorsRequest::GetClassData() const { return &_class_data_; }

void DeleteCollectorsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteCollectorsRequest *>(to)->MergeFrom(
      static_cast<const DeleteCollectorsRequest &>(from));
}


void DeleteCollectorsRequest::MergeFrom(const DeleteCollectorsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteCollectorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_delete_all() != 0) {
    _internal_set_delete_all(from._internal_delete_all());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteCollectorsRequest::CopyFrom(const DeleteCollectorsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteCollectorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCollectorsRequest::IsInitialized() const {
  return true;
}

void DeleteCollectorsRequest::InternalSwap(DeleteCollectorsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteCollectorsRequest, delete_all_)
      + sizeof(DeleteCollectorsRequest::delete_all_)
      - PROTOBUF_FIELD_OFFSET(DeleteCollectorsRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteCollectorsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[225]);
}

// ===================================================================

class GetCollectorRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetCollectorRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetCollectorRequest::_Internal::user_app_id(const GetCollectorRequest* msg) {
  return *msg->user_app_id_;
}
void GetCollectorRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetCollectorRequest::GetCollectorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetCollectorRequest)
}
GetCollectorRequest::GetCollectorRequest(const GetCollectorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  collector_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    collector_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collector_id().empty()) {
    collector_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_collector_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetCollectorRequest)
}

inline void GetCollectorRequest::SharedCtor() {
collector_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  collector_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

GetCollectorRequest::~GetCollectorRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetCollectorRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetCollectorRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  collector_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetCollectorRequest::ArenaDtor(void* object) {
  GetCollectorRequest* _this = reinterpret_cast< GetCollectorRequest* >(object);
  (void)_this;
}
void GetCollectorRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCollectorRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetCollectorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetCollectorRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collector_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCollectorRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string collector_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_collector_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetCollectorRequest.collector_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetCollectorRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetCollectorRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string collector_id = 2;
  if (!this->_internal_collector_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collector_id().data(), static_cast<int>(this->_internal_collector_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetCollectorRequest.collector_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_collector_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetCollectorRequest)
  return target;
}

size_t GetCollectorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetCollectorRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string collector_id = 2;
  if (!this->_internal_collector_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collector_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCollectorRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetCollectorRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCollectorRequest::GetClassData() const { return &_class_data_; }

void GetCollectorRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetCollectorRequest *>(to)->MergeFrom(
      static_cast<const GetCollectorRequest &>(from));
}


void GetCollectorRequest::MergeFrom(const GetCollectorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetCollectorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_collector_id().empty()) {
    _internal_set_collector_id(from._internal_collector_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCollectorRequest::CopyFrom(const GetCollectorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetCollectorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCollectorRequest::IsInitialized() const {
  return true;
}

void GetCollectorRequest::InternalSwap(GetCollectorRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &collector_id_, lhs_arena,
      &other->collector_id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCollectorRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[226]);
}

// ===================================================================

class ListCollectorsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListCollectorsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListCollectorsRequest::_Internal::user_app_id(const ListCollectorsRequest* msg) {
  return *msg->user_app_id_;
}
void ListCollectorsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListCollectorsRequest::ListCollectorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListCollectorsRequest)
}
ListCollectorsRequest::ListCollectorsRequest(const ListCollectorsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListCollectorsRequest)
}

inline void ListCollectorsRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListCollectorsRequest::~ListCollectorsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListCollectorsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListCollectorsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListCollectorsRequest::ArenaDtor(void* object) {
  ListCollectorsRequest* _this = reinterpret_cast< ListCollectorsRequest* >(object);
  (void)_this;
}
void ListCollectorsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListCollectorsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListCollectorsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListCollectorsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListCollectorsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListCollectorsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListCollectorsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListCollectorsRequest)
  return target;
}

size_t ListCollectorsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListCollectorsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListCollectorsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListCollectorsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListCollectorsRequest::GetClassData() const { return &_class_data_; }

void ListCollectorsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListCollectorsRequest *>(to)->MergeFrom(
      static_cast<const ListCollectorsRequest &>(from));
}


void ListCollectorsRequest::MergeFrom(const ListCollectorsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListCollectorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListCollectorsRequest::CopyFrom(const ListCollectorsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListCollectorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCollectorsRequest::IsInitialized() const {
  return true;
}

void ListCollectorsRequest::InternalSwap(ListCollectorsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListCollectorsRequest, per_page_)
      + sizeof(ListCollectorsRequest::per_page_)
      - PROTOBUF_FIELD_OFFSET(ListCollectorsRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCollectorsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[227]);
}

// ===================================================================

class MultiCollectorResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiCollectorResponse* msg);
};

const ::clarifai::api::status::Status&
MultiCollectorResponse::_Internal::status(const MultiCollectorResponse* msg) {
  return *msg->status_;
}
void MultiCollectorResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiCollectorResponse::clear_collectors() {
  collectors_.Clear();
}
MultiCollectorResponse::MultiCollectorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  collectors_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiCollectorResponse)
}
MultiCollectorResponse::MultiCollectorResponse(const MultiCollectorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      collectors_(from.collectors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiCollectorResponse)
}

inline void MultiCollectorResponse::SharedCtor() {
status_ = nullptr;
}

MultiCollectorResponse::~MultiCollectorResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiCollectorResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiCollectorResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiCollectorResponse::ArenaDtor(void* object) {
  MultiCollectorResponse* _this = reinterpret_cast< MultiCollectorResponse* >(object);
  (void)_this;
}
void MultiCollectorResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiCollectorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiCollectorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiCollectorResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collectors_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiCollectorResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.Collector collectors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collectors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiCollectorResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiCollectorResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.Collector collectors = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_collectors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_collectors(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiCollectorResponse)
  return target;
}

size_t MultiCollectorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiCollectorResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.Collector collectors = 2;
  total_size += 1UL * this->_internal_collectors_size();
  for (const auto& msg : this->collectors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiCollectorResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiCollectorResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiCollectorResponse::GetClassData() const { return &_class_data_; }

void MultiCollectorResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiCollectorResponse *>(to)->MergeFrom(
      static_cast<const MultiCollectorResponse &>(from));
}


void MultiCollectorResponse::MergeFrom(const MultiCollectorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiCollectorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  collectors_.MergeFrom(from.collectors_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiCollectorResponse::CopyFrom(const MultiCollectorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiCollectorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiCollectorResponse::IsInitialized() const {
  return true;
}

void MultiCollectorResponse::InternalSwap(MultiCollectorResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  collectors_.InternalSwap(&other->collectors_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiCollectorResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[228]);
}

// ===================================================================

class SingleCollectorResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleCollectorResponse* msg);
  static const ::clarifai::api::Collector& collector(const SingleCollectorResponse* msg);
};

const ::clarifai::api::status::Status&
SingleCollectorResponse::_Internal::status(const SingleCollectorResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::Collector&
SingleCollectorResponse::_Internal::collector(const SingleCollectorResponse* msg) {
  return *msg->collector_;
}
void SingleCollectorResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleCollectorResponse::clear_collector() {
  if (GetArenaForAllocation() == nullptr && collector_ != nullptr) {
    delete collector_;
  }
  collector_ = nullptr;
}
SingleCollectorResponse::SingleCollectorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleCollectorResponse)
}
SingleCollectorResponse::SingleCollectorResponse(const SingleCollectorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_collector()) {
    collector_ = new ::clarifai::api::Collector(*from.collector_);
  } else {
    collector_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleCollectorResponse)
}

inline void SingleCollectorResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&collector_) -
    reinterpret_cast<char*>(&status_)) + sizeof(collector_));
}

SingleCollectorResponse::~SingleCollectorResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleCollectorResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SingleCollectorResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete collector_;
}

void SingleCollectorResponse::ArenaDtor(void* object) {
  SingleCollectorResponse* _this = reinterpret_cast< SingleCollectorResponse* >(object);
  (void)_this;
}
void SingleCollectorResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleCollectorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleCollectorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleCollectorResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && collector_ != nullptr) {
    delete collector_;
  }
  collector_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleCollectorResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.Collector collector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_collector(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleCollectorResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleCollectorResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.Collector collector = 2;
  if (this->_internal_has_collector()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::collector(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleCollectorResponse)
  return target;
}

size_t SingleCollectorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleCollectorResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.Collector collector = 2;
  if (this->_internal_has_collector()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *collector_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleCollectorResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SingleCollectorResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleCollectorResponse::GetClassData() const { return &_class_data_; }

void SingleCollectorResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SingleCollectorResponse *>(to)->MergeFrom(
      static_cast<const SingleCollectorResponse &>(from));
}


void SingleCollectorResponse::MergeFrom(const SingleCollectorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleCollectorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_collector()) {
    _internal_mutable_collector()->::clarifai::api::Collector::MergeFrom(from._internal_collector());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleCollectorResponse::CopyFrom(const SingleCollectorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleCollectorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleCollectorResponse::IsInitialized() const {
  return true;
}

void SingleCollectorResponse::InternalSwap(SingleCollectorResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleCollectorResponse, collector_)
      + sizeof(SingleCollectorResponse::collector_)
      - PROTOBUF_FIELD_OFFSET(SingleCollectorResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleCollectorResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[229]);
}

// ===================================================================

class PostStatValuesRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostStatValuesRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostStatValuesRequest::_Internal::user_app_id(const PostStatValuesRequest* msg) {
  return *msg->user_app_id_;
}
void PostStatValuesRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostStatValuesRequest::clear_stat_values() {
  stat_values_.Clear();
}
PostStatValuesRequest::PostStatValuesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stat_values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostStatValuesRequest)
}
PostStatValuesRequest::PostStatValuesRequest(const PostStatValuesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stat_values_(from.stat_values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostStatValuesRequest)
}

inline void PostStatValuesRequest::SharedCtor() {
user_app_id_ = nullptr;
}

PostStatValuesRequest::~PostStatValuesRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostStatValuesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostStatValuesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostStatValuesRequest::ArenaDtor(void* object) {
  PostStatValuesRequest* _this = reinterpret_cast< PostStatValuesRequest* >(object);
  (void)_this;
}
void PostStatValuesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostStatValuesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostStatValuesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostStatValuesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stat_values_.Clear();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostStatValuesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.StatValue stat_values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stat_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostStatValuesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostStatValuesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.StatValue stat_values = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stat_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stat_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostStatValuesRequest)
  return target;
}

size_t PostStatValuesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostStatValuesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.StatValue stat_values = 2;
  total_size += 1UL * this->_internal_stat_values_size();
  for (const auto& msg : this->stat_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostStatValuesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostStatValuesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostStatValuesRequest::GetClassData() const { return &_class_data_; }

void PostStatValuesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostStatValuesRequest *>(to)->MergeFrom(
      static_cast<const PostStatValuesRequest &>(from));
}


void PostStatValuesRequest::MergeFrom(const PostStatValuesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostStatValuesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  stat_values_.MergeFrom(from.stat_values_);
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostStatValuesRequest::CopyFrom(const PostStatValuesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostStatValuesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostStatValuesRequest::IsInitialized() const {
  return true;
}

void PostStatValuesRequest::InternalSwap(PostStatValuesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  stat_values_.InternalSwap(&other->stat_values_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostStatValuesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[230]);
}

// ===================================================================

class MultiStatValueResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiStatValueResponse* msg);
};

const ::clarifai::api::status::Status&
MultiStatValueResponse::_Internal::status(const MultiStatValueResponse* msg) {
  return *msg->status_;
}
void MultiStatValueResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiStatValueResponse::clear_stat_values() {
  stat_values_.Clear();
}
MultiStatValueResponse::MultiStatValueResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stat_values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiStatValueResponse)
}
MultiStatValueResponse::MultiStatValueResponse(const MultiStatValueResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stat_values_(from.stat_values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiStatValueResponse)
}

inline void MultiStatValueResponse::SharedCtor() {
status_ = nullptr;
}

MultiStatValueResponse::~MultiStatValueResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiStatValueResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiStatValueResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiStatValueResponse::ArenaDtor(void* object) {
  MultiStatValueResponse* _this = reinterpret_cast< MultiStatValueResponse* >(object);
  (void)_this;
}
void MultiStatValueResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiStatValueResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiStatValueResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiStatValueResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stat_values_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiStatValueResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.StatValue stat_values = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stat_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiStatValueResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiStatValueResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.StatValue stat_values = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stat_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stat_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiStatValueResponse)
  return target;
}

size_t MultiStatValueResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiStatValueResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.StatValue stat_values = 2 [(.clarifai.api.utils.cl_show_if_empty) = true];
  total_size += 1UL * this->_internal_stat_values_size();
  for (const auto& msg : this->stat_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiStatValueResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiStatValueResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiStatValueResponse::GetClassData() const { return &_class_data_; }

void MultiStatValueResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiStatValueResponse *>(to)->MergeFrom(
      static_cast<const MultiStatValueResponse &>(from));
}


void MultiStatValueResponse::MergeFrom(const MultiStatValueResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiStatValueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  stat_values_.MergeFrom(from.stat_values_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiStatValueResponse::CopyFrom(const MultiStatValueResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiStatValueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiStatValueResponse::IsInitialized() const {
  return true;
}

void MultiStatValueResponse::InternalSwap(MultiStatValueResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  stat_values_.InternalSwap(&other->stat_values_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiStatValueResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[231]);
}

// ===================================================================

class PostStatValuesAggregateRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostStatValuesAggregateRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostStatValuesAggregateRequest::_Internal::user_app_id(const PostStatValuesAggregateRequest* msg) {
  return *msg->user_app_id_;
}
void PostStatValuesAggregateRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostStatValuesAggregateRequest::clear_stat_value_aggregate_queries() {
  stat_value_aggregate_queries_.Clear();
}
PostStatValuesAggregateRequest::PostStatValuesAggregateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stat_value_aggregate_queries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostStatValuesAggregateRequest)
}
PostStatValuesAggregateRequest::PostStatValuesAggregateRequest(const PostStatValuesAggregateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stat_value_aggregate_queries_(from.stat_value_aggregate_queries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostStatValuesAggregateRequest)
}

inline void PostStatValuesAggregateRequest::SharedCtor() {
user_app_id_ = nullptr;
}

PostStatValuesAggregateRequest::~PostStatValuesAggregateRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostStatValuesAggregateRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostStatValuesAggregateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostStatValuesAggregateRequest::ArenaDtor(void* object) {
  PostStatValuesAggregateRequest* _this = reinterpret_cast< PostStatValuesAggregateRequest* >(object);
  (void)_this;
}
void PostStatValuesAggregateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostStatValuesAggregateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostStatValuesAggregateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostStatValuesAggregateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stat_value_aggregate_queries_.Clear();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostStatValuesAggregateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.StatValueAggregateQuery stat_value_aggregate_queries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stat_value_aggregate_queries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostStatValuesAggregateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostStatValuesAggregateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.StatValueAggregateQuery stat_value_aggregate_queries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stat_value_aggregate_queries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stat_value_aggregate_queries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostStatValuesAggregateRequest)
  return target;
}

size_t PostStatValuesAggregateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostStatValuesAggregateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.StatValueAggregateQuery stat_value_aggregate_queries = 2;
  total_size += 1UL * this->_internal_stat_value_aggregate_queries_size();
  for (const auto& msg : this->stat_value_aggregate_queries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostStatValuesAggregateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostStatValuesAggregateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostStatValuesAggregateRequest::GetClassData() const { return &_class_data_; }

void PostStatValuesAggregateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostStatValuesAggregateRequest *>(to)->MergeFrom(
      static_cast<const PostStatValuesAggregateRequest &>(from));
}


void PostStatValuesAggregateRequest::MergeFrom(const PostStatValuesAggregateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostStatValuesAggregateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  stat_value_aggregate_queries_.MergeFrom(from.stat_value_aggregate_queries_);
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostStatValuesAggregateRequest::CopyFrom(const PostStatValuesAggregateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostStatValuesAggregateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostStatValuesAggregateRequest::IsInitialized() const {
  return true;
}

void PostStatValuesAggregateRequest::InternalSwap(PostStatValuesAggregateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  stat_value_aggregate_queries_.InternalSwap(&other->stat_value_aggregate_queries_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostStatValuesAggregateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[232]);
}

// ===================================================================

class MultiStatValueAggregateResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiStatValueAggregateResponse* msg);
};

const ::clarifai::api::status::Status&
MultiStatValueAggregateResponse::_Internal::status(const MultiStatValueAggregateResponse* msg) {
  return *msg->status_;
}
void MultiStatValueAggregateResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiStatValueAggregateResponse::clear_stat_value_aggregate_results() {
  stat_value_aggregate_results_.Clear();
}
MultiStatValueAggregateResponse::MultiStatValueAggregateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stat_value_aggregate_results_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiStatValueAggregateResponse)
}
MultiStatValueAggregateResponse::MultiStatValueAggregateResponse(const MultiStatValueAggregateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stat_value_aggregate_results_(from.stat_value_aggregate_results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiStatValueAggregateResponse)
}

inline void MultiStatValueAggregateResponse::SharedCtor() {
status_ = nullptr;
}

MultiStatValueAggregateResponse::~MultiStatValueAggregateResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiStatValueAggregateResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiStatValueAggregateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiStatValueAggregateResponse::ArenaDtor(void* object) {
  MultiStatValueAggregateResponse* _this = reinterpret_cast< MultiStatValueAggregateResponse* >(object);
  (void)_this;
}
void MultiStatValueAggregateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiStatValueAggregateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiStatValueAggregateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiStatValueAggregateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stat_value_aggregate_results_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiStatValueAggregateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.StatValueAggregateResult stat_value_aggregate_results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stat_value_aggregate_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiStatValueAggregateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiStatValueAggregateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.StatValueAggregateResult stat_value_aggregate_results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stat_value_aggregate_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stat_value_aggregate_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiStatValueAggregateResponse)
  return target;
}

size_t MultiStatValueAggregateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiStatValueAggregateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.StatValueAggregateResult stat_value_aggregate_results = 2;
  total_size += 1UL * this->_internal_stat_value_aggregate_results_size();
  for (const auto& msg : this->stat_value_aggregate_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiStatValueAggregateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiStatValueAggregateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiStatValueAggregateResponse::GetClassData() const { return &_class_data_; }

void MultiStatValueAggregateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiStatValueAggregateResponse *>(to)->MergeFrom(
      static_cast<const MultiStatValueAggregateResponse &>(from));
}


void MultiStatValueAggregateResponse::MergeFrom(const MultiStatValueAggregateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiStatValueAggregateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  stat_value_aggregate_results_.MergeFrom(from.stat_value_aggregate_results_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiStatValueAggregateResponse::CopyFrom(const MultiStatValueAggregateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiStatValueAggregateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiStatValueAggregateResponse::IsInitialized() const {
  return true;
}

void MultiStatValueAggregateResponse::InternalSwap(MultiStatValueAggregateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  stat_value_aggregate_results_.InternalSwap(&other->stat_value_aggregate_results_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiStatValueAggregateResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[233]);
}

// ===================================================================

class PostTrendingMetricsViewRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostTrendingMetricsViewRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostTrendingMetricsViewRequest::_Internal::user_app_id(const PostTrendingMetricsViewRequest* msg) {
  return *msg->user_app_id_;
}
void PostTrendingMetricsViewRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
PostTrendingMetricsViewRequest::PostTrendingMetricsViewRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostTrendingMetricsViewRequest)
}
PostTrendingMetricsViewRequest::PostTrendingMetricsViewRequest(const PostTrendingMetricsViewRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  view_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    view_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_view_type().empty()) {
    view_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_view_type(), 
      GetArenaForAllocation());
  }
  object_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    object_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_object_id().empty()) {
    object_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_object_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostTrendingMetricsViewRequest)
}

inline void PostTrendingMetricsViewRequest::SharedCtor() {
view_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  view_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
object_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  object_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

PostTrendingMetricsViewRequest::~PostTrendingMetricsViewRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostTrendingMetricsViewRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostTrendingMetricsViewRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  view_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  object_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostTrendingMetricsViewRequest::ArenaDtor(void* object) {
  PostTrendingMetricsViewRequest* _this = reinterpret_cast< PostTrendingMetricsViewRequest* >(object);
  (void)_this;
}
void PostTrendingMetricsViewRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostTrendingMetricsViewRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostTrendingMetricsViewRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostTrendingMetricsViewRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  view_type_.ClearToEmpty();
  object_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostTrendingMetricsViewRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string view_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_view_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostTrendingMetricsViewRequest.view_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string object_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_object_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.PostTrendingMetricsViewRequest.object_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostTrendingMetricsViewRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostTrendingMetricsViewRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string view_type = 2;
  if (!this->_internal_view_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_view_type().data(), static_cast<int>(this->_internal_view_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostTrendingMetricsViewRequest.view_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_view_type(), target);
  }

  // string object_id = 3;
  if (!this->_internal_object_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_object_id().data(), static_cast<int>(this->_internal_object_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.PostTrendingMetricsViewRequest.object_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostTrendingMetricsViewRequest)
  return target;
}

size_t PostTrendingMetricsViewRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostTrendingMetricsViewRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string view_type = 2;
  if (!this->_internal_view_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_view_type());
  }

  // string object_id = 3;
  if (!this->_internal_object_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_object_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostTrendingMetricsViewRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostTrendingMetricsViewRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostTrendingMetricsViewRequest::GetClassData() const { return &_class_data_; }

void PostTrendingMetricsViewRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostTrendingMetricsViewRequest *>(to)->MergeFrom(
      static_cast<const PostTrendingMetricsViewRequest &>(from));
}


void PostTrendingMetricsViewRequest::MergeFrom(const PostTrendingMetricsViewRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostTrendingMetricsViewRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_view_type().empty()) {
    _internal_set_view_type(from._internal_view_type());
  }
  if (!from._internal_object_id().empty()) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostTrendingMetricsViewRequest::CopyFrom(const PostTrendingMetricsViewRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostTrendingMetricsViewRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostTrendingMetricsViewRequest::IsInitialized() const {
  return true;
}

void PostTrendingMetricsViewRequest::InternalSwap(PostTrendingMetricsViewRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &view_type_, lhs_arena,
      &other->view_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &object_id_, lhs_arena,
      &other->object_id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostTrendingMetricsViewRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[234]);
}

// ===================================================================

class ListTrendingMetricsViewsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListTrendingMetricsViewsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListTrendingMetricsViewsRequest::_Internal::user_app_id(const ListTrendingMetricsViewsRequest* msg) {
  return *msg->user_app_id_;
}
void ListTrendingMetricsViewsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListTrendingMetricsViewsRequest::ListTrendingMetricsViewsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListTrendingMetricsViewsRequest)
}
ListTrendingMetricsViewsRequest::ListTrendingMetricsViewsRequest(const ListTrendingMetricsViewsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  view_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    view_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_view_type().empty()) {
    view_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_view_type(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListTrendingMetricsViewsRequest)
}

inline void ListTrendingMetricsViewsRequest::SharedCtor() {
view_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  view_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListTrendingMetricsViewsRequest::~ListTrendingMetricsViewsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListTrendingMetricsViewsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListTrendingMetricsViewsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  view_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListTrendingMetricsViewsRequest::ArenaDtor(void* object) {
  ListTrendingMetricsViewsRequest* _this = reinterpret_cast< ListTrendingMetricsViewsRequest* >(object);
  (void)_this;
}
void ListTrendingMetricsViewsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListTrendingMetricsViewsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListTrendingMetricsViewsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListTrendingMetricsViewsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  view_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListTrendingMetricsViewsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string view_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_view_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.ListTrendingMetricsViewsRequest.view_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListTrendingMetricsViewsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListTrendingMetricsViewsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string view_type = 2;
  if (!this->_internal_view_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_view_type().data(), static_cast<int>(this->_internal_view_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.ListTrendingMetricsViewsRequest.view_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_view_type(), target);
  }

  // uint32 page = 3;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_page(), target);
  }

  // uint32 per_page = 4;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListTrendingMetricsViewsRequest)
  return target;
}

size_t ListTrendingMetricsViewsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListTrendingMetricsViewsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string view_type = 2;
  if (!this->_internal_view_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_view_type());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 3;
  if (this->_internal_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 4;
  if (this->_internal_per_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListTrendingMetricsViewsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListTrendingMetricsViewsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListTrendingMetricsViewsRequest::GetClassData() const { return &_class_data_; }

void ListTrendingMetricsViewsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListTrendingMetricsViewsRequest *>(to)->MergeFrom(
      static_cast<const ListTrendingMetricsViewsRequest &>(from));
}


void ListTrendingMetricsViewsRequest::MergeFrom(const ListTrendingMetricsViewsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListTrendingMetricsViewsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_view_type().empty()) {
    _internal_set_view_type(from._internal_view_type());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListTrendingMetricsViewsRequest::CopyFrom(const ListTrendingMetricsViewsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListTrendingMetricsViewsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTrendingMetricsViewsRequest::IsInitialized() const {
  return true;
}

void ListTrendingMetricsViewsRequest::InternalSwap(ListTrendingMetricsViewsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &view_type_, lhs_arena,
      &other->view_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListTrendingMetricsViewsRequest, per_page_)
      + sizeof(ListTrendingMetricsViewsRequest::per_page_)
      - PROTOBUF_FIELD_OFFSET(ListTrendingMetricsViewsRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListTrendingMetricsViewsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[235]);
}

// ===================================================================

class MultiTrendingMetricsViewResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiTrendingMetricsViewResponse* msg);
};

const ::clarifai::api::status::Status&
MultiTrendingMetricsViewResponse::_Internal::status(const MultiTrendingMetricsViewResponse* msg) {
  return *msg->status_;
}
void MultiTrendingMetricsViewResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiTrendingMetricsViewResponse::clear_metrics() {
  metrics_.Clear();
}
MultiTrendingMetricsViewResponse::MultiTrendingMetricsViewResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  metrics_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiTrendingMetricsViewResponse)
}
MultiTrendingMetricsViewResponse::MultiTrendingMetricsViewResponse(const MultiTrendingMetricsViewResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      metrics_(from.metrics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiTrendingMetricsViewResponse)
}

inline void MultiTrendingMetricsViewResponse::SharedCtor() {
status_ = nullptr;
}

MultiTrendingMetricsViewResponse::~MultiTrendingMetricsViewResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiTrendingMetricsViewResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiTrendingMetricsViewResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiTrendingMetricsViewResponse::ArenaDtor(void* object) {
  MultiTrendingMetricsViewResponse* _this = reinterpret_cast< MultiTrendingMetricsViewResponse* >(object);
  (void)_this;
}
void MultiTrendingMetricsViewResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiTrendingMetricsViewResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiTrendingMetricsViewResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiTrendingMetricsViewResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metrics_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiTrendingMetricsViewResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.TrendingMetric metrics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiTrendingMetricsViewResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiTrendingMetricsViewResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.TrendingMetric metrics = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metrics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_metrics(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiTrendingMetricsViewResponse)
  return target;
}

size_t MultiTrendingMetricsViewResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiTrendingMetricsViewResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.TrendingMetric metrics = 2;
  total_size += 1UL * this->_internal_metrics_size();
  for (const auto& msg : this->metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiTrendingMetricsViewResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiTrendingMetricsViewResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiTrendingMetricsViewResponse::GetClassData() const { return &_class_data_; }

void MultiTrendingMetricsViewResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiTrendingMetricsViewResponse *>(to)->MergeFrom(
      static_cast<const MultiTrendingMetricsViewResponse &>(from));
}


void MultiTrendingMetricsViewResponse::MergeFrom(const MultiTrendingMetricsViewResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiTrendingMetricsViewResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  metrics_.MergeFrom(from.metrics_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiTrendingMetricsViewResponse::CopyFrom(const MultiTrendingMetricsViewResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiTrendingMetricsViewResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiTrendingMetricsViewResponse::IsInitialized() const {
  return true;
}

void MultiTrendingMetricsViewResponse::InternalSwap(MultiTrendingMetricsViewResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  metrics_.InternalSwap(&other->metrics_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiTrendingMetricsViewResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[236]);
}

// ===================================================================

class PostBulkOperationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const PostBulkOperationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
PostBulkOperationsRequest::_Internal::user_app_id(const PostBulkOperationsRequest* msg) {
  return *msg->user_app_id_;
}
void PostBulkOperationsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
void PostBulkOperationsRequest::clear_bulk_operations() {
  bulk_operations_.Clear();
}
PostBulkOperationsRequest::PostBulkOperationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bulk_operations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.PostBulkOperationsRequest)
}
PostBulkOperationsRequest::PostBulkOperationsRequest(const PostBulkOperationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bulk_operations_(from.bulk_operations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.PostBulkOperationsRequest)
}

inline void PostBulkOperationsRequest::SharedCtor() {
user_app_id_ = nullptr;
}

PostBulkOperationsRequest::~PostBulkOperationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.PostBulkOperationsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PostBulkOperationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void PostBulkOperationsRequest::ArenaDtor(void* object) {
  PostBulkOperationsRequest* _this = reinterpret_cast< PostBulkOperationsRequest* >(object);
  (void)_this;
}
void PostBulkOperationsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostBulkOperationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostBulkOperationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.PostBulkOperationsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bulk_operations_.Clear();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostBulkOperationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.BulkOperation bulk_operations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bulk_operations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostBulkOperationsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.PostBulkOperationsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated .clarifai.api.BulkOperation bulk_operations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bulk_operations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_bulk_operations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.PostBulkOperationsRequest)
  return target;
}

size_t PostBulkOperationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.PostBulkOperationsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.BulkOperation bulk_operations = 2;
  total_size += 1UL * this->_internal_bulk_operations_size();
  for (const auto& msg : this->bulk_operations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostBulkOperationsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PostBulkOperationsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostBulkOperationsRequest::GetClassData() const { return &_class_data_; }

void PostBulkOperationsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PostBulkOperationsRequest *>(to)->MergeFrom(
      static_cast<const PostBulkOperationsRequest &>(from));
}


void PostBulkOperationsRequest::MergeFrom(const PostBulkOperationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.PostBulkOperationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  bulk_operations_.MergeFrom(from.bulk_operations_);
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostBulkOperationsRequest::CopyFrom(const PostBulkOperationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.PostBulkOperationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostBulkOperationsRequest::IsInitialized() const {
  return true;
}

void PostBulkOperationsRequest::InternalSwap(PostBulkOperationsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  bulk_operations_.InternalSwap(&other->bulk_operations_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostBulkOperationsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[237]);
}

// ===================================================================

class ListBulkOperationsRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const ListBulkOperationsRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
ListBulkOperationsRequest::_Internal::user_app_id(const ListBulkOperationsRequest* msg) {
  return *msg->user_app_id_;
}
void ListBulkOperationsRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
ListBulkOperationsRequest::ListBulkOperationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.ListBulkOperationsRequest)
}
ListBulkOperationsRequest::ListBulkOperationsRequest(const ListBulkOperationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:clarifai.api.ListBulkOperationsRequest)
}

inline void ListBulkOperationsRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&user_app_id_)) + sizeof(per_page_));
}

ListBulkOperationsRequest::~ListBulkOperationsRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.ListBulkOperationsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListBulkOperationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void ListBulkOperationsRequest::ArenaDtor(void* object) {
  ListBulkOperationsRequest* _this = reinterpret_cast< ListBulkOperationsRequest* >(object);
  (void)_this;
}
void ListBulkOperationsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListBulkOperationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListBulkOperationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.ListBulkOperationsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListBulkOperationsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 per_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListBulkOperationsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.ListBulkOperationsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.ListBulkOperationsRequest)
  return target;
}

size_t ListBulkOperationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.ListBulkOperationsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  // uint32 page = 2;
  if (this->_internal_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
  }

  // uint32 per_page = 3;
  if (this->_internal_per_page() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_per_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListBulkOperationsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListBulkOperationsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListBulkOperationsRequest::GetClassData() const { return &_class_data_; }

void ListBulkOperationsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListBulkOperationsRequest *>(to)->MergeFrom(
      static_cast<const ListBulkOperationsRequest &>(from));
}


void ListBulkOperationsRequest::MergeFrom(const ListBulkOperationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.ListBulkOperationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListBulkOperationsRequest::CopyFrom(const ListBulkOperationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.ListBulkOperationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListBulkOperationsRequest::IsInitialized() const {
  return true;
}

void ListBulkOperationsRequest::InternalSwap(ListBulkOperationsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListBulkOperationsRequest, per_page_)
      + sizeof(ListBulkOperationsRequest::per_page_)
      - PROTOBUF_FIELD_OFFSET(ListBulkOperationsRequest, user_app_id_)>(
          reinterpret_cast<char*>(&user_app_id_),
          reinterpret_cast<char*>(&other->user_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListBulkOperationsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[238]);
}

// ===================================================================

class GetBulkOperationRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const GetBulkOperationRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
GetBulkOperationRequest::_Internal::user_app_id(const GetBulkOperationRequest* msg) {
  return *msg->user_app_id_;
}
void GetBulkOperationRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
GetBulkOperationRequest::GetBulkOperationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.GetBulkOperationRequest)
}
GetBulkOperationRequest::GetBulkOperationRequest(const GetBulkOperationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.GetBulkOperationRequest)
}

inline void GetBulkOperationRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_app_id_ = nullptr;
}

GetBulkOperationRequest::~GetBulkOperationRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.GetBulkOperationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetBulkOperationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_app_id_;
}

void GetBulkOperationRequest::ArenaDtor(void* object) {
  GetBulkOperationRequest* _this = reinterpret_cast< GetBulkOperationRequest* >(object);
  (void)_this;
}
void GetBulkOperationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBulkOperationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBulkOperationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.GetBulkOperationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBulkOperationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.GetBulkOperationRequest.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBulkOperationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.GetBulkOperationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.GetBulkOperationRequest.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.GetBulkOperationRequest)
  return target;
}

size_t GetBulkOperationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.GetBulkOperationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBulkOperationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetBulkOperationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBulkOperationRequest::GetClassData() const { return &_class_data_; }

void GetBulkOperationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetBulkOperationRequest *>(to)->MergeFrom(
      static_cast<const GetBulkOperationRequest &>(from));
}


void GetBulkOperationRequest::MergeFrom(const GetBulkOperationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.GetBulkOperationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBulkOperationRequest::CopyFrom(const GetBulkOperationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.GetBulkOperationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBulkOperationRequest::IsInitialized() const {
  return true;
}

void GetBulkOperationRequest::InternalSwap(GetBulkOperationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBulkOperationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[239]);
}

// ===================================================================

class CancelBulkOperationRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const CancelBulkOperationRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
CancelBulkOperationRequest::_Internal::user_app_id(const CancelBulkOperationRequest* msg) {
  return *msg->user_app_id_;
}
void CancelBulkOperationRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
CancelBulkOperationRequest::CancelBulkOperationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.CancelBulkOperationRequest)
}
CancelBulkOperationRequest::CancelBulkOperationRequest(const CancelBulkOperationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.CancelBulkOperationRequest)
}

inline void CancelBulkOperationRequest::SharedCtor() {
user_app_id_ = nullptr;
}

CancelBulkOperationRequest::~CancelBulkOperationRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.CancelBulkOperationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CancelBulkOperationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void CancelBulkOperationRequest::ArenaDtor(void* object) {
  CancelBulkOperationRequest* _this = reinterpret_cast< CancelBulkOperationRequest* >(object);
  (void)_this;
}
void CancelBulkOperationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CancelBulkOperationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CancelBulkOperationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.CancelBulkOperationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelBulkOperationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.CancelBulkOperationRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CancelBulkOperationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.CancelBulkOperationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.CancelBulkOperationRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.CancelBulkOperationRequest)
  return target;
}

size_t CancelBulkOperationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.CancelBulkOperationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CancelBulkOperationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CancelBulkOperationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CancelBulkOperationRequest::GetClassData() const { return &_class_data_; }

void CancelBulkOperationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CancelBulkOperationRequest *>(to)->MergeFrom(
      static_cast<const CancelBulkOperationRequest &>(from));
}


void CancelBulkOperationRequest::MergeFrom(const CancelBulkOperationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.CancelBulkOperationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CancelBulkOperationRequest::CopyFrom(const CancelBulkOperationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.CancelBulkOperationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelBulkOperationRequest::IsInitialized() const {
  return true;
}

void CancelBulkOperationRequest::InternalSwap(CancelBulkOperationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelBulkOperationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[240]);
}

// ===================================================================

class DeleteBulkOperationRequest::_Internal {
 public:
  static const ::clarifai::api::UserAppIDSet& user_app_id(const DeleteBulkOperationRequest* msg);
};

const ::clarifai::api::UserAppIDSet&
DeleteBulkOperationRequest::_Internal::user_app_id(const DeleteBulkOperationRequest* msg) {
  return *msg->user_app_id_;
}
void DeleteBulkOperationRequest::clear_user_app_id() {
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
}
DeleteBulkOperationRequest::DeleteBulkOperationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.DeleteBulkOperationRequest)
}
DeleteBulkOperationRequest::DeleteBulkOperationRequest(const DeleteBulkOperationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_app_id()) {
    user_app_id_ = new ::clarifai::api::UserAppIDSet(*from.user_app_id_);
  } else {
    user_app_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.DeleteBulkOperationRequest)
}

inline void DeleteBulkOperationRequest::SharedCtor() {
user_app_id_ = nullptr;
}

DeleteBulkOperationRequest::~DeleteBulkOperationRequest() {
  // @@protoc_insertion_point(destructor:clarifai.api.DeleteBulkOperationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteBulkOperationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_app_id_;
}

void DeleteBulkOperationRequest::ArenaDtor(void* object) {
  DeleteBulkOperationRequest* _this = reinterpret_cast< DeleteBulkOperationRequest* >(object);
  (void)_this;
}
void DeleteBulkOperationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteBulkOperationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteBulkOperationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.DeleteBulkOperationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  if (GetArenaForAllocation() == nullptr && user_app_id_ != nullptr) {
    delete user_app_id_;
  }
  user_app_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteBulkOperationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.UserAppIDSet user_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_app_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clarifai.api.DeleteBulkOperationRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteBulkOperationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.DeleteBulkOperationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_app_id(this), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clarifai.api.DeleteBulkOperationRequest.ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.DeleteBulkOperationRequest)
  return target;
}

size_t DeleteBulkOperationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.DeleteBulkOperationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // .clarifai.api.UserAppIDSet user_app_id = 1;
  if (this->_internal_has_user_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_app_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteBulkOperationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteBulkOperationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteBulkOperationRequest::GetClassData() const { return &_class_data_; }

void DeleteBulkOperationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteBulkOperationRequest *>(to)->MergeFrom(
      static_cast<const DeleteBulkOperationRequest &>(from));
}


void DeleteBulkOperationRequest::MergeFrom(const DeleteBulkOperationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.DeleteBulkOperationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from._internal_has_user_app_id()) {
    _internal_mutable_user_app_id()->::clarifai::api::UserAppIDSet::MergeFrom(from._internal_user_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteBulkOperationRequest::CopyFrom(const DeleteBulkOperationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.DeleteBulkOperationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteBulkOperationRequest::IsInitialized() const {
  return true;
}

void DeleteBulkOperationRequest::InternalSwap(DeleteBulkOperationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  swap(user_app_id_, other->user_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteBulkOperationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[241]);
}

// ===================================================================

class SingleBulkOperationsResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const SingleBulkOperationsResponse* msg);
  static const ::clarifai::api::BulkOperation& bulk_operation(const SingleBulkOperationsResponse* msg);
};

const ::clarifai::api::status::Status&
SingleBulkOperationsResponse::_Internal::status(const SingleBulkOperationsResponse* msg) {
  return *msg->status_;
}
const ::clarifai::api::BulkOperation&
SingleBulkOperationsResponse::_Internal::bulk_operation(const SingleBulkOperationsResponse* msg) {
  return *msg->bulk_operation_;
}
void SingleBulkOperationsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void SingleBulkOperationsResponse::clear_bulk_operation() {
  if (GetArenaForAllocation() == nullptr && bulk_operation_ != nullptr) {
    delete bulk_operation_;
  }
  bulk_operation_ = nullptr;
}
SingleBulkOperationsResponse::SingleBulkOperationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.SingleBulkOperationsResponse)
}
SingleBulkOperationsResponse::SingleBulkOperationsResponse(const SingleBulkOperationsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_bulk_operation()) {
    bulk_operation_ = new ::clarifai::api::BulkOperation(*from.bulk_operation_);
  } else {
    bulk_operation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.SingleBulkOperationsResponse)
}

inline void SingleBulkOperationsResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bulk_operation_) -
    reinterpret_cast<char*>(&status_)) + sizeof(bulk_operation_));
}

SingleBulkOperationsResponse::~SingleBulkOperationsResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.SingleBulkOperationsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SingleBulkOperationsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete bulk_operation_;
}

void SingleBulkOperationsResponse::ArenaDtor(void* object) {
  SingleBulkOperationsResponse* _this = reinterpret_cast< SingleBulkOperationsResponse* >(object);
  (void)_this;
}
void SingleBulkOperationsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleBulkOperationsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleBulkOperationsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.SingleBulkOperationsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && bulk_operation_ != nullptr) {
    delete bulk_operation_;
  }
  bulk_operation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleBulkOperationsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .clarifai.api.BulkOperation bulk_operation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bulk_operation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SingleBulkOperationsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.SingleBulkOperationsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .clarifai.api.BulkOperation bulk_operation = 2;
  if (this->_internal_has_bulk_operation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bulk_operation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.SingleBulkOperationsResponse)
  return target;
}

size_t SingleBulkOperationsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.SingleBulkOperationsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .clarifai.api.BulkOperation bulk_operation = 2;
  if (this->_internal_has_bulk_operation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bulk_operation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleBulkOperationsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SingleBulkOperationsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleBulkOperationsResponse::GetClassData() const { return &_class_data_; }

void SingleBulkOperationsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SingleBulkOperationsResponse *>(to)->MergeFrom(
      static_cast<const SingleBulkOperationsResponse &>(from));
}


void SingleBulkOperationsResponse::MergeFrom(const SingleBulkOperationsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.SingleBulkOperationsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_bulk_operation()) {
    _internal_mutable_bulk_operation()->::clarifai::api::BulkOperation::MergeFrom(from._internal_bulk_operation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleBulkOperationsResponse::CopyFrom(const SingleBulkOperationsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.SingleBulkOperationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleBulkOperationsResponse::IsInitialized() const {
  return true;
}

void SingleBulkOperationsResponse::InternalSwap(SingleBulkOperationsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleBulkOperationsResponse, bulk_operation_)
      + sizeof(SingleBulkOperationsResponse::bulk_operation_)
      - PROTOBUF_FIELD_OFFSET(SingleBulkOperationsResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleBulkOperationsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[242]);
}

// ===================================================================

class MultiBulkOperationsResponse::_Internal {
 public:
  static const ::clarifai::api::status::Status& status(const MultiBulkOperationsResponse* msg);
};

const ::clarifai::api::status::Status&
MultiBulkOperationsResponse::_Internal::status(const MultiBulkOperationsResponse* msg) {
  return *msg->status_;
}
void MultiBulkOperationsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiBulkOperationsResponse::clear_bulk_operation() {
  bulk_operation_.Clear();
}
MultiBulkOperationsResponse::MultiBulkOperationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bulk_operation_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:clarifai.api.MultiBulkOperationsResponse)
}
MultiBulkOperationsResponse::MultiBulkOperationsResponse(const MultiBulkOperationsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bulk_operation_(from.bulk_operation_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::clarifai::api::status::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clarifai.api.MultiBulkOperationsResponse)
}

inline void MultiBulkOperationsResponse::SharedCtor() {
status_ = nullptr;
}

MultiBulkOperationsResponse::~MultiBulkOperationsResponse() {
  // @@protoc_insertion_point(destructor:clarifai.api.MultiBulkOperationsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiBulkOperationsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void MultiBulkOperationsResponse::ArenaDtor(void* object) {
  MultiBulkOperationsResponse* _this = reinterpret_cast< MultiBulkOperationsResponse* >(object);
  (void)_this;
}
void MultiBulkOperationsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiBulkOperationsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiBulkOperationsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clarifai.api.MultiBulkOperationsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bulk_operation_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiBulkOperationsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .clarifai.api.status.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .clarifai.api.BulkOperation bulk_operation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bulk_operation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiBulkOperationsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clarifai.api.MultiBulkOperationsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .clarifai.api.BulkOperation bulk_operation = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bulk_operation_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_bulk_operation(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clarifai.api.MultiBulkOperationsResponse)
  return target;
}

size_t MultiBulkOperationsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clarifai.api.MultiBulkOperationsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clarifai.api.BulkOperation bulk_operation = 2;
  total_size += 1UL * this->_internal_bulk_operation_size();
  for (const auto& msg : this->bulk_operation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .clarifai.api.status.Status status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiBulkOperationsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiBulkOperationsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiBulkOperationsResponse::GetClassData() const { return &_class_data_; }

void MultiBulkOperationsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MultiBulkOperationsResponse *>(to)->MergeFrom(
      static_cast<const MultiBulkOperationsResponse &>(from));
}


void MultiBulkOperationsResponse::MergeFrom(const MultiBulkOperationsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clarifai.api.MultiBulkOperationsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  bulk_operation_.MergeFrom(from.bulk_operation_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::clarifai::api::status::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiBulkOperationsResponse::CopyFrom(const MultiBulkOperationsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clarifai.api.MultiBulkOperationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiBulkOperationsResponse::IsInitialized() const {
  return true;
}

void MultiBulkOperationsResponse::InternalSwap(MultiBulkOperationsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  bulk_operation_.InternalSwap(&other->bulk_operation_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiBulkOperationsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_getter, &descriptor_table_proto_2fclarifai_2fapi_2fservice_2eproto_once,
      file_level_metadata_proto_2fclarifai_2fapi_2fservice_2eproto[243]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace clarifai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::clarifai::api::Pagination* Arena::CreateMaybeMessage< ::clarifai::api::Pagination >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::Pagination >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetAnnotationRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetAnnotationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetAnnotationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListAnnotationsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListAnnotationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListAnnotationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostAnnotationsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostAnnotationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostAnnotationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchAnnotationsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchAnnotationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchAnnotationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchAnnotationsStatusRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchAnnotationsStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchAnnotationsStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchAnnotationsStatusResponse* Arena::CreateMaybeMessage< ::clarifai::api::PatchAnnotationsStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchAnnotationsStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteAnnotationRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteAnnotationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteAnnotationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteAnnotationsRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteAnnotationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteAnnotationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleAnnotationResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleAnnotationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleAnnotationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiAnnotationResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiAnnotationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiAnnotationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetAppRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetAppRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetAppRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListAppsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListAppsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListAppsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostAppsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostAppsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostAppsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteAppRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteAppRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteAppRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchAppsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchAppsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchAppsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchAppRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchAppRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchAppRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchAppsIdsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchAppsIdsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchAppsIdsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostAppsSearchesRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostAppsSearchesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostAppsSearchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleAppResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleAppResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleAppResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiAppResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiAppResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiAppResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListCollaboratorsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListCollaboratorsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListCollaboratorsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostCollaboratorsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostCollaboratorsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostCollaboratorsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchCollaboratorsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchCollaboratorsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchCollaboratorsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteCollaboratorsRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteCollaboratorsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteCollaboratorsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiCollaboratorsResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiCollaboratorsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiCollaboratorsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListCollaborationsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListCollaborationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListCollaborationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiCollaborationsResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiCollaborationsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiCollaborationsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetStatusCodeRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetStatusCodeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetStatusCodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListStatusCodesRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListStatusCodesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListStatusCodesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleStatusCodeResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleStatusCodeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleStatusCodeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiStatusCodeResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiStatusCodeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiStatusCodeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetConceptRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetConceptRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetConceptRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListConceptsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListConceptsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListConceptsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostConceptsSearchesRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostConceptsSearchesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostConceptsSearchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostConceptsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostConceptsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostConceptsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchConceptsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchConceptsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchConceptsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetConceptCountsRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetConceptCountsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetConceptCountsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleConceptResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleConceptResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleConceptResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiConceptResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiConceptResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiConceptResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiConceptCountResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiConceptCountResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiConceptCountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListConceptRelationsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListConceptRelationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListConceptRelationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostConceptRelationsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostConceptRelationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostConceptRelationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteConceptRelationsRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteConceptRelationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteConceptRelationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListKnowledgeGraphsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListKnowledgeGraphsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListKnowledgeGraphsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostKnowledgeGraphsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostKnowledgeGraphsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostKnowledgeGraphsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostConceptMappingJobsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostConceptMappingJobsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostConceptMappingJobsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiConceptRelationResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiConceptRelationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiConceptRelationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiKnowledgeGraphResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiKnowledgeGraphResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiKnowledgeGraphResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiConceptMappingJobResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiConceptMappingJobResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiConceptMappingJobResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetConceptLanguageRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetConceptLanguageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetConceptLanguageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListConceptLanguagesRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListConceptLanguagesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListConceptLanguagesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchConceptLanguagesRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchConceptLanguagesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchConceptLanguagesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostConceptLanguagesRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostConceptLanguagesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostConceptLanguagesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleConceptLanguageResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleConceptLanguageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleConceptLanguageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiConceptLanguageResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiConceptLanguageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiConceptLanguageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetInputRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetInputRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetInputRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetInputSamplesRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetInputSamplesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetInputSamplesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListInputsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListInputsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListInputsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::StreamInputsRequest* Arena::CreateMaybeMessage< ::clarifai::api::StreamInputsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::StreamInputsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostInputsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostInputsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostInputsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchInputsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchInputsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchInputsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteInputRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteInputRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteInputRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteInputsRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteInputsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteInputsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleInputResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleInputResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleInputResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiInputResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiInputResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiInputResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiInputAnnotationResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiInputAnnotationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiInputAnnotationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleInputCountResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleInputCountResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleInputCountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetInputCountRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetInputCountRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetInputCountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListDatasetsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListDatasetsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListDatasetsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetDatasetRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetDatasetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetDatasetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostDatasetsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostDatasetsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostDatasetsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchDatasetsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchDatasetsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchDatasetsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteDatasetsRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteDatasetsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteDatasetsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiDatasetResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiDatasetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiDatasetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleDatasetResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleDatasetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleDatasetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListDatasetInputsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListDatasetInputsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListDatasetInputsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetDatasetInputRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetDatasetInputRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetDatasetInputRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostDatasetInputsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostDatasetInputsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostDatasetInputsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteDatasetInputsRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteDatasetInputsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteDatasetInputsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiDatasetInputResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiDatasetInputResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiDatasetInputResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleDatasetInputResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleDatasetInputResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleDatasetInputResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListDatasetVersionsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListDatasetVersionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListDatasetVersionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetDatasetVersionRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetDatasetVersionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetDatasetVersionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListDatasetVersionMetricsGroupsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListDatasetVersionMetricsGroupsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListDatasetVersionMetricsGroupsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostDatasetVersionsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostDatasetVersionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostDatasetVersionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchDatasetVersionsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchDatasetVersionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchDatasetVersionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteDatasetVersionsRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteDatasetVersionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteDatasetVersionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiDatasetVersionResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiDatasetVersionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiDatasetVersionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiDatasetVersionMetricsGroupResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiDatasetVersionMetricsGroupResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiDatasetVersionMetricsGroupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleDatasetVersionResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleDatasetVersionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleDatasetVersionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetDatasetInputsSearchAddJobRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetDatasetInputsSearchAddJobRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetDatasetInputsSearchAddJobRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleDatasetInputsSearchAddJobResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleDatasetInputsSearchAddJobResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleDatasetInputsSearchAddJobResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostModelOutputsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostModelOutputsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostModelOutputsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListModelInputsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListModelInputsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListModelInputsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetKeyRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetKeyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListKeysRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListKeysRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListKeysRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListAppKeysRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListAppKeysRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListAppKeysRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostKeysRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostKeysRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostKeysRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteKeyRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteKeyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchKeysRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchKeysRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchKeysRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleKeyResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleKeyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleKeyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiKeyResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiKeyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiKeyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetModelRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetModelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetModelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListModelsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListModelsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListModelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchModelToolkitsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchModelToolkitsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchModelToolkitsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchModelUseCasesRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchModelUseCasesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchModelUseCasesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchModelLanguagesRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchModelLanguagesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchModelLanguagesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiModelToolkitResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiModelToolkitResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiModelToolkitResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiModelUseCaseResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiModelUseCaseResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiModelUseCaseResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiModelLanguageResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiModelLanguageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiModelLanguageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostModelsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostModelsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostModelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchModelsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchModelsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchModelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::IdUpdateSource* Arena::CreateMaybeMessage< ::clarifai::api::IdUpdateSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::IdUpdateSource >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchModelIdsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchModelIdsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchModelIdsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteModelRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteModelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteModelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteModelsRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteModelsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteModelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostModelsSearchesRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostModelsSearchesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostModelsSearchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleModelResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleModelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleModelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiModelResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiModelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiModelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchModelVersionsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchModelVersionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchModelVersionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetModelVersionRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetModelVersionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetModelVersionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListModelVersionsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListModelVersionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListModelVersionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteModelVersionRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteModelVersionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteModelVersionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleModelVersionResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleModelVersionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleModelVersionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiModelVersionResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiModelVersionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiModelVersionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostModelVersionsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostModelVersionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostModelVersionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostWorkflowVersionsUnPublishRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostWorkflowVersionsUnPublishRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostWorkflowVersionsUnPublishRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostWorkflowVersionsPublishRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostWorkflowVersionsPublishRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostWorkflowVersionsPublishRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::WorkflowVersionPublishRequest* Arena::CreateMaybeMessage< ::clarifai::api::WorkflowVersionPublishRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::WorkflowVersionPublishRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::WorkflowVersionUnPublishRequest* Arena::CreateMaybeMessage< ::clarifai::api::WorkflowVersionUnPublishRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::WorkflowVersionUnPublishRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ModelVersionPublishRequest* Arena::CreateMaybeMessage< ::clarifai::api::ModelVersionPublishRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ModelVersionPublishRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostModelVersionsPublishRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostModelVersionsPublishRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostModelVersionsPublishRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ModelVersionUnpublishRequest* Arena::CreateMaybeMessage< ::clarifai::api::ModelVersionUnpublishRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ModelVersionUnpublishRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostModelVersionsUnPublishRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostModelVersionsUnPublishRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostModelVersionsUnPublishRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostModelVersionMetricsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostModelVersionMetricsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostModelVersionMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetModelVersionMetricsRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetModelVersionMetricsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetModelVersionMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetModelTypeRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetModelTypeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetModelTypeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListModelTypesRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListModelTypesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListModelTypesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListOpenSourceLicensesRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListOpenSourceLicensesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListOpenSourceLicensesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListOpenSourceLicensesResponse* Arena::CreateMaybeMessage< ::clarifai::api::ListOpenSourceLicensesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListOpenSourceLicensesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleModelTypeResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleModelTypeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleModelTypeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiModelTypeResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiModelTypeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiModelTypeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetModelVersionInputExampleRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetModelVersionInputExampleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetModelVersionInputExampleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListModelVersionInputExamplesRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListModelVersionInputExamplesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListModelVersionInputExamplesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleModelVersionInputExampleResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleModelVersionInputExampleResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleModelVersionInputExampleResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiModelVersionInputExampleResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiModelVersionInputExampleResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiModelVersionInputExampleResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListModelReferencesRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListModelReferencesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListModelReferencesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiModelReferenceResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiModelReferenceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiModelReferenceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiOutputResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiOutputResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiOutputResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListScopesRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListScopesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListScopesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MyScopesRequest* Arena::CreateMaybeMessage< ::clarifai::api::MyScopesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MyScopesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MyScopesUserRequest* Arena::CreateMaybeMessage< ::clarifai::api::MyScopesUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MyScopesUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MyScopesRootRequest* Arena::CreateMaybeMessage< ::clarifai::api::MyScopesRootRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MyScopesRootRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiScopeDepsResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiScopeDepsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiScopeDepsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiScopeResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiScopeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiScopeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiScopeUserResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiScopeUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiScopeUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiScopeRootResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiScopeRootResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiScopeRootResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetSearchRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetSearchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetSearchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListSearchesRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListSearchesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListSearchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostSearchesRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostSearchesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostSearchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchInputsSearchesRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchInputsSearchesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchInputsSearchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchAnnotationsSearchesRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchAnnotationsSearchesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchAnnotationsSearchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchSearchesRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchSearchesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchSearchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostSearchesByIDRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostSearchesByIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostSearchesByIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteSearchRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteSearchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteSearchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostAnnotationsSearchesRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostAnnotationsSearchesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostAnnotationsSearchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteAnnotationSearchMetricsRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteAnnotationSearchMetricsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteAnnotationSearchMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostInputsSearchesRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostInputsSearchesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostInputsSearchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleSearchResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleSearchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleSearchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiSearchResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiSearchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiSearchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostAnnotationSearchMetricsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostAnnotationSearchMetricsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostAnnotationSearchMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetAnnotationSearchMetricsRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetAnnotationSearchMetricsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetAnnotationSearchMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListAnnotationSearchMetricsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListAnnotationSearchMetricsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListAnnotationSearchMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiAnnotationSearchMetricsResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiAnnotationSearchMetricsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiAnnotationSearchMetricsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListAnnotationFiltersRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListAnnotationFiltersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListAnnotationFiltersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetAnnotationFilterRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetAnnotationFilterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetAnnotationFilterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostAnnotationFiltersRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostAnnotationFiltersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostAnnotationFiltersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchAnnotationFiltersRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchAnnotationFiltersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchAnnotationFiltersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteAnnotationFiltersRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteAnnotationFiltersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteAnnotationFiltersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiAnnotationFilterResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiAnnotationFilterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiAnnotationFilterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleAnnotationFilterResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleAnnotationFilterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleAnnotationFilterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostValidatePasswordRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostValidatePasswordRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostValidatePasswordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SinglePasswordValidationResponse* Arena::CreateMaybeMessage< ::clarifai::api::SinglePasswordValidationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SinglePasswordValidationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetWorkflowRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetWorkflowRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetWorkflowRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListWorkflowsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListWorkflowsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListWorkflowsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostWorkflowsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostWorkflowsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostWorkflowsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchWorkflowsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchWorkflowsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchWorkflowsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteWorkflowRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteWorkflowRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteWorkflowRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteWorkflowsRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteWorkflowsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteWorkflowsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleWorkflowResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleWorkflowResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleWorkflowResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiWorkflowResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiWorkflowResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiWorkflowResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostWorkflowResultsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostWorkflowResultsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostWorkflowResultsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostWorkflowResultsResponse* Arena::CreateMaybeMessage< ::clarifai::api::PostWorkflowResultsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostWorkflowResultsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostWorkflowResultsSimilarityRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostWorkflowResultsSimilarityRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostWorkflowResultsSimilarityRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostWorkflowResultsSimilarityResponse* Arena::CreateMaybeMessage< ::clarifai::api::PostWorkflowResultsSimilarityResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostWorkflowResultsSimilarityResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListWorkflowVersionsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListWorkflowVersionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListWorkflowVersionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetWorkflowVersionRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetWorkflowVersionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetWorkflowVersionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteWorkflowVersionsRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteWorkflowVersionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteWorkflowVersionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchWorkflowVersionsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchWorkflowVersionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchWorkflowVersionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiWorkflowVersionResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiWorkflowVersionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiWorkflowVersionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleWorkflowVersionResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleWorkflowVersionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleWorkflowVersionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostAppDuplicationsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostAppDuplicationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostAppDuplicationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetAppDuplicationRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetAppDuplicationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetAppDuplicationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListAppDuplicationsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListAppDuplicationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListAppDuplicationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiAppDuplicationsResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiAppDuplicationsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiAppDuplicationsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleAppDuplicationResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleAppDuplicationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleAppDuplicationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostTasksRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostTasksRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostTasksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetTaskRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetTaskRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetTaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListTasksRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListTasksRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListTasksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchTasksRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchTasksRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchTasksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteTasksRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteTasksRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteTasksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiTaskResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiTaskResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiTaskResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleTaskResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleTaskResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleTaskResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetTaskCountRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetTaskCountRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetTaskCountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleTaskCountResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleTaskCountResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleTaskCountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostLabelOrdersRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostLabelOrdersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostLabelOrdersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetLabelOrderRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetLabelOrderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetLabelOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListLabelOrdersRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListLabelOrdersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListLabelOrdersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchLabelOrdersRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchLabelOrdersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchLabelOrdersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteLabelOrdersRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteLabelOrdersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteLabelOrdersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiLabelOrderResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiLabelOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiLabelOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleLabelOrderResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleLabelOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleLabelOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostCollectorsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostCollectorsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostCollectorsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PatchCollectorsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PatchCollectorsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PatchCollectorsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteCollectorsRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteCollectorsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteCollectorsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetCollectorRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetCollectorRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetCollectorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListCollectorsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListCollectorsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListCollectorsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiCollectorResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiCollectorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiCollectorResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleCollectorResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleCollectorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleCollectorResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostStatValuesRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostStatValuesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostStatValuesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiStatValueResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiStatValueResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiStatValueResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostStatValuesAggregateRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostStatValuesAggregateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostStatValuesAggregateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiStatValueAggregateResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiStatValueAggregateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiStatValueAggregateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostTrendingMetricsViewRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostTrendingMetricsViewRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostTrendingMetricsViewRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListTrendingMetricsViewsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListTrendingMetricsViewsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListTrendingMetricsViewsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiTrendingMetricsViewResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiTrendingMetricsViewResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiTrendingMetricsViewResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::PostBulkOperationsRequest* Arena::CreateMaybeMessage< ::clarifai::api::PostBulkOperationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::PostBulkOperationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::ListBulkOperationsRequest* Arena::CreateMaybeMessage< ::clarifai::api::ListBulkOperationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::ListBulkOperationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::GetBulkOperationRequest* Arena::CreateMaybeMessage< ::clarifai::api::GetBulkOperationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::GetBulkOperationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::CancelBulkOperationRequest* Arena::CreateMaybeMessage< ::clarifai::api::CancelBulkOperationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::CancelBulkOperationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::DeleteBulkOperationRequest* Arena::CreateMaybeMessage< ::clarifai::api::DeleteBulkOperationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::DeleteBulkOperationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::SingleBulkOperationsResponse* Arena::CreateMaybeMessage< ::clarifai::api::SingleBulkOperationsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::SingleBulkOperationsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::clarifai::api::MultiBulkOperationsResponse* Arena::CreateMaybeMessage< ::clarifai::api::MultiBulkOperationsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clarifai::api::MultiBulkOperationsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
